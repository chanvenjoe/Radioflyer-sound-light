            ;=========================Include <OPTION.INC> Start=========================
            //--------------------------------------------------------------------------------------------------
            // TRITAN FDSP-IDE Option define file.
            // WARNING! All changes made in this file will be lost when recompiling.
            //--------------------------------------------------------------------------------------------------
            // Part number    : TRSF16127A
            // Option version : 2.2
            // Base Information--------------------------------------------------------------------------------
            #define       _OPT_TRSF16127A_                
            #define       _OPT_PROMSize_                0x20000   //PROM Size
            #define       _OPT_SRAMSize_                3072      //SRAM Size
            // I/O Configuration--------------------------------------------------------------------------------
            #define       _OPT_EXTReset_EN_             0         //EXT Reset Enable,0:Disable,1:Enable
            #define       _OPT_EXTINT1_EN_              0         //EXTINT1_EN,0:Disable,1:Enable
            #define       _OPT_EXTINT0_EN_              0         //EXTINT0_EN,0:Disable,1:Enable
            #define       _OPT_SpreadSpectrum_          0         //Spread Spectrum Enable,0:Disable,1:Enable
            #define       _OPT_EXTResetPin_             0         //EXT Reset Pin Select,0:PB3,1:PC3
            #define       _OPT_EXTINT1_INV_             0         //EXTINT1_INV,0:Disable,1:Enable
            #define       _OPT_EXTINT0_INV_             0         //EXTINT0_INV,0:Disable,1:Enable
            // Memory Configuration-----------------------------------------------------------------------------
            #define       _OPT_PRAMBank_                0         //PRAM Bank
            #define       _OPT_PRAMSize_                0         //PRAM Size(Words)
            #define       _OPT_WriteSegmentProtection_  0x0FFFF   //Write Segment Protection(0000H~ )
            // System Control Setup-----------------------------------------------------------------------------
            #define       _OPT_Bank0Speed_              11        //Bank0 Speed(MHz)
            #define       _OPT_RTCINT_                  1         //RTC interrupt,0:Disable,1:Enable
            #define       _OPT_RTCinHalt_               0         //RTC LP32K in Halt Mode,0:Disable,1:Enable
            #define       _OPT_LVR_                     2200      //LVR(mv)
            #define       _OPT_WatchDog_                256       //Watch dog(ms)
            #define       _OPT_ICEEnable_               1         //ICE Disable/Enable,0:Disable,1:Enable
            // Audio Configuration------------------------------------------------------------------------------
            #define       _OPT_AudioSamplingRate_       32        //Audio Sampling Rate(KHz)
            #define       _OPT_PWMBit_                  16        //PWM Bit
            #define       _OPT_DACFIFO_                 1         //DAC FIFO,0:Disable,1:Enable
            //--------------------------------------------------------------------------------------------------
            ;=========================Include <OPTION.INC> End=========================
            
            #define DSP_SRAM_SIZE		3072
            #define DSP_VECT_SUPPORT		6
            #define _PROJECT_CONFIG_FILE_		
            #define _PWM_32K_		
            #define MD2_USE_PROM		
            #define MD2_WORD_ADR		
            #define RAMBANK 		 15
            #define MD2_PRAM_START_BASE 		 0x0000
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> Start=========================
            
            ; =====================
            ;      COMMON I/O
            ; =====================
            
            #ifdef _MFDSP_
            
            ; {
            	STATUS          EQU             00H             ;R/W, BIT0: Zero.
            							;R/W, BIT1: Carry.
            							;R/W, BIT2: Overflow.
            							;R/W, BIT3: Negative.
            							;R/W, BIT7: Global Interrupt Enable.
            							;R/W, BIT[12:8]: SD_EN, TRA_EN, ADH_EN, SPIS_EN, SPIM_EN.
            							;R/W, BIT13: Interrupt Vector Table Access Enable.
            							;R/W, BIT14: Filter Buffer Available.
            							;R/W, BIT15: Parser Buffer Available.
            
            	INTENA          EQU             01H             ;R/W, Int Enable.
            	INTREQ          EQU             02H             ;R/W, Int Request.
            	IntVect         EQU             03H             ;R/W, Interrupt Table
            	IOC_PA          EQU             04H             ;R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB          EQU             05H             ;R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PCI         EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PC          EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA           EQU             07H             ;R/W, General input/output port.
            	PortB           EQU             08H             ;R/W, General input/output port.
            	PortCI          EQU             09H             ;R/W, General input/output port.
            	PortC           EQU             09H             ;R/W, General input/output port.
            	INTMASK         EQU             0AH             ;R/W, Int Mask.
            	SPIS_CTL        EQU             0BH             ;R/W, SPI slaver control register.
            	SPIS_DAT        EQU             0CH             ;R/W, SPI slaver data    register.
            	SPI_CTL         EQU             0DH             ;R/W, SPI master control register.
            	SPI_DAT         EQU             0EH             ;R/W, SPI master data    register.
            	SD_CTL          EQU             0FH             ;R/W, SD card interface control register.
            	SD_DAT          EQU             10H             ;R/W, SD card interface data.
            	SD_RSP          EQU             11H             ;R/W, SD card interface response register.
            	UART_CTL        EQU             12H
            	UART_DAT        EQU             13H
            	DPPWM           EQU             14H
            	//------------------------------------
            	PUPD_PA         EQU             15H             ;R/W, PortA  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	DACL            EQU             16H
            	DACR            EQU             17H
            	USB_CTL         EQU             18H
            	USB_DAT         EQU             19H
            	PUPD_PB         EQU             1AH             ;R/W, PortB  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	PUPD_PC         EQU             1BH             ;R/W, PortC  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	MISC            EQU             1CH
            	ClrWDT          EQU             1DH             ;W, Clear Watch-dog reset.
            	Real_T          EQU             1DH             ;R, System Real-Time Counter, base on 31.25us
            	IOP_IX          EQU             1EH             ;W, Programming IO Port index .
            	IOP_DAT         EQU             1FH             ;W, Programming IO Port Data .
            
            	//------------------------------------
            	// Virtual         Program IO Port
            	IOP_Timer1      EQU             00H
            	IOP_Timer2      EQU             01H
            	IOP_RTC32K      EQU             02H
            	IOP_PreScale    EQU             03H
            	IOP_FGREEN32K   EQU             04H
            	IOP_ODEN_PA     EQU             05H
            	IOP_ODEN_PB     EQU             06H
            	IOP_ODEN_PC     EQU             07H
            
            	IOP_TOUCH_CFG   EQU             08H
            	IOP_TOUCH_DAT   EQU             09H
            
            	IOP_CLK_CFG     EQU             0AH
            	IOP_CLK_DAT1    EQU             0BH
            	IOP_CLK_DAT2    EQU             0CH
            	IOP_CUR_PA      EQU             0DH
            	IOP_CUR_PB      EQU             0EH
            	IOP_CUR_PC      EQU             0FH
            
            	//------------------------------------
            	// IO[0x40-0x7F]
            	ADH_CFG0        EQU             40H
            	ADH_CFG1        EQU             41H
            	ADH_CFG2        EQU             42H
            	ADH_CFG3        EQU             43H
            	ADH_DO          EQU             44H
            
            	ADL_CFG         EQU             45H
            
            	TRA_CFG         EQU             46H
            	TRA_DAT         EQU             47H
            
            	I2C_CTL         EQU             48H
            	I2C_DAT         EQU             49H
            	I2C_CMD         EQU             4AH
            	I2C_SR          EQU             4AH             ; same as I2C_CMD
            
            	I80_CTL         EQU             4BH
            	I80_INX         EQU             4CH
            	I80_DAT         EQU             4DH
            	I80_RADR        EQU             4EH
            	I80_DMANUM      EQU             4FH
            
            	SD_DMA_CTL      EQU             50H
            	SD_DMA_RADR     EQU             51H
            	SD_DMA_DMANUM   EQU             52H
            
            	SPI_DMA_CTL     EQU             53H
            	SPI_DMA_RADR    EQU             54H
            	SPI_DMA_DMANUM  EQU             55H
            
            	USB_DMA_CTL     EQU             56H
            	USB_DMA_RADR    EQU             57H
            	USB_DMA_DMANUM  EQU             58H
            
            	SSC             EQU             63H
            	MIC             EQU             64H
            	GREEN           EQU             65H
            	SLEEP           EQU             66H
            	SPEED           EQU             67H
            	PR              EQU             68H
            
            	//------------------------------------
            	IOP_WAKEN_PA    EQU             10H
            	IOP_WAKEN_PB    EQU             11H
            	IOP_WAKEN_PC    EQU             12H
            ; }
            
            #endif
            
            
            
            
            #ifdef _MSPEECHDSP_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            #ifdef _MSPEECHDSP2_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            
            ;-----------------------------------------------------------
            
            #ifdef NO_OPTIMAL_RM
            
            
            #else
            
            #define Optimal_RM	; Optimal RAM function Enable
            
            #endif
            
            
            VarRM[0:127] = {
            BP_SAVE,
            
            }
            
            VarRM[128:511] = {
            
            }
            
            VarRM[512:4095] = {
            
            }
            
            ShareVar = {
            
            }
            
            ;--------------------------------------------------------------------
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> Start=========================
            
            	org	0000h
            RSTB_ENTRY:
00000:      	PCH=		SYS_PROG_ENTRY
00001:      	ljmp		SYS_PROG_ENTRY
            
            
            	org	0004h
            WAKEUP_ENTRY:
00004:      	PCH=		WAKEUP_PROC
00005:      	ljmp		WAKEUP_PROC
            
            
            	org	0100h
            
            
            
            SYS_PROG_ENTRY:
            	; ~~ DSP initial
            
00100:      	dsi
00101:      	nop
00102:      	AR=		@STACKBOTTOM
00104:      	BP=		AR
00105:      	AR=		DSP_SRAM_SIZE
00107:      	AR--
00108:      	CX=		AR
00109:      	I1=		AR
0010A:      	AR=		0
            @clearram_loop_1705:
0010B:      	rm[I1--]=	AR
0010C:      	loop		@clearram_loop_1705
            
0010D:      	io[ClrWDT]=	AR
            
0010E:      	set		io[STATUS].b13
0010F:      	CX=		DSP_VECT_SUPPORT
00110:      	P1=		#IntVectTable
00113:      	jmp		@setintvect_label_1548
            @setintvect_loop_1548:
00114:      	AR=		pm[P1++]
00115:      	io[IntVect]=	AR
            @setintvect_label_1548:
00116:      	loop		@setintvect_loop_1548
            
00117:      	clr		io[STATUS].b13
            
            	; ~~ C code
            
            #ifdef PRAM_BANK
            	PCH=		sfx_DynFastCallInit
            	lcall		sfx_DynFastCallInit
            #endif
            
00118:      	PCH=		ginit_code
00119:      	lcall		ginit_code
            
0011A:      	PCH=		_main
0011B:      	lcall		_main
0011C:      	jmp		SYS_PROG_ENTRY
            
            
            /* ================================================================= */
            // ------------- Interrupt Service Routine--------------------------
            /* ================================================================= */
            
            EMPTY_INTENTRY:
0011D:      	reti
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> End=========================
            
            ;=========================Include <DEPS\SUNB3_593950F9.S.CODE.ASM> Start=========================
            ; SUNB3.C Code Start!!;
            VarRM[0:4095]={
             L2A70A9A2_2,L2A70A9A2_3,_flagD698DD9D,_Key_press_flag14FFF825,_Play_flag71A588D5 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //naked void MyData();
            ; //interrupt rjmp void _RTC24B6AA79();
            ; //rjmp void _main();
            ; //rjmp void _InitSound5CCD501D();
            ; //rjmp void _INITIAL0C18377D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //interrupt rjmp void _RTC24B6AA79()		
            _RTC24B6AA79:
            ; //{						
0011E:      	push ax
0011F:      	push bx
00120:      	push cx
00121:      	push dx
00122:      	push r0
00123:      	push r1
00124:      	push r2
00125:      	push r3
00126:      	push i1
00127:      	push p1
00128:      	push mx
00129:      	push mr0
0012A:      	push mr1
0012B:      	push mr2
0012C:      	ar = p1.hh
0012D:      	push ar
            ; //_A523506CC_0:;					
            _A523506CC_0:
            ; //_A523506CC_1:;					
            _A523506CC_1:
            ; //	asm	clr io[INTREQ].b3		
0012E:      	clr io[INTREQ].b3
            ; //	
            ; //_A523506CC_2:;					
            _A523506CC_2:
            ; //	sAX	= 0;				
0012F:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00130:      	test io[0x08].b2//
            ; //	if(__jz__) goto L2A70A9A2_7;		
00131:      	if ZR	jmp L2A70A9A2_7
            ; //	sAX	= 1;				
00132:      	AX	= 0x01
            ; //L2A70A9A2_7:;					
            L2A70A9A2_7:
            ; //	sCX	= 0x0000;			
00133:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00134:      	pch	= sfx_CMP_AX_CX_JE
00135:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_8;	
00136:      	if ZR	jmp L2A70A9A2_8
            ; //	goto	L2A70A9A2_5;			
00137:      	jmp	L2A70A9A2_5
            ; //L2A70A9A2_8:;					
            L2A70A9A2_8:
            ; //	sAX	= 0x0001;			
00138:      	AX	= 0x01
            ; //	goto L2A70A9A2_6;			
00139:      	jmp	L2A70A9A2_6
            ; //L2A70A9A2_5:;					
            L2A70A9A2_5:
            ; //	sAX	= 0x0000;			
0013A:      	AX	= 0x00
            ; //L2A70A9A2_6:;					
            L2A70A9A2_6:
            ; //	sSI	= (int)&L2A70A9A2_3;		
0013B:      	I1	= L2A70A9A2_3
            ; //	*(__int16*)sSI	= sAX			
0013C:      	rm[I1]	= AX
            ; //L2A70A9A2_4:;					
            L2A70A9A2_4:
            ; //_A523506CC_3:;					
            _A523506CC_3:
            ; //	return;					
0013D:      	pop ar
0013E:      	p1.hh = ar
0013F:      	pop mr2
00140:      	pop mr1
00141:      	pop mr0
00142:      	pop mx
00143:      	pop p1
00144:      	pop i1
00145:      	pop r3
00146:      	pop r2
00147:      	pop r1
00148:      	pop r0
00149:      	pop dx
0014A:      	pop cx
0014B:      	pop bx
0014C:      	pop ax
0014D:      	reti
            ; //_RTC24B6AA79_end:;				
            _RTC24B6AA79_end:
            ; //_A523506CC_4:;					
            _A523506CC_4:
            ; //}
            ; //
            ; //rjmp void _main()				
            _main:
            ; //{
            ; //_A523506CC_5:;					
            _A523506CC_5:
            ; //	
            ; //_A523506CC_6:;					
            _A523506CC_6:
            ; //_A523506CC_7:;					
            _A523506CC_7:
            ; //	F_ChangePWMVectTabletobank2();		
0014E:      	pch	= F_ChangePWMVectTabletobank2
0014F:      	lcall	F_ChangePWMVectTabletobank2
            ; //_A523506CC_8:;					
            _A523506CC_8:
            ; //	sAX	= 0x0000;			
00150:      	AX	= 0x00
            ; //	asm I1 = _sub_vol980B1B83+0;		
00151:      	I1 = _sub_vol980B1B83+0//
            ; //	*(__int16*)sSI	= sAX			
00152:      	rm[I1]	= AX
            ; //_A523506CC_9:;					
            _A523506CC_9:
            ; //_A523506CC_10:;					
            _A523506CC_10:
            ; //	_INITIAL0C18377D();			
00153:      	pch	= _INITIAL0C18377D
00154:      	lcall	_INITIAL0C18377D
            ; //_A523506CC_11:;					
            _A523506CC_11:
            ; //_A523506CC_12:;					
            _A523506CC_12:
            ; //	_InitialDA4A7CC4();			
00155:      	pch	= _InitialDA4A7CC4
00156:      	lcall	_InitialDA4A7CC4
            ; //_A523506CC_13:;					
            _A523506CC_13:
            ; //_A523506CC_14:;					
            _A523506CC_14:
            ; //	_ClearTickCount5DDE4003();		
00157:      	pch	= _ClearTickCount5DDE4003
00158:      	lcall	_ClearTickCount5DDE4003
            ; //_A523506CC_15:;					
            _A523506CC_15:
            ; //_A523506CC_16:;					
            _A523506CC_16:
            ; //	asm AX = #MyData+0;			
00159:      	AX = #MyData+0//
            ; //	asm DX = #MyData.n2			
0015B:      	DX = #MyData.n2
            ; //	asm set DX.b11				
0015C:      	set DX.b11
            ; //	PUSH(sDX);				
0015D:      	push	DX
            ; //	PUSH(sAX);				
0015E:      	push	AX
            ; //	_Sub3Play422CAD6D(STACK[sSP + 0], STACK[sSP + 1]);
0015F:      	pch	= _Sub3Play422CAD6D
00160:      	lcall	_Sub3Play422CAD6D
            ; //	RESTORESP(2);				
00161:      	pop	AR
00162:      	pop	AR
            ; //L2A70A9A2_11:;					
            L2A70A9A2_11:
            ; //_A523506CC_17:;					
            _A523506CC_17:
            ; //_A523506CC_18:;					
            _A523506CC_18:
            ; //	asm	io[ClrWDT] = AR			
00163:      	io[ClrWDT] = AR
            ; //	
            ; //_A523506CC_19:;					
            _A523506CC_19:
            ; //	asm I1 = L2A70A9A2_3+0;			
00164:      	I1 = L2A70A9A2_3+0//
            ; //	sAX	= *(__int16*)sSI;		
00165:      	AX	= rm[I1]
            ; //	sCX	= 0x0001;			
00166:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00167:      	pch	= sfx_CMP_AX_CX_JE
00168:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_13;	
00169:      	if ZR	jmp L2A70A9A2_13
            ; //	goto	L2A70A9A2_12;			
0016A:      	jmp	L2A70A9A2_12
            ; //L2A70A9A2_13:;					
            L2A70A9A2_13:
            ; //	
            ; //_A523506CC_20:;					
            _A523506CC_20:
            ; //	sAX	= 0;				
0016B:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
0016C:      	test io[0x08].b2//
            ; //	if(__jz__) goto L2A70A9A2_14;		
0016D:      	if ZR	jmp L2A70A9A2_14
            ; //	sAX	= 1;				
0016E:      	AX	= 0x01
            ; //L2A70A9A2_14:;					
            L2A70A9A2_14:
            ; //	sCX	= 0x0001;			
0016F:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00170:      	pch	= sfx_CMP_AX_CX_JE
00171:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_16;	
00172:      	if ZR	jmp L2A70A9A2_16
            ; //	goto	L2A70A9A2_15;			
00173:      	jmp	L2A70A9A2_15
            ; //L2A70A9A2_16:;					
            L2A70A9A2_16:
            ; //	
            ; //_A523506CC_21:;					
            _A523506CC_21:
            ; //	sAX	= 0x0000;			
00174:      	AX	= 0x00
            ; //	asm I1 = _Key_press_flag14FFF825+0;	
00175:      	I1 = _Key_press_flag14FFF825+0//
            ; //	*(__int16*)sSI	= sAX			
00176:      	rm[I1]	= AX
            ; //_A523506CC_22:;					
            _A523506CC_22:
            ; //	sAX	= 0x0000;			
00177:      	AX	= 0x00
            ; //	sSI	= (int)&L2A70A9A2_3;		
00178:      	I1	= L2A70A9A2_3
            ; //	*(__int16*)sSI	= sAX			
00179:      	rm[I1]	= AX
            ; //_A523506CC_23:;					
            _A523506CC_23:
            ; //	sAX	= 0x0001;			
0017A:      	AX	= 0x01
            ; //	asm I1 = _Play_flag71A588D5+0;		
0017B:      	I1 = _Play_flag71A588D5+0//
            ; //	*(__int16*)sSI	= sAX			
0017C:      	rm[I1]	= AX
            ; //_A523506CC_24:;					
            _A523506CC_24:
            ; //	asm I1 = _flagD698DD9D+0;		
0017D:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0017E:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
0017F:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00180:      	pch	= sfx_CMP_AX_CX_JE
00181:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_18;	
00182:      	if ZR	jmp L2A70A9A2_18
            ; //	goto	L2A70A9A2_17;			
00183:      	jmp	L2A70A9A2_17
            ; //L2A70A9A2_18:;					
            L2A70A9A2_18:
            ; //	
            ; //_A523506CC_25:;					
            _A523506CC_25:
            ; //_A523506CC_26:;					
            _A523506CC_26:
            ; //	sAX	= 0x0003;			
00184:      	AX	= 0x03
            ; //	PUSH(sAX);				
00185:      	push	AX
            ; //	sAX	= 0x0005;			
00186:      	AX	= 0x05
            ; //	PUSH(sAX);				
00187:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00188:      	pch	= _WS_TRSF_color_setE1CC300C
00189:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
0018A:      	pop	AR
0018B:      	pop	AR
            ; //_A523506CC_27:;					
            _A523506CC_27:
            ; //	asm clr io[0x09].b14;			
0018C:      	clr io[0x09].b14//
            ; //	goto L2A70A9A2_19;			
0018D:      	jmp	L2A70A9A2_19
            ; //L2A70A9A2_17:;					
            L2A70A9A2_17:
            ; //_A523506CC_28:;					
            _A523506CC_28:
            ; //	asm I1 = _flagD698DD9D+0;		
0018E:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0018F:      	AX	= rm[I1]
            ; //	sCX	= 0x0001;			
00190:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00191:      	pch	= sfx_CMP_AX_CX_JE
00192:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_21;	
00193:      	if ZR	jmp L2A70A9A2_21
            ; //	goto	L2A70A9A2_20;			
00194:      	jmp	L2A70A9A2_20
            ; //L2A70A9A2_21:;					
            L2A70A9A2_21:
            ; //	
            ; //_A523506CC_29:;					
            _A523506CC_29:
            ; //_A523506CC_30:;					
            _A523506CC_30:
            ; //	sAX	= 0x0003;			
00195:      	AX	= 0x03
            ; //	PUSH(sAX);				
00196:      	push	AX
            ; //	sAX	= 0x0003;			
00197:      	AX	= 0x03
            ; //	PUSH(sAX);				
00198:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00199:      	pch	= _WS_TRSF_color_setE1CC300C
0019A:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
0019B:      	pop	AR
0019C:      	pop	AR
            ; //_A523506CC_31:;					
            _A523506CC_31:
            ; //	asm clr io[0x09].b14;			
0019D:      	clr io[0x09].b14//
            ; //L2A70A9A2_20:;					
            L2A70A9A2_20:
            ; //_A523506CC_32:;					
            _A523506CC_32:
            ; //L2A70A9A2_19:;					
            L2A70A9A2_19:
            ; //_A523506CC_33:;					
            _A523506CC_33:
            ; //_A523506CC_34:;					
            _A523506CC_34:
            ; //	asm I1 = _flagD698DD9D+0;		
0019E:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0019F:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
001A0:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
001A1:      	pch	= sfx_CMP_AX_CX_JE
001A2:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_23;	
001A3:      	if ZR	jmp L2A70A9A2_23
            ; //	goto	L2A70A9A2_22;			
001A4:      	jmp	L2A70A9A2_22
            ; //L2A70A9A2_23:;					
            L2A70A9A2_23:
            ; //	
            ; //_A523506CC_35:;					
            _A523506CC_35:
            ; //_A523506CC_36:;					
            _A523506CC_36:
            ; //	sAX	= 0x0003;			
001A5:      	AX	= 0x03
            ; //	PUSH(sAX);				
001A6:      	push	AX
            ; //	sAX	= 0x0004;			
001A7:      	AX	= 0x04
            ; //	PUSH(sAX);				
001A8:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
001A9:      	pch	= _WS_TRSF_color_setE1CC300C
001AA:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
001AB:      	pop	AR
001AC:      	pop	AR
            ; //_A523506CC_37:;					
            _A523506CC_37:
            ; //	asm clr io[0x09].b14;			
001AD:      	clr io[0x09].b14//
            ; //L2A70A9A2_22:;					
            L2A70A9A2_22:
            ; //_A523506CC_38:;					
            _A523506CC_38:
            ; //_A523506CC_39:;					
            _A523506CC_39:
            ; //	sAX	= 0x0002;			
001AE:      	AX	= 0x02
            ; //	asm I1 = _flagD698DD9D+0;		
001AF:      	I1 = _flagD698DD9D+0//
            ; //	asm CX = rm[I1];			
001B0:      	CX = rm[I1]//
            ; //	sfx_CMP_AX_CX_JE();			
001B1:      	pch	= sfx_CMP_AX_CX_JE
001B2:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_26;	
001B3:      	if ZR	jmp L2A70A9A2_26
            ; //	goto	L2A70A9A2_24;			
001B4:      	jmp	L2A70A9A2_24
            ; //L2A70A9A2_26:;					
            L2A70A9A2_26:
            ; //	sAX	= 0x0000;			
001B5:      	AX	= 0x00
            ; //	goto L2A70A9A2_25;			
001B6:      	jmp	L2A70A9A2_25
            ; //L2A70A9A2_24:;					
            L2A70A9A2_24:
            ; //	sAX	= 0x0001;			
001B7:      	AX	= 0x01
            ; //	asm I1 = _flagD698DD9D+0;		
001B8:      	I1 = _flagD698DD9D+0//
            ; //	sCX	= *(__int16*)sSI;		
001B9:      	CX	= rm[I1]
            ; //	sAX	= sAX + sCX;			
001BA:      	AR	= CX
001BB:      	AX	+= AR
            ; //L2A70A9A2_25:;					
            L2A70A9A2_25:
            ; //	asm I1 = _flagD698DD9D+0;		
001BC:      	I1 = _flagD698DD9D+0//
            ; //	*(__int16*)sSI	= sAX			
001BD:      	rm[I1]	= AX
            ; //L2A70A9A2_15:;					
            L2A70A9A2_15:
            ; //_A523506CC_40:;					
            _A523506CC_40:
            ; //L2A70A9A2_12:;					
            L2A70A9A2_12:
            ; //_A523506CC_41:;					
            _A523506CC_41:
            ; //_A523506CC_42:;					
            _A523506CC_42:
            ; //	asm I1 = _flagD698DD9D+0;		
001BE:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
001BF:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
001C0:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
001C1:      	pch	= sfx_CMP_AX_CX_JE
001C2:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_28;	
001C3:      	if ZR	jmp L2A70A9A2_28
            ; //	goto	L2A70A9A2_27;			
001C4:      	jmp	L2A70A9A2_27
            ; //L2A70A9A2_28:;					
            L2A70A9A2_28:
            ; //	
            ; //_A523506CC_43:;					
            _A523506CC_43:
            ; //_A523506CC_44:;					
            _A523506CC_44:
            ; //	_RampUpFF7996DA();			
001C5:      	pch	= _RampUpFF7996DA
001C6:      	lcall	_RampUpFF7996DA
            ; //_A523506CC_45:;					
            _A523506CC_45:
            ; //_A523506CC_46:;					
            _A523506CC_46:
            ; //	_WaitPCM_Empty_size53398B9D();		
001C7:      	pch	= _WaitPCM_Empty_size53398B9D
001C8:      	lcall	_WaitPCM_Empty_size53398B9D
            ; //	sCX	= 0x0000;			
001C9:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JL();			
001CA:      	pch	= sfx_CMP_AX_CX_JL
001CB:      	lcall	sfx_CMP_AX_CX_JL
            ; //	if(__je__)	goto L2A70A9A2_30;	
001CC:      	if ZR	jmp L2A70A9A2_30
            ; //	goto	L2A70A9A2_29;			
001CD:      	jmp	L2A70A9A2_29
            ; //L2A70A9A2_30:;					
            L2A70A9A2_30:
            ; //	
            ; //_A523506CC_47:;					
            _A523506CC_47:
            ; //	goto L2A70A9A2_11;			
001CE:      	jmp	L2A70A9A2_11
            ; //L2A70A9A2_29:;					
            L2A70A9A2_29:
            ; //_A523506CC_48:;					
            _A523506CC_48:
            ; //_A523506CC_49:;					
            _A523506CC_49:
            ; //_A523506CC_50:;					
            _A523506CC_50:
            ; //	Subb3_Dec();				
001CF:      	pch	= Subb3_Dec
001D0:      	lcall	Subb3_Dec
            ; //	sfx_CHECKZERO();			
001D1:      	AR	= AX
            ; //	if(__jnz__)	goto L2A70A9A2_32;	
001D2:      	if NZ	jmp L2A70A9A2_32
            ; //	goto	L2A70A9A2_31;			
001D3:      	jmp	L2A70A9A2_31
            ; //L2A70A9A2_32:;					
            L2A70A9A2_32:
            ; //_A523506CC_51:;					
            _A523506CC_51:
            ; //_A523506CC_52:;					
            _A523506CC_52:
            ; //	asm AX = #MyData+0;			
001D4:      	AX = #MyData+0//
            ; //	asm DX = #MyData.n2			
001D6:      	DX = #MyData.n2
            ; //	asm set DX.b11				
001D7:      	set DX.b11
            ; //	PUSH(sDX);				
001D8:      	push	DX
            ; //	PUSH(sAX);				
001D9:      	push	AX
            ; //	_Sub3Play422CAD6D(STACK[sSP + 0], STACK[sSP + 1]);
001DA:      	pch	= _Sub3Play422CAD6D
001DB:      	lcall	_Sub3Play422CAD6D
            ; //	RESTORESP(2);				
001DC:      	pop	AR
001DD:      	pop	AR
            ; //L2A70A9A2_31:;					
            L2A70A9A2_31:
            ; //_A523506CC_53:;					
            _A523506CC_53:
            ; //	goto L2A70A9A2_33;			
001DE:      	jmp	L2A70A9A2_33
            ; //L2A70A9A2_27:;					
            L2A70A9A2_27:
            ; //_A523506CC_54:;					
            _A523506CC_54:
            ; //_A523506CC_55:;					
            _A523506CC_55:
            ; //	_Sub3ZeroFillABFF23AA();		
001DF:      	pch	= _Sub3ZeroFillABFF23AA
001E0:      	lcall	_Sub3ZeroFillABFF23AA
            ; //L2A70A9A2_33:;					
            L2A70A9A2_33:
            ; //_A523506CC_56:;					
            _A523506CC_56:
            ; //	goto L2A70A9A2_11;			
001E1:      	jmp	L2A70A9A2_11
            ; //L2A70A9A2_10:;					
            L2A70A9A2_10:
            ; //L2A70A9A2_9:;					
            L2A70A9A2_9:
            ; //_A523506CC_57:;					
            _A523506CC_57:
            ; //	return;					
001E2:      	rets
            ; //_main_end:;					
            _main_end:
            ; //_A523506CC_58:;					
            _A523506CC_58:
            ; //}
            ; //
            ; //rjmp void _InitSound5CCD501D()			
            _InitSound5CCD501D:
            ; //{
            ; //_A523506CC_59:;					
            _A523506CC_59:
            ; //	
            ; //_A523506CC_60:;					
            _A523506CC_60:
            ; //	io[0x3E]	= 0x3FFF;		
001E3:      	AR	= 0x3FFF
001E5:      	io[0x3E]	= AR
            ; //_A523506CC_61:;					
            _A523506CC_61:
            ; //	io[0x16]	= 0x0000;		
001E6:      	AR	= 0x00
001E7:      	io[0x16]	= AR
            ; //_A523506CC_62:;					
            _A523506CC_62:
            ; //	io[0x16]	= 0x0000;		
001E8:      	AR	= 0x00
001E9:      	io[0x16]	= AR
            ; //_A523506CC_63:;					
            _A523506CC_63:
            ; //	io[0x16]	= 0x0000;		
001EA:      	AR	= 0x00
001EB:      	io[0x16]	= AR
            ; //_A523506CC_64:;					
            _A523506CC_64:
            ; //	io[0x16]	= 0x0000;		
001EC:      	AR	= 0x00
001ED:      	io[0x16]	= AR
            ; //_A523506CC_65:;					
            _A523506CC_65:
            ; //	io[0x36]	= 0x0000;		
001EE:      	AR	= 0x00
001EF:      	io[0x36]	= AR
            ; //_A523506CC_66:;					
            _A523506CC_66:
            ; //	io[0x36]	= 0x0000;		
001F0:      	AR	= 0x00
001F1:      	io[0x36]	= AR
            ; //_A523506CC_67:;					
            _A523506CC_67:
            ; //	io[0x36]	= 0x0000;		
001F2:      	AR	= 0x00
001F3:      	io[0x36]	= AR
            ; //_A523506CC_68:;					
            _A523506CC_68:
            ; //	io[0x36]	= 0x0000;		
001F4:      	AR	= 0x00
001F5:      	io[0x36]	= AR
            ; //_A523506CC_69:;					
            _A523506CC_69:
            ; //	io[0x36]	= 0x0000;		
001F6:      	AR	= 0x00
001F7:      	io[0x36]	= AR
            ; //_A523506CC_70:;					
            _A523506CC_70:
            ; //	io[0x36]	= 0x0000;		
001F8:      	AR	= 0x00
001F9:      	io[0x36]	= AR
            ; //_A523506CC_71:;					
            _A523506CC_71:
            ; //	io[0x36]	= 0x0000;		
001FA:      	AR	= 0x00
001FB:      	io[0x36]	= AR
            ; //_A523506CC_72:;					
            _A523506CC_72:
            ; //	io[0x36]	= 0x0000;		
001FC:      	AR	= 0x00
001FD:      	io[0x36]	= AR
            ; //_A523506CC_73:;					
            _A523506CC_73:
            ; //	io[0x3C]	= 0x0000;		
001FE:      	AR	= 0x00
001FF:      	io[0x3C]	= AR
            ; //_A523506CC_74:;					
            _A523506CC_74:
            ; //	sAX	= io[0x3C];			
00200:      	AR	= io[0x3C]
00201:      	AX	= AR
            ; //_A523506CC_75:;					
            _A523506CC_75:
            ; //	asm	set io[MISC].b9			
00202:      	set io[MISC].b9
            ; //_A523506CC_76:;					
            _A523506CC_76:
            ; //	asm	set io[MISC].b8			
00203:      	set io[MISC].b8
            ; //_A523506CC_77:;					
            _A523506CC_77:
            ; //	asm	set io[MISC].b4			
00204:      	set io[MISC].b4
            ; //L2A70A9A2_34:;					
            L2A70A9A2_34:
            ; //_A523506CC_78:;					
            _A523506CC_78:
            ; //	return;					
00205:      	rets
            ; //_InitSound5CCD501D_end:;			
            _InitSound5CCD501D_end:
            ; //_A523506CC_79:;					
            _A523506CC_79:
            ; //}
            ; //
            ; //rjmp void _INITIAL0C18377D()			
            _INITIAL0C18377D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00206:      	AR	= rm[BP_SAVE]
00207:      	push	AR
00208:      	AR	= BP
00209:      	rm[BP_SAVE]	= AR
0020A:      	AR	 = -1
0020B:      	BP	+= AR
            ; //_A523506CC_80:;					
            _A523506CC_80:
            ; //_A523506CC_81:;					
            _A523506CC_81:
            ; //_A523506CC_82:;					
            _A523506CC_82:
            ; //	NEARCALL(_InitSound5CCD501D);		
0020C:      	call	_InitSound5CCD501D
            ; //	
            ; //_A523506CC_83:;					
            _A523506CC_83:
            ; //	asm AX = PCMY+0;			
0020D:      	AX = PCMY+0//
            ; //_A523506CC_84:;					
            _A523506CC_84:
            ; //	asm	AR = AX				
0020F:      	AR = AX
            ; //_A523506CC_85:;					
            _A523506CC_85:
            ; //	asm	I0 = AR				
00210:      	I0 = AR
            ; //_A523506CC_86:;					
            _A523506CC_86:
            ; //	_i_1_2+0	= 0x0200;		
00211:      	I1	= rm[BP_SAVE]
00212:      	AR	= 0x0200
00214:      	rm[I1]	= AR
            ; //L2A70A9A2_37:;					
            L2A70A9A2_37:
            ; //_A523506CC_87:;					
            _A523506CC_87:
            ; //	sSI	= (int)&_i_1_2;			
00215:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00216:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00217:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00218:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00219:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
0021A:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
0021B:      	AR	= AX
            ; //	if(__jnz__)	goto L2A70A9A2_38;	
0021C:      	if NZ	jmp L2A70A9A2_38
            ; //	goto	L2A70A9A2_36;			
0021D:      	jmp	L2A70A9A2_36
            ; //L2A70A9A2_38:;					
            L2A70A9A2_38:
            ; //	
            ; //_A523506CC_88:;					
            _A523506CC_88:
            ; //	sAX	= 0x0000;			
0021E:      	AX	= 0x00
            ; //_A523506CC_89:;					
            _A523506CC_89:
            ; //	asm	rm[I0++] = AX			
0021F:      	rm[I0++] = AX
            ; //	goto L2A70A9A2_37;			
00220:      	jmp	L2A70A9A2_37
            ; //L2A70A9A2_36:;					
            L2A70A9A2_36:
            ; //_A523506CC_90:;					
            _A523506CC_90:
            ; //	asm AX = PCMY+0;			
00221:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
00223:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00224:      	rm[I1]	= AX
            ; //_A523506CC_91:;					
            _A523506CC_91:
            ; //	asm AX = PCMY+0;			
00225:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
00227:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00228:      	rm[I1]	= AX
            ; //_A523506CC_92:;					
            _A523506CC_92:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00229:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
0022A:      	AX	= rm[I1]
            ; //	io[0x3C]	= sAX;			
0022B:      	AR	= AX
0022C:      	io[0x3C]	= AR
            ; //_A523506CC_93:;					
            _A523506CC_93:
            ; //	io[0x3E]	= 0x1FFF;		
0022D:      	AR	= 0x1FFF
0022F:      	io[0x3E]	= AR
            ; //_A523506CC_94:;					
            _A523506CC_94:
            ; //	io[0x3B]	= 0x0000;		
00230:      	AR	= 0x00
00231:      	io[0x3B]	= AR
            ; //L2A70A9A2_35:;					
            L2A70A9A2_35:
            ; //_A523506CC_95:;					
            _A523506CC_95:
            ; //	return;					
00232:      	AR	= 1
00233:      	BP	+= AR
00234:      	pop	AR
00235:      	rm[BP_SAVE]	= AR
00236:      	rets
            ; //_INITIAL0C18377D_end:;				
            _INITIAL0C18377D_end:
            ; //_A523506CC_96:;					
            _A523506CC_96:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_SUNB3_593950F9_s(void)	
            ginit_code_SUNB3_593950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_SUNB3_593950F9_s+0;	
00237:      	P1 = #ginit_seg_SUNB3_593950F9_s+0//
            ; //	asm I1 = L2A70A9A2_2;			
0023A:      	I1 = L2A70A9A2_2//
            ; //	sCX = 1;				
0023B:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
0023C:      	pch	= sfx_GLOBALINIT
0023D:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_SUNB3_593950F9_s+1;	
0023E:      	P1 = #ginit_seg_SUNB3_593950F9_s+1//
            ; //	asm I1 = L2A70A9A2_3;			
00241:      	I1 = L2A70A9A2_3//
            ; //	sCX = 1;				
00242:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00243:      	pch	= sfx_GLOBALINIT
00244:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00245:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_SUNB3_593950F9_s[2] = {	
            ginit_seg_SUNB3_593950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
00246:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00247:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //naked void MyData()				
            MyData:
            ; //{
            ; //	asm	DW "subband3\Song_Scan_and_Sort_@11K7bps.T3Z"
0378F:      DW "subband3\Song_Scan_and_Sort_@11K7bps.T3Z"
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUNB3_593950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> Start=========================
            ; global.c Code Start!!;
            VarRM[0:4095]={
             _sub_vol980B1B83,_ticksA7263C09[2] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _RampUpFF7996DA();
            ; //rjmp void _RampDown1D382EDA();
            ; //rjmp void _InitialDA4A7CC4();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _RampUpFF7996DA()			
            _RampUpFF7996DA:
            ; //{
            ; //_A523506CC_97:;					
            _A523506CC_97:
            ; //	
            ; //_A523506CC_98:;					
            _A523506CC_98:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00248:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00249:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
0024A:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
0024B:      	AX = AX & AR//
            ; //	sCX	= 0x003F;			
0024C:      	CX	= 0x3F
            ; //	sfx_CMP_AX_CX_JE();			
0024D:      	pch	= sfx_CMP_AX_CX_JE
0024E:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_44;	
0024F:      	if ZR	jmp L0E8FA404_44
            ; //	goto	L0E8FA404_43;			
00250:      	jmp	L0E8FA404_43
            ; //L0E8FA404_44:;					
            L0E8FA404_44:
            ; //_A523506CC_99:;					
            _A523506CC_99:
            ; //	sAX	= 0x0000;			
00251:      	AX	= 0x00
            ; //	goto L0E8FA404_42;			
00252:      	jmp	L0E8FA404_42
            ; //L0E8FA404_43:;					
            L0E8FA404_43:
            ; //_A523506CC_100:;				
            _A523506CC_100:
            ; //_A523506CC_101:;				
            _A523506CC_101:
            ; //_A523506CC_102:;				
            _A523506CC_102:
            ; //	_GetTickCount18DC070C();		
00253:      	pch	= _GetTickCount18DC070C
00254:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00255:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
00256:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00257:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00258:      	AR	= CX
00259:      	AX	= AX - AR
0025A:      	AR	= BX
0025B:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
0025C:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
0025D:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
0025E:      	pch	= sfx_CMPLONG_JA
0025F:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_46;	
00260:      	if ZR	jmp L0E8FA404_46
            ; //	goto	L0E8FA404_45;			
00261:      	jmp	L0E8FA404_45
            ; //L0E8FA404_46:;					
            L0E8FA404_46:
            ; //	
            ; //_A523506CC_103:;				
            _A523506CC_103:
            ; //_A523506CC_104:;				
            _A523506CC_104:
            ; //	_GetTickCount18DC070C();		
00262:      	pch	= _GetTickCount18DC070C
00263:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00264:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
00265:      	rm[I1++]	= AX
00266:      	rm[I1--]	= DX
            ; //_A523506CC_105:;				
            _A523506CC_105:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00267:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00268:      	AX	= rm[I1]
            ; //	sAX++;					
00269:      	AX++
            ; //	*(__int16*)sSI	= sAX;			
0026A:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
0026B:      	AR	= AX
0026C:      	io[0x3C]	= AR
            ; //L0E8FA404_45:;					
            L0E8FA404_45:
            ; //_A523506CC_106:;				
            _A523506CC_106:
            ; //_A523506CC_107:;				
            _A523506CC_107:
            ; //	sAX	= 0x0001;			
0026D:      	AX	= 0x01
            ; //	goto L0E8FA404_42;			
0026E:      	jmp	L0E8FA404_42
            ; //L0E8FA404_42:;					
            L0E8FA404_42:
            ; //_A523506CC_108:;				
            _A523506CC_108:
            ; //	return;					
0026F:      	rets
            ; //_RampUpFF7996DA_end:;				
            _RampUpFF7996DA_end:
            ; //_A523506CC_109:;				
            _A523506CC_109:
            ; //}
            ; //
            ; //rjmp void _RampDown1D382EDA()			
            _RampDown1D382EDA:
            ; //{
            ; //_A523506CC_110:;				
            _A523506CC_110:
            ; //	
            ; //_A523506CC_111:;				
            _A523506CC_111:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00270:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00271:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
00272:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
00273:      	AX = AX & AR//
            ; //	sCX	= 0x0000;			
00274:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00275:      	pch	= sfx_CMP_AX_CX_JE
00276:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_49;	
00277:      	if ZR	jmp L0E8FA404_49
            ; //	goto	L0E8FA404_48;			
00278:      	jmp	L0E8FA404_48
            ; //L0E8FA404_49:;					
            L0E8FA404_49:
            ; //_A523506CC_112:;				
            _A523506CC_112:
            ; //	sAX	= 0x0000;			
00279:      	AX	= 0x00
            ; //	goto L0E8FA404_47;			
0027A:      	jmp	L0E8FA404_47
            ; //L0E8FA404_48:;					
            L0E8FA404_48:
            ; //_A523506CC_113:;				
            _A523506CC_113:
            ; //_A523506CC_114:;				
            _A523506CC_114:
            ; //_A523506CC_115:;				
            _A523506CC_115:
            ; //	_GetTickCount18DC070C();		
0027B:      	pch	= _GetTickCount18DC070C
0027C:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
0027D:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
0027E:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
0027F:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00280:      	AR	= CX
00281:      	AX	= AX - AR
00282:      	AR	= BX
00283:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
00284:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
00285:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
00286:      	pch	= sfx_CMPLONG_JA
00287:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_51;	
00288:      	if ZR	jmp L0E8FA404_51
            ; //	goto	L0E8FA404_50;			
00289:      	jmp	L0E8FA404_50
            ; //L0E8FA404_51:;					
            L0E8FA404_51:
            ; //	
            ; //_A523506CC_116:;				
            _A523506CC_116:
            ; //_A523506CC_117:;				
            _A523506CC_117:
            ; //	_GetTickCount18DC070C();		
0028A:      	pch	= _GetTickCount18DC070C
0028B:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
0028C:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
0028D:      	rm[I1++]	= AX
0028E:      	rm[I1--]	= DX
            ; //_A523506CC_118:;				
            _A523506CC_118:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
0028F:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00290:      	AX	= rm[I1]
            ; //	sAX--;					
00291:      	AX--
            ; //	*(__int16*)sSI	= sAX;			
00292:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
00293:      	AR	= AX
00294:      	io[0x3C]	= AR
            ; //L0E8FA404_50:;					
            L0E8FA404_50:
            ; //_A523506CC_119:;				
            _A523506CC_119:
            ; //_A523506CC_120:;				
            _A523506CC_120:
            ; //	sAX	= 0x0001;			
00295:      	AX	= 0x01
            ; //	goto L0E8FA404_47;			
00296:      	jmp	L0E8FA404_47
            ; //L0E8FA404_47:;					
            L0E8FA404_47:
            ; //_A523506CC_121:;				
            _A523506CC_121:
            ; //	return;					
00297:      	rets
            ; //_RampDown1D382EDA_end:;				
            _RampDown1D382EDA_end:
            ; //_A523506CC_122:;				
            _A523506CC_122:
            ; //}
            ; //
            ; //rjmp void _InitialDA4A7CC4()			
            _InitialDA4A7CC4:
            ; //{
            ; //_A523506CC_123:;				
            _A523506CC_123:
            ; //	
            ; //_A523506CC_124:;				
            _A523506CC_124:
            ; //	io[0x67]	= 0x0007;		
00298:      	AR	= 0x07
00299:      	io[0x67]	= AR
            ; //_A523506CC_125:;				
            _A523506CC_125:
            ; //	io[0x06]	= 0xC004;		
0029A:      	AR	= 0xC004
0029C:      	io[0x06]	= AR
            ; //_A523506CC_126:;				
            _A523506CC_126:
            ; //	io[0x05]	= 0x0000;		
0029D:      	AR	= 0x00
0029E:      	io[0x05]	= AR
            ; //_A523506CC_127:;				
            _A523506CC_127:
            ; //	io[0x09]	= 0x0000;		
0029F:      	AR	= 0x00
002A0:      	io[0x09]	= AR
            ; //_A523506CC_128:;				
            _A523506CC_128:
            ; //	io[0x1E]	= 0x000C;		
002A1:      	AR	= 0x0C
002A2:      	io[0x1E]	= AR
            ; //_A523506CC_129:;				
            _A523506CC_129:
            ; //	io[0x1F]	= 0x00FF;		
002A3:      	AR	= 0x00FF
002A5:      	io[0x1F]	= AR
            ; //	
            ; //_A523506CC_130:;				
            _A523506CC_130:
            ; //	sAX	= 0x0002;			
002A6:      	AX	= 0x02
            ; //_A523506CC_131:;				
            _A523506CC_131:
            ; //	asm	AR = AX				
002A7:      	AR = AX
            ; //_A523506CC_132:;				
            _A523506CC_132:
            ; //	asm	io[IOP_IX] = AR			
002A8:      	io[IOP_IX] = AR
            ; //	
            ; //_A523506CC_133:;				
            _A523506CC_133:
            ; //	sAX	= 0x7FFF;			
002A9:      	AX	= 0x7FFF
            ; //_A523506CC_134:;				
            _A523506CC_134:
            ; //	asm	AR = AX				
002AB:      	AR = AX
            ; //_A523506CC_135:;				
            _A523506CC_135:
            ; //	asm	io[IOP_DAT] = AR		
002AC:      	io[IOP_DAT] = AR
            ; //_A523506CC_136:;				
            _A523506CC_136:
            ; //	asm	eni				
002AD:      	eni
            ; //_A523506CC_137:;				
            _A523506CC_137:
            ; //	asm	set io[INTENA].b3		
002AE:      	set io[INTENA].b3
            ; //L0E8FA404_52:;					
            L0E8FA404_52:
            ; //_A523506CC_138:;				
            _A523506CC_138:
            ; //	return;					
002AF:      	rets
            ; //_InitialDA4A7CC4_end:;				
            _InitialDA4A7CC4_end:
            ; //_A523506CC_139:;				
            _A523506CC_139:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_global_6037E6D5_s(void)	
            ginit_code_global_6037E6D5_s:
            ; //{
            ; //	return;					
002B0:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> Start=========================
            ; sub3play.c Code Start!!;
            VarRM[0:4095]={
             bts_ch0_get_ix[2],PCMYIN_PTR,PCMYOU_PTR,PCMIN,SampleCh0Rate,BaseOn512#PCMY[512],SUBFLTI[4],SUBFLTA
            ,SUBFLTP,SUBFLTG 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _ClearRenderBufB079D01D();
            ; //rjmp void _Sub3Initial96BE24F3();
            ; //rjmp void _WaitPCM_Empty_size53398B9D();
            ; //rjmp void _Sub3ZeroFillABFF23AA();
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1);
            ; //naked rjmp void Sbb_Ch0GetBts();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _ClearRenderBufB079D01D()		
            _ClearRenderBufB079D01D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
002B1:      	AR	= rm[BP_SAVE]
002B2:      	push	AR
002B3:      	AR	= BP
002B4:      	rm[BP_SAVE]	= AR
002B5:      	AR	 = -1
002B6:      	BP	+= AR
            ; //_A523506CC_140:;				
            _A523506CC_140:
            ; //	
            ; //_A523506CC_141:;				
            _A523506CC_141:
            ; //	asm AX = PCMY+0;			
002B7:      	AX = PCMY+0//
            ; //_A523506CC_142:;				
            _A523506CC_142:
            ; //	asm	AR = AX				
002B9:      	AR = AX
            ; //_A523506CC_143:;				
            _A523506CC_143:
            ; //	asm	I0 = AR				
002BA:      	I0 = AR
            ; //_A523506CC_144:;				
            _A523506CC_144:
            ; //	_i_1_2+0	= 0x0200;		
002BB:      	I1	= rm[BP_SAVE]
002BC:      	AR	= 0x0200
002BE:      	rm[I1]	= AR
            ; //LFB78B58C_56:;					
            LFB78B58C_56:
            ; //_A523506CC_145:;				
            _A523506CC_145:
            ; //	sSI	= (int)&_i_1_2;			
002BF:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002C0:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
002C1:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
002C2:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
002C3:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
002C4:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
002C5:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_57;	
002C6:      	if NZ	jmp LFB78B58C_57
            ; //	goto	LFB78B58C_55;			
002C7:      	jmp	LFB78B58C_55
            ; //LFB78B58C_57:;					
            LFB78B58C_57:
            ; //	
            ; //_A523506CC_146:;				
            _A523506CC_146:
            ; //	sAX	= 0x0000;			
002C8:      	AX	= 0x00
            ; //_A523506CC_147:;				
            _A523506CC_147:
            ; //	asm	rm[I0++] = AX			
002C9:      	rm[I0++] = AX
            ; //	goto LFB78B58C_56;			
002CA:      	jmp	LFB78B58C_56
            ; //LFB78B58C_55:;					
            LFB78B58C_55:
            ; //LFB78B58C_54:;					
            LFB78B58C_54:
            ; //_A523506CC_148:;				
            _A523506CC_148:
            ; //	return;					
002CB:      	AR	= 1
002CC:      	BP	+= AR
002CD:      	pop	AR
002CE:      	rm[BP_SAVE]	= AR
002CF:      	rets
            ; //_ClearRenderBufB079D01D_end:;			
            _ClearRenderBufB079D01D_end:
            ; //_A523506CC_149:;				
            _A523506CC_149:
            ; //}
            ; //
            ; //rjmp void _Sub3Initial96BE24F3()		
            _Sub3Initial96BE24F3:
            ; //{
            ; //_A523506CC_150:;				
            _A523506CC_150:
            ; //_A523506CC_151:;				
            _A523506CC_151:
            ; //	asm	dsi				
002D0:      	dsi
            ; //_A523506CC_152:;				
            _A523506CC_152:
            ; //	asm	nop				
002D1:      	nop
            ; //	
            ; //_A523506CC_153:;				
            _A523506CC_153:
            ; //_A523506CC_154:;				
            _A523506CC_154:
            ; //	_ClearRenderBufB079D01D();		
002D2:      	pch	= _ClearRenderBufB079D01D
002D3:      	lcall	_ClearRenderBufB079D01D
            ; //_A523506CC_155:;				
            _A523506CC_155:
            ; //	asm	AR = PASR,0			
002D4:      	AR = PASR,0
            ; //_A523506CC_156:;				
            _A523506CC_156:
            ; //	asm AX = PCMY+0;			
002D5:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
002D7:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
002D8:      	rm[I1]	= AX
            ; //_A523506CC_157:;				
            _A523506CC_157:
            ; //	asm AX = PCMY+0;			
002D9:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
002DB:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
002DC:      	rm[I1]	= AX
            ; //_A523506CC_158:;				
            _A523506CC_158:
            ; //	io[0x3B]	= 0x0000;		
002DD:      	AR	= 0x00
002DE:      	io[0x3B]	= AR
            ; //_A523506CC_159:;				
            _A523506CC_159:
            ; //_A523506CC_160:;				
            _A523506CC_160:
            ; //	Subb3_Init();				
002DF:      	pch	= Subb3_Init
002E0:      	lcall	Subb3_Init
            ; //LFB78B58C_58:;					
            LFB78B58C_58:
            ; //_A523506CC_161:;				
            _A523506CC_161:
            ; //	return;					
002E1:      	rets
            ; //_Sub3Initial96BE24F3_end:;			
            _Sub3Initial96BE24F3_end:
            ; //_A523506CC_162:;				
            _A523506CC_162:
            ; //}
            ; //
            ; //rjmp void _WaitPCM_Empty_size53398B9D()		
            _WaitPCM_Empty_size53398B9D:
            ; //{
            ; //	__int16 _x_1_2;
            ; //						
002E2:      	AR	= rm[BP_SAVE]
002E3:      	push	AR
002E4:      	AR	= BP
002E5:      	rm[BP_SAVE]	= AR
002E6:      	AR	 = -1
002E7:      	BP	+= AR
            ; //_A523506CC_163:;				
            _A523506CC_163:
            ; //_A523506CC_164:;				
            _A523506CC_164:
            ; //	asm I1 = PCMYOU_PTR+0;			
002E8:      	I1 = PCMYOU_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
002E9:      	AX	= rm[I1]
            ; //	asm I1 = PCMYIN_PTR+0;			
002EA:      	I1 = PCMYIN_PTR+0//
            ; //	sCX	= *(__int16*)sSI;		
002EB:      	CX	= rm[I1]
            ; //	sAX	= sAX - sCX;			
002EC:      	AR	= CX
002ED:      	AX	-= AR
            ; //	
            ; //	sSI	= (int)&_x_1_2;			
002EE:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
002EF:      	rm[I1]	= AX
            ; //_A523506CC_165:;				
            _A523506CC_165:
            ; //	sSI	= (int)&_x_1_2;			
002F0:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002F1:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
002F2:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JL();			
002F3:      	pch	= sfx_CMP_AX_CX_JL
002F4:      	lcall	sfx_CMP_AX_CX_JL
            ; //	if(__je__)	goto LFB78B58C_61;	
002F5:      	if ZR	jmp LFB78B58C_61
            ; //	goto	LFB78B58C_60;			
002F6:      	jmp	LFB78B58C_60
            ; //LFB78B58C_61:;					
            LFB78B58C_61:
            ; //	
            ; //_A523506CC_166:;				
            _A523506CC_166:
            ; //	sAX	= 0x01FF;			
002F7:      	AX	= 0x01FF
            ; //	sSI	= (int)&_x_1_2;			
002F9:      	I1	= rm[BP_SAVE]
            ; //	sCX	= *(__int16*)sSI;		
002FA:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
002FB:      	AR	= CX
002FC:      	AX	&= AR
            ; //	sSI	= (int)&_x_1_2;			
002FD:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
002FE:      	rm[I1]	= AX
            ; //LFB78B58C_60:;					
            LFB78B58C_60:
            ; //_A523506CC_167:;				
            _A523506CC_167:
            ; //_A523506CC_168:;				
            _A523506CC_168:
            ; //	sSI	= (int)&_x_1_2;			
002FF:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00300:      	AX	= rm[I1]
            ; //	sCX	= 0x0121;			
00301:      	CX	= 0x0121
            ; //	sAX	= sAX - sCX;			
00303:      	AR	= CX
00304:      	AX	-= AR
            ; //	sSI	= (int)&_x_1_2;			
00305:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00306:      	rm[I1]	= AX
            ; //_A523506CC_169:;				
            _A523506CC_169:
            ; //	sSI	= (int)&_x_1_2;			
00307:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00308:      	AX	= rm[I1]
            ; //	goto LFB78B58C_59;			
00309:      	jmp	LFB78B58C_59
            ; //LFB78B58C_59:;					
            LFB78B58C_59:
            ; //_A523506CC_170:;				
            _A523506CC_170:
            ; //	return;					
0030A:      	AR	= 1
0030B:      	BP	+= AR
0030C:      	pop	AR
0030D:      	rm[BP_SAVE]	= AR
0030E:      	rets
            ; //_WaitPCM_Empty_size53398B9D_end:;		
            _WaitPCM_Empty_size53398B9D_end:
            ; //_A523506CC_171:;				
            _A523506CC_171:
            ; //}
            ; //
            ; //rjmp void _Sub3ZeroFillABFF23AA()		
            _Sub3ZeroFillABFF23AA:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
0030F:      	AR	= rm[BP_SAVE]
00310:      	push	AR
00311:      	AR	= BP
00312:      	rm[BP_SAVE]	= AR
00313:      	AR	 = -1
00314:      	BP	+= AR
            ; //_A523506CC_172:;				
            _A523506CC_172:
            ; //_A523506CC_173:;				
            _A523506CC_173:
            ; //	asm	push CBL			
00315:      	push CBL
            ; //_A523506CC_174:;				
            _A523506CC_174:
            ; //	io[0x3B]	= 0x0009;		
00316:      	AR	= 0x09
00317:      	io[0x3B]	= AR
            ; //	
            ; //_A523506CC_175:;				
            _A523506CC_175:
            ; //	asm I1 = PCMYIN_PTR+0;			
00318:      	I1 = PCMYIN_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
00319:      	AX	= rm[I1]
            ; //_A523506CC_176:;				
            _A523506CC_176:
            ; //	asm	AR = AX				
0031A:      	AR = AX
            ; //_A523506CC_177:;				
            _A523506CC_177:
            ; //	asm	I0 = AR				
0031B:      	I0 = AR
            ; //_A523506CC_178:;				
            _A523506CC_178:
            ; //	_i_1_2+0	= 0x0120;		
0031C:      	I1	= rm[BP_SAVE]
0031D:      	AR	= 0x0120
0031F:      	rm[I1]	= AR
            ; //LFB78B58C_64:;					
            LFB78B58C_64:
            ; //_A523506CC_179:;				
            _A523506CC_179:
            ; //	sSI	= (int)&_i_1_2;			
00320:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00321:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00322:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00323:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00324:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
00325:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
00326:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_65;	
00327:      	if NZ	jmp LFB78B58C_65
            ; //	goto	LFB78B58C_63;			
00328:      	jmp	LFB78B58C_63
            ; //LFB78B58C_65:;					
            LFB78B58C_65:
            ; //	
            ; //_A523506CC_180:;				
            _A523506CC_180:
            ; //	sAX	= 0x0000;			
00329:      	AX	= 0x00
            ; //_A523506CC_181:;				
            _A523506CC_181:
            ; //	asm	rm[I0++] = AX			
0032A:      	rm[I0++] = AX
            ; //	goto LFB78B58C_64;			
0032B:      	jmp	LFB78B58C_64
            ; //LFB78B58C_63:;					
            LFB78B58C_63:
            ; //_A523506CC_182:;				
            _A523506CC_182:
            ; //_A523506CC_183:;				
            _A523506CC_183:
            ; //	get_I0();				
0032C:      	push	I0
0032D:      	pop	AX
            ; //	asm I1 = PCMYIN_PTR+0;			
0032E:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
0032F:      	rm[I1]	= AX
            ; //_A523506CC_184:;				
            _A523506CC_184:
            ; //	asm	pop CBL				
00330:      	pop CBL
            ; //LFB78B58C_62:;					
            LFB78B58C_62:
            ; //_A523506CC_185:;				
            _A523506CC_185:
            ; //	return;					
00331:      	AR	= 1
00332:      	BP	+= AR
00333:      	pop	AR
00334:      	rm[BP_SAVE]	= AR
00335:      	rets
            ; //_Sub3ZeroFillABFF23AA_end:;			
            _Sub3ZeroFillABFF23AA_end:
            ; //_A523506CC_186:;				
            _A523506CC_186:
            ; //}
            ; //
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1)
            _Sub3Play422CAD6D:
            ; //{						
00336:      	AR	= rm[BP_SAVE]
00337:      	push	AR
00338:      	AR	= BP
00339:      	rm[BP_SAVE]	= AR
            ; //_A523506CC_187:;				
            _A523506CC_187:
            ; //	
            ; //_A523506CC_188:;				
            _A523506CC_188:
            ; //	sSI	= (int)&_sdata_0_4_0;		
0033A:      	AR	= 2
0033B:      	I1	= rm[BP_SAVE]
0033C:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI++;		
0033D:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
0033E:      	DX	= rm[I1--]
            ; //	asm I1 = bts_ch0_get_ix+0;		
0033F:      	I1 = bts_ch0_get_ix+0//
            ; //	sfx_STORSILONG();			
00340:      	rm[I1++]	= AX
00341:      	rm[I1--]	= DX
            ; //_A523506CC_189:;				
            _A523506CC_189:
            ; //_A523506CC_190:;				
            _A523506CC_190:
            ; //	_Sub3Initial96BE24F3();			
00342:      	pch	= _Sub3Initial96BE24F3
00343:      	lcall	_Sub3Initial96BE24F3
            ; //_A523506CC_191:;				
            _A523506CC_191:
            ; //	asm AX = SUBFLTI+0;			
00344:      	AX = SUBFLTI+0//
            ; //	PUSH(sAX);				
00345:      	push	AX
            ; //	sAX	= 0x0000;			
00346:      	AX	= 0x00
            ; //	sSI	= POP();			
00347:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00348:      	rm[I1]	= AX
            ; //_A523506CC_192:;				
            _A523506CC_192:
            ; //	asm AX = SUBFLTI+1;			
00349:      	AX = SUBFLTI+1//
            ; //	PUSH(sAX);				
0034A:      	push	AX
            ; //	sAX	= 0x0000;			
0034B:      	AX	= 0x00
            ; //	sSI	= POP();			
0034C:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
0034D:      	rm[I1]	= AX
            ; //_A523506CC_193:;				
            _A523506CC_193:
            ; //	asm AX = SUBFLTI+2;			
0034E:      	AX = SUBFLTI+2//
            ; //	PUSH(sAX);				
0034F:      	push	AX
            ; //	sAX	= 0x0000;			
00350:      	AX	= 0x00
            ; //	sSI	= POP();			
00351:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00352:      	rm[I1]	= AX
            ; //_A523506CC_194:;				
            _A523506CC_194:
            ; //	asm AX = SUBFLTI+3;			
00353:      	AX = SUBFLTI+3//
            ; //	PUSH(sAX);				
00354:      	push	AX
            ; //	sAX	= 0x0000;			
00355:      	AX	= 0x00
            ; //	sSI	= POP();			
00356:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00357:      	rm[I1]	= AX
            ; //_A523506CC_195:;				
            _A523506CC_195:
            ; //	sAX	= 0x0000;			
00358:      	AX	= 0x00
            ; //	asm I1 = SUBFLTA+0;			
00359:      	I1 = SUBFLTA+0//
            ; //	*(__int16*)sSI	= sAX			
0035A:      	rm[I1]	= AX
            ; //_A523506CC_196:;				
            _A523506CC_196:
            ; //	asm I1 = SampleCh0Rate+0;		
0035B:      	I1 = SampleCh0Rate+0//
            ; //	sAX	= *(__int16*)sSI;		
0035C:      	AX	= rm[I1]
            ; //	asm I1 = SUBFLTP+0;			
0035D:      	I1 = SUBFLTP+0//
            ; //	*(__int16*)sSI	= sAX			
0035E:      	rm[I1]	= AX
            ; //_A523506CC_197:;				
            _A523506CC_197:
            ; //	sAX	= 0x003F;			
0035F:      	AX	= 0x3F
            ; //	asm I1 = SUBFLTG+0;			
00360:      	I1 = SUBFLTG+0//
            ; //	*(__int16*)sSI	= sAX			
00361:      	rm[I1]	= AX
            ; //_A523506CC_198:;				
            _A523506CC_198:
            ; //	asm	set io[INTENA].b0		
00362:      	set io[INTENA].b0
            ; //_A523506CC_199:;				
            _A523506CC_199:
            ; //	asm	eni				
00363:      	eni
            ; //LFB78B58C_66:;					
            LFB78B58C_66:
            ; //_A523506CC_200:;				
            _A523506CC_200:
            ; //	return;					
00364:      	pop	AR
00365:      	rm[BP_SAVE]	= AR
00366:      	rets
            ; //_Sub3Play422CAD6D_end:;				
            _Sub3Play422CAD6D_end:
            ; //_A523506CC_201:;				
            _A523506CC_201:
            ; //}
            ; //
            ; //naked rjmp void Sbb_Ch0GetBts()			
            Sbb_Ch0GetBts:
            ; //{
            ; //_A523506CC_202:;				
            _A523506CC_202:
            ; //_A523506CC_203:;				
            _A523506CC_203:
            ; //	asm	push I1				
00367:      	push I1
            ; //_A523506CC_204:;				
            _A523506CC_204:
            ; //	asm	push P1				
00368:      	push P1
            ; //_A523506CC_205:;				
            _A523506CC_205:
            ; //	asm	push AX				
00369:      	push AX
            ; //_A523506CC_206:;				
            _A523506CC_206:
            ; //	asm	push BX				
0036A:      	push BX
            ; //_A523506CC_207:;				
            _A523506CC_207:
            ; //	asm	push CX				
0036B:      	push CX
            ; //_A523506CC_208:;				
            _A523506CC_208:
            ; //	asm	push DX				
0036C:      	push DX
            ; //_A523506CC_209:;				
            _A523506CC_209:
            ; //	asm	AR = P1.hh			
0036D:      	AR = P1.hh
            ; //_A523506CC_210:;				
            _A523506CC_210:
            ; //	asm	push AR				
0036E:      	push AR
            ; //	
            ; //_A523506CC_211:;				
            _A523506CC_211:
            ; //_A523506CC_212:;				
            _A523506CC_212:
            ; //_A523506CC_213:;				
            _A523506CC_213:
            ; //	asm I1 = bts_ch0_get_ix+0;		
0036F:      	I1 = bts_ch0_get_ix+0//
            ; //	sAX	= *(__int16*)sSI++;		
00370:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00371:      	DX	= rm[I1--]
            ; //	sSI	= (int)&bts_ch0_get_ix[0];	
00372:      	I1	= bts_ch0_get_ix
            ; //	PUSH(sAX);				
00373:      	push	AX
            ; //	PUSH(sDX);				
00374:      	push	DX
            ; //	sfx_GETSILONG_BXCX();			
00375:      	CX	= rm[I1++]
00376:      	BX	= rm[I1--]
            ; //	sAX = 0x0001;				
00377:      	AX	= 0x01
            ; //	sDX = 0x0000;				
00378:      	DX	= 0x00
            ; //	sfx_ADDLONG_BXCX_DXAX();		
00379:      	AR	= AX
0037A:      	CX	= CX + AR
0037B:      	AR	= DX
0037C:      	BX	= BX + AR + C
            ; //	sfx_STORSILONG_BXCX();			
0037D:      	rm[I1++]	= CX
0037E:      	rm[I1--]	= BX
            ; //	sDX	= POP();			
0037F:      	pop	DX
            ; //	sAX	= POP();			
00380:      	pop	AX
            ; //	_lptr_read(STACK[sSP + 0], STACK[sSP + 1]);
00381:      	pch	= _lptr_read
00382:      	lcall	_lptr_read
            ; //	vXCHG(STACK[sSP + 0]);			
00383:      	AR	= AX
00384:      	AX	= xchg AR
            ; //_A523506CC_214:;				
            _A523506CC_214:
            ; //	asm	pop AR				
00385:      	pop AR
            ; //_A523506CC_215:;				
            _A523506CC_215:
            ; //	asm	P1.hh = AR			
00386:      	P1.hh = AR
            ; //_A523506CC_216:;				
            _A523506CC_216:
            ; //	asm	AR = AX				
00387:      	AR = AX
            ; //	
            ; //_A523506CC_217:;				
            _A523506CC_217:
            ; //	asm	pop DX				
00388:      	pop DX
            ; //_A523506CC_218:;				
            _A523506CC_218:
            ; //	asm	pop CX				
00389:      	pop CX
            ; //_A523506CC_219:;				
            _A523506CC_219:
            ; //	asm	pop BX				
0038A:      	pop BX
            ; //_A523506CC_220:;				
            _A523506CC_220:
            ; //	asm	pop AX				
0038B:      	pop AX
            ; //_A523506CC_221:;				
            _A523506CC_221:
            ; //	asm	pop P1				
0038C:      	pop P1
            ; //_A523506CC_222:;				
            _A523506CC_222:
            ; //	asm	pop I1				
0038D:      	pop I1
            ; //LFB78B58C_67:;					
            LFB78B58C_67:
            ; //_A523506CC_223:;				
            _A523506CC_223:
            ; //	return;					
0038E:      	rets
            ; //Sbb_Ch0GetBts_end:;				
            Sbb_Ch0GetBts_end:
            ; //_A523506CC_224:;				
            _A523506CC_224:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3play_8ED4FA41_s(void)	
            ginit_code_sub3play_8ED4FA41_s:
            ; //{
            ; //	return;					
0038F:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> End=========================
            
            ;=========================Include <ASMFUNC\SUPPORT.ASM> Start=========================
            Pwm_process:    
00390:      		CLR             IO[INTREQ].B0                                                 
00391:                      push            i0                              
00392:                      push            cx                              
00393:                      push            CBL                             
00394:                      ar              = 9                             ; 
00395:                      CBL             = ar                            ; 
            //---------------------
00396:                      cx              = 0x3                           ; 
00397:                      i0              = rm[PCMYOU_PTR]                ; 
            L_dac_fill_lp:                                                  
00398:                      jfa             L_filter_out                    // check filter buffer availed
00399:                      FLTI            = rm[i0++]                      ;   // filter in
            L_filter_out:                                                   
0039A:                      ar              = FLTO                          ;   // get filter out, and start delay 4 cycles to get next filter out
0039B:                      io[DACL]        = ar                            // output PWM DAC
0039C:                      nop                                             
0039D:                      loop            L_dac_fill_lp                   
            
0039E:                      rm[PCMYOU_PTR]  = i0                            // restore index
0039F:                      pop             CBL                             
003A0:                      pop             cx                              
003A1:                      pop             i0                            
                            
003A2:                      RETI  
            Pwm_process_end: 
            ///////////////////////////////////////////////////////////////////////////////////////////////
            F_ChangePWMVectTabletobank2:                                            
            // eable int-vector table access		
003A3:                      set             io[STATUS].b13 
003A4:                      i1		= PCMY                 
003A6:                      cx		= 4
            F_ChangePWMVectTabletobank2_lp:                            
003A7:      		ar              = io[0x3]                      ; 
003A8:                      rm[i1++]        = ar                           ;	// Int5~0         
003A9:      		ar		= pcb 
003AA:                      rm[i1++]        = ar                           ;	// Int5~0 pcb    
003AB:                      loop            F_ChangePWMVectTabletobank2_lp          
             		//pwm to bank2         
             		; ar              = 0x039c                       ; 	// pwm addr .. ;0~0x039b has used by subband 2 
                            ; rm[i1++]        = ar                           ;	// Int5~0
             		; ar		= RAMBANK 
                            ; rm[i1++]        = ar                           ;	// Int5~0 pcb 		
003AC:       		ar              = #PWM_process                       ; 	// pwm addr .. ;0~0x039b has used by subband 2 
003AE:                      rm[i1++]        = ar                           ;	// Int5~0
003AF:       		ar		= 0 
003B0:                      rm[i1++]        = ar                           ;	// Int5~0 pcb 		
            		
003B1:                      clr             io[STATUS].b13 
                            
003B2:                      set             io[STATUS].b13 
003B3:                      i1		= PCMY 
                            //write new int-vector	
003B5:      		cx		= 5
            F_ChangePWMVectTabletobank2_lp2:                 
003B6:      		ax		= rm[i1++]  
003B7:      		ar		= rm[i1++] 
003B8:      		pcb		= ar     
003B9:      		ar		= ax 
003BA:      		io[0x3]		= ar 	
003BB:      		pcb		= 0 	
003BC:                      loop            F_ChangePWMVectTabletobank2_lp2  
                                            
                            // Dis-int-vector table access
003BD:                      clr             io[STATUS].b13   
                            
                            ; p1 =		0x039c                
                            ; p0		= #Pwm_process
            		; ar		= #Pwm_process_end	
            		; pch=		MoveProgToBank2
            		; lcall		MoveProgToBank2
003BE:      		p1.hh		= 0 
            		               
003BF:                      rets                                            
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            MoveProgToBank2:	
003C0:      		CBL		= 0 	
003C1:      		p1.hh=		7	
003C2:      		p0.hh		= 0		
003C3:      		ar		= ar - p0 
003C4:      		cx		= ar
003C5:      		cx-- 
            	MoveProgToBank2_Loop:	
003C6:      		ar		= pm[p0++]
003C7:      		pm[p1++]	= ar	
003C8:      		loop		MoveProgToBank2_Loop
003C9:      		p1		= 0		
003CA:      		rets
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <ASMFUNC\SUPPORT.ASM> End=========================
            
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> Start=========================
            ; WS2811.c Code Start!!;
            VarRM[0:4095]={
             LD63FD439_68,LD63FD439_125,_LED_Buf98A4A35A[20],_sum6BC8EB73,LD63FD439_81 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4);
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6);
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8);
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6);
            ; //void _WS_RefreshAD7B99B1();
            ; //void _WS_Key_RGBC5B96B6D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4)	
            _WS_Send24bits851C5C55:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
003CB:      	AR	= rm[BP_SAVE]
003CC:      	push	AR
003CD:      	AR	= BP
003CE:      	rm[BP_SAVE]	= AR
003CF:      	AR	 = -1
003D0:      	BP	+= AR
            ; //_A523506CC_225:;				
            _A523506CC_225:
            ; //_A523506CC_226:;				
            _A523506CC_226:
            ; //	_i_1_2+0	= 0x00;			
003D1:      	I1	= rm[BP_SAVE]
003D2:      	AR	= 0x00
003D3:      	rm[I1]	= AR
            ; //LD63FD439_71:;					
            LD63FD439_71:
            ; //	sSI	= (int)&_i_1_2;			
003D4:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
003D5:      	AX	= rm[I1]
            ; //	sCX	= 0x0018;			
003D6:      	CX	= 0x18
            ; //	sfx_CMP_AX_CX_JB();			
003D7:      	pch	= sfx_CMP_AX_CX_JB
003D8:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_75;	
003D9:      	if ZR	jmp LD63FD439_75
            ; //	goto	LD63FD439_73;			
003DA:      	pch =	LD63FD439_73
003DB:      	ljmp	LD63FD439_73
            ; //LD63FD439_75:;					
            LD63FD439_75:
            ; //	goto LD63FD439_72;			
003DC:      	pch =	LD63FD439_72
003DD:      	ljmp	LD63FD439_72
            ; //LD63FD439_74:;					
            LD63FD439_74:
            ; //	sSI	= (int)&_i_1_2;			
003DE:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
003DF:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
003E0:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
003E1:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
003E2:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
003E3:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_71;			
003E4:      	pch =	LD63FD439_71
003E5:      	ljmp	LD63FD439_71
            ; //LD63FD439_72:;					
            LD63FD439_72:
            ; //	
            ; //_A523506CC_227:;				
            _A523506CC_227:
            ; //	sSI	= (int)&_color_0_4;		
003E6:      	AR	= 2
003E7:      	I1	= rm[BP_SAVE]
003E8:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
003E9:      	AX	= rm[I1]
            ; //	asm AR = 0x0000;			
003EA:      	AR = 0x0000//
            ; //	asm AX = AX & AR;			
003EB:      	AX = AX & AR//
            ; //	sfx_CHECKZERO();			
003EC:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_77;	
003ED:      	if NZ	jmp LD63FD439_77
            ; //	goto	LD63FD439_76;			
003EE:      	pch =	LD63FD439_76
003EF:      	ljmp	LD63FD439_76
            ; //LD63FD439_77:;					
            LD63FD439_77:
            ; //	
            ; //_A523506CC_228:;				
            _A523506CC_228:
            ; //	asm set io[0x09].b14;			
003F0:      	set io[0x09].b14//
            ; //_A523506CC_229:;				
            _A523506CC_229:
            ; //	asm	nop				
003F1:      	nop
            ; //_A523506CC_230:;				
            _A523506CC_230:
            ; //	asm	nop				
003F2:      	nop
            ; //_A523506CC_231:;				
            _A523506CC_231:
            ; //	asm	nop				
003F3:      	nop
            ; //_A523506CC_232:;				
            _A523506CC_232:
            ; //	asm	nop				
003F4:      	nop
            ; //_A523506CC_233:;				
            _A523506CC_233:
            ; //	asm	nop				
003F5:      	nop
            ; //_A523506CC_234:;				
            _A523506CC_234:
            ; //	asm	nop				
003F6:      	nop
            ; //_A523506CC_235:;				
            _A523506CC_235:
            ; //	asm	nop				
003F7:      	nop
            ; //_A523506CC_236:;				
            _A523506CC_236:
            ; //	asm	nop				
003F8:      	nop
            ; //_A523506CC_237:;				
            _A523506CC_237:
            ; //	asm	nop				
003F9:      	nop
            ; //_A523506CC_238:;				
            _A523506CC_238:
            ; //	asm	nop				
003FA:      	nop
            ; //_A523506CC_239:;				
            _A523506CC_239:
            ; //	asm	nop				
003FB:      	nop
            ; //_A523506CC_240:;				
            _A523506CC_240:
            ; //	asm	nop				
003FC:      	nop
            ; //_A523506CC_241:;				
            _A523506CC_241:
            ; //	asm clr io[0x09].b14;			
003FD:      	clr io[0x09].b14//
            ; //_A523506CC_242:;				
            _A523506CC_242:
            ; //	asm	nop				
003FE:      	nop
            ; //_A523506CC_243:;				
            _A523506CC_243:
            ; //	asm	nop				
003FF:      	nop
            ; //_A523506CC_244:;				
            _A523506CC_244:
            ; //	asm	nop				
00400:      	nop
            ; //	goto LD63FD439_78;			
00401:      	pch =	LD63FD439_78
00402:      	ljmp	LD63FD439_78
            ; //LD63FD439_76:;					
            LD63FD439_76:
            ; //_A523506CC_245:;				
            _A523506CC_245:
            ; //	asm set io[0x09].b14;			
00403:      	set io[0x09].b14//
            ; //LD63FD439_78:;					
            LD63FD439_78:
            ; //_A523506CC_246:;				
            _A523506CC_246:
            ; //_A523506CC_247:;				
            _A523506CC_247:
            ; //	asm	nop				
00404:      	nop
            ; //_A523506CC_248:;				
            _A523506CC_248:
            ; //	asm	nop				
00405:      	nop
            ; //_A523506CC_249:;				
            _A523506CC_249:
            ; //	asm	nop				
00406:      	nop
            ; //_A523506CC_250:;				
            _A523506CC_250:
            ; //	asm clr io[0x09].b14;			
00407:      	clr io[0x09].b14//
            ; //_A523506CC_251:;				
            _A523506CC_251:
            ; //	asm	nop				
00408:      	nop
            ; //_A523506CC_252:;				
            _A523506CC_252:
            ; //	asm	nop				
00409:      	nop
            ; //_A523506CC_253:;				
            _A523506CC_253:
            ; //	asm	nop				
0040A:      	nop
            ; //_A523506CC_254:;				
            _A523506CC_254:
            ; //	asm	nop				
0040B:      	nop
            ; //_A523506CC_255:;				
            _A523506CC_255:
            ; //	asm	nop				
0040C:      	nop
            ; //_A523506CC_256:;				
            _A523506CC_256:
            ; //	asm	nop				
0040D:      	nop
            ; //_A523506CC_257:;				
            _A523506CC_257:
            ; //	asm	nop				
0040E:      	nop
            ; //_A523506CC_258:;				
            _A523506CC_258:
            ; //	asm	nop				
0040F:      	nop
            ; //_A523506CC_259:;				
            _A523506CC_259:
            ; //	asm	nop				
00410:      	nop
            ; //_A523506CC_260:;				
            _A523506CC_260:
            ; //	asm	nop				
00411:      	nop
            ; //_A523506CC_261:;				
            _A523506CC_261:
            ; //	asm	nop				
00412:      	nop
            ; //_A523506CC_262:;				
            _A523506CC_262:
            ; //	asm	nop				
00413:      	nop
            ; //_A523506CC_263:;				
            _A523506CC_263:
            ; //	sSI	= (int)&_color_0_4;		
00414:      	AR	= 2
00415:      	I1	= rm[BP_SAVE]
00416:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00417:      	AX	= rm[I1]
            ; //	asm slz AX, 1;				
00418:      	slz AX, 1//
            ; //	sSI	= (int)&_color_0_4;		
00419:      	AR	= 2
0041A:      	I1	= rm[BP_SAVE]
0041B:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
0041C:      	rm[I1]	= AX
            ; //	goto LD63FD439_74;			
0041D:      	pch =	LD63FD439_74
0041E:      	ljmp	LD63FD439_74
            ; //LD63FD439_73:;					
            LD63FD439_73:
            ; //_A523506CC_264:;				
            _A523506CC_264:
            ; //LD63FD439_70:;					
            LD63FD439_70:
            ; //_A523506CC_265:;				
            _A523506CC_265:
            ; //	return;					
0041F:      	AR	= 1
00420:      	BP	+= AR
00421:      	pop	AR
00422:      	rm[BP_SAVE]	= AR
00423:      	rets
            ; //_WS_Send24bits851C5C55_end:;			
            _WS_Send24bits851C5C55_end:
            ; //_A523506CC_266:;				
            _A523506CC_266:
            ; //}
            ; //
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6)
            _WS_Color_copyADB1DFED:
            ; //{						
00424:      	AR	= rm[BP_SAVE]
00425:      	push	AR
00426:      	AR	= BP
00427:      	rm[BP_SAVE]	= AR
            ; //_A523506CC_267:;				
            _A523506CC_267:
            ; //	
            ; //_A523506CC_268:;				
            _A523506CC_268:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00428:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00429:      	push	AX
            ; //	sSI	= (int)&_No_0_4;		
0042A:      	AR	= 2
0042B:      	I1	= rm[BP_SAVE]
0042C:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0042D:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
0042E:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
0042F:      	pch	= sfx_IMUL_AX_CX
00430:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00431:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00432:      	AR	= CX
00433:      	AX	+= AR
            ; //	PUSH(sAX);				
00434:      	push	AX
            ; //	sSI	= (int)&_color_0_6;		
00435:      	AR	= 3
00436:      	I1	= rm[BP_SAVE]
00437:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00438:      	AX	= rm[I1]
            ; //	sfx_UINT2ULONG_AX();			
00439:      	DX	= 0
            ; //	sSI	= POP();			
0043A:      	pop	I1
            ; //	sfx_STORSILONG();			
0043B:      	rm[I1++]	= AX
0043C:      	rm[I1--]	= DX
            ; //LD63FD439_79:;					
            LD63FD439_79:
            ; //_A523506CC_269:;				
            _A523506CC_269:
            ; //	return;					
0043D:      	pop	AR
0043E:      	rm[BP_SAVE]	= AR
0043F:      	rets
            ; //_WS_Color_copyADB1DFED_end:;			
            _WS_Color_copyADB1DFED_end:
            ; //_A523506CC_270:;				
            _A523506CC_270:
            ; //}
            ; //
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8)
            _WS_ColorSet_LEDCA3DEB8C:
            ; //{						
00440:      	AR	= rm[BP_SAVE]
00441:      	push	AR
00442:      	AR	= BP
00443:      	rm[BP_SAVE]	= AR
            ; //_A523506CC_271:;				
            _A523506CC_271:
            ; //	
            ; //_A523506CC_272:;				
            _A523506CC_272:
            ; //	sSI	= (int)&_to_0_6;		
00444:      	AR	= 3
00445:      	I1	= rm[BP_SAVE]
00446:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00447:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00448:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00449:      	pch	= sfx_CMP_AX_CX_JBE
0044A:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_83;	
0044B:      	if ZR	jmp LD63FD439_83
            ; //	sAX	= 1;				
0044C:      	AX	= 0x01
            ; //	goto	LD63FD439_84;			
0044D:      	pch =	LD63FD439_84
0044E:      	ljmp	LD63FD439_84
            ; //LD63FD439_83:;					
            LD63FD439_83:
            ; //	sAX	= 0;				
0044F:      	AX	= 0x00
            ; //LD63FD439_84:;					
            LD63FD439_84:
            ; //	sfx_CHECKZERO();			
00450:      	AR	= AX
            ; //	if(__jz__)	goto LD63FD439_85;	
00451:      	if ZR	jmp LD63FD439_85
            ; //	goto	LD63FD439_82;			
00452:      	pch =	LD63FD439_82
00453:      	ljmp	LD63FD439_82
            ; //LD63FD439_85:;					
            LD63FD439_85:
            ; //	sSI	= (int)&_from_0_4;		
00454:      	AR	= 2
00455:      	I1	= rm[BP_SAVE]
00456:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00457:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
00458:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JAE();			
00459:      	pch	= sfx_CMP_AX_CX_JAE
0045A:      	lcall	sfx_CMP_AX_CX_JAE
            ; //	if(__je__)	goto LD63FD439_86;	
0045B:      	if ZR	jmp LD63FD439_86
            ; //	sAX	= 1;				
0045C:      	AX	= 0x01
            ; //	goto	LD63FD439_87;			
0045D:      	pch =	LD63FD439_87
0045E:      	ljmp	LD63FD439_87
            ; //LD63FD439_86:;					
            LD63FD439_86:
            ; //	sAX	= 0;				
0045F:      	AX	= 0x00
            ; //LD63FD439_87:;					
            LD63FD439_87:
            ; //LD63FD439_82:;					
            LD63FD439_82:
            ; //	sfx_CHECKZERO();			
00460:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_89;	
00461:      	if NZ	jmp LD63FD439_89
            ; //	goto	LD63FD439_88;			
00462:      	pch =	LD63FD439_88
00463:      	ljmp	LD63FD439_88
            ; //LD63FD439_89:;					
            LD63FD439_89:
            ; //	
            ; //_A523506CC_273:;				
            _A523506CC_273:
            ; //	_to_0_6+0	= 0x03;			
00464:      	AR	= 3
00465:      	I1	= rm[BP_SAVE]
00466:      	I1	+= AR
00467:      	AR	= 0x03
00468:      	rm[I1]	= AR
            ; //_A523506CC_274:;				
            _A523506CC_274:
            ; //	_from_0_4+0	= 0x00;			
00469:      	AR	= 2
0046A:      	I1	= rm[BP_SAVE]
0046B:      	I1	+= AR
0046C:      	AR	= 0x00
0046D:      	rm[I1]	= AR
            ; //LD63FD439_88:;					
            LD63FD439_88:
            ; //_A523506CC_275:;				
            _A523506CC_275:
            ; //_A523506CC_276:;				
            _A523506CC_276:
            ; //	sAX	= 0xFFFF;			
0046E:      	AX	= 0xFFFF
            ; //	sSI	= (int)&_color_0_8;		
00470:      	AR	= 4
00471:      	I1	= rm[BP_SAVE]
00472:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
00473:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
00474:      	AR	= CX
00475:      	AX	&= AR
            ; //	sSI	= (int)&_color_0_8;		
00476:      	AR	= 4
00477:      	I1	= rm[BP_SAVE]
00478:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00479:      	rm[I1]	= AX
            ; //_A523506CC_277:;				
            _A523506CC_277:
            ; //	sSI	= (int)&_from_0_4;		
0047A:      	AR	= 2
0047B:      	I1	= rm[BP_SAVE]
0047C:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0047D:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
0047E:      	AR	= 3
0047F:      	I1	= rm[BP_SAVE]
00480:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
00481:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JA();			
00482:      	pch	= sfx_CMP_AX_CX_JA
00483:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_91;	
00484:      	if ZR	jmp LD63FD439_91
            ; //	goto	LD63FD439_90;			
00485:      	pch =	LD63FD439_90
00486:      	ljmp	LD63FD439_90
            ; //LD63FD439_91:;					
            LD63FD439_91:
            ; //	
            ; //_A523506CC_278:;				
            _A523506CC_278:
            ; //	sSI	= (int)&_from_0_4;		
00487:      	AR	= 2
00488:      	I1	= rm[BP_SAVE]
00489:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0048A:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_81;		
0048B:      	I1	= LD63FD439_81
            ; //	*(__int16*)sSI	= sAX			
0048C:      	rm[I1]	= AX
            ; //_A523506CC_279:;				
            _A523506CC_279:
            ; //	sSI	= (int)&_to_0_6;		
0048D:      	AR	= 3
0048E:      	I1	= rm[BP_SAVE]
0048F:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00490:      	AX	= rm[I1]
            ; //	sSI	= (int)&_from_0_4;		
00491:      	AR	= 2
00492:      	I1	= rm[BP_SAVE]
00493:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00494:      	rm[I1]	= AX
            ; //_A523506CC_280:;				
            _A523506CC_280:
            ; //	asm I1 = LD63FD439_81+0;		
00495:      	I1 = LD63FD439_81+0//
            ; //	sAX	= *(__int16*)sSI;		
00496:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
00497:      	AR	= 3
00498:      	I1	= rm[BP_SAVE]
00499:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
0049A:      	rm[I1]	= AX
            ; //LD63FD439_90:;					
            LD63FD439_90:
            ; //_A523506CC_281:;				
            _A523506CC_281:
            ; //_A523506CC_282:;				
            _A523506CC_282:
            ; //	sSI	= (int)&_from_0_4;		
0049B:      	AR	= 2
0049C:      	I1	= rm[BP_SAVE]
0049D:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0049E:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_81;		
0049F:      	I1	= LD63FD439_81
            ; //	*(__int16*)sSI	= sAX			
004A0:      	rm[I1]	= AX
            ; //LD63FD439_92:;					
            LD63FD439_92:
            ; //	asm I1 = LD63FD439_81+0;		
004A1:      	I1 = LD63FD439_81+0//
            ; //	sAX	= *(__int16*)sSI;		
004A2:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
004A3:      	AR	= 3
004A4:      	I1	= rm[BP_SAVE]
004A5:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
004A6:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JLE();			
004A7:      	pch	= sfx_CMP_AX_CX_JLE
004A8:      	lcall	sfx_CMP_AX_CX_JLE
            ; //	if(__je__)	goto LD63FD439_96;	
004A9:      	if ZR	jmp LD63FD439_96
            ; //	goto	LD63FD439_94;			
004AA:      	pch =	LD63FD439_94
004AB:      	ljmp	LD63FD439_94
            ; //LD63FD439_96:;					
            LD63FD439_96:
            ; //	goto LD63FD439_93;			
004AC:      	pch =	LD63FD439_93
004AD:      	ljmp	LD63FD439_93
            ; //LD63FD439_95:;					
            LD63FD439_95:
            ; //	asm I1 = LD63FD439_81+0;		
004AE:      	I1 = LD63FD439_81+0//
            ; //	sAX	= *(__int16*)sSI;		
004AF:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_81;		
004B0:      	I1	= LD63FD439_81
            ; //	PUSH(sAX);				
004B1:      	push	AX
            ; //	sAX	= 0x0001;			
004B2:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
004B3:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
004B4:      	AR	= AX
004B5:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
004B6:      	rm[I1]	= CX
            ; //	sAX	= POP();			
004B7:      	pop	AX
            ; //	goto LD63FD439_92;			
004B8:      	pch =	LD63FD439_92
004B9:      	ljmp	LD63FD439_92
            ; //LD63FD439_93:;					
            LD63FD439_93:
            ; //	
            ; //_A523506CC_283:;				
            _A523506CC_283:
            ; //_A523506CC_284:;				
            _A523506CC_284:
            ; //	sSI	= (int)&_color_0_8;		
004BA:      	AR	= 4
004BB:      	I1	= rm[BP_SAVE]
004BC:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
004BD:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
004BE:      	push	AX
            ; //	asm I1 = LD63FD439_81+0;		
004BF:      	I1 = LD63FD439_81+0//
            ; //	sAX	= *(__int16*)sSI;		
004C0:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
004C1:      	push	AX
            ; //	_WS_Color_copyADB1DFED(STACK[sSP + 0], STACK[sSP + 1]);
004C2:      	pch	= _WS_Color_copyADB1DFED
004C3:      	lcall	_WS_Color_copyADB1DFED
            ; //	RESTORESP(2);				
004C4:      	pop	AR
004C5:      	pop	AR
            ; //	goto LD63FD439_95;			
004C6:      	pch =	LD63FD439_95
004C7:      	ljmp	LD63FD439_95
            ; //LD63FD439_94:;					
            LD63FD439_94:
            ; //_A523506CC_285:;				
            _A523506CC_285:
            ; //LD63FD439_80:;					
            LD63FD439_80:
            ; //_A523506CC_286:;				
            _A523506CC_286:
            ; //	return;					
004C8:      	pop	AR
004C9:      	rm[BP_SAVE]	= AR
004CA:      	rets
            ; //_WS_ColorSet_LEDCA3DEB8C_end:;			
            _WS_ColorSet_LEDCA3DEB8C_end:
            ; //_A523506CC_287:;				
            _A523506CC_287:
            ; //}
            ; //
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6)
            _WS_TRSF_color_setE1CC300C:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
004CB:      	AR	= rm[BP_SAVE]
004CC:      	push	AR
004CD:      	AR	= BP
004CE:      	rm[BP_SAVE]	= AR
004CF:      	AR	 = -1
004D0:      	BP	+= AR
            ; //_A523506CC_288:;				
            _A523506CC_288:
            ; //_A523506CC_289:;				
            _A523506CC_289:
            ; //	_i_1_2+0	= 0x00;			
004D1:      	I1	= rm[BP_SAVE]
004D2:      	AR	= 0x00
004D3:      	rm[I1]	= AR
            ; //LD63FD439_98:;					
            LD63FD439_98:
            ; //	sSI	= (int)&_i_1_2;			
004D4:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
004D5:      	AX	= rm[I1]
            ; //	sSI	= (int)&_Led_num_0_6;		
004D6:      	AR	= 3
004D7:      	I1	= rm[BP_SAVE]
004D8:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
004D9:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JB();			
004DA:      	pch	= sfx_CMP_AX_CX_JB
004DB:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_102;	
004DC:      	if ZR	jmp LD63FD439_102
            ; //	goto	LD63FD439_100;			
004DD:      	pch =	LD63FD439_100
004DE:      	ljmp	LD63FD439_100
            ; //LD63FD439_102:;					
            LD63FD439_102:
            ; //	goto LD63FD439_99;			
004DF:      	pch =	LD63FD439_99
004E0:      	ljmp	LD63FD439_99
            ; //LD63FD439_101:;					
            LD63FD439_101:
            ; //	sSI	= (int)&_i_1_2;			
004E1:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
004E2:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
004E3:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
004E4:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
004E5:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
004E6:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_98;			
004E7:      	pch =	LD63FD439_98
004E8:      	ljmp	LD63FD439_98
            ; //LD63FD439_99:;					
            LD63FD439_99:
            ; //	
            ; //_A523506CC_290:;				
            _A523506CC_290:
            ; //	sSI	= (int)&_color_0_4;		
004E9:      	AR	= 2
004EA:      	I1	= rm[BP_SAVE]
004EB:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
004EC:      	AX	= rm[I1]
            ; //	goto LD63FD439_104;			
004ED:      	pch =	LD63FD439_104
004EE:      	ljmp	LD63FD439_104
            ; //LD63FD439_105:;					
            LD63FD439_105:
            ; //_A523506CC_291:;				
            _A523506CC_291:
            ; //	asm set io[0x09].b14;			
004EF:      	set io[0x09].b14//
            ; //_A523506CC_292:;				
            _A523506CC_292:
            ; //	asm	nop				
004F0:      	nop
            ; //_A523506CC_293:;				
            _A523506CC_293:
            ; //	asm	nop				
004F1:      	nop
            ; //_A523506CC_294:;				
            _A523506CC_294:
            ; //	asm	nop				
004F2:      	nop
            ; //_A523506CC_295:;				
            _A523506CC_295:
            ; //	asm	nop				
004F3:      	nop
            ; //_A523506CC_296:;				
            _A523506CC_296:
            ; //	asm	nop				
004F4:      	nop
            ; //_A523506CC_297:;				
            _A523506CC_297:
            ; //	asm	nop				
004F5:      	nop
            ; //_A523506CC_298:;				
            _A523506CC_298:
            ; //	asm	nop				
004F6:      	nop
            ; //_A523506CC_299:;				
            _A523506CC_299:
            ; //	asm	nop				
004F7:      	nop
            ; //_A523506CC_300:;				
            _A523506CC_300:
            ; //	asm	nop				
004F8:      	nop
            ; //_A523506CC_301:;				
            _A523506CC_301:
            ; //	asm	nop				
004F9:      	nop
            ; //_A523506CC_302:;				
            _A523506CC_302:
            ; //	asm	nop				
004FA:      	nop
            ; //_A523506CC_303:;				
            _A523506CC_303:
            ; //	asm	nop				
004FB:      	nop
            ; //_A523506CC_304:;				
            _A523506CC_304:
            ; //	asm clr io[0x09].b14;			
004FC:      	clr io[0x09].b14//
            ; //_A523506CC_305:;				
            _A523506CC_305:
            ; //	asm	nop				
004FD:      	nop
            ; //_A523506CC_306:;				
            _A523506CC_306:
            ; //	asm	nop				
004FE:      	nop
            ; //_A523506CC_307:;				
            _A523506CC_307:
            ; //	asm	nop				
004FF:      	nop
            ; //_A523506CC_308:;				
            _A523506CC_308:
            ; //	asm set io[0x09].b14;			
00500:      	set io[0x09].b14//
            ; //_A523506CC_309:;				
            _A523506CC_309:
            ; //	asm	nop				
00501:      	nop
            ; //_A523506CC_310:;				
            _A523506CC_310:
            ; //	asm	nop				
00502:      	nop
            ; //_A523506CC_311:;				
            _A523506CC_311:
            ; //	asm	nop				
00503:      	nop
            ; //_A523506CC_312:;				
            _A523506CC_312:
            ; //	asm	nop				
00504:      	nop
            ; //_A523506CC_313:;				
            _A523506CC_313:
            ; //	asm	nop				
00505:      	nop
            ; //_A523506CC_314:;				
            _A523506CC_314:
            ; //	asm	nop				
00506:      	nop
            ; //_A523506CC_315:;				
            _A523506CC_315:
            ; //	asm	nop				
00507:      	nop
            ; //_A523506CC_316:;				
            _A523506CC_316:
            ; //	asm	nop				
00508:      	nop
            ; //_A523506CC_317:;				
            _A523506CC_317:
            ; //	asm	nop				
00509:      	nop
            ; //_A523506CC_318:;				
            _A523506CC_318:
            ; //	asm	nop				
0050A:      	nop
            ; //_A523506CC_319:;				
            _A523506CC_319:
            ; //	asm	nop				
0050B:      	nop
            ; //_A523506CC_320:;				
            _A523506CC_320:
            ; //	asm	nop				
0050C:      	nop
            ; //_A523506CC_321:;				
            _A523506CC_321:
            ; //	asm clr io[0x09].b14;			
0050D:      	clr io[0x09].b14//
            ; //_A523506CC_322:;				
            _A523506CC_322:
            ; //	asm	nop				
0050E:      	nop
            ; //_A523506CC_323:;				
            _A523506CC_323:
            ; //	asm	nop				
0050F:      	nop
            ; //_A523506CC_324:;				
            _A523506CC_324:
            ; //	asm	nop				
00510:      	nop
            ; //_A523506CC_325:;				
            _A523506CC_325:
            ; //	asm set io[0x09].b14;			
00511:      	set io[0x09].b14//
            ; //_A523506CC_326:;				
            _A523506CC_326:
            ; //	asm	nop				
00512:      	nop
            ; //_A523506CC_327:;				
            _A523506CC_327:
            ; //	asm	nop				
00513:      	nop
            ; //_A523506CC_328:;				
            _A523506CC_328:
            ; //	asm	nop				
00514:      	nop
            ; //_A523506CC_329:;				
            _A523506CC_329:
            ; //	asm	nop				
00515:      	nop
            ; //_A523506CC_330:;				
            _A523506CC_330:
            ; //	asm	nop				
00516:      	nop
            ; //_A523506CC_331:;				
            _A523506CC_331:
            ; //	asm	nop				
00517:      	nop
            ; //_A523506CC_332:;				
            _A523506CC_332:
            ; //	asm	nop				
00518:      	nop
            ; //_A523506CC_333:;				
            _A523506CC_333:
            ; //	asm	nop				
00519:      	nop
            ; //_A523506CC_334:;				
            _A523506CC_334:
            ; //	asm	nop				
0051A:      	nop
            ; //_A523506CC_335:;				
            _A523506CC_335:
            ; //	asm	nop				
0051B:      	nop
            ; //_A523506CC_336:;				
            _A523506CC_336:
            ; //	asm	nop				
0051C:      	nop
            ; //_A523506CC_337:;				
            _A523506CC_337:
            ; //	asm	nop				
0051D:      	nop
            ; //_A523506CC_338:;				
            _A523506CC_338:
            ; //	asm clr io[0x09].b14;			
0051E:      	clr io[0x09].b14//
            ; //_A523506CC_339:;				
            _A523506CC_339:
            ; //	asm	nop				
0051F:      	nop
            ; //_A523506CC_340:;				
            _A523506CC_340:
            ; //	asm	nop				
00520:      	nop
            ; //_A523506CC_341:;				
            _A523506CC_341:
            ; //	asm	nop				
00521:      	nop
            ; //_A523506CC_342:;				
            _A523506CC_342:
            ; //	asm set io[0x09].b14;			
00522:      	set io[0x09].b14//
            ; //_A523506CC_343:;				
            _A523506CC_343:
            ; //	asm	nop				
00523:      	nop
            ; //_A523506CC_344:;				
            _A523506CC_344:
            ; //	asm	nop				
00524:      	nop
            ; //_A523506CC_345:;				
            _A523506CC_345:
            ; //	asm	nop				
00525:      	nop
            ; //_A523506CC_346:;				
            _A523506CC_346:
            ; //	asm	nop				
00526:      	nop
            ; //_A523506CC_347:;				
            _A523506CC_347:
            ; //	asm	nop				
00527:      	nop
            ; //_A523506CC_348:;				
            _A523506CC_348:
            ; //	asm	nop				
00528:      	nop
            ; //_A523506CC_349:;				
            _A523506CC_349:
            ; //	asm	nop				
00529:      	nop
            ; //_A523506CC_350:;				
            _A523506CC_350:
            ; //	asm	nop				
0052A:      	nop
            ; //_A523506CC_351:;				
            _A523506CC_351:
            ; //	asm	nop				
0052B:      	nop
            ; //_A523506CC_352:;				
            _A523506CC_352:
            ; //	asm	nop				
0052C:      	nop
            ; //_A523506CC_353:;				
            _A523506CC_353:
            ; //	asm	nop				
0052D:      	nop
            ; //_A523506CC_354:;				
            _A523506CC_354:
            ; //	asm	nop				
0052E:      	nop
            ; //_A523506CC_355:;				
            _A523506CC_355:
            ; //	asm clr io[0x09].b14;			
0052F:      	clr io[0x09].b14//
            ; //_A523506CC_356:;				
            _A523506CC_356:
            ; //	asm	nop				
00530:      	nop
            ; //_A523506CC_357:;				
            _A523506CC_357:
            ; //	asm	nop				
00531:      	nop
            ; //_A523506CC_358:;				
            _A523506CC_358:
            ; //	asm	nop				
00532:      	nop
            ; //_A523506CC_359:;				
            _A523506CC_359:
            ; //	asm set io[0x09].b14;			
00533:      	set io[0x09].b14//
            ; //_A523506CC_360:;				
            _A523506CC_360:
            ; //	asm	nop				
00534:      	nop
            ; //_A523506CC_361:;				
            _A523506CC_361:
            ; //	asm	nop				
00535:      	nop
            ; //_A523506CC_362:;				
            _A523506CC_362:
            ; //	asm	nop				
00536:      	nop
            ; //_A523506CC_363:;				
            _A523506CC_363:
            ; //	asm	nop				
00537:      	nop
            ; //_A523506CC_364:;				
            _A523506CC_364:
            ; //	asm	nop				
00538:      	nop
            ; //_A523506CC_365:;				
            _A523506CC_365:
            ; //	asm	nop				
00539:      	nop
            ; //_A523506CC_366:;				
            _A523506CC_366:
            ; //	asm	nop				
0053A:      	nop
            ; //_A523506CC_367:;				
            _A523506CC_367:
            ; //	asm	nop				
0053B:      	nop
            ; //_A523506CC_368:;				
            _A523506CC_368:
            ; //	asm	nop				
0053C:      	nop
            ; //_A523506CC_369:;				
            _A523506CC_369:
            ; //	asm	nop				
0053D:      	nop
            ; //_A523506CC_370:;				
            _A523506CC_370:
            ; //	asm	nop				
0053E:      	nop
            ; //_A523506CC_371:;				
            _A523506CC_371:
            ; //	asm	nop				
0053F:      	nop
            ; //_A523506CC_372:;				
            _A523506CC_372:
            ; //	asm clr io[0x09].b14;			
00540:      	clr io[0x09].b14//
            ; //_A523506CC_373:;				
            _A523506CC_373:
            ; //	asm	nop				
00541:      	nop
            ; //_A523506CC_374:;				
            _A523506CC_374:
            ; //	asm	nop				
00542:      	nop
            ; //_A523506CC_375:;				
            _A523506CC_375:
            ; //	asm	nop				
00543:      	nop
            ; //_A523506CC_376:;				
            _A523506CC_376:
            ; //	asm set io[0x09].b14;			
00544:      	set io[0x09].b14//
            ; //_A523506CC_377:;				
            _A523506CC_377:
            ; //	asm	nop				
00545:      	nop
            ; //_A523506CC_378:;				
            _A523506CC_378:
            ; //	asm	nop				
00546:      	nop
            ; //_A523506CC_379:;				
            _A523506CC_379:
            ; //	asm	nop				
00547:      	nop
            ; //_A523506CC_380:;				
            _A523506CC_380:
            ; //	asm	nop				
00548:      	nop
            ; //_A523506CC_381:;				
            _A523506CC_381:
            ; //	asm	nop				
00549:      	nop
            ; //_A523506CC_382:;				
            _A523506CC_382:
            ; //	asm	nop				
0054A:      	nop
            ; //_A523506CC_383:;				
            _A523506CC_383:
            ; //	asm	nop				
0054B:      	nop
            ; //_A523506CC_384:;				
            _A523506CC_384:
            ; //	asm	nop				
0054C:      	nop
            ; //_A523506CC_385:;				
            _A523506CC_385:
            ; //	asm	nop				
0054D:      	nop
            ; //_A523506CC_386:;				
            _A523506CC_386:
            ; //	asm	nop				
0054E:      	nop
            ; //_A523506CC_387:;				
            _A523506CC_387:
            ; //	asm	nop				
0054F:      	nop
            ; //_A523506CC_388:;				
            _A523506CC_388:
            ; //	asm	nop				
00550:      	nop
            ; //_A523506CC_389:;				
            _A523506CC_389:
            ; //	asm clr io[0x09].b14;			
00551:      	clr io[0x09].b14//
            ; //_A523506CC_390:;				
            _A523506CC_390:
            ; //	asm	nop				
00552:      	nop
            ; //_A523506CC_391:;				
            _A523506CC_391:
            ; //	asm	nop				
00553:      	nop
            ; //_A523506CC_392:;				
            _A523506CC_392:
            ; //	asm	nop				
00554:      	nop
            ; //_A523506CC_393:;				
            _A523506CC_393:
            ; //	asm set io[0x09].b14;			
00555:      	set io[0x09].b14//
            ; //_A523506CC_394:;				
            _A523506CC_394:
            ; //	asm	nop				
00556:      	nop
            ; //_A523506CC_395:;				
            _A523506CC_395:
            ; //	asm	nop				
00557:      	nop
            ; //_A523506CC_396:;				
            _A523506CC_396:
            ; //	asm	nop				
00558:      	nop
            ; //_A523506CC_397:;				
            _A523506CC_397:
            ; //	asm	nop				
00559:      	nop
            ; //_A523506CC_398:;				
            _A523506CC_398:
            ; //	asm	nop				
0055A:      	nop
            ; //_A523506CC_399:;				
            _A523506CC_399:
            ; //	asm	nop				
0055B:      	nop
            ; //_A523506CC_400:;				
            _A523506CC_400:
            ; //	asm	nop				
0055C:      	nop
            ; //_A523506CC_401:;				
            _A523506CC_401:
            ; //	asm	nop				
0055D:      	nop
            ; //_A523506CC_402:;				
            _A523506CC_402:
            ; //	asm	nop				
0055E:      	nop
            ; //_A523506CC_403:;				
            _A523506CC_403:
            ; //	asm	nop				
0055F:      	nop
            ; //_A523506CC_404:;				
            _A523506CC_404:
            ; //	asm	nop				
00560:      	nop
            ; //_A523506CC_405:;				
            _A523506CC_405:
            ; //	asm	nop				
00561:      	nop
            ; //_A523506CC_406:;				
            _A523506CC_406:
            ; //	asm clr io[0x09].b14;			
00562:      	clr io[0x09].b14//
            ; //_A523506CC_407:;				
            _A523506CC_407:
            ; //	asm	nop				
00563:      	nop
            ; //_A523506CC_408:;				
            _A523506CC_408:
            ; //	asm	nop				
00564:      	nop
            ; //_A523506CC_409:;				
            _A523506CC_409:
            ; //	asm	nop				
00565:      	nop
            ; //_A523506CC_410:;				
            _A523506CC_410:
            ; //	asm set io[0x09].b14;			
00566:      	set io[0x09].b14//
            ; //_A523506CC_411:;				
            _A523506CC_411:
            ; //	asm	nop				
00567:      	nop
            ; //_A523506CC_412:;				
            _A523506CC_412:
            ; //	asm	nop				
00568:      	nop
            ; //_A523506CC_413:;				
            _A523506CC_413:
            ; //	asm	nop				
00569:      	nop
            ; //_A523506CC_414:;				
            _A523506CC_414:
            ; //	asm	nop				
0056A:      	nop
            ; //_A523506CC_415:;				
            _A523506CC_415:
            ; //	asm	nop				
0056B:      	nop
            ; //_A523506CC_416:;				
            _A523506CC_416:
            ; //	asm	nop				
0056C:      	nop
            ; //_A523506CC_417:;				
            _A523506CC_417:
            ; //	asm	nop				
0056D:      	nop
            ; //_A523506CC_418:;				
            _A523506CC_418:
            ; //	asm	nop				
0056E:      	nop
            ; //_A523506CC_419:;				
            _A523506CC_419:
            ; //	asm	nop				
0056F:      	nop
            ; //_A523506CC_420:;				
            _A523506CC_420:
            ; //	asm	nop				
00570:      	nop
            ; //_A523506CC_421:;				
            _A523506CC_421:
            ; //	asm	nop				
00571:      	nop
            ; //_A523506CC_422:;				
            _A523506CC_422:
            ; //	asm	nop				
00572:      	nop
            ; //_A523506CC_423:;				
            _A523506CC_423:
            ; //	asm clr io[0x09].b14;			
00573:      	clr io[0x09].b14//
            ; //_A523506CC_424:;				
            _A523506CC_424:
            ; //	asm	nop				
00574:      	nop
            ; //_A523506CC_425:;				
            _A523506CC_425:
            ; //	asm	nop				
00575:      	nop
            ; //_A523506CC_426:;				
            _A523506CC_426:
            ; //	asm	nop				
00576:      	nop
            ; //_A523506CC_427:;				
            _A523506CC_427:
            ; //	asm set io[0x09].b14;			
00577:      	set io[0x09].b14//
            ; //_A523506CC_428:;				
            _A523506CC_428:
            ; //	asm	nop				
00578:      	nop
            ; //_A523506CC_429:;				
            _A523506CC_429:
            ; //	asm	nop				
00579:      	nop
            ; //_A523506CC_430:;				
            _A523506CC_430:
            ; //	asm	nop				
0057A:      	nop
            ; //_A523506CC_431:;				
            _A523506CC_431:
            ; //	asm	nop				
0057B:      	nop
            ; //_A523506CC_432:;				
            _A523506CC_432:
            ; //	asm	nop				
0057C:      	nop
            ; //_A523506CC_433:;				
            _A523506CC_433:
            ; //	asm	nop				
0057D:      	nop
            ; //_A523506CC_434:;				
            _A523506CC_434:
            ; //	asm	nop				
0057E:      	nop
            ; //_A523506CC_435:;				
            _A523506CC_435:
            ; //	asm	nop				
0057F:      	nop
            ; //_A523506CC_436:;				
            _A523506CC_436:
            ; //	asm	nop				
00580:      	nop
            ; //_A523506CC_437:;				
            _A523506CC_437:
            ; //	asm	nop				
00581:      	nop
            ; //_A523506CC_438:;				
            _A523506CC_438:
            ; //	asm	nop				
00582:      	nop
            ; //_A523506CC_439:;				
            _A523506CC_439:
            ; //	asm	nop				
00583:      	nop
            ; //_A523506CC_440:;				
            _A523506CC_440:
            ; //	asm clr io[0x09].b14;			
00584:      	clr io[0x09].b14//
            ; //_A523506CC_441:;				
            _A523506CC_441:
            ; //	asm	nop				
00585:      	nop
            ; //_A523506CC_442:;				
            _A523506CC_442:
            ; //	asm	nop				
00586:      	nop
            ; //_A523506CC_443:;				
            _A523506CC_443:
            ; //	asm	nop				
00587:      	nop
            ; //_A523506CC_444:;				
            _A523506CC_444:
            ; //	asm set io[0x09].b14;			
00588:      	set io[0x09].b14//
            ; //_A523506CC_445:;				
            _A523506CC_445:
            ; //	asm	nop				
00589:      	nop
            ; //_A523506CC_446:;				
            _A523506CC_446:
            ; //	asm	nop				
0058A:      	nop
            ; //_A523506CC_447:;				
            _A523506CC_447:
            ; //	asm	nop				
0058B:      	nop
            ; //_A523506CC_448:;				
            _A523506CC_448:
            ; //	asm	nop				
0058C:      	nop
            ; //_A523506CC_449:;				
            _A523506CC_449:
            ; //	asm	nop				
0058D:      	nop
            ; //_A523506CC_450:;				
            _A523506CC_450:
            ; //	asm	nop				
0058E:      	nop
            ; //_A523506CC_451:;				
            _A523506CC_451:
            ; //	asm	nop				
0058F:      	nop
            ; //_A523506CC_452:;				
            _A523506CC_452:
            ; //	asm	nop				
00590:      	nop
            ; //_A523506CC_453:;				
            _A523506CC_453:
            ; //	asm	nop				
00591:      	nop
            ; //_A523506CC_454:;				
            _A523506CC_454:
            ; //	asm	nop				
00592:      	nop
            ; //_A523506CC_455:;				
            _A523506CC_455:
            ; //	asm	nop				
00593:      	nop
            ; //_A523506CC_456:;				
            _A523506CC_456:
            ; //	asm	nop				
00594:      	nop
            ; //_A523506CC_457:;				
            _A523506CC_457:
            ; //	asm clr io[0x09].b14;			
00595:      	clr io[0x09].b14//
            ; //_A523506CC_458:;				
            _A523506CC_458:
            ; //	asm	nop				
00596:      	nop
            ; //_A523506CC_459:;				
            _A523506CC_459:
            ; //	asm	nop				
00597:      	nop
            ; //_A523506CC_460:;				
            _A523506CC_460:
            ; //	asm	nop				
00598:      	nop
            ; //_A523506CC_461:;				
            _A523506CC_461:
            ; //	asm set io[0x09].b14;			
00599:      	set io[0x09].b14//
            ; //_A523506CC_462:;				
            _A523506CC_462:
            ; //	asm	nop				
0059A:      	nop
            ; //_A523506CC_463:;				
            _A523506CC_463:
            ; //	asm	nop				
0059B:      	nop
            ; //_A523506CC_464:;				
            _A523506CC_464:
            ; //	asm	nop				
0059C:      	nop
            ; //_A523506CC_465:;				
            _A523506CC_465:
            ; //	asm	nop				
0059D:      	nop
            ; //_A523506CC_466:;				
            _A523506CC_466:
            ; //	asm	nop				
0059E:      	nop
            ; //_A523506CC_467:;				
            _A523506CC_467:
            ; //	asm	nop				
0059F:      	nop
            ; //_A523506CC_468:;				
            _A523506CC_468:
            ; //	asm	nop				
005A0:      	nop
            ; //_A523506CC_469:;				
            _A523506CC_469:
            ; //	asm	nop				
005A1:      	nop
            ; //_A523506CC_470:;				
            _A523506CC_470:
            ; //	asm	nop				
005A2:      	nop
            ; //_A523506CC_471:;				
            _A523506CC_471:
            ; //	asm	nop				
005A3:      	nop
            ; //_A523506CC_472:;				
            _A523506CC_472:
            ; //	asm	nop				
005A4:      	nop
            ; //_A523506CC_473:;				
            _A523506CC_473:
            ; //	asm	nop				
005A5:      	nop
            ; //_A523506CC_474:;				
            _A523506CC_474:
            ; //	asm clr io[0x09].b14;			
005A6:      	clr io[0x09].b14//
            ; //_A523506CC_475:;				
            _A523506CC_475:
            ; //	asm	nop				
005A7:      	nop
            ; //_A523506CC_476:;				
            _A523506CC_476:
            ; //	asm	nop				
005A8:      	nop
            ; //_A523506CC_477:;				
            _A523506CC_477:
            ; //	asm	nop				
005A9:      	nop
            ; //_A523506CC_478:;				
            _A523506CC_478:
            ; //	asm set io[0x09].b14;			
005AA:      	set io[0x09].b14//
            ; //_A523506CC_479:;				
            _A523506CC_479:
            ; //	asm	nop				
005AB:      	nop
            ; //_A523506CC_480:;				
            _A523506CC_480:
            ; //	asm	nop				
005AC:      	nop
            ; //_A523506CC_481:;				
            _A523506CC_481:
            ; //	asm	nop				
005AD:      	nop
            ; //_A523506CC_482:;				
            _A523506CC_482:
            ; //	asm	nop				
005AE:      	nop
            ; //_A523506CC_483:;				
            _A523506CC_483:
            ; //	asm	nop				
005AF:      	nop
            ; //_A523506CC_484:;				
            _A523506CC_484:
            ; //	asm	nop				
005B0:      	nop
            ; //_A523506CC_485:;				
            _A523506CC_485:
            ; //	asm	nop				
005B1:      	nop
            ; //_A523506CC_486:;				
            _A523506CC_486:
            ; //	asm	nop				
005B2:      	nop
            ; //_A523506CC_487:;				
            _A523506CC_487:
            ; //	asm	nop				
005B3:      	nop
            ; //_A523506CC_488:;				
            _A523506CC_488:
            ; //	asm	nop				
005B4:      	nop
            ; //_A523506CC_489:;				
            _A523506CC_489:
            ; //	asm	nop				
005B5:      	nop
            ; //_A523506CC_490:;				
            _A523506CC_490:
            ; //	asm	nop				
005B6:      	nop
            ; //_A523506CC_491:;				
            _A523506CC_491:
            ; //	asm clr io[0x09].b14;			
005B7:      	clr io[0x09].b14//
            ; //_A523506CC_492:;				
            _A523506CC_492:
            ; //	asm	nop				
005B8:      	nop
            ; //_A523506CC_493:;				
            _A523506CC_493:
            ; //	asm	nop				
005B9:      	nop
            ; //_A523506CC_494:;				
            _A523506CC_494:
            ; //	asm	nop				
005BA:      	nop
            ; //_A523506CC_495:;				
            _A523506CC_495:
            ; //	asm set io[0x09].b14;			
005BB:      	set io[0x09].b14//
            ; //_A523506CC_496:;				
            _A523506CC_496:
            ; //	asm	nop				
005BC:      	nop
            ; //_A523506CC_497:;				
            _A523506CC_497:
            ; //	asm	nop				
005BD:      	nop
            ; //_A523506CC_498:;				
            _A523506CC_498:
            ; //	asm	nop				
005BE:      	nop
            ; //_A523506CC_499:;				
            _A523506CC_499:
            ; //	asm	nop				
005BF:      	nop
            ; //_A523506CC_500:;				
            _A523506CC_500:
            ; //	asm	nop				
005C0:      	nop
            ; //_A523506CC_501:;				
            _A523506CC_501:
            ; //	asm	nop				
005C1:      	nop
            ; //_A523506CC_502:;				
            _A523506CC_502:
            ; //	asm	nop				
005C2:      	nop
            ; //_A523506CC_503:;				
            _A523506CC_503:
            ; //	asm	nop				
005C3:      	nop
            ; //_A523506CC_504:;				
            _A523506CC_504:
            ; //	asm	nop				
005C4:      	nop
            ; //_A523506CC_505:;				
            _A523506CC_505:
            ; //	asm	nop				
005C5:      	nop
            ; //_A523506CC_506:;				
            _A523506CC_506:
            ; //	asm	nop				
005C6:      	nop
            ; //_A523506CC_507:;				
            _A523506CC_507:
            ; //	asm	nop				
005C7:      	nop
            ; //_A523506CC_508:;				
            _A523506CC_508:
            ; //	asm clr io[0x09].b14;			
005C8:      	clr io[0x09].b14//
            ; //_A523506CC_509:;				
            _A523506CC_509:
            ; //	asm	nop				
005C9:      	nop
            ; //_A523506CC_510:;				
            _A523506CC_510:
            ; //	asm	nop				
005CA:      	nop
            ; //_A523506CC_511:;				
            _A523506CC_511:
            ; //	asm	nop				
005CB:      	nop
            ; //_A523506CC_512:;				
            _A523506CC_512:
            ; //	asm set io[0x09].b14;			
005CC:      	set io[0x09].b14//
            ; //_A523506CC_513:;				
            _A523506CC_513:
            ; //	asm	nop				
005CD:      	nop
            ; //_A523506CC_514:;				
            _A523506CC_514:
            ; //	asm	nop				
005CE:      	nop
            ; //_A523506CC_515:;				
            _A523506CC_515:
            ; //	asm	nop				
005CF:      	nop
            ; //_A523506CC_516:;				
            _A523506CC_516:
            ; //	asm	nop				
005D0:      	nop
            ; //_A523506CC_517:;				
            _A523506CC_517:
            ; //	asm	nop				
005D1:      	nop
            ; //_A523506CC_518:;				
            _A523506CC_518:
            ; //	asm	nop				
005D2:      	nop
            ; //_A523506CC_519:;				
            _A523506CC_519:
            ; //	asm	nop				
005D3:      	nop
            ; //_A523506CC_520:;				
            _A523506CC_520:
            ; //	asm	nop				
005D4:      	nop
            ; //_A523506CC_521:;				
            _A523506CC_521:
            ; //	asm	nop				
005D5:      	nop
            ; //_A523506CC_522:;				
            _A523506CC_522:
            ; //	asm	nop				
005D6:      	nop
            ; //_A523506CC_523:;				
            _A523506CC_523:
            ; //	asm	nop				
005D7:      	nop
            ; //_A523506CC_524:;				
            _A523506CC_524:
            ; //	asm	nop				
005D8:      	nop
            ; //_A523506CC_525:;				
            _A523506CC_525:
            ; //	asm clr io[0x09].b14;			
005D9:      	clr io[0x09].b14//
            ; //_A523506CC_526:;				
            _A523506CC_526:
            ; //	asm	nop				
005DA:      	nop
            ; //_A523506CC_527:;				
            _A523506CC_527:
            ; //	asm	nop				
005DB:      	nop
            ; //_A523506CC_528:;				
            _A523506CC_528:
            ; //	asm	nop				
005DC:      	nop
            ; //_A523506CC_529:;				
            _A523506CC_529:
            ; //	asm set io[0x09].b14;			
005DD:      	set io[0x09].b14//
            ; //_A523506CC_530:;				
            _A523506CC_530:
            ; //	asm	nop				
005DE:      	nop
            ; //_A523506CC_531:;				
            _A523506CC_531:
            ; //	asm	nop				
005DF:      	nop
            ; //_A523506CC_532:;				
            _A523506CC_532:
            ; //	asm	nop				
005E0:      	nop
            ; //_A523506CC_533:;				
            _A523506CC_533:
            ; //	asm	nop				
005E1:      	nop
            ; //_A523506CC_534:;				
            _A523506CC_534:
            ; //	asm	nop				
005E2:      	nop
            ; //_A523506CC_535:;				
            _A523506CC_535:
            ; //	asm	nop				
005E3:      	nop
            ; //_A523506CC_536:;				
            _A523506CC_536:
            ; //	asm	nop				
005E4:      	nop
            ; //_A523506CC_537:;				
            _A523506CC_537:
            ; //	asm	nop				
005E5:      	nop
            ; //_A523506CC_538:;				
            _A523506CC_538:
            ; //	asm	nop				
005E6:      	nop
            ; //_A523506CC_539:;				
            _A523506CC_539:
            ; //	asm	nop				
005E7:      	nop
            ; //_A523506CC_540:;				
            _A523506CC_540:
            ; //	asm	nop				
005E8:      	nop
            ; //_A523506CC_541:;				
            _A523506CC_541:
            ; //	asm	nop				
005E9:      	nop
            ; //_A523506CC_542:;				
            _A523506CC_542:
            ; //	asm clr io[0x09].b14;			
005EA:      	clr io[0x09].b14//
            ; //_A523506CC_543:;				
            _A523506CC_543:
            ; //	asm	nop				
005EB:      	nop
            ; //_A523506CC_544:;				
            _A523506CC_544:
            ; //	asm	nop				
005EC:      	nop
            ; //_A523506CC_545:;				
            _A523506CC_545:
            ; //	asm	nop				
005ED:      	nop
            ; //_A523506CC_546:;				
            _A523506CC_546:
            ; //	asm set io[0x09].b14;			
005EE:      	set io[0x09].b14//
            ; //_A523506CC_547:;				
            _A523506CC_547:
            ; //	asm	nop				
005EF:      	nop
            ; //_A523506CC_548:;				
            _A523506CC_548:
            ; //	asm	nop				
005F0:      	nop
            ; //_A523506CC_549:;				
            _A523506CC_549:
            ; //	asm	nop				
005F1:      	nop
            ; //_A523506CC_550:;				
            _A523506CC_550:
            ; //	asm	nop				
005F2:      	nop
            ; //_A523506CC_551:;				
            _A523506CC_551:
            ; //	asm	nop				
005F3:      	nop
            ; //_A523506CC_552:;				
            _A523506CC_552:
            ; //	asm	nop				
005F4:      	nop
            ; //_A523506CC_553:;				
            _A523506CC_553:
            ; //	asm	nop				
005F5:      	nop
            ; //_A523506CC_554:;				
            _A523506CC_554:
            ; //	asm	nop				
005F6:      	nop
            ; //_A523506CC_555:;				
            _A523506CC_555:
            ; //	asm	nop				
005F7:      	nop
            ; //_A523506CC_556:;				
            _A523506CC_556:
            ; //	asm	nop				
005F8:      	nop
            ; //_A523506CC_557:;				
            _A523506CC_557:
            ; //	asm	nop				
005F9:      	nop
            ; //_A523506CC_558:;				
            _A523506CC_558:
            ; //	asm	nop				
005FA:      	nop
            ; //_A523506CC_559:;				
            _A523506CC_559:
            ; //	asm clr io[0x09].b14;			
005FB:      	clr io[0x09].b14//
            ; //_A523506CC_560:;				
            _A523506CC_560:
            ; //	asm	nop				
005FC:      	nop
            ; //_A523506CC_561:;				
            _A523506CC_561:
            ; //	asm	nop				
005FD:      	nop
            ; //_A523506CC_562:;				
            _A523506CC_562:
            ; //	asm	nop				
005FE:      	nop
            ; //_A523506CC_563:;				
            _A523506CC_563:
            ; //	asm set io[0x09].b14;			
005FF:      	set io[0x09].b14//
            ; //_A523506CC_564:;				
            _A523506CC_564:
            ; //	asm	nop				
00600:      	nop
            ; //_A523506CC_565:;				
            _A523506CC_565:
            ; //	asm	nop				
00601:      	nop
            ; //_A523506CC_566:;				
            _A523506CC_566:
            ; //	asm	nop				
00602:      	nop
            ; //_A523506CC_567:;				
            _A523506CC_567:
            ; //	asm	nop				
00603:      	nop
            ; //_A523506CC_568:;				
            _A523506CC_568:
            ; //	asm	nop				
00604:      	nop
            ; //_A523506CC_569:;				
            _A523506CC_569:
            ; //	asm	nop				
00605:      	nop
            ; //_A523506CC_570:;				
            _A523506CC_570:
            ; //	asm	nop				
00606:      	nop
            ; //_A523506CC_571:;				
            _A523506CC_571:
            ; //	asm	nop				
00607:      	nop
            ; //_A523506CC_572:;				
            _A523506CC_572:
            ; //	asm	nop				
00608:      	nop
            ; //_A523506CC_573:;				
            _A523506CC_573:
            ; //	asm	nop				
00609:      	nop
            ; //_A523506CC_574:;				
            _A523506CC_574:
            ; //	asm	nop				
0060A:      	nop
            ; //_A523506CC_575:;				
            _A523506CC_575:
            ; //	asm	nop				
0060B:      	nop
            ; //_A523506CC_576:;				
            _A523506CC_576:
            ; //	asm clr io[0x09].b14;			
0060C:      	clr io[0x09].b14//
            ; //_A523506CC_577:;				
            _A523506CC_577:
            ; //	asm	nop				
0060D:      	nop
            ; //_A523506CC_578:;				
            _A523506CC_578:
            ; //	asm	nop				
0060E:      	nop
            ; //_A523506CC_579:;				
            _A523506CC_579:
            ; //	asm	nop				
0060F:      	nop
            ; //_A523506CC_580:;				
            _A523506CC_580:
            ; //	asm set io[0x09].b14;			
00610:      	set io[0x09].b14//
            ; //_A523506CC_581:;				
            _A523506CC_581:
            ; //	asm	nop				
00611:      	nop
            ; //_A523506CC_582:;				
            _A523506CC_582:
            ; //	asm	nop				
00612:      	nop
            ; //_A523506CC_583:;				
            _A523506CC_583:
            ; //	asm	nop				
00613:      	nop
            ; //_A523506CC_584:;				
            _A523506CC_584:
            ; //	asm	nop				
00614:      	nop
            ; //_A523506CC_585:;				
            _A523506CC_585:
            ; //	asm	nop				
00615:      	nop
            ; //_A523506CC_586:;				
            _A523506CC_586:
            ; //	asm	nop				
00616:      	nop
            ; //_A523506CC_587:;				
            _A523506CC_587:
            ; //	asm	nop				
00617:      	nop
            ; //_A523506CC_588:;				
            _A523506CC_588:
            ; //	asm	nop				
00618:      	nop
            ; //_A523506CC_589:;				
            _A523506CC_589:
            ; //	asm	nop				
00619:      	nop
            ; //_A523506CC_590:;				
            _A523506CC_590:
            ; //	asm	nop				
0061A:      	nop
            ; //_A523506CC_591:;				
            _A523506CC_591:
            ; //	asm	nop				
0061B:      	nop
            ; //_A523506CC_592:;				
            _A523506CC_592:
            ; //	asm	nop				
0061C:      	nop
            ; //_A523506CC_593:;				
            _A523506CC_593:
            ; //	asm clr io[0x09].b14;			
0061D:      	clr io[0x09].b14//
            ; //_A523506CC_594:;				
            _A523506CC_594:
            ; //	asm	nop				
0061E:      	nop
            ; //_A523506CC_595:;				
            _A523506CC_595:
            ; //	asm	nop				
0061F:      	nop
            ; //_A523506CC_596:;				
            _A523506CC_596:
            ; //	asm	nop				
00620:      	nop
            ; //_A523506CC_597:;				
            _A523506CC_597:
            ; //	asm set io[0x09].b14;			
00621:      	set io[0x09].b14//
            ; //_A523506CC_598:;				
            _A523506CC_598:
            ; //	asm	nop				
00622:      	nop
            ; //_A523506CC_599:;				
            _A523506CC_599:
            ; //	asm	nop				
00623:      	nop
            ; //_A523506CC_600:;				
            _A523506CC_600:
            ; //	asm	nop				
00624:      	nop
            ; //_A523506CC_601:;				
            _A523506CC_601:
            ; //	asm	nop				
00625:      	nop
            ; //_A523506CC_602:;				
            _A523506CC_602:
            ; //	asm	nop				
00626:      	nop
            ; //_A523506CC_603:;				
            _A523506CC_603:
            ; //	asm	nop				
00627:      	nop
            ; //_A523506CC_604:;				
            _A523506CC_604:
            ; //	asm	nop				
00628:      	nop
            ; //_A523506CC_605:;				
            _A523506CC_605:
            ; //	asm	nop				
00629:      	nop
            ; //_A523506CC_606:;				
            _A523506CC_606:
            ; //	asm	nop				
0062A:      	nop
            ; //_A523506CC_607:;				
            _A523506CC_607:
            ; //	asm	nop				
0062B:      	nop
            ; //_A523506CC_608:;				
            _A523506CC_608:
            ; //	asm	nop				
0062C:      	nop
            ; //_A523506CC_609:;				
            _A523506CC_609:
            ; //	asm	nop				
0062D:      	nop
            ; //_A523506CC_610:;				
            _A523506CC_610:
            ; //	asm clr io[0x09].b14;			
0062E:      	clr io[0x09].b14//
            ; //_A523506CC_611:;				
            _A523506CC_611:
            ; //	asm	nop				
0062F:      	nop
            ; //_A523506CC_612:;				
            _A523506CC_612:
            ; //	asm	nop				
00630:      	nop
            ; //_A523506CC_613:;				
            _A523506CC_613:
            ; //	asm	nop				
00631:      	nop
            ; //_A523506CC_614:;				
            _A523506CC_614:
            ; //	asm set io[0x09].b14;			
00632:      	set io[0x09].b14//
            ; //_A523506CC_615:;				
            _A523506CC_615:
            ; //	asm	nop				
00633:      	nop
            ; //_A523506CC_616:;				
            _A523506CC_616:
            ; //	asm	nop				
00634:      	nop
            ; //_A523506CC_617:;				
            _A523506CC_617:
            ; //	asm	nop				
00635:      	nop
            ; //_A523506CC_618:;				
            _A523506CC_618:
            ; //	asm	nop				
00636:      	nop
            ; //_A523506CC_619:;				
            _A523506CC_619:
            ; //	asm	nop				
00637:      	nop
            ; //_A523506CC_620:;				
            _A523506CC_620:
            ; //	asm	nop				
00638:      	nop
            ; //_A523506CC_621:;				
            _A523506CC_621:
            ; //	asm	nop				
00639:      	nop
            ; //_A523506CC_622:;				
            _A523506CC_622:
            ; //	asm	nop				
0063A:      	nop
            ; //_A523506CC_623:;				
            _A523506CC_623:
            ; //	asm	nop				
0063B:      	nop
            ; //_A523506CC_624:;				
            _A523506CC_624:
            ; //	asm	nop				
0063C:      	nop
            ; //_A523506CC_625:;				
            _A523506CC_625:
            ; //	asm	nop				
0063D:      	nop
            ; //_A523506CC_626:;				
            _A523506CC_626:
            ; //	asm	nop				
0063E:      	nop
            ; //_A523506CC_627:;				
            _A523506CC_627:
            ; //	asm clr io[0x09].b14;			
0063F:      	clr io[0x09].b14//
            ; //_A523506CC_628:;				
            _A523506CC_628:
            ; //	asm	nop				
00640:      	nop
            ; //_A523506CC_629:;				
            _A523506CC_629:
            ; //	asm	nop				
00641:      	nop
            ; //_A523506CC_630:;				
            _A523506CC_630:
            ; //	asm	nop				
00642:      	nop
            ; //_A523506CC_631:;				
            _A523506CC_631:
            ; //	asm set io[0x09].b14;			
00643:      	set io[0x09].b14//
            ; //_A523506CC_632:;				
            _A523506CC_632:
            ; //	asm	nop				
00644:      	nop
            ; //_A523506CC_633:;				
            _A523506CC_633:
            ; //	asm	nop				
00645:      	nop
            ; //_A523506CC_634:;				
            _A523506CC_634:
            ; //	asm	nop				
00646:      	nop
            ; //_A523506CC_635:;				
            _A523506CC_635:
            ; //	asm	nop				
00647:      	nop
            ; //_A523506CC_636:;				
            _A523506CC_636:
            ; //	asm	nop				
00648:      	nop
            ; //_A523506CC_637:;				
            _A523506CC_637:
            ; //	asm	nop				
00649:      	nop
            ; //_A523506CC_638:;				
            _A523506CC_638:
            ; //	asm	nop				
0064A:      	nop
            ; //_A523506CC_639:;				
            _A523506CC_639:
            ; //	asm	nop				
0064B:      	nop
            ; //_A523506CC_640:;				
            _A523506CC_640:
            ; //	asm	nop				
0064C:      	nop
            ; //_A523506CC_641:;				
            _A523506CC_641:
            ; //	asm	nop				
0064D:      	nop
            ; //_A523506CC_642:;				
            _A523506CC_642:
            ; //	asm	nop				
0064E:      	nop
            ; //_A523506CC_643:;				
            _A523506CC_643:
            ; //	asm	nop				
0064F:      	nop
            ; //_A523506CC_644:;				
            _A523506CC_644:
            ; //	asm clr io[0x09].b14;			
00650:      	clr io[0x09].b14//
            ; //_A523506CC_645:;				
            _A523506CC_645:
            ; //	asm	nop				
00651:      	nop
            ; //_A523506CC_646:;				
            _A523506CC_646:
            ; //	asm	nop				
00652:      	nop
            ; //_A523506CC_647:;				
            _A523506CC_647:
            ; //	asm	nop				
00653:      	nop
            ; //_A523506CC_648:;				
            _A523506CC_648:
            ; //	asm set io[0x09].b14;			
00654:      	set io[0x09].b14//
            ; //_A523506CC_649:;				
            _A523506CC_649:
            ; //	asm	nop				
00655:      	nop
            ; //_A523506CC_650:;				
            _A523506CC_650:
            ; //	asm	nop				
00656:      	nop
            ; //_A523506CC_651:;				
            _A523506CC_651:
            ; //	asm	nop				
00657:      	nop
            ; //_A523506CC_652:;				
            _A523506CC_652:
            ; //	asm	nop				
00658:      	nop
            ; //_A523506CC_653:;				
            _A523506CC_653:
            ; //	asm	nop				
00659:      	nop
            ; //_A523506CC_654:;				
            _A523506CC_654:
            ; //	asm	nop				
0065A:      	nop
            ; //_A523506CC_655:;				
            _A523506CC_655:
            ; //	asm	nop				
0065B:      	nop
            ; //_A523506CC_656:;				
            _A523506CC_656:
            ; //	asm	nop				
0065C:      	nop
            ; //_A523506CC_657:;				
            _A523506CC_657:
            ; //	asm	nop				
0065D:      	nop
            ; //_A523506CC_658:;				
            _A523506CC_658:
            ; //	asm	nop				
0065E:      	nop
            ; //_A523506CC_659:;				
            _A523506CC_659:
            ; //	asm	nop				
0065F:      	nop
            ; //_A523506CC_660:;				
            _A523506CC_660:
            ; //	asm	nop				
00660:      	nop
            ; //_A523506CC_661:;				
            _A523506CC_661:
            ; //	asm clr io[0x09].b14;			
00661:      	clr io[0x09].b14//
            ; //_A523506CC_662:;				
            _A523506CC_662:
            ; //	asm	nop				
00662:      	nop
            ; //_A523506CC_663:;				
            _A523506CC_663:
            ; //	asm	nop				
00663:      	nop
            ; //_A523506CC_664:;				
            _A523506CC_664:
            ; //	asm	nop				
00664:      	nop
            ; //_A523506CC_665:;				
            _A523506CC_665:
            ; //	asm set io[0x09].b14;			
00665:      	set io[0x09].b14//
            ; //_A523506CC_666:;				
            _A523506CC_666:
            ; //	asm	nop				
00666:      	nop
            ; //_A523506CC_667:;				
            _A523506CC_667:
            ; //	asm	nop				
00667:      	nop
            ; //_A523506CC_668:;				
            _A523506CC_668:
            ; //	asm	nop				
00668:      	nop
            ; //_A523506CC_669:;				
            _A523506CC_669:
            ; //	asm	nop				
00669:      	nop
            ; //_A523506CC_670:;				
            _A523506CC_670:
            ; //	asm	nop				
0066A:      	nop
            ; //_A523506CC_671:;				
            _A523506CC_671:
            ; //	asm	nop				
0066B:      	nop
            ; //_A523506CC_672:;				
            _A523506CC_672:
            ; //	asm	nop				
0066C:      	nop
            ; //_A523506CC_673:;				
            _A523506CC_673:
            ; //	asm	nop				
0066D:      	nop
            ; //_A523506CC_674:;				
            _A523506CC_674:
            ; //	asm	nop				
0066E:      	nop
            ; //_A523506CC_675:;				
            _A523506CC_675:
            ; //	asm	nop				
0066F:      	nop
            ; //_A523506CC_676:;				
            _A523506CC_676:
            ; //	asm	nop				
00670:      	nop
            ; //_A523506CC_677:;				
            _A523506CC_677:
            ; //	asm	nop				
00671:      	nop
            ; //_A523506CC_678:;				
            _A523506CC_678:
            ; //	asm clr io[0x09].b14;			
00672:      	clr io[0x09].b14//
            ; //_A523506CC_679:;				
            _A523506CC_679:
            ; //	asm	nop				
00673:      	nop
            ; //_A523506CC_680:;				
            _A523506CC_680:
            ; //	asm	nop				
00674:      	nop
            ; //_A523506CC_681:;				
            _A523506CC_681:
            ; //	asm	nop				
00675:      	nop
            ; //_A523506CC_682:;				
            _A523506CC_682:
            ; //	asm set io[0x09].b14;			
00676:      	set io[0x09].b14//
            ; //_A523506CC_683:;				
            _A523506CC_683:
            ; //	asm	nop				
00677:      	nop
            ; //_A523506CC_684:;				
            _A523506CC_684:
            ; //	asm	nop				
00678:      	nop
            ; //_A523506CC_685:;				
            _A523506CC_685:
            ; //	asm	nop				
00679:      	nop
            ; //_A523506CC_686:;				
            _A523506CC_686:
            ; //	asm	nop				
0067A:      	nop
            ; //_A523506CC_687:;				
            _A523506CC_687:
            ; //	asm	nop				
0067B:      	nop
            ; //_A523506CC_688:;				
            _A523506CC_688:
            ; //	asm	nop				
0067C:      	nop
            ; //_A523506CC_689:;				
            _A523506CC_689:
            ; //	asm	nop				
0067D:      	nop
            ; //_A523506CC_690:;				
            _A523506CC_690:
            ; //	asm	nop				
0067E:      	nop
            ; //_A523506CC_691:;				
            _A523506CC_691:
            ; //	asm	nop				
0067F:      	nop
            ; //_A523506CC_692:;				
            _A523506CC_692:
            ; //	asm	nop				
00680:      	nop
            ; //_A523506CC_693:;				
            _A523506CC_693:
            ; //	asm	nop				
00681:      	nop
            ; //_A523506CC_694:;				
            _A523506CC_694:
            ; //	asm	nop				
00682:      	nop
            ; //_A523506CC_695:;				
            _A523506CC_695:
            ; //	asm clr io[0x09].b14;			
00683:      	clr io[0x09].b14//
            ; //_A523506CC_696:;				
            _A523506CC_696:
            ; //	asm	nop				
00684:      	nop
            ; //_A523506CC_697:;				
            _A523506CC_697:
            ; //	asm	nop				
00685:      	nop
            ; //_A523506CC_698:;				
            _A523506CC_698:
            ; //	asm	nop				
00686:      	nop
            ; //_A523506CC_699:;				
            _A523506CC_699:
            ; //	goto LD63FD439_103;			
00687:      	pch =	LD63FD439_103
00688:      	ljmp	LD63FD439_103
            ; //LD63FD439_106:;					
            LD63FD439_106:
            ; //_A523506CC_700:;				
            _A523506CC_700:
            ; //	asm set io[0x09].b14;			
00689:      	set io[0x09].b14//
            ; //_A523506CC_701:;				
            _A523506CC_701:
            ; //	asm	nop				
0068A:      	nop
            ; //_A523506CC_702:;				
            _A523506CC_702:
            ; //	asm	nop				
0068B:      	nop
            ; //_A523506CC_703:;				
            _A523506CC_703:
            ; //	asm	nop				
0068C:      	nop
            ; //_A523506CC_704:;				
            _A523506CC_704:
            ; //	asm clr io[0x09].b14;			
0068D:      	clr io[0x09].b14//
            ; //_A523506CC_705:;				
            _A523506CC_705:
            ; //	asm	nop				
0068E:      	nop
            ; //_A523506CC_706:;				
            _A523506CC_706:
            ; //	asm	nop				
0068F:      	nop
            ; //_A523506CC_707:;				
            _A523506CC_707:
            ; //	asm	nop				
00690:      	nop
            ; //_A523506CC_708:;				
            _A523506CC_708:
            ; //	asm	nop				
00691:      	nop
            ; //_A523506CC_709:;				
            _A523506CC_709:
            ; //	asm	nop				
00692:      	nop
            ; //_A523506CC_710:;				
            _A523506CC_710:
            ; //	asm	nop				
00693:      	nop
            ; //_A523506CC_711:;				
            _A523506CC_711:
            ; //	asm	nop				
00694:      	nop
            ; //_A523506CC_712:;				
            _A523506CC_712:
            ; //	asm	nop				
00695:      	nop
            ; //_A523506CC_713:;				
            _A523506CC_713:
            ; //	asm	nop				
00696:      	nop
            ; //_A523506CC_714:;				
            _A523506CC_714:
            ; //	asm	nop				
00697:      	nop
            ; //_A523506CC_715:;				
            _A523506CC_715:
            ; //	asm	nop				
00698:      	nop
            ; //_A523506CC_716:;				
            _A523506CC_716:
            ; //	asm	nop				
00699:      	nop
            ; //_A523506CC_717:;				
            _A523506CC_717:
            ; //	asm set io[0x09].b14;			
0069A:      	set io[0x09].b14//
            ; //_A523506CC_718:;				
            _A523506CC_718:
            ; //	asm	nop				
0069B:      	nop
            ; //_A523506CC_719:;				
            _A523506CC_719:
            ; //	asm	nop				
0069C:      	nop
            ; //_A523506CC_720:;				
            _A523506CC_720:
            ; //	asm	nop				
0069D:      	nop
            ; //_A523506CC_721:;				
            _A523506CC_721:
            ; //	asm clr io[0x09].b14;			
0069E:      	clr io[0x09].b14//
            ; //_A523506CC_722:;				
            _A523506CC_722:
            ; //	asm	nop				
0069F:      	nop
            ; //_A523506CC_723:;				
            _A523506CC_723:
            ; //	asm	nop				
006A0:      	nop
            ; //_A523506CC_724:;				
            _A523506CC_724:
            ; //	asm	nop				
006A1:      	nop
            ; //_A523506CC_725:;				
            _A523506CC_725:
            ; //	asm	nop				
006A2:      	nop
            ; //_A523506CC_726:;				
            _A523506CC_726:
            ; //	asm	nop				
006A3:      	nop
            ; //_A523506CC_727:;				
            _A523506CC_727:
            ; //	asm	nop				
006A4:      	nop
            ; //_A523506CC_728:;				
            _A523506CC_728:
            ; //	asm	nop				
006A5:      	nop
            ; //_A523506CC_729:;				
            _A523506CC_729:
            ; //	asm	nop				
006A6:      	nop
            ; //_A523506CC_730:;				
            _A523506CC_730:
            ; //	asm	nop				
006A7:      	nop
            ; //_A523506CC_731:;				
            _A523506CC_731:
            ; //	asm	nop				
006A8:      	nop
            ; //_A523506CC_732:;				
            _A523506CC_732:
            ; //	asm	nop				
006A9:      	nop
            ; //_A523506CC_733:;				
            _A523506CC_733:
            ; //	asm	nop				
006AA:      	nop
            ; //_A523506CC_734:;				
            _A523506CC_734:
            ; //	asm set io[0x09].b14;			
006AB:      	set io[0x09].b14//
            ; //_A523506CC_735:;				
            _A523506CC_735:
            ; //	asm	nop				
006AC:      	nop
            ; //_A523506CC_736:;				
            _A523506CC_736:
            ; //	asm	nop				
006AD:      	nop
            ; //_A523506CC_737:;				
            _A523506CC_737:
            ; //	asm	nop				
006AE:      	nop
            ; //_A523506CC_738:;				
            _A523506CC_738:
            ; //	asm clr io[0x09].b14;			
006AF:      	clr io[0x09].b14//
            ; //_A523506CC_739:;				
            _A523506CC_739:
            ; //	asm	nop				
006B0:      	nop
            ; //_A523506CC_740:;				
            _A523506CC_740:
            ; //	asm	nop				
006B1:      	nop
            ; //_A523506CC_741:;				
            _A523506CC_741:
            ; //	asm	nop				
006B2:      	nop
            ; //_A523506CC_742:;				
            _A523506CC_742:
            ; //	asm	nop				
006B3:      	nop
            ; //_A523506CC_743:;				
            _A523506CC_743:
            ; //	asm	nop				
006B4:      	nop
            ; //_A523506CC_744:;				
            _A523506CC_744:
            ; //	asm	nop				
006B5:      	nop
            ; //_A523506CC_745:;				
            _A523506CC_745:
            ; //	asm	nop				
006B6:      	nop
            ; //_A523506CC_746:;				
            _A523506CC_746:
            ; //	asm	nop				
006B7:      	nop
            ; //_A523506CC_747:;				
            _A523506CC_747:
            ; //	asm	nop				
006B8:      	nop
            ; //_A523506CC_748:;				
            _A523506CC_748:
            ; //	asm	nop				
006B9:      	nop
            ; //_A523506CC_749:;				
            _A523506CC_749:
            ; //	asm	nop				
006BA:      	nop
            ; //_A523506CC_750:;				
            _A523506CC_750:
            ; //	asm	nop				
006BB:      	nop
            ; //_A523506CC_751:;				
            _A523506CC_751:
            ; //	asm set io[0x09].b14;			
006BC:      	set io[0x09].b14//
            ; //_A523506CC_752:;				
            _A523506CC_752:
            ; //	asm	nop				
006BD:      	nop
            ; //_A523506CC_753:;				
            _A523506CC_753:
            ; //	asm	nop				
006BE:      	nop
            ; //_A523506CC_754:;				
            _A523506CC_754:
            ; //	asm	nop				
006BF:      	nop
            ; //_A523506CC_755:;				
            _A523506CC_755:
            ; //	asm clr io[0x09].b14;			
006C0:      	clr io[0x09].b14//
            ; //_A523506CC_756:;				
            _A523506CC_756:
            ; //	asm	nop				
006C1:      	nop
            ; //_A523506CC_757:;				
            _A523506CC_757:
            ; //	asm	nop				
006C2:      	nop
            ; //_A523506CC_758:;				
            _A523506CC_758:
            ; //	asm	nop				
006C3:      	nop
            ; //_A523506CC_759:;				
            _A523506CC_759:
            ; //	asm	nop				
006C4:      	nop
            ; //_A523506CC_760:;				
            _A523506CC_760:
            ; //	asm	nop				
006C5:      	nop
            ; //_A523506CC_761:;				
            _A523506CC_761:
            ; //	asm	nop				
006C6:      	nop
            ; //_A523506CC_762:;				
            _A523506CC_762:
            ; //	asm	nop				
006C7:      	nop
            ; //_A523506CC_763:;				
            _A523506CC_763:
            ; //	asm	nop				
006C8:      	nop
            ; //_A523506CC_764:;				
            _A523506CC_764:
            ; //	asm	nop				
006C9:      	nop
            ; //_A523506CC_765:;				
            _A523506CC_765:
            ; //	asm	nop				
006CA:      	nop
            ; //_A523506CC_766:;				
            _A523506CC_766:
            ; //	asm	nop				
006CB:      	nop
            ; //_A523506CC_767:;				
            _A523506CC_767:
            ; //	asm	nop				
006CC:      	nop
            ; //_A523506CC_768:;				
            _A523506CC_768:
            ; //	asm set io[0x09].b14;			
006CD:      	set io[0x09].b14//
            ; //_A523506CC_769:;				
            _A523506CC_769:
            ; //	asm	nop				
006CE:      	nop
            ; //_A523506CC_770:;				
            _A523506CC_770:
            ; //	asm	nop				
006CF:      	nop
            ; //_A523506CC_771:;				
            _A523506CC_771:
            ; //	asm	nop				
006D0:      	nop
            ; //_A523506CC_772:;				
            _A523506CC_772:
            ; //	asm clr io[0x09].b14;			
006D1:      	clr io[0x09].b14//
            ; //_A523506CC_773:;				
            _A523506CC_773:
            ; //	asm	nop				
006D2:      	nop
            ; //_A523506CC_774:;				
            _A523506CC_774:
            ; //	asm	nop				
006D3:      	nop
            ; //_A523506CC_775:;				
            _A523506CC_775:
            ; //	asm	nop				
006D4:      	nop
            ; //_A523506CC_776:;				
            _A523506CC_776:
            ; //	asm	nop				
006D5:      	nop
            ; //_A523506CC_777:;				
            _A523506CC_777:
            ; //	asm	nop				
006D6:      	nop
            ; //_A523506CC_778:;				
            _A523506CC_778:
            ; //	asm	nop				
006D7:      	nop
            ; //_A523506CC_779:;				
            _A523506CC_779:
            ; //	asm	nop				
006D8:      	nop
            ; //_A523506CC_780:;				
            _A523506CC_780:
            ; //	asm	nop				
006D9:      	nop
            ; //_A523506CC_781:;				
            _A523506CC_781:
            ; //	asm	nop				
006DA:      	nop
            ; //_A523506CC_782:;				
            _A523506CC_782:
            ; //	asm	nop				
006DB:      	nop
            ; //_A523506CC_783:;				
            _A523506CC_783:
            ; //	asm	nop				
006DC:      	nop
            ; //_A523506CC_784:;				
            _A523506CC_784:
            ; //	asm	nop				
006DD:      	nop
            ; //_A523506CC_785:;				
            _A523506CC_785:
            ; //	asm set io[0x09].b14;			
006DE:      	set io[0x09].b14//
            ; //_A523506CC_786:;				
            _A523506CC_786:
            ; //	asm	nop				
006DF:      	nop
            ; //_A523506CC_787:;				
            _A523506CC_787:
            ; //	asm	nop				
006E0:      	nop
            ; //_A523506CC_788:;				
            _A523506CC_788:
            ; //	asm	nop				
006E1:      	nop
            ; //_A523506CC_789:;				
            _A523506CC_789:
            ; //	asm clr io[0x09].b14;			
006E2:      	clr io[0x09].b14//
            ; //_A523506CC_790:;				
            _A523506CC_790:
            ; //	asm	nop				
006E3:      	nop
            ; //_A523506CC_791:;				
            _A523506CC_791:
            ; //	asm	nop				
006E4:      	nop
            ; //_A523506CC_792:;				
            _A523506CC_792:
            ; //	asm	nop				
006E5:      	nop
            ; //_A523506CC_793:;				
            _A523506CC_793:
            ; //	asm	nop				
006E6:      	nop
            ; //_A523506CC_794:;				
            _A523506CC_794:
            ; //	asm	nop				
006E7:      	nop
            ; //_A523506CC_795:;				
            _A523506CC_795:
            ; //	asm	nop				
006E8:      	nop
            ; //_A523506CC_796:;				
            _A523506CC_796:
            ; //	asm	nop				
006E9:      	nop
            ; //_A523506CC_797:;				
            _A523506CC_797:
            ; //	asm	nop				
006EA:      	nop
            ; //_A523506CC_798:;				
            _A523506CC_798:
            ; //	asm	nop				
006EB:      	nop
            ; //_A523506CC_799:;				
            _A523506CC_799:
            ; //	asm	nop				
006EC:      	nop
            ; //_A523506CC_800:;				
            _A523506CC_800:
            ; //	asm	nop				
006ED:      	nop
            ; //_A523506CC_801:;				
            _A523506CC_801:
            ; //	asm	nop				
006EE:      	nop
            ; //_A523506CC_802:;				
            _A523506CC_802:
            ; //	asm set io[0x09].b14;			
006EF:      	set io[0x09].b14//
            ; //_A523506CC_803:;				
            _A523506CC_803:
            ; //	asm	nop				
006F0:      	nop
            ; //_A523506CC_804:;				
            _A523506CC_804:
            ; //	asm	nop				
006F1:      	nop
            ; //_A523506CC_805:;				
            _A523506CC_805:
            ; //	asm	nop				
006F2:      	nop
            ; //_A523506CC_806:;				
            _A523506CC_806:
            ; //	asm clr io[0x09].b14;			
006F3:      	clr io[0x09].b14//
            ; //_A523506CC_807:;				
            _A523506CC_807:
            ; //	asm	nop				
006F4:      	nop
            ; //_A523506CC_808:;				
            _A523506CC_808:
            ; //	asm	nop				
006F5:      	nop
            ; //_A523506CC_809:;				
            _A523506CC_809:
            ; //	asm	nop				
006F6:      	nop
            ; //_A523506CC_810:;				
            _A523506CC_810:
            ; //	asm	nop				
006F7:      	nop
            ; //_A523506CC_811:;				
            _A523506CC_811:
            ; //	asm	nop				
006F8:      	nop
            ; //_A523506CC_812:;				
            _A523506CC_812:
            ; //	asm	nop				
006F9:      	nop
            ; //_A523506CC_813:;				
            _A523506CC_813:
            ; //	asm	nop				
006FA:      	nop
            ; //_A523506CC_814:;				
            _A523506CC_814:
            ; //	asm	nop				
006FB:      	nop
            ; //_A523506CC_815:;				
            _A523506CC_815:
            ; //	asm	nop				
006FC:      	nop
            ; //_A523506CC_816:;				
            _A523506CC_816:
            ; //	asm	nop				
006FD:      	nop
            ; //_A523506CC_817:;				
            _A523506CC_817:
            ; //	asm	nop				
006FE:      	nop
            ; //_A523506CC_818:;				
            _A523506CC_818:
            ; //	asm	nop				
006FF:      	nop
            ; //_A523506CC_819:;				
            _A523506CC_819:
            ; //	asm set io[0x09].b14;			
00700:      	set io[0x09].b14//
            ; //_A523506CC_820:;				
            _A523506CC_820:
            ; //	asm	nop				
00701:      	nop
            ; //_A523506CC_821:;				
            _A523506CC_821:
            ; //	asm	nop				
00702:      	nop
            ; //_A523506CC_822:;				
            _A523506CC_822:
            ; //	asm	nop				
00703:      	nop
            ; //_A523506CC_823:;				
            _A523506CC_823:
            ; //	asm clr io[0x09].b14;			
00704:      	clr io[0x09].b14//
            ; //_A523506CC_824:;				
            _A523506CC_824:
            ; //	asm	nop				
00705:      	nop
            ; //_A523506CC_825:;				
            _A523506CC_825:
            ; //	asm	nop				
00706:      	nop
            ; //_A523506CC_826:;				
            _A523506CC_826:
            ; //	asm	nop				
00707:      	nop
            ; //_A523506CC_827:;				
            _A523506CC_827:
            ; //	asm	nop				
00708:      	nop
            ; //_A523506CC_828:;				
            _A523506CC_828:
            ; //	asm	nop				
00709:      	nop
            ; //_A523506CC_829:;				
            _A523506CC_829:
            ; //	asm	nop				
0070A:      	nop
            ; //_A523506CC_830:;				
            _A523506CC_830:
            ; //	asm	nop				
0070B:      	nop
            ; //_A523506CC_831:;				
            _A523506CC_831:
            ; //	asm	nop				
0070C:      	nop
            ; //_A523506CC_832:;				
            _A523506CC_832:
            ; //	asm	nop				
0070D:      	nop
            ; //_A523506CC_833:;				
            _A523506CC_833:
            ; //	asm	nop				
0070E:      	nop
            ; //_A523506CC_834:;				
            _A523506CC_834:
            ; //	asm	nop				
0070F:      	nop
            ; //_A523506CC_835:;				
            _A523506CC_835:
            ; //	asm	nop				
00710:      	nop
            ; //_A523506CC_836:;				
            _A523506CC_836:
            ; //	asm set io[0x09].b14;			
00711:      	set io[0x09].b14//
            ; //_A523506CC_837:;				
            _A523506CC_837:
            ; //	asm	nop				
00712:      	nop
            ; //_A523506CC_838:;				
            _A523506CC_838:
            ; //	asm	nop				
00713:      	nop
            ; //_A523506CC_839:;				
            _A523506CC_839:
            ; //	asm	nop				
00714:      	nop
            ; //_A523506CC_840:;				
            _A523506CC_840:
            ; //	asm clr io[0x09].b14;			
00715:      	clr io[0x09].b14//
            ; //_A523506CC_841:;				
            _A523506CC_841:
            ; //	asm	nop				
00716:      	nop
            ; //_A523506CC_842:;				
            _A523506CC_842:
            ; //	asm	nop				
00717:      	nop
            ; //_A523506CC_843:;				
            _A523506CC_843:
            ; //	asm	nop				
00718:      	nop
            ; //_A523506CC_844:;				
            _A523506CC_844:
            ; //	asm	nop				
00719:      	nop
            ; //_A523506CC_845:;				
            _A523506CC_845:
            ; //	asm	nop				
0071A:      	nop
            ; //_A523506CC_846:;				
            _A523506CC_846:
            ; //	asm	nop				
0071B:      	nop
            ; //_A523506CC_847:;				
            _A523506CC_847:
            ; //	asm	nop				
0071C:      	nop
            ; //_A523506CC_848:;				
            _A523506CC_848:
            ; //	asm	nop				
0071D:      	nop
            ; //_A523506CC_849:;				
            _A523506CC_849:
            ; //	asm	nop				
0071E:      	nop
            ; //_A523506CC_850:;				
            _A523506CC_850:
            ; //	asm	nop				
0071F:      	nop
            ; //_A523506CC_851:;				
            _A523506CC_851:
            ; //	asm	nop				
00720:      	nop
            ; //_A523506CC_852:;				
            _A523506CC_852:
            ; //	asm	nop				
00721:      	nop
            ; //_A523506CC_853:;				
            _A523506CC_853:
            ; //	asm set io[0x09].b14;			
00722:      	set io[0x09].b14//
            ; //_A523506CC_854:;				
            _A523506CC_854:
            ; //	asm	nop				
00723:      	nop
            ; //_A523506CC_855:;				
            _A523506CC_855:
            ; //	asm	nop				
00724:      	nop
            ; //_A523506CC_856:;				
            _A523506CC_856:
            ; //	asm	nop				
00725:      	nop
            ; //_A523506CC_857:;				
            _A523506CC_857:
            ; //	asm clr io[0x09].b14;			
00726:      	clr io[0x09].b14//
            ; //_A523506CC_858:;				
            _A523506CC_858:
            ; //	asm	nop				
00727:      	nop
            ; //_A523506CC_859:;				
            _A523506CC_859:
            ; //	asm	nop				
00728:      	nop
            ; //_A523506CC_860:;				
            _A523506CC_860:
            ; //	asm	nop				
00729:      	nop
            ; //_A523506CC_861:;				
            _A523506CC_861:
            ; //	asm	nop				
0072A:      	nop
            ; //_A523506CC_862:;				
            _A523506CC_862:
            ; //	asm	nop				
0072B:      	nop
            ; //_A523506CC_863:;				
            _A523506CC_863:
            ; //	asm	nop				
0072C:      	nop
            ; //_A523506CC_864:;				
            _A523506CC_864:
            ; //	asm	nop				
0072D:      	nop
            ; //_A523506CC_865:;				
            _A523506CC_865:
            ; //	asm	nop				
0072E:      	nop
            ; //_A523506CC_866:;				
            _A523506CC_866:
            ; //	asm	nop				
0072F:      	nop
            ; //_A523506CC_867:;				
            _A523506CC_867:
            ; //	asm	nop				
00730:      	nop
            ; //_A523506CC_868:;				
            _A523506CC_868:
            ; //	asm	nop				
00731:      	nop
            ; //_A523506CC_869:;				
            _A523506CC_869:
            ; //	asm	nop				
00732:      	nop
            ; //_A523506CC_870:;				
            _A523506CC_870:
            ; //	asm set io[0x09].b14;			
00733:      	set io[0x09].b14//
            ; //_A523506CC_871:;				
            _A523506CC_871:
            ; //	asm	nop				
00734:      	nop
            ; //_A523506CC_872:;				
            _A523506CC_872:
            ; //	asm	nop				
00735:      	nop
            ; //_A523506CC_873:;				
            _A523506CC_873:
            ; //	asm	nop				
00736:      	nop
            ; //_A523506CC_874:;				
            _A523506CC_874:
            ; //	asm clr io[0x09].b14;			
00737:      	clr io[0x09].b14//
            ; //_A523506CC_875:;				
            _A523506CC_875:
            ; //	asm	nop				
00738:      	nop
            ; //_A523506CC_876:;				
            _A523506CC_876:
            ; //	asm	nop				
00739:      	nop
            ; //_A523506CC_877:;				
            _A523506CC_877:
            ; //	asm	nop				
0073A:      	nop
            ; //_A523506CC_878:;				
            _A523506CC_878:
            ; //	asm	nop				
0073B:      	nop
            ; //_A523506CC_879:;				
            _A523506CC_879:
            ; //	asm	nop				
0073C:      	nop
            ; //_A523506CC_880:;				
            _A523506CC_880:
            ; //	asm	nop				
0073D:      	nop
            ; //_A523506CC_881:;				
            _A523506CC_881:
            ; //	asm	nop				
0073E:      	nop
            ; //_A523506CC_882:;				
            _A523506CC_882:
            ; //	asm	nop				
0073F:      	nop
            ; //_A523506CC_883:;				
            _A523506CC_883:
            ; //	asm	nop				
00740:      	nop
            ; //_A523506CC_884:;				
            _A523506CC_884:
            ; //	asm	nop				
00741:      	nop
            ; //_A523506CC_885:;				
            _A523506CC_885:
            ; //	asm	nop				
00742:      	nop
            ; //_A523506CC_886:;				
            _A523506CC_886:
            ; //	asm	nop				
00743:      	nop
            ; //_A523506CC_887:;				
            _A523506CC_887:
            ; //	asm set io[0x09].b14;			
00744:      	set io[0x09].b14//
            ; //_A523506CC_888:;				
            _A523506CC_888:
            ; //	asm	nop				
00745:      	nop
            ; //_A523506CC_889:;				
            _A523506CC_889:
            ; //	asm	nop				
00746:      	nop
            ; //_A523506CC_890:;				
            _A523506CC_890:
            ; //	asm	nop				
00747:      	nop
            ; //_A523506CC_891:;				
            _A523506CC_891:
            ; //	asm clr io[0x09].b14;			
00748:      	clr io[0x09].b14//
            ; //_A523506CC_892:;				
            _A523506CC_892:
            ; //	asm	nop				
00749:      	nop
            ; //_A523506CC_893:;				
            _A523506CC_893:
            ; //	asm	nop				
0074A:      	nop
            ; //_A523506CC_894:;				
            _A523506CC_894:
            ; //	asm	nop				
0074B:      	nop
            ; //_A523506CC_895:;				
            _A523506CC_895:
            ; //	asm	nop				
0074C:      	nop
            ; //_A523506CC_896:;				
            _A523506CC_896:
            ; //	asm	nop				
0074D:      	nop
            ; //_A523506CC_897:;				
            _A523506CC_897:
            ; //	asm	nop				
0074E:      	nop
            ; //_A523506CC_898:;				
            _A523506CC_898:
            ; //	asm	nop				
0074F:      	nop
            ; //_A523506CC_899:;				
            _A523506CC_899:
            ; //	asm	nop				
00750:      	nop
            ; //_A523506CC_900:;				
            _A523506CC_900:
            ; //	asm	nop				
00751:      	nop
            ; //_A523506CC_901:;				
            _A523506CC_901:
            ; //	asm	nop				
00752:      	nop
            ; //_A523506CC_902:;				
            _A523506CC_902:
            ; //	asm	nop				
00753:      	nop
            ; //_A523506CC_903:;				
            _A523506CC_903:
            ; //	asm	nop				
00754:      	nop
            ; //_A523506CC_904:;				
            _A523506CC_904:
            ; //	asm set io[0x09].b14;			
00755:      	set io[0x09].b14//
            ; //_A523506CC_905:;				
            _A523506CC_905:
            ; //	asm	nop				
00756:      	nop
            ; //_A523506CC_906:;				
            _A523506CC_906:
            ; //	asm	nop				
00757:      	nop
            ; //_A523506CC_907:;				
            _A523506CC_907:
            ; //	asm	nop				
00758:      	nop
            ; //_A523506CC_908:;				
            _A523506CC_908:
            ; //	asm clr io[0x09].b14;			
00759:      	clr io[0x09].b14//
            ; //_A523506CC_909:;				
            _A523506CC_909:
            ; //	asm	nop				
0075A:      	nop
            ; //_A523506CC_910:;				
            _A523506CC_910:
            ; //	asm	nop				
0075B:      	nop
            ; //_A523506CC_911:;				
            _A523506CC_911:
            ; //	asm	nop				
0075C:      	nop
            ; //_A523506CC_912:;				
            _A523506CC_912:
            ; //	asm	nop				
0075D:      	nop
            ; //_A523506CC_913:;				
            _A523506CC_913:
            ; //	asm	nop				
0075E:      	nop
            ; //_A523506CC_914:;				
            _A523506CC_914:
            ; //	asm	nop				
0075F:      	nop
            ; //_A523506CC_915:;				
            _A523506CC_915:
            ; //	asm	nop				
00760:      	nop
            ; //_A523506CC_916:;				
            _A523506CC_916:
            ; //	asm	nop				
00761:      	nop
            ; //_A523506CC_917:;				
            _A523506CC_917:
            ; //	asm	nop				
00762:      	nop
            ; //_A523506CC_918:;				
            _A523506CC_918:
            ; //	asm	nop				
00763:      	nop
            ; //_A523506CC_919:;				
            _A523506CC_919:
            ; //	asm	nop				
00764:      	nop
            ; //_A523506CC_920:;				
            _A523506CC_920:
            ; //	asm	nop				
00765:      	nop
            ; //_A523506CC_921:;				
            _A523506CC_921:
            ; //	asm set io[0x09].b14;			
00766:      	set io[0x09].b14//
            ; //_A523506CC_922:;				
            _A523506CC_922:
            ; //	asm	nop				
00767:      	nop
            ; //_A523506CC_923:;				
            _A523506CC_923:
            ; //	asm	nop				
00768:      	nop
            ; //_A523506CC_924:;				
            _A523506CC_924:
            ; //	asm	nop				
00769:      	nop
            ; //_A523506CC_925:;				
            _A523506CC_925:
            ; //	asm clr io[0x09].b14;			
0076A:      	clr io[0x09].b14//
            ; //_A523506CC_926:;				
            _A523506CC_926:
            ; //	asm	nop				
0076B:      	nop
            ; //_A523506CC_927:;				
            _A523506CC_927:
            ; //	asm	nop				
0076C:      	nop
            ; //_A523506CC_928:;				
            _A523506CC_928:
            ; //	asm	nop				
0076D:      	nop
            ; //_A523506CC_929:;				
            _A523506CC_929:
            ; //	asm	nop				
0076E:      	nop
            ; //_A523506CC_930:;				
            _A523506CC_930:
            ; //	asm	nop				
0076F:      	nop
            ; //_A523506CC_931:;				
            _A523506CC_931:
            ; //	asm	nop				
00770:      	nop
            ; //_A523506CC_932:;				
            _A523506CC_932:
            ; //	asm	nop				
00771:      	nop
            ; //_A523506CC_933:;				
            _A523506CC_933:
            ; //	asm	nop				
00772:      	nop
            ; //_A523506CC_934:;				
            _A523506CC_934:
            ; //	asm	nop				
00773:      	nop
            ; //_A523506CC_935:;				
            _A523506CC_935:
            ; //	asm	nop				
00774:      	nop
            ; //_A523506CC_936:;				
            _A523506CC_936:
            ; //	asm	nop				
00775:      	nop
            ; //_A523506CC_937:;				
            _A523506CC_937:
            ; //	asm	nop				
00776:      	nop
            ; //_A523506CC_938:;				
            _A523506CC_938:
            ; //	asm set io[0x09].b14;			
00777:      	set io[0x09].b14//
            ; //_A523506CC_939:;				
            _A523506CC_939:
            ; //	asm	nop				
00778:      	nop
            ; //_A523506CC_940:;				
            _A523506CC_940:
            ; //	asm	nop				
00779:      	nop
            ; //_A523506CC_941:;				
            _A523506CC_941:
            ; //	asm	nop				
0077A:      	nop
            ; //_A523506CC_942:;				
            _A523506CC_942:
            ; //	asm clr io[0x09].b14;			
0077B:      	clr io[0x09].b14//
            ; //_A523506CC_943:;				
            _A523506CC_943:
            ; //	asm	nop				
0077C:      	nop
            ; //_A523506CC_944:;				
            _A523506CC_944:
            ; //	asm	nop				
0077D:      	nop
            ; //_A523506CC_945:;				
            _A523506CC_945:
            ; //	asm	nop				
0077E:      	nop
            ; //_A523506CC_946:;				
            _A523506CC_946:
            ; //	asm	nop				
0077F:      	nop
            ; //_A523506CC_947:;				
            _A523506CC_947:
            ; //	asm	nop				
00780:      	nop
            ; //_A523506CC_948:;				
            _A523506CC_948:
            ; //	asm	nop				
00781:      	nop
            ; //_A523506CC_949:;				
            _A523506CC_949:
            ; //	asm	nop				
00782:      	nop
            ; //_A523506CC_950:;				
            _A523506CC_950:
            ; //	asm	nop				
00783:      	nop
            ; //_A523506CC_951:;				
            _A523506CC_951:
            ; //	asm	nop				
00784:      	nop
            ; //_A523506CC_952:;				
            _A523506CC_952:
            ; //	asm	nop				
00785:      	nop
            ; //_A523506CC_953:;				
            _A523506CC_953:
            ; //	asm	nop				
00786:      	nop
            ; //_A523506CC_954:;				
            _A523506CC_954:
            ; //	asm	nop				
00787:      	nop
            ; //_A523506CC_955:;				
            _A523506CC_955:
            ; //	asm set io[0x09].b14;			
00788:      	set io[0x09].b14//
            ; //_A523506CC_956:;				
            _A523506CC_956:
            ; //	asm	nop				
00789:      	nop
            ; //_A523506CC_957:;				
            _A523506CC_957:
            ; //	asm	nop				
0078A:      	nop
            ; //_A523506CC_958:;				
            _A523506CC_958:
            ; //	asm	nop				
0078B:      	nop
            ; //_A523506CC_959:;				
            _A523506CC_959:
            ; //	asm clr io[0x09].b14;			
0078C:      	clr io[0x09].b14//
            ; //_A523506CC_960:;				
            _A523506CC_960:
            ; //	asm	nop				
0078D:      	nop
            ; //_A523506CC_961:;				
            _A523506CC_961:
            ; //	asm	nop				
0078E:      	nop
            ; //_A523506CC_962:;				
            _A523506CC_962:
            ; //	asm	nop				
0078F:      	nop
            ; //_A523506CC_963:;				
            _A523506CC_963:
            ; //	asm	nop				
00790:      	nop
            ; //_A523506CC_964:;				
            _A523506CC_964:
            ; //	asm	nop				
00791:      	nop
            ; //_A523506CC_965:;				
            _A523506CC_965:
            ; //	asm	nop				
00792:      	nop
            ; //_A523506CC_966:;				
            _A523506CC_966:
            ; //	asm	nop				
00793:      	nop
            ; //_A523506CC_967:;				
            _A523506CC_967:
            ; //	asm	nop				
00794:      	nop
            ; //_A523506CC_968:;				
            _A523506CC_968:
            ; //	asm	nop				
00795:      	nop
            ; //_A523506CC_969:;				
            _A523506CC_969:
            ; //	asm	nop				
00796:      	nop
            ; //_A523506CC_970:;				
            _A523506CC_970:
            ; //	asm	nop				
00797:      	nop
            ; //_A523506CC_971:;				
            _A523506CC_971:
            ; //	asm	nop				
00798:      	nop
            ; //_A523506CC_972:;				
            _A523506CC_972:
            ; //	asm set io[0x09].b14;			
00799:      	set io[0x09].b14//
            ; //_A523506CC_973:;				
            _A523506CC_973:
            ; //	asm	nop				
0079A:      	nop
            ; //_A523506CC_974:;				
            _A523506CC_974:
            ; //	asm	nop				
0079B:      	nop
            ; //_A523506CC_975:;				
            _A523506CC_975:
            ; //	asm	nop				
0079C:      	nop
            ; //_A523506CC_976:;				
            _A523506CC_976:
            ; //	asm clr io[0x09].b14;			
0079D:      	clr io[0x09].b14//
            ; //_A523506CC_977:;				
            _A523506CC_977:
            ; //	asm	nop				
0079E:      	nop
            ; //_A523506CC_978:;				
            _A523506CC_978:
            ; //	asm	nop				
0079F:      	nop
            ; //_A523506CC_979:;				
            _A523506CC_979:
            ; //	asm	nop				
007A0:      	nop
            ; //_A523506CC_980:;				
            _A523506CC_980:
            ; //	asm	nop				
007A1:      	nop
            ; //_A523506CC_981:;				
            _A523506CC_981:
            ; //	asm	nop				
007A2:      	nop
            ; //_A523506CC_982:;				
            _A523506CC_982:
            ; //	asm	nop				
007A3:      	nop
            ; //_A523506CC_983:;				
            _A523506CC_983:
            ; //	asm	nop				
007A4:      	nop
            ; //_A523506CC_984:;				
            _A523506CC_984:
            ; //	asm	nop				
007A5:      	nop
            ; //_A523506CC_985:;				
            _A523506CC_985:
            ; //	asm	nop				
007A6:      	nop
            ; //_A523506CC_986:;				
            _A523506CC_986:
            ; //	asm	nop				
007A7:      	nop
            ; //_A523506CC_987:;				
            _A523506CC_987:
            ; //	asm	nop				
007A8:      	nop
            ; //_A523506CC_988:;				
            _A523506CC_988:
            ; //	asm	nop				
007A9:      	nop
            ; //_A523506CC_989:;				
            _A523506CC_989:
            ; //	asm set io[0x09].b14;			
007AA:      	set io[0x09].b14//
            ; //_A523506CC_990:;				
            _A523506CC_990:
            ; //	asm	nop				
007AB:      	nop
            ; //_A523506CC_991:;				
            _A523506CC_991:
            ; //	asm	nop				
007AC:      	nop
            ; //_A523506CC_992:;				
            _A523506CC_992:
            ; //	asm	nop				
007AD:      	nop
            ; //_A523506CC_993:;				
            _A523506CC_993:
            ; //	asm clr io[0x09].b14;			
007AE:      	clr io[0x09].b14//
            ; //_A523506CC_994:;				
            _A523506CC_994:
            ; //	asm	nop				
007AF:      	nop
            ; //_A523506CC_995:;				
            _A523506CC_995:
            ; //	asm	nop				
007B0:      	nop
            ; //_A523506CC_996:;				
            _A523506CC_996:
            ; //	asm	nop				
007B1:      	nop
            ; //_A523506CC_997:;				
            _A523506CC_997:
            ; //	asm	nop				
007B2:      	nop
            ; //_A523506CC_998:;				
            _A523506CC_998:
            ; //	asm	nop				
007B3:      	nop
            ; //_A523506CC_999:;				
            _A523506CC_999:
            ; //	asm	nop				
007B4:      	nop
            ; //_A523506CC_1000:;				
            _A523506CC_1000:
            ; //	asm	nop				
007B5:      	nop
            ; //_A523506CC_1001:;				
            _A523506CC_1001:
            ; //	asm	nop				
007B6:      	nop
            ; //_A523506CC_1002:;				
            _A523506CC_1002:
            ; //	asm	nop				
007B7:      	nop
            ; //_A523506CC_1003:;				
            _A523506CC_1003:
            ; //	asm	nop				
007B8:      	nop
            ; //_A523506CC_1004:;				
            _A523506CC_1004:
            ; //	asm	nop				
007B9:      	nop
            ; //_A523506CC_1005:;				
            _A523506CC_1005:
            ; //	asm	nop				
007BA:      	nop
            ; //_A523506CC_1006:;				
            _A523506CC_1006:
            ; //	asm set io[0x09].b14;			
007BB:      	set io[0x09].b14//
            ; //_A523506CC_1007:;				
            _A523506CC_1007:
            ; //	asm	nop				
007BC:      	nop
            ; //_A523506CC_1008:;				
            _A523506CC_1008:
            ; //	asm	nop				
007BD:      	nop
            ; //_A523506CC_1009:;				
            _A523506CC_1009:
            ; //	asm	nop				
007BE:      	nop
            ; //_A523506CC_1010:;				
            _A523506CC_1010:
            ; //	asm clr io[0x09].b14;			
007BF:      	clr io[0x09].b14//
            ; //_A523506CC_1011:;				
            _A523506CC_1011:
            ; //	asm	nop				
007C0:      	nop
            ; //_A523506CC_1012:;				
            _A523506CC_1012:
            ; //	asm	nop				
007C1:      	nop
            ; //_A523506CC_1013:;				
            _A523506CC_1013:
            ; //	asm	nop				
007C2:      	nop
            ; //_A523506CC_1014:;				
            _A523506CC_1014:
            ; //	asm	nop				
007C3:      	nop
            ; //_A523506CC_1015:;				
            _A523506CC_1015:
            ; //	asm	nop				
007C4:      	nop
            ; //_A523506CC_1016:;				
            _A523506CC_1016:
            ; //	asm	nop				
007C5:      	nop
            ; //_A523506CC_1017:;				
            _A523506CC_1017:
            ; //	asm	nop				
007C6:      	nop
            ; //_A523506CC_1018:;				
            _A523506CC_1018:
            ; //	asm	nop				
007C7:      	nop
            ; //_A523506CC_1019:;				
            _A523506CC_1019:
            ; //	asm	nop				
007C8:      	nop
            ; //_A523506CC_1020:;				
            _A523506CC_1020:
            ; //	asm	nop				
007C9:      	nop
            ; //_A523506CC_1021:;				
            _A523506CC_1021:
            ; //	asm	nop				
007CA:      	nop
            ; //_A523506CC_1022:;				
            _A523506CC_1022:
            ; //	asm	nop				
007CB:      	nop
            ; //_A523506CC_1023:;				
            _A523506CC_1023:
            ; //	asm set io[0x09].b14;			
007CC:      	set io[0x09].b14//
            ; //_A523506CC_1024:;				
            _A523506CC_1024:
            ; //	asm	nop				
007CD:      	nop
            ; //_A523506CC_1025:;				
            _A523506CC_1025:
            ; //	asm	nop				
007CE:      	nop
            ; //_A523506CC_1026:;				
            _A523506CC_1026:
            ; //	asm	nop				
007CF:      	nop
            ; //_A523506CC_1027:;				
            _A523506CC_1027:
            ; //	asm clr io[0x09].b14;			
007D0:      	clr io[0x09].b14//
            ; //_A523506CC_1028:;				
            _A523506CC_1028:
            ; //	asm	nop				
007D1:      	nop
            ; //_A523506CC_1029:;				
            _A523506CC_1029:
            ; //	asm	nop				
007D2:      	nop
            ; //_A523506CC_1030:;				
            _A523506CC_1030:
            ; //	asm	nop				
007D3:      	nop
            ; //_A523506CC_1031:;				
            _A523506CC_1031:
            ; //	asm	nop				
007D4:      	nop
            ; //_A523506CC_1032:;				
            _A523506CC_1032:
            ; //	asm	nop				
007D5:      	nop
            ; //_A523506CC_1033:;				
            _A523506CC_1033:
            ; //	asm	nop				
007D6:      	nop
            ; //_A523506CC_1034:;				
            _A523506CC_1034:
            ; //	asm	nop				
007D7:      	nop
            ; //_A523506CC_1035:;				
            _A523506CC_1035:
            ; //	asm	nop				
007D8:      	nop
            ; //_A523506CC_1036:;				
            _A523506CC_1036:
            ; //	asm	nop				
007D9:      	nop
            ; //_A523506CC_1037:;				
            _A523506CC_1037:
            ; //	asm	nop				
007DA:      	nop
            ; //_A523506CC_1038:;				
            _A523506CC_1038:
            ; //	asm	nop				
007DB:      	nop
            ; //_A523506CC_1039:;				
            _A523506CC_1039:
            ; //	asm	nop				
007DC:      	nop
            ; //_A523506CC_1040:;				
            _A523506CC_1040:
            ; //	asm set io[0x09].b14;			
007DD:      	set io[0x09].b14//
            ; //_A523506CC_1041:;				
            _A523506CC_1041:
            ; //	asm	nop				
007DE:      	nop
            ; //_A523506CC_1042:;				
            _A523506CC_1042:
            ; //	asm	nop				
007DF:      	nop
            ; //_A523506CC_1043:;				
            _A523506CC_1043:
            ; //	asm	nop				
007E0:      	nop
            ; //_A523506CC_1044:;				
            _A523506CC_1044:
            ; //	asm clr io[0x09].b14;			
007E1:      	clr io[0x09].b14//
            ; //_A523506CC_1045:;				
            _A523506CC_1045:
            ; //	asm	nop				
007E2:      	nop
            ; //_A523506CC_1046:;				
            _A523506CC_1046:
            ; //	asm	nop				
007E3:      	nop
            ; //_A523506CC_1047:;				
            _A523506CC_1047:
            ; //	asm	nop				
007E4:      	nop
            ; //_A523506CC_1048:;				
            _A523506CC_1048:
            ; //	asm	nop				
007E5:      	nop
            ; //_A523506CC_1049:;				
            _A523506CC_1049:
            ; //	asm	nop				
007E6:      	nop
            ; //_A523506CC_1050:;				
            _A523506CC_1050:
            ; //	asm	nop				
007E7:      	nop
            ; //_A523506CC_1051:;				
            _A523506CC_1051:
            ; //	asm	nop				
007E8:      	nop
            ; //_A523506CC_1052:;				
            _A523506CC_1052:
            ; //	asm	nop				
007E9:      	nop
            ; //_A523506CC_1053:;				
            _A523506CC_1053:
            ; //	asm	nop				
007EA:      	nop
            ; //_A523506CC_1054:;				
            _A523506CC_1054:
            ; //	asm	nop				
007EB:      	nop
            ; //_A523506CC_1055:;				
            _A523506CC_1055:
            ; //	asm	nop				
007EC:      	nop
            ; //_A523506CC_1056:;				
            _A523506CC_1056:
            ; //	asm	nop				
007ED:      	nop
            ; //_A523506CC_1057:;				
            _A523506CC_1057:
            ; //	asm set io[0x09].b14;			
007EE:      	set io[0x09].b14//
            ; //_A523506CC_1058:;				
            _A523506CC_1058:
            ; //	asm	nop				
007EF:      	nop
            ; //_A523506CC_1059:;				
            _A523506CC_1059:
            ; //	asm	nop				
007F0:      	nop
            ; //_A523506CC_1060:;				
            _A523506CC_1060:
            ; //	asm	nop				
007F1:      	nop
            ; //_A523506CC_1061:;				
            _A523506CC_1061:
            ; //	asm clr io[0x09].b14;			
007F2:      	clr io[0x09].b14//
            ; //_A523506CC_1062:;				
            _A523506CC_1062:
            ; //	asm	nop				
007F3:      	nop
            ; //_A523506CC_1063:;				
            _A523506CC_1063:
            ; //	asm	nop				
007F4:      	nop
            ; //_A523506CC_1064:;				
            _A523506CC_1064:
            ; //	asm	nop				
007F5:      	nop
            ; //_A523506CC_1065:;				
            _A523506CC_1065:
            ; //	asm	nop				
007F6:      	nop
            ; //_A523506CC_1066:;				
            _A523506CC_1066:
            ; //	asm	nop				
007F7:      	nop
            ; //_A523506CC_1067:;				
            _A523506CC_1067:
            ; //	asm	nop				
007F8:      	nop
            ; //_A523506CC_1068:;				
            _A523506CC_1068:
            ; //	asm	nop				
007F9:      	nop
            ; //_A523506CC_1069:;				
            _A523506CC_1069:
            ; //	asm	nop				
007FA:      	nop
            ; //_A523506CC_1070:;				
            _A523506CC_1070:
            ; //	asm	nop				
007FB:      	nop
            ; //_A523506CC_1071:;				
            _A523506CC_1071:
            ; //	asm	nop				
007FC:      	nop
            ; //_A523506CC_1072:;				
            _A523506CC_1072:
            ; //	asm	nop				
007FD:      	nop
            ; //_A523506CC_1073:;				
            _A523506CC_1073:
            ; //	asm	nop				
007FE:      	nop
            ; //_A523506CC_1074:;				
            _A523506CC_1074:
            ; //	asm set io[0x09].b14;			
007FF:      	set io[0x09].b14//
            ; //_A523506CC_1075:;				
            _A523506CC_1075:
            ; //	asm	nop				
00800:      	nop
            ; //_A523506CC_1076:;				
            _A523506CC_1076:
            ; //	asm	nop				
00801:      	nop
            ; //_A523506CC_1077:;				
            _A523506CC_1077:
            ; //	asm	nop				
00802:      	nop
            ; //_A523506CC_1078:;				
            _A523506CC_1078:
            ; //	asm clr io[0x09].b14;			
00803:      	clr io[0x09].b14//
            ; //_A523506CC_1079:;				
            _A523506CC_1079:
            ; //	asm	nop				
00804:      	nop
            ; //_A523506CC_1080:;				
            _A523506CC_1080:
            ; //	asm	nop				
00805:      	nop
            ; //_A523506CC_1081:;				
            _A523506CC_1081:
            ; //	asm	nop				
00806:      	nop
            ; //_A523506CC_1082:;				
            _A523506CC_1082:
            ; //	asm	nop				
00807:      	nop
            ; //_A523506CC_1083:;				
            _A523506CC_1083:
            ; //	asm	nop				
00808:      	nop
            ; //_A523506CC_1084:;				
            _A523506CC_1084:
            ; //	asm	nop				
00809:      	nop
            ; //_A523506CC_1085:;				
            _A523506CC_1085:
            ; //	asm	nop				
0080A:      	nop
            ; //_A523506CC_1086:;				
            _A523506CC_1086:
            ; //	asm	nop				
0080B:      	nop
            ; //_A523506CC_1087:;				
            _A523506CC_1087:
            ; //	asm	nop				
0080C:      	nop
            ; //_A523506CC_1088:;				
            _A523506CC_1088:
            ; //	asm	nop				
0080D:      	nop
            ; //_A523506CC_1089:;				
            _A523506CC_1089:
            ; //	asm	nop				
0080E:      	nop
            ; //_A523506CC_1090:;				
            _A523506CC_1090:
            ; //	asm	nop				
0080F:      	nop
            ; //_A523506CC_1091:;				
            _A523506CC_1091:
            ; //	asm set io[0x09].b14;			
00810:      	set io[0x09].b14//
            ; //_A523506CC_1092:;				
            _A523506CC_1092:
            ; //	asm	nop				
00811:      	nop
            ; //_A523506CC_1093:;				
            _A523506CC_1093:
            ; //	asm	nop				
00812:      	nop
            ; //_A523506CC_1094:;				
            _A523506CC_1094:
            ; //	asm	nop				
00813:      	nop
            ; //_A523506CC_1095:;				
            _A523506CC_1095:
            ; //	asm clr io[0x09].b14;			
00814:      	clr io[0x09].b14//
            ; //_A523506CC_1096:;				
            _A523506CC_1096:
            ; //	asm	nop				
00815:      	nop
            ; //_A523506CC_1097:;				
            _A523506CC_1097:
            ; //	asm	nop				
00816:      	nop
            ; //_A523506CC_1098:;				
            _A523506CC_1098:
            ; //	asm	nop				
00817:      	nop
            ; //_A523506CC_1099:;				
            _A523506CC_1099:
            ; //	asm	nop				
00818:      	nop
            ; //_A523506CC_1100:;				
            _A523506CC_1100:
            ; //	asm	nop				
00819:      	nop
            ; //_A523506CC_1101:;				
            _A523506CC_1101:
            ; //	asm	nop				
0081A:      	nop
            ; //_A523506CC_1102:;				
            _A523506CC_1102:
            ; //	asm	nop				
0081B:      	nop
            ; //_A523506CC_1103:;				
            _A523506CC_1103:
            ; //	asm	nop				
0081C:      	nop
            ; //_A523506CC_1104:;				
            _A523506CC_1104:
            ; //	asm	nop				
0081D:      	nop
            ; //_A523506CC_1105:;				
            _A523506CC_1105:
            ; //	asm	nop				
0081E:      	nop
            ; //_A523506CC_1106:;				
            _A523506CC_1106:
            ; //	asm	nop				
0081F:      	nop
            ; //_A523506CC_1107:;				
            _A523506CC_1107:
            ; //	asm	nop				
00820:      	nop
            ; //_A523506CC_1108:;				
            _A523506CC_1108:
            ; //	goto LD63FD439_103;			
00821:      	pch =	LD63FD439_103
00822:      	ljmp	LD63FD439_103
            ; //LD63FD439_107:;					
            LD63FD439_107:
            ; //_A523506CC_1109:;				
            _A523506CC_1109:
            ; //	asm set io[0x09].b14;			
00823:      	set io[0x09].b14//
            ; //_A523506CC_1110:;				
            _A523506CC_1110:
            ; //	asm	nop				
00824:      	nop
            ; //_A523506CC_1111:;				
            _A523506CC_1111:
            ; //	asm	nop				
00825:      	nop
            ; //_A523506CC_1112:;				
            _A523506CC_1112:
            ; //	asm	nop				
00826:      	nop
            ; //_A523506CC_1113:;				
            _A523506CC_1113:
            ; //	asm clr io[0x09].b14;			
00827:      	clr io[0x09].b14//
            ; //_A523506CC_1114:;				
            _A523506CC_1114:
            ; //	asm	nop				
00828:      	nop
            ; //_A523506CC_1115:;				
            _A523506CC_1115:
            ; //	asm	nop				
00829:      	nop
            ; //_A523506CC_1116:;				
            _A523506CC_1116:
            ; //	asm	nop				
0082A:      	nop
            ; //_A523506CC_1117:;				
            _A523506CC_1117:
            ; //	asm	nop				
0082B:      	nop
            ; //_A523506CC_1118:;				
            _A523506CC_1118:
            ; //	asm	nop				
0082C:      	nop
            ; //_A523506CC_1119:;				
            _A523506CC_1119:
            ; //	asm	nop				
0082D:      	nop
            ; //_A523506CC_1120:;				
            _A523506CC_1120:
            ; //	asm	nop				
0082E:      	nop
            ; //_A523506CC_1121:;				
            _A523506CC_1121:
            ; //	asm	nop				
0082F:      	nop
            ; //_A523506CC_1122:;				
            _A523506CC_1122:
            ; //	asm	nop				
00830:      	nop
            ; //_A523506CC_1123:;				
            _A523506CC_1123:
            ; //	asm	nop				
00831:      	nop
            ; //_A523506CC_1124:;				
            _A523506CC_1124:
            ; //	asm	nop				
00832:      	nop
            ; //_A523506CC_1125:;				
            _A523506CC_1125:
            ; //	asm	nop				
00833:      	nop
            ; //_A523506CC_1126:;				
            _A523506CC_1126:
            ; //	asm set io[0x09].b14;			
00834:      	set io[0x09].b14//
            ; //_A523506CC_1127:;				
            _A523506CC_1127:
            ; //	asm	nop				
00835:      	nop
            ; //_A523506CC_1128:;				
            _A523506CC_1128:
            ; //	asm	nop				
00836:      	nop
            ; //_A523506CC_1129:;				
            _A523506CC_1129:
            ; //	asm	nop				
00837:      	nop
            ; //_A523506CC_1130:;				
            _A523506CC_1130:
            ; //	asm clr io[0x09].b14;			
00838:      	clr io[0x09].b14//
            ; //_A523506CC_1131:;				
            _A523506CC_1131:
            ; //	asm	nop				
00839:      	nop
            ; //_A523506CC_1132:;				
            _A523506CC_1132:
            ; //	asm	nop				
0083A:      	nop
            ; //_A523506CC_1133:;				
            _A523506CC_1133:
            ; //	asm	nop				
0083B:      	nop
            ; //_A523506CC_1134:;				
            _A523506CC_1134:
            ; //	asm	nop				
0083C:      	nop
            ; //_A523506CC_1135:;				
            _A523506CC_1135:
            ; //	asm	nop				
0083D:      	nop
            ; //_A523506CC_1136:;				
            _A523506CC_1136:
            ; //	asm	nop				
0083E:      	nop
            ; //_A523506CC_1137:;				
            _A523506CC_1137:
            ; //	asm	nop				
0083F:      	nop
            ; //_A523506CC_1138:;				
            _A523506CC_1138:
            ; //	asm	nop				
00840:      	nop
            ; //_A523506CC_1139:;				
            _A523506CC_1139:
            ; //	asm	nop				
00841:      	nop
            ; //_A523506CC_1140:;				
            _A523506CC_1140:
            ; //	asm	nop				
00842:      	nop
            ; //_A523506CC_1141:;				
            _A523506CC_1141:
            ; //	asm	nop				
00843:      	nop
            ; //_A523506CC_1142:;				
            _A523506CC_1142:
            ; //	asm	nop				
00844:      	nop
            ; //_A523506CC_1143:;				
            _A523506CC_1143:
            ; //	asm set io[0x09].b14;			
00845:      	set io[0x09].b14//
            ; //_A523506CC_1144:;				
            _A523506CC_1144:
            ; //	asm	nop				
00846:      	nop
            ; //_A523506CC_1145:;				
            _A523506CC_1145:
            ; //	asm	nop				
00847:      	nop
            ; //_A523506CC_1146:;				
            _A523506CC_1146:
            ; //	asm	nop				
00848:      	nop
            ; //_A523506CC_1147:;				
            _A523506CC_1147:
            ; //	asm clr io[0x09].b14;			
00849:      	clr io[0x09].b14//
            ; //_A523506CC_1148:;				
            _A523506CC_1148:
            ; //	asm	nop				
0084A:      	nop
            ; //_A523506CC_1149:;				
            _A523506CC_1149:
            ; //	asm	nop				
0084B:      	nop
            ; //_A523506CC_1150:;				
            _A523506CC_1150:
            ; //	asm	nop				
0084C:      	nop
            ; //_A523506CC_1151:;				
            _A523506CC_1151:
            ; //	asm	nop				
0084D:      	nop
            ; //_A523506CC_1152:;				
            _A523506CC_1152:
            ; //	asm	nop				
0084E:      	nop
            ; //_A523506CC_1153:;				
            _A523506CC_1153:
            ; //	asm	nop				
0084F:      	nop
            ; //_A523506CC_1154:;				
            _A523506CC_1154:
            ; //	asm	nop				
00850:      	nop
            ; //_A523506CC_1155:;				
            _A523506CC_1155:
            ; //	asm	nop				
00851:      	nop
            ; //_A523506CC_1156:;				
            _A523506CC_1156:
            ; //	asm	nop				
00852:      	nop
            ; //_A523506CC_1157:;				
            _A523506CC_1157:
            ; //	asm	nop				
00853:      	nop
            ; //_A523506CC_1158:;				
            _A523506CC_1158:
            ; //	asm	nop				
00854:      	nop
            ; //_A523506CC_1159:;				
            _A523506CC_1159:
            ; //	asm	nop				
00855:      	nop
            ; //_A523506CC_1160:;				
            _A523506CC_1160:
            ; //	asm set io[0x09].b14;			
00856:      	set io[0x09].b14//
            ; //_A523506CC_1161:;				
            _A523506CC_1161:
            ; //	asm	nop				
00857:      	nop
            ; //_A523506CC_1162:;				
            _A523506CC_1162:
            ; //	asm	nop				
00858:      	nop
            ; //_A523506CC_1163:;				
            _A523506CC_1163:
            ; //	asm	nop				
00859:      	nop
            ; //_A523506CC_1164:;				
            _A523506CC_1164:
            ; //	asm clr io[0x09].b14;			
0085A:      	clr io[0x09].b14//
            ; //_A523506CC_1165:;				
            _A523506CC_1165:
            ; //	asm	nop				
0085B:      	nop
            ; //_A523506CC_1166:;				
            _A523506CC_1166:
            ; //	asm	nop				
0085C:      	nop
            ; //_A523506CC_1167:;				
            _A523506CC_1167:
            ; //	asm	nop				
0085D:      	nop
            ; //_A523506CC_1168:;				
            _A523506CC_1168:
            ; //	asm	nop				
0085E:      	nop
            ; //_A523506CC_1169:;				
            _A523506CC_1169:
            ; //	asm	nop				
0085F:      	nop
            ; //_A523506CC_1170:;				
            _A523506CC_1170:
            ; //	asm	nop				
00860:      	nop
            ; //_A523506CC_1171:;				
            _A523506CC_1171:
            ; //	asm	nop				
00861:      	nop
            ; //_A523506CC_1172:;				
            _A523506CC_1172:
            ; //	asm	nop				
00862:      	nop
            ; //_A523506CC_1173:;				
            _A523506CC_1173:
            ; //	asm	nop				
00863:      	nop
            ; //_A523506CC_1174:;				
            _A523506CC_1174:
            ; //	asm	nop				
00864:      	nop
            ; //_A523506CC_1175:;				
            _A523506CC_1175:
            ; //	asm	nop				
00865:      	nop
            ; //_A523506CC_1176:;				
            _A523506CC_1176:
            ; //	asm	nop				
00866:      	nop
            ; //_A523506CC_1177:;				
            _A523506CC_1177:
            ; //	asm set io[0x09].b14;			
00867:      	set io[0x09].b14//
            ; //_A523506CC_1178:;				
            _A523506CC_1178:
            ; //	asm	nop				
00868:      	nop
            ; //_A523506CC_1179:;				
            _A523506CC_1179:
            ; //	asm	nop				
00869:      	nop
            ; //_A523506CC_1180:;				
            _A523506CC_1180:
            ; //	asm	nop				
0086A:      	nop
            ; //_A523506CC_1181:;				
            _A523506CC_1181:
            ; //	asm clr io[0x09].b14;			
0086B:      	clr io[0x09].b14//
            ; //_A523506CC_1182:;				
            _A523506CC_1182:
            ; //	asm	nop				
0086C:      	nop
            ; //_A523506CC_1183:;				
            _A523506CC_1183:
            ; //	asm	nop				
0086D:      	nop
            ; //_A523506CC_1184:;				
            _A523506CC_1184:
            ; //	asm	nop				
0086E:      	nop
            ; //_A523506CC_1185:;				
            _A523506CC_1185:
            ; //	asm	nop				
0086F:      	nop
            ; //_A523506CC_1186:;				
            _A523506CC_1186:
            ; //	asm	nop				
00870:      	nop
            ; //_A523506CC_1187:;				
            _A523506CC_1187:
            ; //	asm	nop				
00871:      	nop
            ; //_A523506CC_1188:;				
            _A523506CC_1188:
            ; //	asm	nop				
00872:      	nop
            ; //_A523506CC_1189:;				
            _A523506CC_1189:
            ; //	asm	nop				
00873:      	nop
            ; //_A523506CC_1190:;				
            _A523506CC_1190:
            ; //	asm	nop				
00874:      	nop
            ; //_A523506CC_1191:;				
            _A523506CC_1191:
            ; //	asm	nop				
00875:      	nop
            ; //_A523506CC_1192:;				
            _A523506CC_1192:
            ; //	asm	nop				
00876:      	nop
            ; //_A523506CC_1193:;				
            _A523506CC_1193:
            ; //	asm	nop				
00877:      	nop
            ; //_A523506CC_1194:;				
            _A523506CC_1194:
            ; //	asm set io[0x09].b14;			
00878:      	set io[0x09].b14//
            ; //_A523506CC_1195:;				
            _A523506CC_1195:
            ; //	asm	nop				
00879:      	nop
            ; //_A523506CC_1196:;				
            _A523506CC_1196:
            ; //	asm	nop				
0087A:      	nop
            ; //_A523506CC_1197:;				
            _A523506CC_1197:
            ; //	asm	nop				
0087B:      	nop
            ; //_A523506CC_1198:;				
            _A523506CC_1198:
            ; //	asm clr io[0x09].b14;			
0087C:      	clr io[0x09].b14//
            ; //_A523506CC_1199:;				
            _A523506CC_1199:
            ; //	asm	nop				
0087D:      	nop
            ; //_A523506CC_1200:;				
            _A523506CC_1200:
            ; //	asm	nop				
0087E:      	nop
            ; //_A523506CC_1201:;				
            _A523506CC_1201:
            ; //	asm	nop				
0087F:      	nop
            ; //_A523506CC_1202:;				
            _A523506CC_1202:
            ; //	asm	nop				
00880:      	nop
            ; //_A523506CC_1203:;				
            _A523506CC_1203:
            ; //	asm	nop				
00881:      	nop
            ; //_A523506CC_1204:;				
            _A523506CC_1204:
            ; //	asm	nop				
00882:      	nop
            ; //_A523506CC_1205:;				
            _A523506CC_1205:
            ; //	asm	nop				
00883:      	nop
            ; //_A523506CC_1206:;				
            _A523506CC_1206:
            ; //	asm	nop				
00884:      	nop
            ; //_A523506CC_1207:;				
            _A523506CC_1207:
            ; //	asm	nop				
00885:      	nop
            ; //_A523506CC_1208:;				
            _A523506CC_1208:
            ; //	asm	nop				
00886:      	nop
            ; //_A523506CC_1209:;				
            _A523506CC_1209:
            ; //	asm	nop				
00887:      	nop
            ; //_A523506CC_1210:;				
            _A523506CC_1210:
            ; //	asm	nop				
00888:      	nop
            ; //_A523506CC_1211:;				
            _A523506CC_1211:
            ; //	asm set io[0x09].b14;			
00889:      	set io[0x09].b14//
            ; //_A523506CC_1212:;				
            _A523506CC_1212:
            ; //	asm	nop				
0088A:      	nop
            ; //_A523506CC_1213:;				
            _A523506CC_1213:
            ; //	asm	nop				
0088B:      	nop
            ; //_A523506CC_1214:;				
            _A523506CC_1214:
            ; //	asm	nop				
0088C:      	nop
            ; //_A523506CC_1215:;				
            _A523506CC_1215:
            ; //	asm clr io[0x09].b14;			
0088D:      	clr io[0x09].b14//
            ; //_A523506CC_1216:;				
            _A523506CC_1216:
            ; //	asm	nop				
0088E:      	nop
            ; //_A523506CC_1217:;				
            _A523506CC_1217:
            ; //	asm	nop				
0088F:      	nop
            ; //_A523506CC_1218:;				
            _A523506CC_1218:
            ; //	asm	nop				
00890:      	nop
            ; //_A523506CC_1219:;				
            _A523506CC_1219:
            ; //	asm	nop				
00891:      	nop
            ; //_A523506CC_1220:;				
            _A523506CC_1220:
            ; //	asm	nop				
00892:      	nop
            ; //_A523506CC_1221:;				
            _A523506CC_1221:
            ; //	asm	nop				
00893:      	nop
            ; //_A523506CC_1222:;				
            _A523506CC_1222:
            ; //	asm	nop				
00894:      	nop
            ; //_A523506CC_1223:;				
            _A523506CC_1223:
            ; //	asm	nop				
00895:      	nop
            ; //_A523506CC_1224:;				
            _A523506CC_1224:
            ; //	asm	nop				
00896:      	nop
            ; //_A523506CC_1225:;				
            _A523506CC_1225:
            ; //	asm	nop				
00897:      	nop
            ; //_A523506CC_1226:;				
            _A523506CC_1226:
            ; //	asm	nop				
00898:      	nop
            ; //_A523506CC_1227:;				
            _A523506CC_1227:
            ; //	asm	nop				
00899:      	nop
            ; //_A523506CC_1228:;				
            _A523506CC_1228:
            ; //	asm set io[0x09].b14;			
0089A:      	set io[0x09].b14//
            ; //_A523506CC_1229:;				
            _A523506CC_1229:
            ; //	asm	nop				
0089B:      	nop
            ; //_A523506CC_1230:;				
            _A523506CC_1230:
            ; //	asm	nop				
0089C:      	nop
            ; //_A523506CC_1231:;				
            _A523506CC_1231:
            ; //	asm	nop				
0089D:      	nop
            ; //_A523506CC_1232:;				
            _A523506CC_1232:
            ; //	asm clr io[0x09].b14;			
0089E:      	clr io[0x09].b14//
            ; //_A523506CC_1233:;				
            _A523506CC_1233:
            ; //	asm	nop				
0089F:      	nop
            ; //_A523506CC_1234:;				
            _A523506CC_1234:
            ; //	asm	nop				
008A0:      	nop
            ; //_A523506CC_1235:;				
            _A523506CC_1235:
            ; //	asm	nop				
008A1:      	nop
            ; //_A523506CC_1236:;				
            _A523506CC_1236:
            ; //	asm	nop				
008A2:      	nop
            ; //_A523506CC_1237:;				
            _A523506CC_1237:
            ; //	asm	nop				
008A3:      	nop
            ; //_A523506CC_1238:;				
            _A523506CC_1238:
            ; //	asm	nop				
008A4:      	nop
            ; //_A523506CC_1239:;				
            _A523506CC_1239:
            ; //	asm	nop				
008A5:      	nop
            ; //_A523506CC_1240:;				
            _A523506CC_1240:
            ; //	asm	nop				
008A6:      	nop
            ; //_A523506CC_1241:;				
            _A523506CC_1241:
            ; //	asm	nop				
008A7:      	nop
            ; //_A523506CC_1242:;				
            _A523506CC_1242:
            ; //	asm	nop				
008A8:      	nop
            ; //_A523506CC_1243:;				
            _A523506CC_1243:
            ; //	asm	nop				
008A9:      	nop
            ; //_A523506CC_1244:;				
            _A523506CC_1244:
            ; //	asm	nop				
008AA:      	nop
            ; //_A523506CC_1245:;				
            _A523506CC_1245:
            ; //	asm set io[0x09].b14;			
008AB:      	set io[0x09].b14//
            ; //_A523506CC_1246:;				
            _A523506CC_1246:
            ; //	asm	nop				
008AC:      	nop
            ; //_A523506CC_1247:;				
            _A523506CC_1247:
            ; //	asm	nop				
008AD:      	nop
            ; //_A523506CC_1248:;				
            _A523506CC_1248:
            ; //	asm	nop				
008AE:      	nop
            ; //_A523506CC_1249:;				
            _A523506CC_1249:
            ; //	asm	nop				
008AF:      	nop
            ; //_A523506CC_1250:;				
            _A523506CC_1250:
            ; //	asm	nop				
008B0:      	nop
            ; //_A523506CC_1251:;				
            _A523506CC_1251:
            ; //	asm	nop				
008B1:      	nop
            ; //_A523506CC_1252:;				
            _A523506CC_1252:
            ; //	asm	nop				
008B2:      	nop
            ; //_A523506CC_1253:;				
            _A523506CC_1253:
            ; //	asm	nop				
008B3:      	nop
            ; //_A523506CC_1254:;				
            _A523506CC_1254:
            ; //	asm	nop				
008B4:      	nop
            ; //_A523506CC_1255:;				
            _A523506CC_1255:
            ; //	asm	nop				
008B5:      	nop
            ; //_A523506CC_1256:;				
            _A523506CC_1256:
            ; //	asm	nop				
008B6:      	nop
            ; //_A523506CC_1257:;				
            _A523506CC_1257:
            ; //	asm	nop				
008B7:      	nop
            ; //_A523506CC_1258:;				
            _A523506CC_1258:
            ; //	asm clr io[0x09].b14;			
008B8:      	clr io[0x09].b14//
            ; //_A523506CC_1259:;				
            _A523506CC_1259:
            ; //	asm	nop				
008B9:      	nop
            ; //_A523506CC_1260:;				
            _A523506CC_1260:
            ; //	asm	nop				
008BA:      	nop
            ; //_A523506CC_1261:;				
            _A523506CC_1261:
            ; //	asm	nop				
008BB:      	nop
            ; //_A523506CC_1262:;				
            _A523506CC_1262:
            ; //	asm set io[0x09].b14;			
008BC:      	set io[0x09].b14//
            ; //_A523506CC_1263:;				
            _A523506CC_1263:
            ; //	asm	nop				
008BD:      	nop
            ; //_A523506CC_1264:;				
            _A523506CC_1264:
            ; //	asm	nop				
008BE:      	nop
            ; //_A523506CC_1265:;				
            _A523506CC_1265:
            ; //	asm	nop				
008BF:      	nop
            ; //_A523506CC_1266:;				
            _A523506CC_1266:
            ; //	asm	nop				
008C0:      	nop
            ; //_A523506CC_1267:;				
            _A523506CC_1267:
            ; //	asm	nop				
008C1:      	nop
            ; //_A523506CC_1268:;				
            _A523506CC_1268:
            ; //	asm	nop				
008C2:      	nop
            ; //_A523506CC_1269:;				
            _A523506CC_1269:
            ; //	asm	nop				
008C3:      	nop
            ; //_A523506CC_1270:;				
            _A523506CC_1270:
            ; //	asm	nop				
008C4:      	nop
            ; //_A523506CC_1271:;				
            _A523506CC_1271:
            ; //	asm	nop				
008C5:      	nop
            ; //_A523506CC_1272:;				
            _A523506CC_1272:
            ; //	asm	nop				
008C6:      	nop
            ; //_A523506CC_1273:;				
            _A523506CC_1273:
            ; //	asm	nop				
008C7:      	nop
            ; //_A523506CC_1274:;				
            _A523506CC_1274:
            ; //	asm	nop				
008C8:      	nop
            ; //_A523506CC_1275:;				
            _A523506CC_1275:
            ; //	asm clr io[0x09].b14;			
008C9:      	clr io[0x09].b14//
            ; //_A523506CC_1276:;				
            _A523506CC_1276:
            ; //	asm	nop				
008CA:      	nop
            ; //_A523506CC_1277:;				
            _A523506CC_1277:
            ; //	asm	nop				
008CB:      	nop
            ; //_A523506CC_1278:;				
            _A523506CC_1278:
            ; //	asm	nop				
008CC:      	nop
            ; //_A523506CC_1279:;				
            _A523506CC_1279:
            ; //	asm set io[0x09].b14;			
008CD:      	set io[0x09].b14//
            ; //_A523506CC_1280:;				
            _A523506CC_1280:
            ; //	asm	nop				
008CE:      	nop
            ; //_A523506CC_1281:;				
            _A523506CC_1281:
            ; //	asm	nop				
008CF:      	nop
            ; //_A523506CC_1282:;				
            _A523506CC_1282:
            ; //	asm	nop				
008D0:      	nop
            ; //_A523506CC_1283:;				
            _A523506CC_1283:
            ; //	asm	nop				
008D1:      	nop
            ; //_A523506CC_1284:;				
            _A523506CC_1284:
            ; //	asm	nop				
008D2:      	nop
            ; //_A523506CC_1285:;				
            _A523506CC_1285:
            ; //	asm	nop				
008D3:      	nop
            ; //_A523506CC_1286:;				
            _A523506CC_1286:
            ; //	asm	nop				
008D4:      	nop
            ; //_A523506CC_1287:;				
            _A523506CC_1287:
            ; //	asm	nop				
008D5:      	nop
            ; //_A523506CC_1288:;				
            _A523506CC_1288:
            ; //	asm	nop				
008D6:      	nop
            ; //_A523506CC_1289:;				
            _A523506CC_1289:
            ; //	asm	nop				
008D7:      	nop
            ; //_A523506CC_1290:;				
            _A523506CC_1290:
            ; //	asm	nop				
008D8:      	nop
            ; //_A523506CC_1291:;				
            _A523506CC_1291:
            ; //	asm	nop				
008D9:      	nop
            ; //_A523506CC_1292:;				
            _A523506CC_1292:
            ; //	asm clr io[0x09].b14;			
008DA:      	clr io[0x09].b14//
            ; //_A523506CC_1293:;				
            _A523506CC_1293:
            ; //	asm	nop				
008DB:      	nop
            ; //_A523506CC_1294:;				
            _A523506CC_1294:
            ; //	asm	nop				
008DC:      	nop
            ; //_A523506CC_1295:;				
            _A523506CC_1295:
            ; //	asm	nop				
008DD:      	nop
            ; //_A523506CC_1296:;				
            _A523506CC_1296:
            ; //	asm set io[0x09].b14;			
008DE:      	set io[0x09].b14//
            ; //_A523506CC_1297:;				
            _A523506CC_1297:
            ; //	asm	nop				
008DF:      	nop
            ; //_A523506CC_1298:;				
            _A523506CC_1298:
            ; //	asm	nop				
008E0:      	nop
            ; //_A523506CC_1299:;				
            _A523506CC_1299:
            ; //	asm	nop				
008E1:      	nop
            ; //_A523506CC_1300:;				
            _A523506CC_1300:
            ; //	asm	nop				
008E2:      	nop
            ; //_A523506CC_1301:;				
            _A523506CC_1301:
            ; //	asm	nop				
008E3:      	nop
            ; //_A523506CC_1302:;				
            _A523506CC_1302:
            ; //	asm	nop				
008E4:      	nop
            ; //_A523506CC_1303:;				
            _A523506CC_1303:
            ; //	asm	nop				
008E5:      	nop
            ; //_A523506CC_1304:;				
            _A523506CC_1304:
            ; //	asm	nop				
008E6:      	nop
            ; //_A523506CC_1305:;				
            _A523506CC_1305:
            ; //	asm	nop				
008E7:      	nop
            ; //_A523506CC_1306:;				
            _A523506CC_1306:
            ; //	asm	nop				
008E8:      	nop
            ; //_A523506CC_1307:;				
            _A523506CC_1307:
            ; //	asm	nop				
008E9:      	nop
            ; //_A523506CC_1308:;				
            _A523506CC_1308:
            ; //	asm	nop				
008EA:      	nop
            ; //_A523506CC_1309:;				
            _A523506CC_1309:
            ; //	asm clr io[0x09].b14;			
008EB:      	clr io[0x09].b14//
            ; //_A523506CC_1310:;				
            _A523506CC_1310:
            ; //	asm	nop				
008EC:      	nop
            ; //_A523506CC_1311:;				
            _A523506CC_1311:
            ; //	asm	nop				
008ED:      	nop
            ; //_A523506CC_1312:;				
            _A523506CC_1312:
            ; //	asm	nop				
008EE:      	nop
            ; //_A523506CC_1313:;				
            _A523506CC_1313:
            ; //	asm set io[0x09].b14;			
008EF:      	set io[0x09].b14//
            ; //_A523506CC_1314:;				
            _A523506CC_1314:
            ; //	asm	nop				
008F0:      	nop
            ; //_A523506CC_1315:;				
            _A523506CC_1315:
            ; //	asm	nop				
008F1:      	nop
            ; //_A523506CC_1316:;				
            _A523506CC_1316:
            ; //	asm	nop				
008F2:      	nop
            ; //_A523506CC_1317:;				
            _A523506CC_1317:
            ; //	asm	nop				
008F3:      	nop
            ; //_A523506CC_1318:;				
            _A523506CC_1318:
            ; //	asm	nop				
008F4:      	nop
            ; //_A523506CC_1319:;				
            _A523506CC_1319:
            ; //	asm	nop				
008F5:      	nop
            ; //_A523506CC_1320:;				
            _A523506CC_1320:
            ; //	asm	nop				
008F6:      	nop
            ; //_A523506CC_1321:;				
            _A523506CC_1321:
            ; //	asm	nop				
008F7:      	nop
            ; //_A523506CC_1322:;				
            _A523506CC_1322:
            ; //	asm	nop				
008F8:      	nop
            ; //_A523506CC_1323:;				
            _A523506CC_1323:
            ; //	asm	nop				
008F9:      	nop
            ; //_A523506CC_1324:;				
            _A523506CC_1324:
            ; //	asm	nop				
008FA:      	nop
            ; //_A523506CC_1325:;				
            _A523506CC_1325:
            ; //	asm	nop				
008FB:      	nop
            ; //_A523506CC_1326:;				
            _A523506CC_1326:
            ; //	asm clr io[0x09].b14;			
008FC:      	clr io[0x09].b14//
            ; //_A523506CC_1327:;				
            _A523506CC_1327:
            ; //	asm	nop				
008FD:      	nop
            ; //_A523506CC_1328:;				
            _A523506CC_1328:
            ; //	asm	nop				
008FE:      	nop
            ; //_A523506CC_1329:;				
            _A523506CC_1329:
            ; //	asm	nop				
008FF:      	nop
            ; //_A523506CC_1330:;				
            _A523506CC_1330:
            ; //	asm set io[0x09].b14;			
00900:      	set io[0x09].b14//
            ; //_A523506CC_1331:;				
            _A523506CC_1331:
            ; //	asm	nop				
00901:      	nop
            ; //_A523506CC_1332:;				
            _A523506CC_1332:
            ; //	asm	nop				
00902:      	nop
            ; //_A523506CC_1333:;				
            _A523506CC_1333:
            ; //	asm	nop				
00903:      	nop
            ; //_A523506CC_1334:;				
            _A523506CC_1334:
            ; //	asm	nop				
00904:      	nop
            ; //_A523506CC_1335:;				
            _A523506CC_1335:
            ; //	asm	nop				
00905:      	nop
            ; //_A523506CC_1336:;				
            _A523506CC_1336:
            ; //	asm	nop				
00906:      	nop
            ; //_A523506CC_1337:;				
            _A523506CC_1337:
            ; //	asm	nop				
00907:      	nop
            ; //_A523506CC_1338:;				
            _A523506CC_1338:
            ; //	asm	nop				
00908:      	nop
            ; //_A523506CC_1339:;				
            _A523506CC_1339:
            ; //	asm	nop				
00909:      	nop
            ; //_A523506CC_1340:;				
            _A523506CC_1340:
            ; //	asm	nop				
0090A:      	nop
            ; //_A523506CC_1341:;				
            _A523506CC_1341:
            ; //	asm	nop				
0090B:      	nop
            ; //_A523506CC_1342:;				
            _A523506CC_1342:
            ; //	asm	nop				
0090C:      	nop
            ; //_A523506CC_1343:;				
            _A523506CC_1343:
            ; //	asm clr io[0x09].b14;			
0090D:      	clr io[0x09].b14//
            ; //_A523506CC_1344:;				
            _A523506CC_1344:
            ; //	asm	nop				
0090E:      	nop
            ; //_A523506CC_1345:;				
            _A523506CC_1345:
            ; //	asm	nop				
0090F:      	nop
            ; //_A523506CC_1346:;				
            _A523506CC_1346:
            ; //	asm	nop				
00910:      	nop
            ; //_A523506CC_1347:;				
            _A523506CC_1347:
            ; //	asm set io[0x09].b14;			
00911:      	set io[0x09].b14//
            ; //_A523506CC_1348:;				
            _A523506CC_1348:
            ; //	asm	nop				
00912:      	nop
            ; //_A523506CC_1349:;				
            _A523506CC_1349:
            ; //	asm	nop				
00913:      	nop
            ; //_A523506CC_1350:;				
            _A523506CC_1350:
            ; //	asm	nop				
00914:      	nop
            ; //_A523506CC_1351:;				
            _A523506CC_1351:
            ; //	asm	nop				
00915:      	nop
            ; //_A523506CC_1352:;				
            _A523506CC_1352:
            ; //	asm	nop				
00916:      	nop
            ; //_A523506CC_1353:;				
            _A523506CC_1353:
            ; //	asm	nop				
00917:      	nop
            ; //_A523506CC_1354:;				
            _A523506CC_1354:
            ; //	asm	nop				
00918:      	nop
            ; //_A523506CC_1355:;				
            _A523506CC_1355:
            ; //	asm	nop				
00919:      	nop
            ; //_A523506CC_1356:;				
            _A523506CC_1356:
            ; //	asm	nop				
0091A:      	nop
            ; //_A523506CC_1357:;				
            _A523506CC_1357:
            ; //	asm	nop				
0091B:      	nop
            ; //_A523506CC_1358:;				
            _A523506CC_1358:
            ; //	asm	nop				
0091C:      	nop
            ; //_A523506CC_1359:;				
            _A523506CC_1359:
            ; //	asm	nop				
0091D:      	nop
            ; //_A523506CC_1360:;				
            _A523506CC_1360:
            ; //	asm clr io[0x09].b14;			
0091E:      	clr io[0x09].b14//
            ; //_A523506CC_1361:;				
            _A523506CC_1361:
            ; //	asm	nop				
0091F:      	nop
            ; //_A523506CC_1362:;				
            _A523506CC_1362:
            ; //	asm	nop				
00920:      	nop
            ; //_A523506CC_1363:;				
            _A523506CC_1363:
            ; //	asm	nop				
00921:      	nop
            ; //_A523506CC_1364:;				
            _A523506CC_1364:
            ; //	asm set io[0x09].b14;			
00922:      	set io[0x09].b14//
            ; //_A523506CC_1365:;				
            _A523506CC_1365:
            ; //	asm	nop				
00923:      	nop
            ; //_A523506CC_1366:;				
            _A523506CC_1366:
            ; //	asm	nop				
00924:      	nop
            ; //_A523506CC_1367:;				
            _A523506CC_1367:
            ; //	asm	nop				
00925:      	nop
            ; //_A523506CC_1368:;				
            _A523506CC_1368:
            ; //	asm	nop				
00926:      	nop
            ; //_A523506CC_1369:;				
            _A523506CC_1369:
            ; //	asm	nop				
00927:      	nop
            ; //_A523506CC_1370:;				
            _A523506CC_1370:
            ; //	asm	nop				
00928:      	nop
            ; //_A523506CC_1371:;				
            _A523506CC_1371:
            ; //	asm	nop				
00929:      	nop
            ; //_A523506CC_1372:;				
            _A523506CC_1372:
            ; //	asm	nop				
0092A:      	nop
            ; //_A523506CC_1373:;				
            _A523506CC_1373:
            ; //	asm	nop				
0092B:      	nop
            ; //_A523506CC_1374:;				
            _A523506CC_1374:
            ; //	asm	nop				
0092C:      	nop
            ; //_A523506CC_1375:;				
            _A523506CC_1375:
            ; //	asm	nop				
0092D:      	nop
            ; //_A523506CC_1376:;				
            _A523506CC_1376:
            ; //	asm	nop				
0092E:      	nop
            ; //_A523506CC_1377:;				
            _A523506CC_1377:
            ; //	asm clr io[0x09].b14;			
0092F:      	clr io[0x09].b14//
            ; //_A523506CC_1378:;				
            _A523506CC_1378:
            ; //	asm	nop				
00930:      	nop
            ; //_A523506CC_1379:;				
            _A523506CC_1379:
            ; //	asm	nop				
00931:      	nop
            ; //_A523506CC_1380:;				
            _A523506CC_1380:
            ; //	asm	nop				
00932:      	nop
            ; //_A523506CC_1381:;				
            _A523506CC_1381:
            ; //	asm set io[0x09].b14;			
00933:      	set io[0x09].b14//
            ; //_A523506CC_1382:;				
            _A523506CC_1382:
            ; //	asm	nop				
00934:      	nop
            ; //_A523506CC_1383:;				
            _A523506CC_1383:
            ; //	asm	nop				
00935:      	nop
            ; //_A523506CC_1384:;				
            _A523506CC_1384:
            ; //	asm	nop				
00936:      	nop
            ; //_A523506CC_1385:;				
            _A523506CC_1385:
            ; //	asm clr io[0x09].b14;			
00937:      	clr io[0x09].b14//
            ; //_A523506CC_1386:;				
            _A523506CC_1386:
            ; //	asm	nop				
00938:      	nop
            ; //_A523506CC_1387:;				
            _A523506CC_1387:
            ; //	asm	nop				
00939:      	nop
            ; //_A523506CC_1388:;				
            _A523506CC_1388:
            ; //	asm	nop				
0093A:      	nop
            ; //_A523506CC_1389:;				
            _A523506CC_1389:
            ; //	asm	nop				
0093B:      	nop
            ; //_A523506CC_1390:;				
            _A523506CC_1390:
            ; //	asm	nop				
0093C:      	nop
            ; //_A523506CC_1391:;				
            _A523506CC_1391:
            ; //	asm	nop				
0093D:      	nop
            ; //_A523506CC_1392:;				
            _A523506CC_1392:
            ; //	asm	nop				
0093E:      	nop
            ; //_A523506CC_1393:;				
            _A523506CC_1393:
            ; //	asm	nop				
0093F:      	nop
            ; //_A523506CC_1394:;				
            _A523506CC_1394:
            ; //	asm	nop				
00940:      	nop
            ; //_A523506CC_1395:;				
            _A523506CC_1395:
            ; //	asm	nop				
00941:      	nop
            ; //_A523506CC_1396:;				
            _A523506CC_1396:
            ; //	asm	nop				
00942:      	nop
            ; //_A523506CC_1397:;				
            _A523506CC_1397:
            ; //	asm	nop				
00943:      	nop
            ; //_A523506CC_1398:;				
            _A523506CC_1398:
            ; //	asm set io[0x09].b14;			
00944:      	set io[0x09].b14//
            ; //_A523506CC_1399:;				
            _A523506CC_1399:
            ; //	asm	nop				
00945:      	nop
            ; //_A523506CC_1400:;				
            _A523506CC_1400:
            ; //	asm	nop				
00946:      	nop
            ; //_A523506CC_1401:;				
            _A523506CC_1401:
            ; //	asm	nop				
00947:      	nop
            ; //_A523506CC_1402:;				
            _A523506CC_1402:
            ; //	asm clr io[0x09].b14;			
00948:      	clr io[0x09].b14//
            ; //_A523506CC_1403:;				
            _A523506CC_1403:
            ; //	asm	nop				
00949:      	nop
            ; //_A523506CC_1404:;				
            _A523506CC_1404:
            ; //	asm	nop				
0094A:      	nop
            ; //_A523506CC_1405:;				
            _A523506CC_1405:
            ; //	asm	nop				
0094B:      	nop
            ; //_A523506CC_1406:;				
            _A523506CC_1406:
            ; //	asm	nop				
0094C:      	nop
            ; //_A523506CC_1407:;				
            _A523506CC_1407:
            ; //	asm	nop				
0094D:      	nop
            ; //_A523506CC_1408:;				
            _A523506CC_1408:
            ; //	asm	nop				
0094E:      	nop
            ; //_A523506CC_1409:;				
            _A523506CC_1409:
            ; //	asm	nop				
0094F:      	nop
            ; //_A523506CC_1410:;				
            _A523506CC_1410:
            ; //	asm	nop				
00950:      	nop
            ; //_A523506CC_1411:;				
            _A523506CC_1411:
            ; //	asm	nop				
00951:      	nop
            ; //_A523506CC_1412:;				
            _A523506CC_1412:
            ; //	asm	nop				
00952:      	nop
            ; //_A523506CC_1413:;				
            _A523506CC_1413:
            ; //	asm	nop				
00953:      	nop
            ; //_A523506CC_1414:;				
            _A523506CC_1414:
            ; //	asm	nop				
00954:      	nop
            ; //_A523506CC_1415:;				
            _A523506CC_1415:
            ; //	asm set io[0x09].b14;			
00955:      	set io[0x09].b14//
            ; //_A523506CC_1416:;				
            _A523506CC_1416:
            ; //	asm	nop				
00956:      	nop
            ; //_A523506CC_1417:;				
            _A523506CC_1417:
            ; //	asm	nop				
00957:      	nop
            ; //_A523506CC_1418:;				
            _A523506CC_1418:
            ; //	asm	nop				
00958:      	nop
            ; //_A523506CC_1419:;				
            _A523506CC_1419:
            ; //	asm clr io[0x09].b14;			
00959:      	clr io[0x09].b14//
            ; //_A523506CC_1420:;				
            _A523506CC_1420:
            ; //	asm	nop				
0095A:      	nop
            ; //_A523506CC_1421:;				
            _A523506CC_1421:
            ; //	asm	nop				
0095B:      	nop
            ; //_A523506CC_1422:;				
            _A523506CC_1422:
            ; //	asm	nop				
0095C:      	nop
            ; //_A523506CC_1423:;				
            _A523506CC_1423:
            ; //	asm	nop				
0095D:      	nop
            ; //_A523506CC_1424:;				
            _A523506CC_1424:
            ; //	asm	nop				
0095E:      	nop
            ; //_A523506CC_1425:;				
            _A523506CC_1425:
            ; //	asm	nop				
0095F:      	nop
            ; //_A523506CC_1426:;				
            _A523506CC_1426:
            ; //	asm	nop				
00960:      	nop
            ; //_A523506CC_1427:;				
            _A523506CC_1427:
            ; //	asm	nop				
00961:      	nop
            ; //_A523506CC_1428:;				
            _A523506CC_1428:
            ; //	asm	nop				
00962:      	nop
            ; //_A523506CC_1429:;				
            _A523506CC_1429:
            ; //	asm	nop				
00963:      	nop
            ; //_A523506CC_1430:;				
            _A523506CC_1430:
            ; //	asm	nop				
00964:      	nop
            ; //_A523506CC_1431:;				
            _A523506CC_1431:
            ; //	asm	nop				
00965:      	nop
            ; //_A523506CC_1432:;				
            _A523506CC_1432:
            ; //	asm set io[0x09].b14;			
00966:      	set io[0x09].b14//
            ; //_A523506CC_1433:;				
            _A523506CC_1433:
            ; //	asm	nop				
00967:      	nop
            ; //_A523506CC_1434:;				
            _A523506CC_1434:
            ; //	asm	nop				
00968:      	nop
            ; //_A523506CC_1435:;				
            _A523506CC_1435:
            ; //	asm	nop				
00969:      	nop
            ; //_A523506CC_1436:;				
            _A523506CC_1436:
            ; //	asm clr io[0x09].b14;			
0096A:      	clr io[0x09].b14//
            ; //_A523506CC_1437:;				
            _A523506CC_1437:
            ; //	asm	nop				
0096B:      	nop
            ; //_A523506CC_1438:;				
            _A523506CC_1438:
            ; //	asm	nop				
0096C:      	nop
            ; //_A523506CC_1439:;				
            _A523506CC_1439:
            ; //	asm	nop				
0096D:      	nop
            ; //_A523506CC_1440:;				
            _A523506CC_1440:
            ; //	asm	nop				
0096E:      	nop
            ; //_A523506CC_1441:;				
            _A523506CC_1441:
            ; //	asm	nop				
0096F:      	nop
            ; //_A523506CC_1442:;				
            _A523506CC_1442:
            ; //	asm	nop				
00970:      	nop
            ; //_A523506CC_1443:;				
            _A523506CC_1443:
            ; //	asm	nop				
00971:      	nop
            ; //_A523506CC_1444:;				
            _A523506CC_1444:
            ; //	asm	nop				
00972:      	nop
            ; //_A523506CC_1445:;				
            _A523506CC_1445:
            ; //	asm	nop				
00973:      	nop
            ; //_A523506CC_1446:;				
            _A523506CC_1446:
            ; //	asm	nop				
00974:      	nop
            ; //_A523506CC_1447:;				
            _A523506CC_1447:
            ; //	asm	nop				
00975:      	nop
            ; //_A523506CC_1448:;				
            _A523506CC_1448:
            ; //	asm	nop				
00976:      	nop
            ; //_A523506CC_1449:;				
            _A523506CC_1449:
            ; //	asm set io[0x09].b14;			
00977:      	set io[0x09].b14//
            ; //_A523506CC_1450:;				
            _A523506CC_1450:
            ; //	asm	nop				
00978:      	nop
            ; //_A523506CC_1451:;				
            _A523506CC_1451:
            ; //	asm	nop				
00979:      	nop
            ; //_A523506CC_1452:;				
            _A523506CC_1452:
            ; //	asm	nop				
0097A:      	nop
            ; //_A523506CC_1453:;				
            _A523506CC_1453:
            ; //	asm clr io[0x09].b14;			
0097B:      	clr io[0x09].b14//
            ; //_A523506CC_1454:;				
            _A523506CC_1454:
            ; //	asm	nop				
0097C:      	nop
            ; //_A523506CC_1455:;				
            _A523506CC_1455:
            ; //	asm	nop				
0097D:      	nop
            ; //_A523506CC_1456:;				
            _A523506CC_1456:
            ; //	asm	nop				
0097E:      	nop
            ; //_A523506CC_1457:;				
            _A523506CC_1457:
            ; //	asm	nop				
0097F:      	nop
            ; //_A523506CC_1458:;				
            _A523506CC_1458:
            ; //	asm	nop				
00980:      	nop
            ; //_A523506CC_1459:;				
            _A523506CC_1459:
            ; //	asm	nop				
00981:      	nop
            ; //_A523506CC_1460:;				
            _A523506CC_1460:
            ; //	asm	nop				
00982:      	nop
            ; //_A523506CC_1461:;				
            _A523506CC_1461:
            ; //	asm	nop				
00983:      	nop
            ; //_A523506CC_1462:;				
            _A523506CC_1462:
            ; //	asm	nop				
00984:      	nop
            ; //_A523506CC_1463:;				
            _A523506CC_1463:
            ; //	asm	nop				
00985:      	nop
            ; //_A523506CC_1464:;				
            _A523506CC_1464:
            ; //	asm	nop				
00986:      	nop
            ; //_A523506CC_1465:;				
            _A523506CC_1465:
            ; //	asm	nop				
00987:      	nop
            ; //_A523506CC_1466:;				
            _A523506CC_1466:
            ; //	asm set io[0x09].b14;			
00988:      	set io[0x09].b14//
            ; //_A523506CC_1467:;				
            _A523506CC_1467:
            ; //	asm	nop				
00989:      	nop
            ; //_A523506CC_1468:;				
            _A523506CC_1468:
            ; //	asm	nop				
0098A:      	nop
            ; //_A523506CC_1469:;				
            _A523506CC_1469:
            ; //	asm	nop				
0098B:      	nop
            ; //_A523506CC_1470:;				
            _A523506CC_1470:
            ; //	asm clr io[0x09].b14;			
0098C:      	clr io[0x09].b14//
            ; //_A523506CC_1471:;				
            _A523506CC_1471:
            ; //	asm	nop				
0098D:      	nop
            ; //_A523506CC_1472:;				
            _A523506CC_1472:
            ; //	asm	nop				
0098E:      	nop
            ; //_A523506CC_1473:;				
            _A523506CC_1473:
            ; //	asm	nop				
0098F:      	nop
            ; //_A523506CC_1474:;				
            _A523506CC_1474:
            ; //	asm	nop				
00990:      	nop
            ; //_A523506CC_1475:;				
            _A523506CC_1475:
            ; //	asm	nop				
00991:      	nop
            ; //_A523506CC_1476:;				
            _A523506CC_1476:
            ; //	asm	nop				
00992:      	nop
            ; //_A523506CC_1477:;				
            _A523506CC_1477:
            ; //	asm	nop				
00993:      	nop
            ; //_A523506CC_1478:;				
            _A523506CC_1478:
            ; //	asm	nop				
00994:      	nop
            ; //_A523506CC_1479:;				
            _A523506CC_1479:
            ; //	asm	nop				
00995:      	nop
            ; //_A523506CC_1480:;				
            _A523506CC_1480:
            ; //	asm	nop				
00996:      	nop
            ; //_A523506CC_1481:;				
            _A523506CC_1481:
            ; //	asm	nop				
00997:      	nop
            ; //_A523506CC_1482:;				
            _A523506CC_1482:
            ; //	asm	nop				
00998:      	nop
            ; //_A523506CC_1483:;				
            _A523506CC_1483:
            ; //	asm set io[0x09].b14;			
00999:      	set io[0x09].b14//
            ; //_A523506CC_1484:;				
            _A523506CC_1484:
            ; //	asm	nop				
0099A:      	nop
            ; //_A523506CC_1485:;				
            _A523506CC_1485:
            ; //	asm	nop				
0099B:      	nop
            ; //_A523506CC_1486:;				
            _A523506CC_1486:
            ; //	asm	nop				
0099C:      	nop
            ; //_A523506CC_1487:;				
            _A523506CC_1487:
            ; //	asm clr io[0x09].b14;			
0099D:      	clr io[0x09].b14//
            ; //_A523506CC_1488:;				
            _A523506CC_1488:
            ; //	asm	nop				
0099E:      	nop
            ; //_A523506CC_1489:;				
            _A523506CC_1489:
            ; //	asm	nop				
0099F:      	nop
            ; //_A523506CC_1490:;				
            _A523506CC_1490:
            ; //	asm	nop				
009A0:      	nop
            ; //_A523506CC_1491:;				
            _A523506CC_1491:
            ; //	asm	nop				
009A1:      	nop
            ; //_A523506CC_1492:;				
            _A523506CC_1492:
            ; //	asm	nop				
009A2:      	nop
            ; //_A523506CC_1493:;				
            _A523506CC_1493:
            ; //	asm	nop				
009A3:      	nop
            ; //_A523506CC_1494:;				
            _A523506CC_1494:
            ; //	asm	nop				
009A4:      	nop
            ; //_A523506CC_1495:;				
            _A523506CC_1495:
            ; //	asm	nop				
009A5:      	nop
            ; //_A523506CC_1496:;				
            _A523506CC_1496:
            ; //	asm	nop				
009A6:      	nop
            ; //_A523506CC_1497:;				
            _A523506CC_1497:
            ; //	asm	nop				
009A7:      	nop
            ; //_A523506CC_1498:;				
            _A523506CC_1498:
            ; //	asm	nop				
009A8:      	nop
            ; //_A523506CC_1499:;				
            _A523506CC_1499:
            ; //	asm	nop				
009A9:      	nop
            ; //_A523506CC_1500:;				
            _A523506CC_1500:
            ; //	asm set io[0x09].b14;			
009AA:      	set io[0x09].b14//
            ; //_A523506CC_1501:;				
            _A523506CC_1501:
            ; //	asm	nop				
009AB:      	nop
            ; //_A523506CC_1502:;				
            _A523506CC_1502:
            ; //	asm	nop				
009AC:      	nop
            ; //_A523506CC_1503:;				
            _A523506CC_1503:
            ; //	asm	nop				
009AD:      	nop
            ; //_A523506CC_1504:;				
            _A523506CC_1504:
            ; //	asm clr io[0x09].b14;			
009AE:      	clr io[0x09].b14//
            ; //_A523506CC_1505:;				
            _A523506CC_1505:
            ; //	asm	nop				
009AF:      	nop
            ; //_A523506CC_1506:;				
            _A523506CC_1506:
            ; //	asm	nop				
009B0:      	nop
            ; //_A523506CC_1507:;				
            _A523506CC_1507:
            ; //	asm	nop				
009B1:      	nop
            ; //_A523506CC_1508:;				
            _A523506CC_1508:
            ; //	asm	nop				
009B2:      	nop
            ; //_A523506CC_1509:;				
            _A523506CC_1509:
            ; //	asm	nop				
009B3:      	nop
            ; //_A523506CC_1510:;				
            _A523506CC_1510:
            ; //	asm	nop				
009B4:      	nop
            ; //_A523506CC_1511:;				
            _A523506CC_1511:
            ; //	asm	nop				
009B5:      	nop
            ; //_A523506CC_1512:;				
            _A523506CC_1512:
            ; //	asm	nop				
009B6:      	nop
            ; //_A523506CC_1513:;				
            _A523506CC_1513:
            ; //	asm	nop				
009B7:      	nop
            ; //_A523506CC_1514:;				
            _A523506CC_1514:
            ; //	asm	nop				
009B8:      	nop
            ; //_A523506CC_1515:;				
            _A523506CC_1515:
            ; //	asm	nop				
009B9:      	nop
            ; //_A523506CC_1516:;				
            _A523506CC_1516:
            ; //	asm	nop				
009BA:      	nop
            ; //_A523506CC_1517:;				
            _A523506CC_1517:
            ; //	goto LD63FD439_103;			
009BB:      	pch =	LD63FD439_103
009BC:      	ljmp	LD63FD439_103
            ; //LD63FD439_108:;					
            LD63FD439_108:
            ; //_A523506CC_1518:;				
            _A523506CC_1518:
            ; //	asm set io[0x09].b14;			
009BD:      	set io[0x09].b14//
            ; //_A523506CC_1519:;				
            _A523506CC_1519:
            ; //	asm	nop				
009BE:      	nop
            ; //_A523506CC_1520:;				
            _A523506CC_1520:
            ; //	asm	nop				
009BF:      	nop
            ; //_A523506CC_1521:;				
            _A523506CC_1521:
            ; //	asm	nop				
009C0:      	nop
            ; //_A523506CC_1522:;				
            _A523506CC_1522:
            ; //	asm	nop				
009C1:      	nop
            ; //_A523506CC_1523:;				
            _A523506CC_1523:
            ; //	asm	nop				
009C2:      	nop
            ; //_A523506CC_1524:;				
            _A523506CC_1524:
            ; //	asm	nop				
009C3:      	nop
            ; //_A523506CC_1525:;				
            _A523506CC_1525:
            ; //	asm	nop				
009C4:      	nop
            ; //_A523506CC_1526:;				
            _A523506CC_1526:
            ; //	asm	nop				
009C5:      	nop
            ; //_A523506CC_1527:;				
            _A523506CC_1527:
            ; //	asm	nop				
009C6:      	nop
            ; //_A523506CC_1528:;				
            _A523506CC_1528:
            ; //	asm	nop				
009C7:      	nop
            ; //_A523506CC_1529:;				
            _A523506CC_1529:
            ; //	asm	nop				
009C8:      	nop
            ; //_A523506CC_1530:;				
            _A523506CC_1530:
            ; //	asm	nop				
009C9:      	nop
            ; //_A523506CC_1531:;				
            _A523506CC_1531:
            ; //	asm clr io[0x09].b14;			
009CA:      	clr io[0x09].b14//
            ; //_A523506CC_1532:;				
            _A523506CC_1532:
            ; //	asm	nop				
009CB:      	nop
            ; //_A523506CC_1533:;				
            _A523506CC_1533:
            ; //	asm	nop				
009CC:      	nop
            ; //_A523506CC_1534:;				
            _A523506CC_1534:
            ; //	asm	nop				
009CD:      	nop
            ; //_A523506CC_1535:;				
            _A523506CC_1535:
            ; //	asm set io[0x09].b14;			
009CE:      	set io[0x09].b14//
            ; //_A523506CC_1536:;				
            _A523506CC_1536:
            ; //	asm	nop				
009CF:      	nop
            ; //_A523506CC_1537:;				
            _A523506CC_1537:
            ; //	asm	nop				
009D0:      	nop
            ; //_A523506CC_1538:;				
            _A523506CC_1538:
            ; //	asm	nop				
009D1:      	nop
            ; //_A523506CC_1539:;				
            _A523506CC_1539:
            ; //	asm	nop				
009D2:      	nop
            ; //_A523506CC_1540:;				
            _A523506CC_1540:
            ; //	asm	nop				
009D3:      	nop
            ; //_A523506CC_1541:;				
            _A523506CC_1541:
            ; //	asm	nop				
009D4:      	nop
            ; //_A523506CC_1542:;				
            _A523506CC_1542:
            ; //	asm	nop				
009D5:      	nop
            ; //_A523506CC_1543:;				
            _A523506CC_1543:
            ; //	asm	nop				
009D6:      	nop
            ; //_A523506CC_1544:;				
            _A523506CC_1544:
            ; //	asm	nop				
009D7:      	nop
            ; //_A523506CC_1545:;				
            _A523506CC_1545:
            ; //	asm	nop				
009D8:      	nop
            ; //_A523506CC_1546:;				
            _A523506CC_1546:
            ; //	asm	nop				
009D9:      	nop
            ; //_A523506CC_1547:;				
            _A523506CC_1547:
            ; //	asm	nop				
009DA:      	nop
            ; //_A523506CC_1548:;				
            _A523506CC_1548:
            ; //	asm clr io[0x09].b14;			
009DB:      	clr io[0x09].b14//
            ; //_A523506CC_1549:;				
            _A523506CC_1549:
            ; //	asm	nop				
009DC:      	nop
            ; //_A523506CC_1550:;				
            _A523506CC_1550:
            ; //	asm	nop				
009DD:      	nop
            ; //_A523506CC_1551:;				
            _A523506CC_1551:
            ; //	asm	nop				
009DE:      	nop
            ; //_A523506CC_1552:;				
            _A523506CC_1552:
            ; //	asm set io[0x09].b14;			
009DF:      	set io[0x09].b14//
            ; //_A523506CC_1553:;				
            _A523506CC_1553:
            ; //	asm	nop				
009E0:      	nop
            ; //_A523506CC_1554:;				
            _A523506CC_1554:
            ; //	asm	nop				
009E1:      	nop
            ; //_A523506CC_1555:;				
            _A523506CC_1555:
            ; //	asm	nop				
009E2:      	nop
            ; //_A523506CC_1556:;				
            _A523506CC_1556:
            ; //	asm	nop				
009E3:      	nop
            ; //_A523506CC_1557:;				
            _A523506CC_1557:
            ; //	asm	nop				
009E4:      	nop
            ; //_A523506CC_1558:;				
            _A523506CC_1558:
            ; //	asm	nop				
009E5:      	nop
            ; //_A523506CC_1559:;				
            _A523506CC_1559:
            ; //	asm	nop				
009E6:      	nop
            ; //_A523506CC_1560:;				
            _A523506CC_1560:
            ; //	asm	nop				
009E7:      	nop
            ; //_A523506CC_1561:;				
            _A523506CC_1561:
            ; //	asm	nop				
009E8:      	nop
            ; //_A523506CC_1562:;				
            _A523506CC_1562:
            ; //	asm	nop				
009E9:      	nop
            ; //_A523506CC_1563:;				
            _A523506CC_1563:
            ; //	asm	nop				
009EA:      	nop
            ; //_A523506CC_1564:;				
            _A523506CC_1564:
            ; //	asm	nop				
009EB:      	nop
            ; //_A523506CC_1565:;				
            _A523506CC_1565:
            ; //	asm clr io[0x09].b14;			
009EC:      	clr io[0x09].b14//
            ; //_A523506CC_1566:;				
            _A523506CC_1566:
            ; //	asm	nop				
009ED:      	nop
            ; //_A523506CC_1567:;				
            _A523506CC_1567:
            ; //	asm	nop				
009EE:      	nop
            ; //_A523506CC_1568:;				
            _A523506CC_1568:
            ; //	asm	nop				
009EF:      	nop
            ; //_A523506CC_1569:;				
            _A523506CC_1569:
            ; //	asm set io[0x09].b14;			
009F0:      	set io[0x09].b14//
            ; //_A523506CC_1570:;				
            _A523506CC_1570:
            ; //	asm	nop				
009F1:      	nop
            ; //_A523506CC_1571:;				
            _A523506CC_1571:
            ; //	asm	nop				
009F2:      	nop
            ; //_A523506CC_1572:;				
            _A523506CC_1572:
            ; //	asm	nop				
009F3:      	nop
            ; //_A523506CC_1573:;				
            _A523506CC_1573:
            ; //	asm	nop				
009F4:      	nop
            ; //_A523506CC_1574:;				
            _A523506CC_1574:
            ; //	asm	nop				
009F5:      	nop
            ; //_A523506CC_1575:;				
            _A523506CC_1575:
            ; //	asm	nop				
009F6:      	nop
            ; //_A523506CC_1576:;				
            _A523506CC_1576:
            ; //	asm	nop				
009F7:      	nop
            ; //_A523506CC_1577:;				
            _A523506CC_1577:
            ; //	asm	nop				
009F8:      	nop
            ; //_A523506CC_1578:;				
            _A523506CC_1578:
            ; //	asm	nop				
009F9:      	nop
            ; //_A523506CC_1579:;				
            _A523506CC_1579:
            ; //	asm	nop				
009FA:      	nop
            ; //_A523506CC_1580:;				
            _A523506CC_1580:
            ; //	asm	nop				
009FB:      	nop
            ; //_A523506CC_1581:;				
            _A523506CC_1581:
            ; //	asm	nop				
009FC:      	nop
            ; //_A523506CC_1582:;				
            _A523506CC_1582:
            ; //	asm clr io[0x09].b14;			
009FD:      	clr io[0x09].b14//
            ; //_A523506CC_1583:;				
            _A523506CC_1583:
            ; //	asm	nop				
009FE:      	nop
            ; //_A523506CC_1584:;				
            _A523506CC_1584:
            ; //	asm	nop				
009FF:      	nop
            ; //_A523506CC_1585:;				
            _A523506CC_1585:
            ; //	asm	nop				
00A00:      	nop
            ; //_A523506CC_1586:;				
            _A523506CC_1586:
            ; //	asm set io[0x09].b14;			
00A01:      	set io[0x09].b14//
            ; //_A523506CC_1587:;				
            _A523506CC_1587:
            ; //	asm	nop				
00A02:      	nop
            ; //_A523506CC_1588:;				
            _A523506CC_1588:
            ; //	asm	nop				
00A03:      	nop
            ; //_A523506CC_1589:;				
            _A523506CC_1589:
            ; //	asm	nop				
00A04:      	nop
            ; //_A523506CC_1590:;				
            _A523506CC_1590:
            ; //	asm	nop				
00A05:      	nop
            ; //_A523506CC_1591:;				
            _A523506CC_1591:
            ; //	asm	nop				
00A06:      	nop
            ; //_A523506CC_1592:;				
            _A523506CC_1592:
            ; //	asm	nop				
00A07:      	nop
            ; //_A523506CC_1593:;				
            _A523506CC_1593:
            ; //	asm	nop				
00A08:      	nop
            ; //_A523506CC_1594:;				
            _A523506CC_1594:
            ; //	asm	nop				
00A09:      	nop
            ; //_A523506CC_1595:;				
            _A523506CC_1595:
            ; //	asm	nop				
00A0A:      	nop
            ; //_A523506CC_1596:;				
            _A523506CC_1596:
            ; //	asm	nop				
00A0B:      	nop
            ; //_A523506CC_1597:;				
            _A523506CC_1597:
            ; //	asm	nop				
00A0C:      	nop
            ; //_A523506CC_1598:;				
            _A523506CC_1598:
            ; //	asm	nop				
00A0D:      	nop
            ; //_A523506CC_1599:;				
            _A523506CC_1599:
            ; //	asm clr io[0x09].b14;			
00A0E:      	clr io[0x09].b14//
            ; //_A523506CC_1600:;				
            _A523506CC_1600:
            ; //	asm	nop				
00A0F:      	nop
            ; //_A523506CC_1601:;				
            _A523506CC_1601:
            ; //	asm	nop				
00A10:      	nop
            ; //_A523506CC_1602:;				
            _A523506CC_1602:
            ; //	asm	nop				
00A11:      	nop
            ; //_A523506CC_1603:;				
            _A523506CC_1603:
            ; //	asm set io[0x09].b14;			
00A12:      	set io[0x09].b14//
            ; //_A523506CC_1604:;				
            _A523506CC_1604:
            ; //	asm	nop				
00A13:      	nop
            ; //_A523506CC_1605:;				
            _A523506CC_1605:
            ; //	asm	nop				
00A14:      	nop
            ; //_A523506CC_1606:;				
            _A523506CC_1606:
            ; //	asm	nop				
00A15:      	nop
            ; //_A523506CC_1607:;				
            _A523506CC_1607:
            ; //	asm	nop				
00A16:      	nop
            ; //_A523506CC_1608:;				
            _A523506CC_1608:
            ; //	asm	nop				
00A17:      	nop
            ; //_A523506CC_1609:;				
            _A523506CC_1609:
            ; //	asm	nop				
00A18:      	nop
            ; //_A523506CC_1610:;				
            _A523506CC_1610:
            ; //	asm	nop				
00A19:      	nop
            ; //_A523506CC_1611:;				
            _A523506CC_1611:
            ; //	asm	nop				
00A1A:      	nop
            ; //_A523506CC_1612:;				
            _A523506CC_1612:
            ; //	asm	nop				
00A1B:      	nop
            ; //_A523506CC_1613:;				
            _A523506CC_1613:
            ; //	asm	nop				
00A1C:      	nop
            ; //_A523506CC_1614:;				
            _A523506CC_1614:
            ; //	asm	nop				
00A1D:      	nop
            ; //_A523506CC_1615:;				
            _A523506CC_1615:
            ; //	asm	nop				
00A1E:      	nop
            ; //_A523506CC_1616:;				
            _A523506CC_1616:
            ; //	asm clr io[0x09].b14;			
00A1F:      	clr io[0x09].b14//
            ; //_A523506CC_1617:;				
            _A523506CC_1617:
            ; //	asm	nop				
00A20:      	nop
            ; //_A523506CC_1618:;				
            _A523506CC_1618:
            ; //	asm	nop				
00A21:      	nop
            ; //_A523506CC_1619:;				
            _A523506CC_1619:
            ; //	asm	nop				
00A22:      	nop
            ; //_A523506CC_1620:;				
            _A523506CC_1620:
            ; //	asm set io[0x09].b14;			
00A23:      	set io[0x09].b14//
            ; //_A523506CC_1621:;				
            _A523506CC_1621:
            ; //	asm	nop				
00A24:      	nop
            ; //_A523506CC_1622:;				
            _A523506CC_1622:
            ; //	asm	nop				
00A25:      	nop
            ; //_A523506CC_1623:;				
            _A523506CC_1623:
            ; //	asm	nop				
00A26:      	nop
            ; //_A523506CC_1624:;				
            _A523506CC_1624:
            ; //	asm	nop				
00A27:      	nop
            ; //_A523506CC_1625:;				
            _A523506CC_1625:
            ; //	asm	nop				
00A28:      	nop
            ; //_A523506CC_1626:;				
            _A523506CC_1626:
            ; //	asm	nop				
00A29:      	nop
            ; //_A523506CC_1627:;				
            _A523506CC_1627:
            ; //	asm	nop				
00A2A:      	nop
            ; //_A523506CC_1628:;				
            _A523506CC_1628:
            ; //	asm	nop				
00A2B:      	nop
            ; //_A523506CC_1629:;				
            _A523506CC_1629:
            ; //	asm	nop				
00A2C:      	nop
            ; //_A523506CC_1630:;				
            _A523506CC_1630:
            ; //	asm	nop				
00A2D:      	nop
            ; //_A523506CC_1631:;				
            _A523506CC_1631:
            ; //	asm	nop				
00A2E:      	nop
            ; //_A523506CC_1632:;				
            _A523506CC_1632:
            ; //	asm	nop				
00A2F:      	nop
            ; //_A523506CC_1633:;				
            _A523506CC_1633:
            ; //	asm clr io[0x09].b14;			
00A30:      	clr io[0x09].b14//
            ; //_A523506CC_1634:;				
            _A523506CC_1634:
            ; //	asm	nop				
00A31:      	nop
            ; //_A523506CC_1635:;				
            _A523506CC_1635:
            ; //	asm	nop				
00A32:      	nop
            ; //_A523506CC_1636:;				
            _A523506CC_1636:
            ; //	asm	nop				
00A33:      	nop
            ; //_A523506CC_1637:;				
            _A523506CC_1637:
            ; //	asm set io[0x09].b14;			
00A34:      	set io[0x09].b14//
            ; //_A523506CC_1638:;				
            _A523506CC_1638:
            ; //	asm	nop				
00A35:      	nop
            ; //_A523506CC_1639:;				
            _A523506CC_1639:
            ; //	asm	nop				
00A36:      	nop
            ; //_A523506CC_1640:;				
            _A523506CC_1640:
            ; //	asm	nop				
00A37:      	nop
            ; //_A523506CC_1641:;				
            _A523506CC_1641:
            ; //	asm	nop				
00A38:      	nop
            ; //_A523506CC_1642:;				
            _A523506CC_1642:
            ; //	asm	nop				
00A39:      	nop
            ; //_A523506CC_1643:;				
            _A523506CC_1643:
            ; //	asm	nop				
00A3A:      	nop
            ; //_A523506CC_1644:;				
            _A523506CC_1644:
            ; //	asm	nop				
00A3B:      	nop
            ; //_A523506CC_1645:;				
            _A523506CC_1645:
            ; //	asm	nop				
00A3C:      	nop
            ; //_A523506CC_1646:;				
            _A523506CC_1646:
            ; //	asm	nop				
00A3D:      	nop
            ; //_A523506CC_1647:;				
            _A523506CC_1647:
            ; //	asm	nop				
00A3E:      	nop
            ; //_A523506CC_1648:;				
            _A523506CC_1648:
            ; //	asm	nop				
00A3F:      	nop
            ; //_A523506CC_1649:;				
            _A523506CC_1649:
            ; //	asm	nop				
00A40:      	nop
            ; //_A523506CC_1650:;				
            _A523506CC_1650:
            ; //	asm clr io[0x09].b14;			
00A41:      	clr io[0x09].b14//
            ; //_A523506CC_1651:;				
            _A523506CC_1651:
            ; //	asm	nop				
00A42:      	nop
            ; //_A523506CC_1652:;				
            _A523506CC_1652:
            ; //	asm	nop				
00A43:      	nop
            ; //_A523506CC_1653:;				
            _A523506CC_1653:
            ; //	asm	nop				
00A44:      	nop
            ; //_A523506CC_1654:;				
            _A523506CC_1654:
            ; //	asm set io[0x09].b14;			
00A45:      	set io[0x09].b14//
            ; //_A523506CC_1655:;				
            _A523506CC_1655:
            ; //	asm	nop				
00A46:      	nop
            ; //_A523506CC_1656:;				
            _A523506CC_1656:
            ; //	asm	nop				
00A47:      	nop
            ; //_A523506CC_1657:;				
            _A523506CC_1657:
            ; //	asm	nop				
00A48:      	nop
            ; //_A523506CC_1658:;				
            _A523506CC_1658:
            ; //	asm clr io[0x09].b14;			
00A49:      	clr io[0x09].b14//
            ; //_A523506CC_1659:;				
            _A523506CC_1659:
            ; //	asm	nop				
00A4A:      	nop
            ; //_A523506CC_1660:;				
            _A523506CC_1660:
            ; //	asm	nop				
00A4B:      	nop
            ; //_A523506CC_1661:;				
            _A523506CC_1661:
            ; //	asm	nop				
00A4C:      	nop
            ; //_A523506CC_1662:;				
            _A523506CC_1662:
            ; //	asm	nop				
00A4D:      	nop
            ; //_A523506CC_1663:;				
            _A523506CC_1663:
            ; //	asm	nop				
00A4E:      	nop
            ; //_A523506CC_1664:;				
            _A523506CC_1664:
            ; //	asm	nop				
00A4F:      	nop
            ; //_A523506CC_1665:;				
            _A523506CC_1665:
            ; //	asm	nop				
00A50:      	nop
            ; //_A523506CC_1666:;				
            _A523506CC_1666:
            ; //	asm	nop				
00A51:      	nop
            ; //_A523506CC_1667:;				
            _A523506CC_1667:
            ; //	asm	nop				
00A52:      	nop
            ; //_A523506CC_1668:;				
            _A523506CC_1668:
            ; //	asm	nop				
00A53:      	nop
            ; //_A523506CC_1669:;				
            _A523506CC_1669:
            ; //	asm	nop				
00A54:      	nop
            ; //_A523506CC_1670:;				
            _A523506CC_1670:
            ; //	asm	nop				
00A55:      	nop
            ; //_A523506CC_1671:;				
            _A523506CC_1671:
            ; //	asm set io[0x09].b14;			
00A56:      	set io[0x09].b14//
            ; //_A523506CC_1672:;				
            _A523506CC_1672:
            ; //	asm	nop				
00A57:      	nop
            ; //_A523506CC_1673:;				
            _A523506CC_1673:
            ; //	asm	nop				
00A58:      	nop
            ; //_A523506CC_1674:;				
            _A523506CC_1674:
            ; //	asm	nop				
00A59:      	nop
            ; //_A523506CC_1675:;				
            _A523506CC_1675:
            ; //	asm clr io[0x09].b14;			
00A5A:      	clr io[0x09].b14//
            ; //_A523506CC_1676:;				
            _A523506CC_1676:
            ; //	asm	nop				
00A5B:      	nop
            ; //_A523506CC_1677:;				
            _A523506CC_1677:
            ; //	asm	nop				
00A5C:      	nop
            ; //_A523506CC_1678:;				
            _A523506CC_1678:
            ; //	asm	nop				
00A5D:      	nop
            ; //_A523506CC_1679:;				
            _A523506CC_1679:
            ; //	asm	nop				
00A5E:      	nop
            ; //_A523506CC_1680:;				
            _A523506CC_1680:
            ; //	asm	nop				
00A5F:      	nop
            ; //_A523506CC_1681:;				
            _A523506CC_1681:
            ; //	asm	nop				
00A60:      	nop
            ; //_A523506CC_1682:;				
            _A523506CC_1682:
            ; //	asm	nop				
00A61:      	nop
            ; //_A523506CC_1683:;				
            _A523506CC_1683:
            ; //	asm	nop				
00A62:      	nop
            ; //_A523506CC_1684:;				
            _A523506CC_1684:
            ; //	asm	nop				
00A63:      	nop
            ; //_A523506CC_1685:;				
            _A523506CC_1685:
            ; //	asm	nop				
00A64:      	nop
            ; //_A523506CC_1686:;				
            _A523506CC_1686:
            ; //	asm	nop				
00A65:      	nop
            ; //_A523506CC_1687:;				
            _A523506CC_1687:
            ; //	asm	nop				
00A66:      	nop
            ; //_A523506CC_1688:;				
            _A523506CC_1688:
            ; //	asm set io[0x09].b14;			
00A67:      	set io[0x09].b14//
            ; //_A523506CC_1689:;				
            _A523506CC_1689:
            ; //	asm	nop				
00A68:      	nop
            ; //_A523506CC_1690:;				
            _A523506CC_1690:
            ; //	asm	nop				
00A69:      	nop
            ; //_A523506CC_1691:;				
            _A523506CC_1691:
            ; //	asm	nop				
00A6A:      	nop
            ; //_A523506CC_1692:;				
            _A523506CC_1692:
            ; //	asm clr io[0x09].b14;			
00A6B:      	clr io[0x09].b14//
            ; //_A523506CC_1693:;				
            _A523506CC_1693:
            ; //	asm	nop				
00A6C:      	nop
            ; //_A523506CC_1694:;				
            _A523506CC_1694:
            ; //	asm	nop				
00A6D:      	nop
            ; //_A523506CC_1695:;				
            _A523506CC_1695:
            ; //	asm	nop				
00A6E:      	nop
            ; //_A523506CC_1696:;				
            _A523506CC_1696:
            ; //	asm	nop				
00A6F:      	nop
            ; //_A523506CC_1697:;				
            _A523506CC_1697:
            ; //	asm	nop				
00A70:      	nop
            ; //_A523506CC_1698:;				
            _A523506CC_1698:
            ; //	asm	nop				
00A71:      	nop
            ; //_A523506CC_1699:;				
            _A523506CC_1699:
            ; //	asm	nop				
00A72:      	nop
            ; //_A523506CC_1700:;				
            _A523506CC_1700:
            ; //	asm	nop				
00A73:      	nop
            ; //_A523506CC_1701:;				
            _A523506CC_1701:
            ; //	asm	nop				
00A74:      	nop
            ; //_A523506CC_1702:;				
            _A523506CC_1702:
            ; //	asm	nop				
00A75:      	nop
            ; //_A523506CC_1703:;				
            _A523506CC_1703:
            ; //	asm	nop				
00A76:      	nop
            ; //_A523506CC_1704:;				
            _A523506CC_1704:
            ; //	asm	nop				
00A77:      	nop
            ; //_A523506CC_1705:;				
            _A523506CC_1705:
            ; //	asm set io[0x09].b14;			
00A78:      	set io[0x09].b14//
            ; //_A523506CC_1706:;				
            _A523506CC_1706:
            ; //	asm	nop				
00A79:      	nop
            ; //_A523506CC_1707:;				
            _A523506CC_1707:
            ; //	asm	nop				
00A7A:      	nop
            ; //_A523506CC_1708:;				
            _A523506CC_1708:
            ; //	asm	nop				
00A7B:      	nop
            ; //_A523506CC_1709:;				
            _A523506CC_1709:
            ; //	asm clr io[0x09].b14;			
00A7C:      	clr io[0x09].b14//
            ; //_A523506CC_1710:;				
            _A523506CC_1710:
            ; //	asm	nop				
00A7D:      	nop
            ; //_A523506CC_1711:;				
            _A523506CC_1711:
            ; //	asm	nop				
00A7E:      	nop
            ; //_A523506CC_1712:;				
            _A523506CC_1712:
            ; //	asm	nop				
00A7F:      	nop
            ; //_A523506CC_1713:;				
            _A523506CC_1713:
            ; //	asm	nop				
00A80:      	nop
            ; //_A523506CC_1714:;				
            _A523506CC_1714:
            ; //	asm	nop				
00A81:      	nop
            ; //_A523506CC_1715:;				
            _A523506CC_1715:
            ; //	asm	nop				
00A82:      	nop
            ; //_A523506CC_1716:;				
            _A523506CC_1716:
            ; //	asm	nop				
00A83:      	nop
            ; //_A523506CC_1717:;				
            _A523506CC_1717:
            ; //	asm	nop				
00A84:      	nop
            ; //_A523506CC_1718:;				
            _A523506CC_1718:
            ; //	asm	nop				
00A85:      	nop
            ; //_A523506CC_1719:;				
            _A523506CC_1719:
            ; //	asm	nop				
00A86:      	nop
            ; //_A523506CC_1720:;				
            _A523506CC_1720:
            ; //	asm	nop				
00A87:      	nop
            ; //_A523506CC_1721:;				
            _A523506CC_1721:
            ; //	asm	nop				
00A88:      	nop
            ; //_A523506CC_1722:;				
            _A523506CC_1722:
            ; //	asm set io[0x09].b14;			
00A89:      	set io[0x09].b14//
            ; //_A523506CC_1723:;				
            _A523506CC_1723:
            ; //	asm	nop				
00A8A:      	nop
            ; //_A523506CC_1724:;				
            _A523506CC_1724:
            ; //	asm	nop				
00A8B:      	nop
            ; //_A523506CC_1725:;				
            _A523506CC_1725:
            ; //	asm	nop				
00A8C:      	nop
            ; //_A523506CC_1726:;				
            _A523506CC_1726:
            ; //	asm clr io[0x09].b14;			
00A8D:      	clr io[0x09].b14//
            ; //_A523506CC_1727:;				
            _A523506CC_1727:
            ; //	asm	nop				
00A8E:      	nop
            ; //_A523506CC_1728:;				
            _A523506CC_1728:
            ; //	asm	nop				
00A8F:      	nop
            ; //_A523506CC_1729:;				
            _A523506CC_1729:
            ; //	asm	nop				
00A90:      	nop
            ; //_A523506CC_1730:;				
            _A523506CC_1730:
            ; //	asm	nop				
00A91:      	nop
            ; //_A523506CC_1731:;				
            _A523506CC_1731:
            ; //	asm	nop				
00A92:      	nop
            ; //_A523506CC_1732:;				
            _A523506CC_1732:
            ; //	asm	nop				
00A93:      	nop
            ; //_A523506CC_1733:;				
            _A523506CC_1733:
            ; //	asm	nop				
00A94:      	nop
            ; //_A523506CC_1734:;				
            _A523506CC_1734:
            ; //	asm	nop				
00A95:      	nop
            ; //_A523506CC_1735:;				
            _A523506CC_1735:
            ; //	asm	nop				
00A96:      	nop
            ; //_A523506CC_1736:;				
            _A523506CC_1736:
            ; //	asm	nop				
00A97:      	nop
            ; //_A523506CC_1737:;				
            _A523506CC_1737:
            ; //	asm	nop				
00A98:      	nop
            ; //_A523506CC_1738:;				
            _A523506CC_1738:
            ; //	asm	nop				
00A99:      	nop
            ; //_A523506CC_1739:;				
            _A523506CC_1739:
            ; //	asm set io[0x09].b14;			
00A9A:      	set io[0x09].b14//
            ; //_A523506CC_1740:;				
            _A523506CC_1740:
            ; //	asm	nop				
00A9B:      	nop
            ; //_A523506CC_1741:;				
            _A523506CC_1741:
            ; //	asm	nop				
00A9C:      	nop
            ; //_A523506CC_1742:;				
            _A523506CC_1742:
            ; //	asm	nop				
00A9D:      	nop
            ; //_A523506CC_1743:;				
            _A523506CC_1743:
            ; //	asm clr io[0x09].b14;			
00A9E:      	clr io[0x09].b14//
            ; //_A523506CC_1744:;				
            _A523506CC_1744:
            ; //	asm	nop				
00A9F:      	nop
            ; //_A523506CC_1745:;				
            _A523506CC_1745:
            ; //	asm	nop				
00AA0:      	nop
            ; //_A523506CC_1746:;				
            _A523506CC_1746:
            ; //	asm	nop				
00AA1:      	nop
            ; //_A523506CC_1747:;				
            _A523506CC_1747:
            ; //	asm	nop				
00AA2:      	nop
            ; //_A523506CC_1748:;				
            _A523506CC_1748:
            ; //	asm	nop				
00AA3:      	nop
            ; //_A523506CC_1749:;				
            _A523506CC_1749:
            ; //	asm	nop				
00AA4:      	nop
            ; //_A523506CC_1750:;				
            _A523506CC_1750:
            ; //	asm	nop				
00AA5:      	nop
            ; //_A523506CC_1751:;				
            _A523506CC_1751:
            ; //	asm	nop				
00AA6:      	nop
            ; //_A523506CC_1752:;				
            _A523506CC_1752:
            ; //	asm	nop				
00AA7:      	nop
            ; //_A523506CC_1753:;				
            _A523506CC_1753:
            ; //	asm	nop				
00AA8:      	nop
            ; //_A523506CC_1754:;				
            _A523506CC_1754:
            ; //	asm	nop				
00AA9:      	nop
            ; //_A523506CC_1755:;				
            _A523506CC_1755:
            ; //	asm	nop				
00AAA:      	nop
            ; //_A523506CC_1756:;				
            _A523506CC_1756:
            ; //	asm set io[0x09].b14;			
00AAB:      	set io[0x09].b14//
            ; //_A523506CC_1757:;				
            _A523506CC_1757:
            ; //	asm	nop				
00AAC:      	nop
            ; //_A523506CC_1758:;				
            _A523506CC_1758:
            ; //	asm	nop				
00AAD:      	nop
            ; //_A523506CC_1759:;				
            _A523506CC_1759:
            ; //	asm	nop				
00AAE:      	nop
            ; //_A523506CC_1760:;				
            _A523506CC_1760:
            ; //	asm clr io[0x09].b14;			
00AAF:      	clr io[0x09].b14//
            ; //_A523506CC_1761:;				
            _A523506CC_1761:
            ; //	asm	nop				
00AB0:      	nop
            ; //_A523506CC_1762:;				
            _A523506CC_1762:
            ; //	asm	nop				
00AB1:      	nop
            ; //_A523506CC_1763:;				
            _A523506CC_1763:
            ; //	asm	nop				
00AB2:      	nop
            ; //_A523506CC_1764:;				
            _A523506CC_1764:
            ; //	asm	nop				
00AB3:      	nop
            ; //_A523506CC_1765:;				
            _A523506CC_1765:
            ; //	asm	nop				
00AB4:      	nop
            ; //_A523506CC_1766:;				
            _A523506CC_1766:
            ; //	asm	nop				
00AB5:      	nop
            ; //_A523506CC_1767:;				
            _A523506CC_1767:
            ; //	asm	nop				
00AB6:      	nop
            ; //_A523506CC_1768:;				
            _A523506CC_1768:
            ; //	asm	nop				
00AB7:      	nop
            ; //_A523506CC_1769:;				
            _A523506CC_1769:
            ; //	asm	nop				
00AB8:      	nop
            ; //_A523506CC_1770:;				
            _A523506CC_1770:
            ; //	asm	nop				
00AB9:      	nop
            ; //_A523506CC_1771:;				
            _A523506CC_1771:
            ; //	asm	nop				
00ABA:      	nop
            ; //_A523506CC_1772:;				
            _A523506CC_1772:
            ; //	asm	nop				
00ABB:      	nop
            ; //_A523506CC_1773:;				
            _A523506CC_1773:
            ; //	asm set io[0x09].b14;			
00ABC:      	set io[0x09].b14//
            ; //_A523506CC_1774:;				
            _A523506CC_1774:
            ; //	asm	nop				
00ABD:      	nop
            ; //_A523506CC_1775:;				
            _A523506CC_1775:
            ; //	asm	nop				
00ABE:      	nop
            ; //_A523506CC_1776:;				
            _A523506CC_1776:
            ; //	asm	nop				
00ABF:      	nop
            ; //_A523506CC_1777:;				
            _A523506CC_1777:
            ; //	asm clr io[0x09].b14;			
00AC0:      	clr io[0x09].b14//
            ; //_A523506CC_1778:;				
            _A523506CC_1778:
            ; //	asm	nop				
00AC1:      	nop
            ; //_A523506CC_1779:;				
            _A523506CC_1779:
            ; //	asm	nop				
00AC2:      	nop
            ; //_A523506CC_1780:;				
            _A523506CC_1780:
            ; //	asm	nop				
00AC3:      	nop
            ; //_A523506CC_1781:;				
            _A523506CC_1781:
            ; //	asm	nop				
00AC4:      	nop
            ; //_A523506CC_1782:;				
            _A523506CC_1782:
            ; //	asm	nop				
00AC5:      	nop
            ; //_A523506CC_1783:;				
            _A523506CC_1783:
            ; //	asm	nop				
00AC6:      	nop
            ; //_A523506CC_1784:;				
            _A523506CC_1784:
            ; //	asm	nop				
00AC7:      	nop
            ; //_A523506CC_1785:;				
            _A523506CC_1785:
            ; //	asm	nop				
00AC8:      	nop
            ; //_A523506CC_1786:;				
            _A523506CC_1786:
            ; //	asm	nop				
00AC9:      	nop
            ; //_A523506CC_1787:;				
            _A523506CC_1787:
            ; //	asm	nop				
00ACA:      	nop
            ; //_A523506CC_1788:;				
            _A523506CC_1788:
            ; //	asm	nop				
00ACB:      	nop
            ; //_A523506CC_1789:;				
            _A523506CC_1789:
            ; //	asm	nop				
00ACC:      	nop
            ; //_A523506CC_1790:;				
            _A523506CC_1790:
            ; //	asm set io[0x09].b14;			
00ACD:      	set io[0x09].b14//
            ; //_A523506CC_1791:;				
            _A523506CC_1791:
            ; //	asm	nop				
00ACE:      	nop
            ; //_A523506CC_1792:;				
            _A523506CC_1792:
            ; //	asm	nop				
00ACF:      	nop
            ; //_A523506CC_1793:;				
            _A523506CC_1793:
            ; //	asm	nop				
00AD0:      	nop
            ; //_A523506CC_1794:;				
            _A523506CC_1794:
            ; //	asm clr io[0x09].b14;			
00AD1:      	clr io[0x09].b14//
            ; //_A523506CC_1795:;				
            _A523506CC_1795:
            ; //	asm	nop				
00AD2:      	nop
            ; //_A523506CC_1796:;				
            _A523506CC_1796:
            ; //	asm	nop				
00AD3:      	nop
            ; //_A523506CC_1797:;				
            _A523506CC_1797:
            ; //	asm	nop				
00AD4:      	nop
            ; //_A523506CC_1798:;				
            _A523506CC_1798:
            ; //	asm	nop				
00AD5:      	nop
            ; //_A523506CC_1799:;				
            _A523506CC_1799:
            ; //	asm	nop				
00AD6:      	nop
            ; //_A523506CC_1800:;				
            _A523506CC_1800:
            ; //	asm	nop				
00AD7:      	nop
            ; //_A523506CC_1801:;				
            _A523506CC_1801:
            ; //	asm	nop				
00AD8:      	nop
            ; //_A523506CC_1802:;				
            _A523506CC_1802:
            ; //	asm	nop				
00AD9:      	nop
            ; //_A523506CC_1803:;				
            _A523506CC_1803:
            ; //	asm	nop				
00ADA:      	nop
            ; //_A523506CC_1804:;				
            _A523506CC_1804:
            ; //	asm	nop				
00ADB:      	nop
            ; //_A523506CC_1805:;				
            _A523506CC_1805:
            ; //	asm	nop				
00ADC:      	nop
            ; //_A523506CC_1806:;				
            _A523506CC_1806:
            ; //	asm	nop				
00ADD:      	nop
            ; //_A523506CC_1807:;				
            _A523506CC_1807:
            ; //	asm set io[0x09].b14;			
00ADE:      	set io[0x09].b14//
            ; //_A523506CC_1808:;				
            _A523506CC_1808:
            ; //	asm	nop				
00ADF:      	nop
            ; //_A523506CC_1809:;				
            _A523506CC_1809:
            ; //	asm	nop				
00AE0:      	nop
            ; //_A523506CC_1810:;				
            _A523506CC_1810:
            ; //	asm	nop				
00AE1:      	nop
            ; //_A523506CC_1811:;				
            _A523506CC_1811:
            ; //	asm clr io[0x09].b14;			
00AE2:      	clr io[0x09].b14//
            ; //_A523506CC_1812:;				
            _A523506CC_1812:
            ; //	asm	nop				
00AE3:      	nop
            ; //_A523506CC_1813:;				
            _A523506CC_1813:
            ; //	asm	nop				
00AE4:      	nop
            ; //_A523506CC_1814:;				
            _A523506CC_1814:
            ; //	asm	nop				
00AE5:      	nop
            ; //_A523506CC_1815:;				
            _A523506CC_1815:
            ; //	asm	nop				
00AE6:      	nop
            ; //_A523506CC_1816:;				
            _A523506CC_1816:
            ; //	asm	nop				
00AE7:      	nop
            ; //_A523506CC_1817:;				
            _A523506CC_1817:
            ; //	asm	nop				
00AE8:      	nop
            ; //_A523506CC_1818:;				
            _A523506CC_1818:
            ; //	asm	nop				
00AE9:      	nop
            ; //_A523506CC_1819:;				
            _A523506CC_1819:
            ; //	asm	nop				
00AEA:      	nop
            ; //_A523506CC_1820:;				
            _A523506CC_1820:
            ; //	asm	nop				
00AEB:      	nop
            ; //_A523506CC_1821:;				
            _A523506CC_1821:
            ; //	asm	nop				
00AEC:      	nop
            ; //_A523506CC_1822:;				
            _A523506CC_1822:
            ; //	asm	nop				
00AED:      	nop
            ; //_A523506CC_1823:;				
            _A523506CC_1823:
            ; //	asm	nop				
00AEE:      	nop
            ; //_A523506CC_1824:;				
            _A523506CC_1824:
            ; //	asm set io[0x09].b14;			
00AEF:      	set io[0x09].b14//
            ; //_A523506CC_1825:;				
            _A523506CC_1825:
            ; //	asm	nop				
00AF0:      	nop
            ; //_A523506CC_1826:;				
            _A523506CC_1826:
            ; //	asm	nop				
00AF1:      	nop
            ; //_A523506CC_1827:;				
            _A523506CC_1827:
            ; //	asm	nop				
00AF2:      	nop
            ; //_A523506CC_1828:;				
            _A523506CC_1828:
            ; //	asm clr io[0x09].b14;			
00AF3:      	clr io[0x09].b14//
            ; //_A523506CC_1829:;				
            _A523506CC_1829:
            ; //	asm	nop				
00AF4:      	nop
            ; //_A523506CC_1830:;				
            _A523506CC_1830:
            ; //	asm	nop				
00AF5:      	nop
            ; //_A523506CC_1831:;				
            _A523506CC_1831:
            ; //	asm	nop				
00AF6:      	nop
            ; //_A523506CC_1832:;				
            _A523506CC_1832:
            ; //	asm	nop				
00AF7:      	nop
            ; //_A523506CC_1833:;				
            _A523506CC_1833:
            ; //	asm	nop				
00AF8:      	nop
            ; //_A523506CC_1834:;				
            _A523506CC_1834:
            ; //	asm	nop				
00AF9:      	nop
            ; //_A523506CC_1835:;				
            _A523506CC_1835:
            ; //	asm	nop				
00AFA:      	nop
            ; //_A523506CC_1836:;				
            _A523506CC_1836:
            ; //	asm	nop				
00AFB:      	nop
            ; //_A523506CC_1837:;				
            _A523506CC_1837:
            ; //	asm	nop				
00AFC:      	nop
            ; //_A523506CC_1838:;				
            _A523506CC_1838:
            ; //	asm	nop				
00AFD:      	nop
            ; //_A523506CC_1839:;				
            _A523506CC_1839:
            ; //	asm	nop				
00AFE:      	nop
            ; //_A523506CC_1840:;				
            _A523506CC_1840:
            ; //	asm	nop				
00AFF:      	nop
            ; //_A523506CC_1841:;				
            _A523506CC_1841:
            ; //	asm set io[0x09].b14;			
00B00:      	set io[0x09].b14//
            ; //_A523506CC_1842:;				
            _A523506CC_1842:
            ; //	asm	nop				
00B01:      	nop
            ; //_A523506CC_1843:;				
            _A523506CC_1843:
            ; //	asm	nop				
00B02:      	nop
            ; //_A523506CC_1844:;				
            _A523506CC_1844:
            ; //	asm	nop				
00B03:      	nop
            ; //_A523506CC_1845:;				
            _A523506CC_1845:
            ; //	asm clr io[0x09].b14;			
00B04:      	clr io[0x09].b14//
            ; //_A523506CC_1846:;				
            _A523506CC_1846:
            ; //	asm	nop				
00B05:      	nop
            ; //_A523506CC_1847:;				
            _A523506CC_1847:
            ; //	asm	nop				
00B06:      	nop
            ; //_A523506CC_1848:;				
            _A523506CC_1848:
            ; //	asm	nop				
00B07:      	nop
            ; //_A523506CC_1849:;				
            _A523506CC_1849:
            ; //	asm	nop				
00B08:      	nop
            ; //_A523506CC_1850:;				
            _A523506CC_1850:
            ; //	asm	nop				
00B09:      	nop
            ; //_A523506CC_1851:;				
            _A523506CC_1851:
            ; //	asm	nop				
00B0A:      	nop
            ; //_A523506CC_1852:;				
            _A523506CC_1852:
            ; //	asm	nop				
00B0B:      	nop
            ; //_A523506CC_1853:;				
            _A523506CC_1853:
            ; //	asm	nop				
00B0C:      	nop
            ; //_A523506CC_1854:;				
            _A523506CC_1854:
            ; //	asm	nop				
00B0D:      	nop
            ; //_A523506CC_1855:;				
            _A523506CC_1855:
            ; //	asm	nop				
00B0E:      	nop
            ; //_A523506CC_1856:;				
            _A523506CC_1856:
            ; //	asm	nop				
00B0F:      	nop
            ; //_A523506CC_1857:;				
            _A523506CC_1857:
            ; //	asm	nop				
00B10:      	nop
            ; //_A523506CC_1858:;				
            _A523506CC_1858:
            ; //	asm set io[0x09].b14;			
00B11:      	set io[0x09].b14//
            ; //_A523506CC_1859:;				
            _A523506CC_1859:
            ; //	asm	nop				
00B12:      	nop
            ; //_A523506CC_1860:;				
            _A523506CC_1860:
            ; //	asm	nop				
00B13:      	nop
            ; //_A523506CC_1861:;				
            _A523506CC_1861:
            ; //	asm	nop				
00B14:      	nop
            ; //_A523506CC_1862:;				
            _A523506CC_1862:
            ; //	asm clr io[0x09].b14;			
00B15:      	clr io[0x09].b14//
            ; //_A523506CC_1863:;				
            _A523506CC_1863:
            ; //	asm	nop				
00B16:      	nop
            ; //_A523506CC_1864:;				
            _A523506CC_1864:
            ; //	asm	nop				
00B17:      	nop
            ; //_A523506CC_1865:;				
            _A523506CC_1865:
            ; //	asm	nop				
00B18:      	nop
            ; //_A523506CC_1866:;				
            _A523506CC_1866:
            ; //	asm	nop				
00B19:      	nop
            ; //_A523506CC_1867:;				
            _A523506CC_1867:
            ; //	asm	nop				
00B1A:      	nop
            ; //_A523506CC_1868:;				
            _A523506CC_1868:
            ; //	asm	nop				
00B1B:      	nop
            ; //_A523506CC_1869:;				
            _A523506CC_1869:
            ; //	asm	nop				
00B1C:      	nop
            ; //_A523506CC_1870:;				
            _A523506CC_1870:
            ; //	asm	nop				
00B1D:      	nop
            ; //_A523506CC_1871:;				
            _A523506CC_1871:
            ; //	asm	nop				
00B1E:      	nop
            ; //_A523506CC_1872:;				
            _A523506CC_1872:
            ; //	asm	nop				
00B1F:      	nop
            ; //_A523506CC_1873:;				
            _A523506CC_1873:
            ; //	asm	nop				
00B20:      	nop
            ; //_A523506CC_1874:;				
            _A523506CC_1874:
            ; //	asm	nop				
00B21:      	nop
            ; //_A523506CC_1875:;				
            _A523506CC_1875:
            ; //	asm set io[0x09].b14;			
00B22:      	set io[0x09].b14//
            ; //_A523506CC_1876:;				
            _A523506CC_1876:
            ; //	asm	nop				
00B23:      	nop
            ; //_A523506CC_1877:;				
            _A523506CC_1877:
            ; //	asm	nop				
00B24:      	nop
            ; //_A523506CC_1878:;				
            _A523506CC_1878:
            ; //	asm	nop				
00B25:      	nop
            ; //_A523506CC_1879:;				
            _A523506CC_1879:
            ; //	asm clr io[0x09].b14;			
00B26:      	clr io[0x09].b14//
            ; //_A523506CC_1880:;				
            _A523506CC_1880:
            ; //	asm	nop				
00B27:      	nop
            ; //_A523506CC_1881:;				
            _A523506CC_1881:
            ; //	asm	nop				
00B28:      	nop
            ; //_A523506CC_1882:;				
            _A523506CC_1882:
            ; //	asm	nop				
00B29:      	nop
            ; //_A523506CC_1883:;				
            _A523506CC_1883:
            ; //	asm	nop				
00B2A:      	nop
            ; //_A523506CC_1884:;				
            _A523506CC_1884:
            ; //	asm	nop				
00B2B:      	nop
            ; //_A523506CC_1885:;				
            _A523506CC_1885:
            ; //	asm	nop				
00B2C:      	nop
            ; //_A523506CC_1886:;				
            _A523506CC_1886:
            ; //	asm	nop				
00B2D:      	nop
            ; //_A523506CC_1887:;				
            _A523506CC_1887:
            ; //	asm	nop				
00B2E:      	nop
            ; //_A523506CC_1888:;				
            _A523506CC_1888:
            ; //	asm	nop				
00B2F:      	nop
            ; //_A523506CC_1889:;				
            _A523506CC_1889:
            ; //	asm	nop				
00B30:      	nop
            ; //_A523506CC_1890:;				
            _A523506CC_1890:
            ; //	asm	nop				
00B31:      	nop
            ; //_A523506CC_1891:;				
            _A523506CC_1891:
            ; //	asm	nop				
00B32:      	nop
            ; //_A523506CC_1892:;				
            _A523506CC_1892:
            ; //	asm set io[0x09].b14;			
00B33:      	set io[0x09].b14//
            ; //_A523506CC_1893:;				
            _A523506CC_1893:
            ; //	asm	nop				
00B34:      	nop
            ; //_A523506CC_1894:;				
            _A523506CC_1894:
            ; //	asm	nop				
00B35:      	nop
            ; //_A523506CC_1895:;				
            _A523506CC_1895:
            ; //	asm	nop				
00B36:      	nop
            ; //_A523506CC_1896:;				
            _A523506CC_1896:
            ; //	asm clr io[0x09].b14;			
00B37:      	clr io[0x09].b14//
            ; //_A523506CC_1897:;				
            _A523506CC_1897:
            ; //	asm	nop				
00B38:      	nop
            ; //_A523506CC_1898:;				
            _A523506CC_1898:
            ; //	asm	nop				
00B39:      	nop
            ; //_A523506CC_1899:;				
            _A523506CC_1899:
            ; //	asm	nop				
00B3A:      	nop
            ; //_A523506CC_1900:;				
            _A523506CC_1900:
            ; //	asm	nop				
00B3B:      	nop
            ; //_A523506CC_1901:;				
            _A523506CC_1901:
            ; //	asm	nop				
00B3C:      	nop
            ; //_A523506CC_1902:;				
            _A523506CC_1902:
            ; //	asm	nop				
00B3D:      	nop
            ; //_A523506CC_1903:;				
            _A523506CC_1903:
            ; //	asm	nop				
00B3E:      	nop
            ; //_A523506CC_1904:;				
            _A523506CC_1904:
            ; //	asm	nop				
00B3F:      	nop
            ; //_A523506CC_1905:;				
            _A523506CC_1905:
            ; //	asm	nop				
00B40:      	nop
            ; //_A523506CC_1906:;				
            _A523506CC_1906:
            ; //	asm	nop				
00B41:      	nop
            ; //_A523506CC_1907:;				
            _A523506CC_1907:
            ; //	asm	nop				
00B42:      	nop
            ; //_A523506CC_1908:;				
            _A523506CC_1908:
            ; //	asm	nop				
00B43:      	nop
            ; //_A523506CC_1909:;				
            _A523506CC_1909:
            ; //	asm set io[0x09].b14;			
00B44:      	set io[0x09].b14//
            ; //_A523506CC_1910:;				
            _A523506CC_1910:
            ; //	asm	nop				
00B45:      	nop
            ; //_A523506CC_1911:;				
            _A523506CC_1911:
            ; //	asm	nop				
00B46:      	nop
            ; //_A523506CC_1912:;				
            _A523506CC_1912:
            ; //	asm	nop				
00B47:      	nop
            ; //_A523506CC_1913:;				
            _A523506CC_1913:
            ; //	asm clr io[0x09].b14;			
00B48:      	clr io[0x09].b14//
            ; //_A523506CC_1914:;				
            _A523506CC_1914:
            ; //	asm	nop				
00B49:      	nop
            ; //_A523506CC_1915:;				
            _A523506CC_1915:
            ; //	asm	nop				
00B4A:      	nop
            ; //_A523506CC_1916:;				
            _A523506CC_1916:
            ; //	asm	nop				
00B4B:      	nop
            ; //_A523506CC_1917:;				
            _A523506CC_1917:
            ; //	asm	nop				
00B4C:      	nop
            ; //_A523506CC_1918:;				
            _A523506CC_1918:
            ; //	asm	nop				
00B4D:      	nop
            ; //_A523506CC_1919:;				
            _A523506CC_1919:
            ; //	asm	nop				
00B4E:      	nop
            ; //_A523506CC_1920:;				
            _A523506CC_1920:
            ; //	asm	nop				
00B4F:      	nop
            ; //_A523506CC_1921:;				
            _A523506CC_1921:
            ; //	asm	nop				
00B50:      	nop
            ; //_A523506CC_1922:;				
            _A523506CC_1922:
            ; //	asm	nop				
00B51:      	nop
            ; //_A523506CC_1923:;				
            _A523506CC_1923:
            ; //	asm	nop				
00B52:      	nop
            ; //_A523506CC_1924:;				
            _A523506CC_1924:
            ; //	asm	nop				
00B53:      	nop
            ; //_A523506CC_1925:;				
            _A523506CC_1925:
            ; //	asm	nop				
00B54:      	nop
            ; //_A523506CC_1926:;				
            _A523506CC_1926:
            ; //	goto LD63FD439_103;			
00B55:      	pch =	LD63FD439_103
00B56:      	ljmp	LD63FD439_103
            ; //LD63FD439_109:;					
            LD63FD439_109:
            ; //_A523506CC_1927:;				
            _A523506CC_1927:
            ; //	asm set io[0x09].b14;			
00B57:      	set io[0x09].b14//
            ; //_A523506CC_1928:;				
            _A523506CC_1928:
            ; //	asm	nop				
00B58:      	nop
            ; //_A523506CC_1929:;				
            _A523506CC_1929:
            ; //	asm	nop				
00B59:      	nop
            ; //_A523506CC_1930:;				
            _A523506CC_1930:
            ; //	asm	nop				
00B5A:      	nop
            ; //_A523506CC_1931:;				
            _A523506CC_1931:
            ; //	asm clr io[0x09].b14;			
00B5B:      	clr io[0x09].b14//
            ; //_A523506CC_1932:;				
            _A523506CC_1932:
            ; //	asm	nop				
00B5C:      	nop
            ; //_A523506CC_1933:;				
            _A523506CC_1933:
            ; //	asm	nop				
00B5D:      	nop
            ; //_A523506CC_1934:;				
            _A523506CC_1934:
            ; //	asm	nop				
00B5E:      	nop
            ; //_A523506CC_1935:;				
            _A523506CC_1935:
            ; //	asm	nop				
00B5F:      	nop
            ; //_A523506CC_1936:;				
            _A523506CC_1936:
            ; //	asm	nop				
00B60:      	nop
            ; //_A523506CC_1937:;				
            _A523506CC_1937:
            ; //	asm	nop				
00B61:      	nop
            ; //_A523506CC_1938:;				
            _A523506CC_1938:
            ; //	asm	nop				
00B62:      	nop
            ; //_A523506CC_1939:;				
            _A523506CC_1939:
            ; //	asm	nop				
00B63:      	nop
            ; //_A523506CC_1940:;				
            _A523506CC_1940:
            ; //	asm	nop				
00B64:      	nop
            ; //_A523506CC_1941:;				
            _A523506CC_1941:
            ; //	asm	nop				
00B65:      	nop
            ; //_A523506CC_1942:;				
            _A523506CC_1942:
            ; //	asm	nop				
00B66:      	nop
            ; //_A523506CC_1943:;				
            _A523506CC_1943:
            ; //	asm	nop				
00B67:      	nop
            ; //_A523506CC_1944:;				
            _A523506CC_1944:
            ; //	asm set io[0x09].b14;			
00B68:      	set io[0x09].b14//
            ; //_A523506CC_1945:;				
            _A523506CC_1945:
            ; //	asm	nop				
00B69:      	nop
            ; //_A523506CC_1946:;				
            _A523506CC_1946:
            ; //	asm	nop				
00B6A:      	nop
            ; //_A523506CC_1947:;				
            _A523506CC_1947:
            ; //	asm	nop				
00B6B:      	nop
            ; //_A523506CC_1948:;				
            _A523506CC_1948:
            ; //	asm clr io[0x09].b14;			
00B6C:      	clr io[0x09].b14//
            ; //_A523506CC_1949:;				
            _A523506CC_1949:
            ; //	asm	nop				
00B6D:      	nop
            ; //_A523506CC_1950:;				
            _A523506CC_1950:
            ; //	asm	nop				
00B6E:      	nop
            ; //_A523506CC_1951:;				
            _A523506CC_1951:
            ; //	asm	nop				
00B6F:      	nop
            ; //_A523506CC_1952:;				
            _A523506CC_1952:
            ; //	asm	nop				
00B70:      	nop
            ; //_A523506CC_1953:;				
            _A523506CC_1953:
            ; //	asm	nop				
00B71:      	nop
            ; //_A523506CC_1954:;				
            _A523506CC_1954:
            ; //	asm	nop				
00B72:      	nop
            ; //_A523506CC_1955:;				
            _A523506CC_1955:
            ; //	asm	nop				
00B73:      	nop
            ; //_A523506CC_1956:;				
            _A523506CC_1956:
            ; //	asm	nop				
00B74:      	nop
            ; //_A523506CC_1957:;				
            _A523506CC_1957:
            ; //	asm	nop				
00B75:      	nop
            ; //_A523506CC_1958:;				
            _A523506CC_1958:
            ; //	asm	nop				
00B76:      	nop
            ; //_A523506CC_1959:;				
            _A523506CC_1959:
            ; //	asm	nop				
00B77:      	nop
            ; //_A523506CC_1960:;				
            _A523506CC_1960:
            ; //	asm	nop				
00B78:      	nop
            ; //_A523506CC_1961:;				
            _A523506CC_1961:
            ; //	asm set io[0x09].b14;			
00B79:      	set io[0x09].b14//
            ; //_A523506CC_1962:;				
            _A523506CC_1962:
            ; //	asm	nop				
00B7A:      	nop
            ; //_A523506CC_1963:;				
            _A523506CC_1963:
            ; //	asm	nop				
00B7B:      	nop
            ; //_A523506CC_1964:;				
            _A523506CC_1964:
            ; //	asm	nop				
00B7C:      	nop
            ; //_A523506CC_1965:;				
            _A523506CC_1965:
            ; //	asm clr io[0x09].b14;			
00B7D:      	clr io[0x09].b14//
            ; //_A523506CC_1966:;				
            _A523506CC_1966:
            ; //	asm	nop				
00B7E:      	nop
            ; //_A523506CC_1967:;				
            _A523506CC_1967:
            ; //	asm	nop				
00B7F:      	nop
            ; //_A523506CC_1968:;				
            _A523506CC_1968:
            ; //	asm	nop				
00B80:      	nop
            ; //_A523506CC_1969:;				
            _A523506CC_1969:
            ; //	asm	nop				
00B81:      	nop
            ; //_A523506CC_1970:;				
            _A523506CC_1970:
            ; //	asm	nop				
00B82:      	nop
            ; //_A523506CC_1971:;				
            _A523506CC_1971:
            ; //	asm	nop				
00B83:      	nop
            ; //_A523506CC_1972:;				
            _A523506CC_1972:
            ; //	asm	nop				
00B84:      	nop
            ; //_A523506CC_1973:;				
            _A523506CC_1973:
            ; //	asm	nop				
00B85:      	nop
            ; //_A523506CC_1974:;				
            _A523506CC_1974:
            ; //	asm	nop				
00B86:      	nop
            ; //_A523506CC_1975:;				
            _A523506CC_1975:
            ; //	asm	nop				
00B87:      	nop
            ; //_A523506CC_1976:;				
            _A523506CC_1976:
            ; //	asm	nop				
00B88:      	nop
            ; //_A523506CC_1977:;				
            _A523506CC_1977:
            ; //	asm	nop				
00B89:      	nop
            ; //_A523506CC_1978:;				
            _A523506CC_1978:
            ; //	asm set io[0x09].b14;			
00B8A:      	set io[0x09].b14//
            ; //_A523506CC_1979:;				
            _A523506CC_1979:
            ; //	asm	nop				
00B8B:      	nop
            ; //_A523506CC_1980:;				
            _A523506CC_1980:
            ; //	asm	nop				
00B8C:      	nop
            ; //_A523506CC_1981:;				
            _A523506CC_1981:
            ; //	asm	nop				
00B8D:      	nop
            ; //_A523506CC_1982:;				
            _A523506CC_1982:
            ; //	asm clr io[0x09].b14;			
00B8E:      	clr io[0x09].b14//
            ; //_A523506CC_1983:;				
            _A523506CC_1983:
            ; //	asm	nop				
00B8F:      	nop
            ; //_A523506CC_1984:;				
            _A523506CC_1984:
            ; //	asm	nop				
00B90:      	nop
            ; //_A523506CC_1985:;				
            _A523506CC_1985:
            ; //	asm	nop				
00B91:      	nop
            ; //_A523506CC_1986:;				
            _A523506CC_1986:
            ; //	asm	nop				
00B92:      	nop
            ; //_A523506CC_1987:;				
            _A523506CC_1987:
            ; //	asm	nop				
00B93:      	nop
            ; //_A523506CC_1988:;				
            _A523506CC_1988:
            ; //	asm	nop				
00B94:      	nop
            ; //_A523506CC_1989:;				
            _A523506CC_1989:
            ; //	asm	nop				
00B95:      	nop
            ; //_A523506CC_1990:;				
            _A523506CC_1990:
            ; //	asm	nop				
00B96:      	nop
            ; //_A523506CC_1991:;				
            _A523506CC_1991:
            ; //	asm	nop				
00B97:      	nop
            ; //_A523506CC_1992:;				
            _A523506CC_1992:
            ; //	asm	nop				
00B98:      	nop
            ; //_A523506CC_1993:;				
            _A523506CC_1993:
            ; //	asm	nop				
00B99:      	nop
            ; //_A523506CC_1994:;				
            _A523506CC_1994:
            ; //	asm	nop				
00B9A:      	nop
            ; //_A523506CC_1995:;				
            _A523506CC_1995:
            ; //	asm set io[0x09].b14;			
00B9B:      	set io[0x09].b14//
            ; //_A523506CC_1996:;				
            _A523506CC_1996:
            ; //	asm	nop				
00B9C:      	nop
            ; //_A523506CC_1997:;				
            _A523506CC_1997:
            ; //	asm	nop				
00B9D:      	nop
            ; //_A523506CC_1998:;				
            _A523506CC_1998:
            ; //	asm	nop				
00B9E:      	nop
            ; //_A523506CC_1999:;				
            _A523506CC_1999:
            ; //	asm clr io[0x09].b14;			
00B9F:      	clr io[0x09].b14//
            ; //_A523506CC_2000:;				
            _A523506CC_2000:
            ; //	asm	nop				
00BA0:      	nop
            ; //_A523506CC_2001:;				
            _A523506CC_2001:
            ; //	asm	nop				
00BA1:      	nop
            ; //_A523506CC_2002:;				
            _A523506CC_2002:
            ; //	asm	nop				
00BA2:      	nop
            ; //_A523506CC_2003:;				
            _A523506CC_2003:
            ; //	asm	nop				
00BA3:      	nop
            ; //_A523506CC_2004:;				
            _A523506CC_2004:
            ; //	asm	nop				
00BA4:      	nop
            ; //_A523506CC_2005:;				
            _A523506CC_2005:
            ; //	asm	nop				
00BA5:      	nop
            ; //_A523506CC_2006:;				
            _A523506CC_2006:
            ; //	asm	nop				
00BA6:      	nop
            ; //_A523506CC_2007:;				
            _A523506CC_2007:
            ; //	asm	nop				
00BA7:      	nop
            ; //_A523506CC_2008:;				
            _A523506CC_2008:
            ; //	asm	nop				
00BA8:      	nop
            ; //_A523506CC_2009:;				
            _A523506CC_2009:
            ; //	asm	nop				
00BA9:      	nop
            ; //_A523506CC_2010:;				
            _A523506CC_2010:
            ; //	asm	nop				
00BAA:      	nop
            ; //_A523506CC_2011:;				
            _A523506CC_2011:
            ; //	asm	nop				
00BAB:      	nop
            ; //_A523506CC_2012:;				
            _A523506CC_2012:
            ; //	asm set io[0x09].b14;			
00BAC:      	set io[0x09].b14//
            ; //_A523506CC_2013:;				
            _A523506CC_2013:
            ; //	asm	nop				
00BAD:      	nop
            ; //_A523506CC_2014:;				
            _A523506CC_2014:
            ; //	asm	nop				
00BAE:      	nop
            ; //_A523506CC_2015:;				
            _A523506CC_2015:
            ; //	asm	nop				
00BAF:      	nop
            ; //_A523506CC_2016:;				
            _A523506CC_2016:
            ; //	asm clr io[0x09].b14;			
00BB0:      	clr io[0x09].b14//
            ; //_A523506CC_2017:;				
            _A523506CC_2017:
            ; //	asm	nop				
00BB1:      	nop
            ; //_A523506CC_2018:;				
            _A523506CC_2018:
            ; //	asm	nop				
00BB2:      	nop
            ; //_A523506CC_2019:;				
            _A523506CC_2019:
            ; //	asm	nop				
00BB3:      	nop
            ; //_A523506CC_2020:;				
            _A523506CC_2020:
            ; //	asm	nop				
00BB4:      	nop
            ; //_A523506CC_2021:;				
            _A523506CC_2021:
            ; //	asm	nop				
00BB5:      	nop
            ; //_A523506CC_2022:;				
            _A523506CC_2022:
            ; //	asm	nop				
00BB6:      	nop
            ; //_A523506CC_2023:;				
            _A523506CC_2023:
            ; //	asm	nop				
00BB7:      	nop
            ; //_A523506CC_2024:;				
            _A523506CC_2024:
            ; //	asm	nop				
00BB8:      	nop
            ; //_A523506CC_2025:;				
            _A523506CC_2025:
            ; //	asm	nop				
00BB9:      	nop
            ; //_A523506CC_2026:;				
            _A523506CC_2026:
            ; //	asm	nop				
00BBA:      	nop
            ; //_A523506CC_2027:;				
            _A523506CC_2027:
            ; //	asm	nop				
00BBB:      	nop
            ; //_A523506CC_2028:;				
            _A523506CC_2028:
            ; //	asm	nop				
00BBC:      	nop
            ; //_A523506CC_2029:;				
            _A523506CC_2029:
            ; //	asm set io[0x09].b14;			
00BBD:      	set io[0x09].b14//
            ; //_A523506CC_2030:;				
            _A523506CC_2030:
            ; //	asm	nop				
00BBE:      	nop
            ; //_A523506CC_2031:;				
            _A523506CC_2031:
            ; //	asm	nop				
00BBF:      	nop
            ; //_A523506CC_2032:;				
            _A523506CC_2032:
            ; //	asm	nop				
00BC0:      	nop
            ; //_A523506CC_2033:;				
            _A523506CC_2033:
            ; //	asm clr io[0x09].b14;			
00BC1:      	clr io[0x09].b14//
            ; //_A523506CC_2034:;				
            _A523506CC_2034:
            ; //	asm	nop				
00BC2:      	nop
            ; //_A523506CC_2035:;				
            _A523506CC_2035:
            ; //	asm	nop				
00BC3:      	nop
            ; //_A523506CC_2036:;				
            _A523506CC_2036:
            ; //	asm	nop				
00BC4:      	nop
            ; //_A523506CC_2037:;				
            _A523506CC_2037:
            ; //	asm	nop				
00BC5:      	nop
            ; //_A523506CC_2038:;				
            _A523506CC_2038:
            ; //	asm	nop				
00BC6:      	nop
            ; //_A523506CC_2039:;				
            _A523506CC_2039:
            ; //	asm	nop				
00BC7:      	nop
            ; //_A523506CC_2040:;				
            _A523506CC_2040:
            ; //	asm	nop				
00BC8:      	nop
            ; //_A523506CC_2041:;				
            _A523506CC_2041:
            ; //	asm	nop				
00BC9:      	nop
            ; //_A523506CC_2042:;				
            _A523506CC_2042:
            ; //	asm	nop				
00BCA:      	nop
            ; //_A523506CC_2043:;				
            _A523506CC_2043:
            ; //	asm	nop				
00BCB:      	nop
            ; //_A523506CC_2044:;				
            _A523506CC_2044:
            ; //	asm	nop				
00BCC:      	nop
            ; //_A523506CC_2045:;				
            _A523506CC_2045:
            ; //	asm	nop				
00BCD:      	nop
            ; //_A523506CC_2046:;				
            _A523506CC_2046:
            ; //	asm set io[0x09].b14;			
00BCE:      	set io[0x09].b14//
            ; //_A523506CC_2047:;				
            _A523506CC_2047:
            ; //	asm	nop				
00BCF:      	nop
            ; //_A523506CC_2048:;				
            _A523506CC_2048:
            ; //	asm	nop				
00BD0:      	nop
            ; //_A523506CC_2049:;				
            _A523506CC_2049:
            ; //	asm	nop				
00BD1:      	nop
            ; //_A523506CC_2050:;				
            _A523506CC_2050:
            ; //	asm clr io[0x09].b14;			
00BD2:      	clr io[0x09].b14//
            ; //_A523506CC_2051:;				
            _A523506CC_2051:
            ; //	asm	nop				
00BD3:      	nop
            ; //_A523506CC_2052:;				
            _A523506CC_2052:
            ; //	asm	nop				
00BD4:      	nop
            ; //_A523506CC_2053:;				
            _A523506CC_2053:
            ; //	asm	nop				
00BD5:      	nop
            ; //_A523506CC_2054:;				
            _A523506CC_2054:
            ; //	asm	nop				
00BD6:      	nop
            ; //_A523506CC_2055:;				
            _A523506CC_2055:
            ; //	asm	nop				
00BD7:      	nop
            ; //_A523506CC_2056:;				
            _A523506CC_2056:
            ; //	asm	nop				
00BD8:      	nop
            ; //_A523506CC_2057:;				
            _A523506CC_2057:
            ; //	asm	nop				
00BD9:      	nop
            ; //_A523506CC_2058:;				
            _A523506CC_2058:
            ; //	asm	nop				
00BDA:      	nop
            ; //_A523506CC_2059:;				
            _A523506CC_2059:
            ; //	asm	nop				
00BDB:      	nop
            ; //_A523506CC_2060:;				
            _A523506CC_2060:
            ; //	asm	nop				
00BDC:      	nop
            ; //_A523506CC_2061:;				
            _A523506CC_2061:
            ; //	asm	nop				
00BDD:      	nop
            ; //_A523506CC_2062:;				
            _A523506CC_2062:
            ; //	asm	nop				
00BDE:      	nop
            ; //_A523506CC_2063:;				
            _A523506CC_2063:
            ; //	asm set io[0x09].b14;			
00BDF:      	set io[0x09].b14//
            ; //_A523506CC_2064:;				
            _A523506CC_2064:
            ; //	asm	nop				
00BE0:      	nop
            ; //_A523506CC_2065:;				
            _A523506CC_2065:
            ; //	asm	nop				
00BE1:      	nop
            ; //_A523506CC_2066:;				
            _A523506CC_2066:
            ; //	asm	nop				
00BE2:      	nop
            ; //_A523506CC_2067:;				
            _A523506CC_2067:
            ; //	asm	nop				
00BE3:      	nop
            ; //_A523506CC_2068:;				
            _A523506CC_2068:
            ; //	asm	nop				
00BE4:      	nop
            ; //_A523506CC_2069:;				
            _A523506CC_2069:
            ; //	asm	nop				
00BE5:      	nop
            ; //_A523506CC_2070:;				
            _A523506CC_2070:
            ; //	asm	nop				
00BE6:      	nop
            ; //_A523506CC_2071:;				
            _A523506CC_2071:
            ; //	asm	nop				
00BE7:      	nop
            ; //_A523506CC_2072:;				
            _A523506CC_2072:
            ; //	asm	nop				
00BE8:      	nop
            ; //_A523506CC_2073:;				
            _A523506CC_2073:
            ; //	asm	nop				
00BE9:      	nop
            ; //_A523506CC_2074:;				
            _A523506CC_2074:
            ; //	asm	nop				
00BEA:      	nop
            ; //_A523506CC_2075:;				
            _A523506CC_2075:
            ; //	asm	nop				
00BEB:      	nop
            ; //_A523506CC_2076:;				
            _A523506CC_2076:
            ; //	asm clr io[0x09].b14;			
00BEC:      	clr io[0x09].b14//
            ; //_A523506CC_2077:;				
            _A523506CC_2077:
            ; //	asm	nop				
00BED:      	nop
            ; //_A523506CC_2078:;				
            _A523506CC_2078:
            ; //	asm	nop				
00BEE:      	nop
            ; //_A523506CC_2079:;				
            _A523506CC_2079:
            ; //	asm	nop				
00BEF:      	nop
            ; //_A523506CC_2080:;				
            _A523506CC_2080:
            ; //	asm set io[0x09].b14;			
00BF0:      	set io[0x09].b14//
            ; //_A523506CC_2081:;				
            _A523506CC_2081:
            ; //	asm	nop				
00BF1:      	nop
            ; //_A523506CC_2082:;				
            _A523506CC_2082:
            ; //	asm	nop				
00BF2:      	nop
            ; //_A523506CC_2083:;				
            _A523506CC_2083:
            ; //	asm	nop				
00BF3:      	nop
            ; //_A523506CC_2084:;				
            _A523506CC_2084:
            ; //	asm	nop				
00BF4:      	nop
            ; //_A523506CC_2085:;				
            _A523506CC_2085:
            ; //	asm	nop				
00BF5:      	nop
            ; //_A523506CC_2086:;				
            _A523506CC_2086:
            ; //	asm	nop				
00BF6:      	nop
            ; //_A523506CC_2087:;				
            _A523506CC_2087:
            ; //	asm	nop				
00BF7:      	nop
            ; //_A523506CC_2088:;				
            _A523506CC_2088:
            ; //	asm	nop				
00BF8:      	nop
            ; //_A523506CC_2089:;				
            _A523506CC_2089:
            ; //	asm	nop				
00BF9:      	nop
            ; //_A523506CC_2090:;				
            _A523506CC_2090:
            ; //	asm	nop				
00BFA:      	nop
            ; //_A523506CC_2091:;				
            _A523506CC_2091:
            ; //	asm	nop				
00BFB:      	nop
            ; //_A523506CC_2092:;				
            _A523506CC_2092:
            ; //	asm	nop				
00BFC:      	nop
            ; //_A523506CC_2093:;				
            _A523506CC_2093:
            ; //	asm clr io[0x09].b14;			
00BFD:      	clr io[0x09].b14//
            ; //_A523506CC_2094:;				
            _A523506CC_2094:
            ; //	asm	nop				
00BFE:      	nop
            ; //_A523506CC_2095:;				
            _A523506CC_2095:
            ; //	asm	nop				
00BFF:      	nop
            ; //_A523506CC_2096:;				
            _A523506CC_2096:
            ; //	asm	nop				
00C00:      	nop
            ; //_A523506CC_2097:;				
            _A523506CC_2097:
            ; //	asm set io[0x09].b14;			
00C01:      	set io[0x09].b14//
            ; //_A523506CC_2098:;				
            _A523506CC_2098:
            ; //	asm	nop				
00C02:      	nop
            ; //_A523506CC_2099:;				
            _A523506CC_2099:
            ; //	asm	nop				
00C03:      	nop
            ; //_A523506CC_2100:;				
            _A523506CC_2100:
            ; //	asm	nop				
00C04:      	nop
            ; //_A523506CC_2101:;				
            _A523506CC_2101:
            ; //	asm	nop				
00C05:      	nop
            ; //_A523506CC_2102:;				
            _A523506CC_2102:
            ; //	asm	nop				
00C06:      	nop
            ; //_A523506CC_2103:;				
            _A523506CC_2103:
            ; //	asm	nop				
00C07:      	nop
            ; //_A523506CC_2104:;				
            _A523506CC_2104:
            ; //	asm	nop				
00C08:      	nop
            ; //_A523506CC_2105:;				
            _A523506CC_2105:
            ; //	asm	nop				
00C09:      	nop
            ; //_A523506CC_2106:;				
            _A523506CC_2106:
            ; //	asm	nop				
00C0A:      	nop
            ; //_A523506CC_2107:;				
            _A523506CC_2107:
            ; //	asm	nop				
00C0B:      	nop
            ; //_A523506CC_2108:;				
            _A523506CC_2108:
            ; //	asm	nop				
00C0C:      	nop
            ; //_A523506CC_2109:;				
            _A523506CC_2109:
            ; //	asm	nop				
00C0D:      	nop
            ; //_A523506CC_2110:;				
            _A523506CC_2110:
            ; //	asm clr io[0x09].b14;			
00C0E:      	clr io[0x09].b14//
            ; //_A523506CC_2111:;				
            _A523506CC_2111:
            ; //	asm	nop				
00C0F:      	nop
            ; //_A523506CC_2112:;				
            _A523506CC_2112:
            ; //	asm	nop				
00C10:      	nop
            ; //_A523506CC_2113:;				
            _A523506CC_2113:
            ; //	asm	nop				
00C11:      	nop
            ; //_A523506CC_2114:;				
            _A523506CC_2114:
            ; //	asm set io[0x09].b14;			
00C12:      	set io[0x09].b14//
            ; //_A523506CC_2115:;				
            _A523506CC_2115:
            ; //	asm	nop				
00C13:      	nop
            ; //_A523506CC_2116:;				
            _A523506CC_2116:
            ; //	asm	nop				
00C14:      	nop
            ; //_A523506CC_2117:;				
            _A523506CC_2117:
            ; //	asm	nop				
00C15:      	nop
            ; //_A523506CC_2118:;				
            _A523506CC_2118:
            ; //	asm	nop				
00C16:      	nop
            ; //_A523506CC_2119:;				
            _A523506CC_2119:
            ; //	asm	nop				
00C17:      	nop
            ; //_A523506CC_2120:;				
            _A523506CC_2120:
            ; //	asm	nop				
00C18:      	nop
            ; //_A523506CC_2121:;				
            _A523506CC_2121:
            ; //	asm	nop				
00C19:      	nop
            ; //_A523506CC_2122:;				
            _A523506CC_2122:
            ; //	asm	nop				
00C1A:      	nop
            ; //_A523506CC_2123:;				
            _A523506CC_2123:
            ; //	asm	nop				
00C1B:      	nop
            ; //_A523506CC_2124:;				
            _A523506CC_2124:
            ; //	asm	nop				
00C1C:      	nop
            ; //_A523506CC_2125:;				
            _A523506CC_2125:
            ; //	asm	nop				
00C1D:      	nop
            ; //_A523506CC_2126:;				
            _A523506CC_2126:
            ; //	asm	nop				
00C1E:      	nop
            ; //_A523506CC_2127:;				
            _A523506CC_2127:
            ; //	asm clr io[0x09].b14;			
00C1F:      	clr io[0x09].b14//
            ; //_A523506CC_2128:;				
            _A523506CC_2128:
            ; //	asm	nop				
00C20:      	nop
            ; //_A523506CC_2129:;				
            _A523506CC_2129:
            ; //	asm	nop				
00C21:      	nop
            ; //_A523506CC_2130:;				
            _A523506CC_2130:
            ; //	asm	nop				
00C22:      	nop
            ; //_A523506CC_2131:;				
            _A523506CC_2131:
            ; //	asm set io[0x09].b14;			
00C23:      	set io[0x09].b14//
            ; //_A523506CC_2132:;				
            _A523506CC_2132:
            ; //	asm	nop				
00C24:      	nop
            ; //_A523506CC_2133:;				
            _A523506CC_2133:
            ; //	asm	nop				
00C25:      	nop
            ; //_A523506CC_2134:;				
            _A523506CC_2134:
            ; //	asm	nop				
00C26:      	nop
            ; //_A523506CC_2135:;				
            _A523506CC_2135:
            ; //	asm	nop				
00C27:      	nop
            ; //_A523506CC_2136:;				
            _A523506CC_2136:
            ; //	asm	nop				
00C28:      	nop
            ; //_A523506CC_2137:;				
            _A523506CC_2137:
            ; //	asm	nop				
00C29:      	nop
            ; //_A523506CC_2138:;				
            _A523506CC_2138:
            ; //	asm	nop				
00C2A:      	nop
            ; //_A523506CC_2139:;				
            _A523506CC_2139:
            ; //	asm	nop				
00C2B:      	nop
            ; //_A523506CC_2140:;				
            _A523506CC_2140:
            ; //	asm	nop				
00C2C:      	nop
            ; //_A523506CC_2141:;				
            _A523506CC_2141:
            ; //	asm	nop				
00C2D:      	nop
            ; //_A523506CC_2142:;				
            _A523506CC_2142:
            ; //	asm	nop				
00C2E:      	nop
            ; //_A523506CC_2143:;				
            _A523506CC_2143:
            ; //	asm	nop				
00C2F:      	nop
            ; //_A523506CC_2144:;				
            _A523506CC_2144:
            ; //	asm clr io[0x09].b14;			
00C30:      	clr io[0x09].b14//
            ; //_A523506CC_2145:;				
            _A523506CC_2145:
            ; //	asm	nop				
00C31:      	nop
            ; //_A523506CC_2146:;				
            _A523506CC_2146:
            ; //	asm	nop				
00C32:      	nop
            ; //_A523506CC_2147:;				
            _A523506CC_2147:
            ; //	asm	nop				
00C33:      	nop
            ; //_A523506CC_2148:;				
            _A523506CC_2148:
            ; //	asm set io[0x09].b14;			
00C34:      	set io[0x09].b14//
            ; //_A523506CC_2149:;				
            _A523506CC_2149:
            ; //	asm	nop				
00C35:      	nop
            ; //_A523506CC_2150:;				
            _A523506CC_2150:
            ; //	asm	nop				
00C36:      	nop
            ; //_A523506CC_2151:;				
            _A523506CC_2151:
            ; //	asm	nop				
00C37:      	nop
            ; //_A523506CC_2152:;				
            _A523506CC_2152:
            ; //	asm	nop				
00C38:      	nop
            ; //_A523506CC_2153:;				
            _A523506CC_2153:
            ; //	asm	nop				
00C39:      	nop
            ; //_A523506CC_2154:;				
            _A523506CC_2154:
            ; //	asm	nop				
00C3A:      	nop
            ; //_A523506CC_2155:;				
            _A523506CC_2155:
            ; //	asm	nop				
00C3B:      	nop
            ; //_A523506CC_2156:;				
            _A523506CC_2156:
            ; //	asm	nop				
00C3C:      	nop
            ; //_A523506CC_2157:;				
            _A523506CC_2157:
            ; //	asm	nop				
00C3D:      	nop
            ; //_A523506CC_2158:;				
            _A523506CC_2158:
            ; //	asm	nop				
00C3E:      	nop
            ; //_A523506CC_2159:;				
            _A523506CC_2159:
            ; //	asm	nop				
00C3F:      	nop
            ; //_A523506CC_2160:;				
            _A523506CC_2160:
            ; //	asm	nop				
00C40:      	nop
            ; //_A523506CC_2161:;				
            _A523506CC_2161:
            ; //	asm clr io[0x09].b14;			
00C41:      	clr io[0x09].b14//
            ; //_A523506CC_2162:;				
            _A523506CC_2162:
            ; //	asm	nop				
00C42:      	nop
            ; //_A523506CC_2163:;				
            _A523506CC_2163:
            ; //	asm	nop				
00C43:      	nop
            ; //_A523506CC_2164:;				
            _A523506CC_2164:
            ; //	asm	nop				
00C44:      	nop
            ; //_A523506CC_2165:;				
            _A523506CC_2165:
            ; //	asm set io[0x09].b14;			
00C45:      	set io[0x09].b14//
            ; //_A523506CC_2166:;				
            _A523506CC_2166:
            ; //	asm	nop				
00C46:      	nop
            ; //_A523506CC_2167:;				
            _A523506CC_2167:
            ; //	asm	nop				
00C47:      	nop
            ; //_A523506CC_2168:;				
            _A523506CC_2168:
            ; //	asm	nop				
00C48:      	nop
            ; //_A523506CC_2169:;				
            _A523506CC_2169:
            ; //	asm	nop				
00C49:      	nop
            ; //_A523506CC_2170:;				
            _A523506CC_2170:
            ; //	asm	nop				
00C4A:      	nop
            ; //_A523506CC_2171:;				
            _A523506CC_2171:
            ; //	asm	nop				
00C4B:      	nop
            ; //_A523506CC_2172:;				
            _A523506CC_2172:
            ; //	asm	nop				
00C4C:      	nop
            ; //_A523506CC_2173:;				
            _A523506CC_2173:
            ; //	asm	nop				
00C4D:      	nop
            ; //_A523506CC_2174:;				
            _A523506CC_2174:
            ; //	asm	nop				
00C4E:      	nop
            ; //_A523506CC_2175:;				
            _A523506CC_2175:
            ; //	asm	nop				
00C4F:      	nop
            ; //_A523506CC_2176:;				
            _A523506CC_2176:
            ; //	asm	nop				
00C50:      	nop
            ; //_A523506CC_2177:;				
            _A523506CC_2177:
            ; //	asm	nop				
00C51:      	nop
            ; //_A523506CC_2178:;				
            _A523506CC_2178:
            ; //	asm clr io[0x09].b14;			
00C52:      	clr io[0x09].b14//
            ; //_A523506CC_2179:;				
            _A523506CC_2179:
            ; //	asm	nop				
00C53:      	nop
            ; //_A523506CC_2180:;				
            _A523506CC_2180:
            ; //	asm	nop				
00C54:      	nop
            ; //_A523506CC_2181:;				
            _A523506CC_2181:
            ; //	asm	nop				
00C55:      	nop
            ; //_A523506CC_2182:;				
            _A523506CC_2182:
            ; //	asm set io[0x09].b14;			
00C56:      	set io[0x09].b14//
            ; //_A523506CC_2183:;				
            _A523506CC_2183:
            ; //	asm	nop				
00C57:      	nop
            ; //_A523506CC_2184:;				
            _A523506CC_2184:
            ; //	asm	nop				
00C58:      	nop
            ; //_A523506CC_2185:;				
            _A523506CC_2185:
            ; //	asm	nop				
00C59:      	nop
            ; //_A523506CC_2186:;				
            _A523506CC_2186:
            ; //	asm	nop				
00C5A:      	nop
            ; //_A523506CC_2187:;				
            _A523506CC_2187:
            ; //	asm	nop				
00C5B:      	nop
            ; //_A523506CC_2188:;				
            _A523506CC_2188:
            ; //	asm	nop				
00C5C:      	nop
            ; //_A523506CC_2189:;				
            _A523506CC_2189:
            ; //	asm	nop				
00C5D:      	nop
            ; //_A523506CC_2190:;				
            _A523506CC_2190:
            ; //	asm	nop				
00C5E:      	nop
            ; //_A523506CC_2191:;				
            _A523506CC_2191:
            ; //	asm	nop				
00C5F:      	nop
            ; //_A523506CC_2192:;				
            _A523506CC_2192:
            ; //	asm	nop				
00C60:      	nop
            ; //_A523506CC_2193:;				
            _A523506CC_2193:
            ; //	asm	nop				
00C61:      	nop
            ; //_A523506CC_2194:;				
            _A523506CC_2194:
            ; //	asm	nop				
00C62:      	nop
            ; //_A523506CC_2195:;				
            _A523506CC_2195:
            ; //	asm clr io[0x09].b14;			
00C63:      	clr io[0x09].b14//
            ; //_A523506CC_2196:;				
            _A523506CC_2196:
            ; //	asm	nop				
00C64:      	nop
            ; //_A523506CC_2197:;				
            _A523506CC_2197:
            ; //	asm	nop				
00C65:      	nop
            ; //_A523506CC_2198:;				
            _A523506CC_2198:
            ; //	asm	nop				
00C66:      	nop
            ; //_A523506CC_2199:;				
            _A523506CC_2199:
            ; //	asm set io[0x09].b14;			
00C67:      	set io[0x09].b14//
            ; //_A523506CC_2200:;				
            _A523506CC_2200:
            ; //	asm	nop				
00C68:      	nop
            ; //_A523506CC_2201:;				
            _A523506CC_2201:
            ; //	asm	nop				
00C69:      	nop
            ; //_A523506CC_2202:;				
            _A523506CC_2202:
            ; //	asm	nop				
00C6A:      	nop
            ; //_A523506CC_2203:;				
            _A523506CC_2203:
            ; //	asm	nop				
00C6B:      	nop
            ; //_A523506CC_2204:;				
            _A523506CC_2204:
            ; //	asm	nop				
00C6C:      	nop
            ; //_A523506CC_2205:;				
            _A523506CC_2205:
            ; //	asm	nop				
00C6D:      	nop
            ; //_A523506CC_2206:;				
            _A523506CC_2206:
            ; //	asm	nop				
00C6E:      	nop
            ; //_A523506CC_2207:;				
            _A523506CC_2207:
            ; //	asm	nop				
00C6F:      	nop
            ; //_A523506CC_2208:;				
            _A523506CC_2208:
            ; //	asm	nop				
00C70:      	nop
            ; //_A523506CC_2209:;				
            _A523506CC_2209:
            ; //	asm	nop				
00C71:      	nop
            ; //_A523506CC_2210:;				
            _A523506CC_2210:
            ; //	asm	nop				
00C72:      	nop
            ; //_A523506CC_2211:;				
            _A523506CC_2211:
            ; //	asm	nop				
00C73:      	nop
            ; //_A523506CC_2212:;				
            _A523506CC_2212:
            ; //	asm clr io[0x09].b14;			
00C74:      	clr io[0x09].b14//
            ; //_A523506CC_2213:;				
            _A523506CC_2213:
            ; //	asm	nop				
00C75:      	nop
            ; //_A523506CC_2214:;				
            _A523506CC_2214:
            ; //	asm	nop				
00C76:      	nop
            ; //_A523506CC_2215:;				
            _A523506CC_2215:
            ; //	asm	nop				
00C77:      	nop
            ; //_A523506CC_2216:;				
            _A523506CC_2216:
            ; //	asm set io[0x09].b14;			
00C78:      	set io[0x09].b14//
            ; //_A523506CC_2217:;				
            _A523506CC_2217:
            ; //	asm	nop				
00C79:      	nop
            ; //_A523506CC_2218:;				
            _A523506CC_2218:
            ; //	asm	nop				
00C7A:      	nop
            ; //_A523506CC_2219:;				
            _A523506CC_2219:
            ; //	asm	nop				
00C7B:      	nop
            ; //_A523506CC_2220:;				
            _A523506CC_2220:
            ; //	asm	nop				
00C7C:      	nop
            ; //_A523506CC_2221:;				
            _A523506CC_2221:
            ; //	asm	nop				
00C7D:      	nop
            ; //_A523506CC_2222:;				
            _A523506CC_2222:
            ; //	asm	nop				
00C7E:      	nop
            ; //_A523506CC_2223:;				
            _A523506CC_2223:
            ; //	asm	nop				
00C7F:      	nop
            ; //_A523506CC_2224:;				
            _A523506CC_2224:
            ; //	asm	nop				
00C80:      	nop
            ; //_A523506CC_2225:;				
            _A523506CC_2225:
            ; //	asm	nop				
00C81:      	nop
            ; //_A523506CC_2226:;				
            _A523506CC_2226:
            ; //	asm	nop				
00C82:      	nop
            ; //_A523506CC_2227:;				
            _A523506CC_2227:
            ; //	asm	nop				
00C83:      	nop
            ; //_A523506CC_2228:;				
            _A523506CC_2228:
            ; //	asm	nop				
00C84:      	nop
            ; //_A523506CC_2229:;				
            _A523506CC_2229:
            ; //	asm clr io[0x09].b14;			
00C85:      	clr io[0x09].b14//
            ; //_A523506CC_2230:;				
            _A523506CC_2230:
            ; //	asm	nop				
00C86:      	nop
            ; //_A523506CC_2231:;				
            _A523506CC_2231:
            ; //	asm	nop				
00C87:      	nop
            ; //_A523506CC_2232:;				
            _A523506CC_2232:
            ; //	asm	nop				
00C88:      	nop
            ; //_A523506CC_2233:;				
            _A523506CC_2233:
            ; //	asm set io[0x09].b14;			
00C89:      	set io[0x09].b14//
            ; //_A523506CC_2234:;				
            _A523506CC_2234:
            ; //	asm	nop				
00C8A:      	nop
            ; //_A523506CC_2235:;				
            _A523506CC_2235:
            ; //	asm	nop				
00C8B:      	nop
            ; //_A523506CC_2236:;				
            _A523506CC_2236:
            ; //	asm	nop				
00C8C:      	nop
            ; //_A523506CC_2237:;				
            _A523506CC_2237:
            ; //	asm	nop				
00C8D:      	nop
            ; //_A523506CC_2238:;				
            _A523506CC_2238:
            ; //	asm	nop				
00C8E:      	nop
            ; //_A523506CC_2239:;				
            _A523506CC_2239:
            ; //	asm	nop				
00C8F:      	nop
            ; //_A523506CC_2240:;				
            _A523506CC_2240:
            ; //	asm	nop				
00C90:      	nop
            ; //_A523506CC_2241:;				
            _A523506CC_2241:
            ; //	asm	nop				
00C91:      	nop
            ; //_A523506CC_2242:;				
            _A523506CC_2242:
            ; //	asm	nop				
00C92:      	nop
            ; //_A523506CC_2243:;				
            _A523506CC_2243:
            ; //	asm	nop				
00C93:      	nop
            ; //_A523506CC_2244:;				
            _A523506CC_2244:
            ; //	asm	nop				
00C94:      	nop
            ; //_A523506CC_2245:;				
            _A523506CC_2245:
            ; //	asm	nop				
00C95:      	nop
            ; //_A523506CC_2246:;				
            _A523506CC_2246:
            ; //	asm clr io[0x09].b14;			
00C96:      	clr io[0x09].b14//
            ; //_A523506CC_2247:;				
            _A523506CC_2247:
            ; //	asm	nop				
00C97:      	nop
            ; //_A523506CC_2248:;				
            _A523506CC_2248:
            ; //	asm	nop				
00C98:      	nop
            ; //_A523506CC_2249:;				
            _A523506CC_2249:
            ; //	asm	nop				
00C99:      	nop
            ; //_A523506CC_2250:;				
            _A523506CC_2250:
            ; //	asm set io[0x09].b14;			
00C9A:      	set io[0x09].b14//
            ; //_A523506CC_2251:;				
            _A523506CC_2251:
            ; //	asm	nop				
00C9B:      	nop
            ; //_A523506CC_2252:;				
            _A523506CC_2252:
            ; //	asm	nop				
00C9C:      	nop
            ; //_A523506CC_2253:;				
            _A523506CC_2253:
            ; //	asm	nop				
00C9D:      	nop
            ; //_A523506CC_2254:;				
            _A523506CC_2254:
            ; //	asm	nop				
00C9E:      	nop
            ; //_A523506CC_2255:;				
            _A523506CC_2255:
            ; //	asm	nop				
00C9F:      	nop
            ; //_A523506CC_2256:;				
            _A523506CC_2256:
            ; //	asm	nop				
00CA0:      	nop
            ; //_A523506CC_2257:;				
            _A523506CC_2257:
            ; //	asm	nop				
00CA1:      	nop
            ; //_A523506CC_2258:;				
            _A523506CC_2258:
            ; //	asm	nop				
00CA2:      	nop
            ; //_A523506CC_2259:;				
            _A523506CC_2259:
            ; //	asm	nop				
00CA3:      	nop
            ; //_A523506CC_2260:;				
            _A523506CC_2260:
            ; //	asm	nop				
00CA4:      	nop
            ; //_A523506CC_2261:;				
            _A523506CC_2261:
            ; //	asm	nop				
00CA5:      	nop
            ; //_A523506CC_2262:;				
            _A523506CC_2262:
            ; //	asm	nop				
00CA6:      	nop
            ; //_A523506CC_2263:;				
            _A523506CC_2263:
            ; //	asm clr io[0x09].b14;			
00CA7:      	clr io[0x09].b14//
            ; //_A523506CC_2264:;				
            _A523506CC_2264:
            ; //	asm	nop				
00CA8:      	nop
            ; //_A523506CC_2265:;				
            _A523506CC_2265:
            ; //	asm	nop				
00CA9:      	nop
            ; //_A523506CC_2266:;				
            _A523506CC_2266:
            ; //	asm	nop				
00CAA:      	nop
            ; //_A523506CC_2267:;				
            _A523506CC_2267:
            ; //	asm set io[0x09].b14;			
00CAB:      	set io[0x09].b14//
            ; //_A523506CC_2268:;				
            _A523506CC_2268:
            ; //	asm	nop				
00CAC:      	nop
            ; //_A523506CC_2269:;				
            _A523506CC_2269:
            ; //	asm	nop				
00CAD:      	nop
            ; //_A523506CC_2270:;				
            _A523506CC_2270:
            ; //	asm	nop				
00CAE:      	nop
            ; //_A523506CC_2271:;				
            _A523506CC_2271:
            ; //	asm	nop				
00CAF:      	nop
            ; //_A523506CC_2272:;				
            _A523506CC_2272:
            ; //	asm	nop				
00CB0:      	nop
            ; //_A523506CC_2273:;				
            _A523506CC_2273:
            ; //	asm	nop				
00CB1:      	nop
            ; //_A523506CC_2274:;				
            _A523506CC_2274:
            ; //	asm	nop				
00CB2:      	nop
            ; //_A523506CC_2275:;				
            _A523506CC_2275:
            ; //	asm	nop				
00CB3:      	nop
            ; //_A523506CC_2276:;				
            _A523506CC_2276:
            ; //	asm	nop				
00CB4:      	nop
            ; //_A523506CC_2277:;				
            _A523506CC_2277:
            ; //	asm	nop				
00CB5:      	nop
            ; //_A523506CC_2278:;				
            _A523506CC_2278:
            ; //	asm	nop				
00CB6:      	nop
            ; //_A523506CC_2279:;				
            _A523506CC_2279:
            ; //	asm	nop				
00CB7:      	nop
            ; //_A523506CC_2280:;				
            _A523506CC_2280:
            ; //	asm clr io[0x09].b14;			
00CB8:      	clr io[0x09].b14//
            ; //_A523506CC_2281:;				
            _A523506CC_2281:
            ; //	asm	nop				
00CB9:      	nop
            ; //_A523506CC_2282:;				
            _A523506CC_2282:
            ; //	asm	nop				
00CBA:      	nop
            ; //_A523506CC_2283:;				
            _A523506CC_2283:
            ; //	asm	nop				
00CBB:      	nop
            ; //_A523506CC_2284:;				
            _A523506CC_2284:
            ; //	asm set io[0x09].b14;			
00CBC:      	set io[0x09].b14//
            ; //_A523506CC_2285:;				
            _A523506CC_2285:
            ; //	asm	nop				
00CBD:      	nop
            ; //_A523506CC_2286:;				
            _A523506CC_2286:
            ; //	asm	nop				
00CBE:      	nop
            ; //_A523506CC_2287:;				
            _A523506CC_2287:
            ; //	asm	nop				
00CBF:      	nop
            ; //_A523506CC_2288:;				
            _A523506CC_2288:
            ; //	asm	nop				
00CC0:      	nop
            ; //_A523506CC_2289:;				
            _A523506CC_2289:
            ; //	asm	nop				
00CC1:      	nop
            ; //_A523506CC_2290:;				
            _A523506CC_2290:
            ; //	asm	nop				
00CC2:      	nop
            ; //_A523506CC_2291:;				
            _A523506CC_2291:
            ; //	asm	nop				
00CC3:      	nop
            ; //_A523506CC_2292:;				
            _A523506CC_2292:
            ; //	asm	nop				
00CC4:      	nop
            ; //_A523506CC_2293:;				
            _A523506CC_2293:
            ; //	asm	nop				
00CC5:      	nop
            ; //_A523506CC_2294:;				
            _A523506CC_2294:
            ; //	asm	nop				
00CC6:      	nop
            ; //_A523506CC_2295:;				
            _A523506CC_2295:
            ; //	asm	nop				
00CC7:      	nop
            ; //_A523506CC_2296:;				
            _A523506CC_2296:
            ; //	asm	nop				
00CC8:      	nop
            ; //_A523506CC_2297:;				
            _A523506CC_2297:
            ; //	asm clr io[0x09].b14;			
00CC9:      	clr io[0x09].b14//
            ; //_A523506CC_2298:;				
            _A523506CC_2298:
            ; //	asm	nop				
00CCA:      	nop
            ; //_A523506CC_2299:;				
            _A523506CC_2299:
            ; //	asm	nop				
00CCB:      	nop
            ; //_A523506CC_2300:;				
            _A523506CC_2300:
            ; //	asm	nop				
00CCC:      	nop
            ; //_A523506CC_2301:;				
            _A523506CC_2301:
            ; //	asm set io[0x09].b14;			
00CCD:      	set io[0x09].b14//
            ; //_A523506CC_2302:;				
            _A523506CC_2302:
            ; //	asm	nop				
00CCE:      	nop
            ; //_A523506CC_2303:;				
            _A523506CC_2303:
            ; //	asm	nop				
00CCF:      	nop
            ; //_A523506CC_2304:;				
            _A523506CC_2304:
            ; //	asm	nop				
00CD0:      	nop
            ; //_A523506CC_2305:;				
            _A523506CC_2305:
            ; //	asm	nop				
00CD1:      	nop
            ; //_A523506CC_2306:;				
            _A523506CC_2306:
            ; //	asm	nop				
00CD2:      	nop
            ; //_A523506CC_2307:;				
            _A523506CC_2307:
            ; //	asm	nop				
00CD3:      	nop
            ; //_A523506CC_2308:;				
            _A523506CC_2308:
            ; //	asm	nop				
00CD4:      	nop
            ; //_A523506CC_2309:;				
            _A523506CC_2309:
            ; //	asm	nop				
00CD5:      	nop
            ; //_A523506CC_2310:;				
            _A523506CC_2310:
            ; //	asm	nop				
00CD6:      	nop
            ; //_A523506CC_2311:;				
            _A523506CC_2311:
            ; //	asm	nop				
00CD7:      	nop
            ; //_A523506CC_2312:;				
            _A523506CC_2312:
            ; //	asm	nop				
00CD8:      	nop
            ; //_A523506CC_2313:;				
            _A523506CC_2313:
            ; //	asm	nop				
00CD9:      	nop
            ; //_A523506CC_2314:;				
            _A523506CC_2314:
            ; //	asm clr io[0x09].b14;			
00CDA:      	clr io[0x09].b14//
            ; //_A523506CC_2315:;				
            _A523506CC_2315:
            ; //	asm	nop				
00CDB:      	nop
            ; //_A523506CC_2316:;				
            _A523506CC_2316:
            ; //	asm	nop				
00CDC:      	nop
            ; //_A523506CC_2317:;				
            _A523506CC_2317:
            ; //	asm	nop				
00CDD:      	nop
            ; //_A523506CC_2318:;				
            _A523506CC_2318:
            ; //	asm set io[0x09].b14;			
00CDE:      	set io[0x09].b14//
            ; //_A523506CC_2319:;				
            _A523506CC_2319:
            ; //	asm	nop				
00CDF:      	nop
            ; //_A523506CC_2320:;				
            _A523506CC_2320:
            ; //	asm	nop				
00CE0:      	nop
            ; //_A523506CC_2321:;				
            _A523506CC_2321:
            ; //	asm	nop				
00CE1:      	nop
            ; //_A523506CC_2322:;				
            _A523506CC_2322:
            ; //	asm	nop				
00CE2:      	nop
            ; //_A523506CC_2323:;				
            _A523506CC_2323:
            ; //	asm	nop				
00CE3:      	nop
            ; //_A523506CC_2324:;				
            _A523506CC_2324:
            ; //	asm	nop				
00CE4:      	nop
            ; //_A523506CC_2325:;				
            _A523506CC_2325:
            ; //	asm	nop				
00CE5:      	nop
            ; //_A523506CC_2326:;				
            _A523506CC_2326:
            ; //	asm	nop				
00CE6:      	nop
            ; //_A523506CC_2327:;				
            _A523506CC_2327:
            ; //	asm	nop				
00CE7:      	nop
            ; //_A523506CC_2328:;				
            _A523506CC_2328:
            ; //	asm	nop				
00CE8:      	nop
            ; //_A523506CC_2329:;				
            _A523506CC_2329:
            ; //	asm	nop				
00CE9:      	nop
            ; //_A523506CC_2330:;				
            _A523506CC_2330:
            ; //	asm	nop				
00CEA:      	nop
            ; //_A523506CC_2331:;				
            _A523506CC_2331:
            ; //	asm clr io[0x09].b14;			
00CEB:      	clr io[0x09].b14//
            ; //_A523506CC_2332:;				
            _A523506CC_2332:
            ; //	asm	nop				
00CEC:      	nop
            ; //_A523506CC_2333:;				
            _A523506CC_2333:
            ; //	asm	nop				
00CED:      	nop
            ; //_A523506CC_2334:;				
            _A523506CC_2334:
            ; //	asm	nop				
00CEE:      	nop
            ; //_A523506CC_2335:;				
            _A523506CC_2335:
            ; //	goto LD63FD439_103;			
00CEF:      	pch =	LD63FD439_103
00CF0:      	ljmp	LD63FD439_103
            ; //LD63FD439_110:;					
            LD63FD439_110:
            ; //_A523506CC_2336:;				
            _A523506CC_2336:
            ; //	asm set io[0x09].b14;			
00CF1:      	set io[0x09].b14//
            ; //_A523506CC_2337:;				
            _A523506CC_2337:
            ; //	asm	nop				
00CF2:      	nop
            ; //_A523506CC_2338:;				
            _A523506CC_2338:
            ; //	asm	nop				
00CF3:      	nop
            ; //_A523506CC_2339:;				
            _A523506CC_2339:
            ; //	asm	nop				
00CF4:      	nop
            ; //_A523506CC_2340:;				
            _A523506CC_2340:
            ; //	asm clr io[0x09].b14;			
00CF5:      	clr io[0x09].b14//
            ; //_A523506CC_2341:;				
            _A523506CC_2341:
            ; //	asm	nop				
00CF6:      	nop
            ; //_A523506CC_2342:;				
            _A523506CC_2342:
            ; //	asm	nop				
00CF7:      	nop
            ; //_A523506CC_2343:;				
            _A523506CC_2343:
            ; //	asm	nop				
00CF8:      	nop
            ; //_A523506CC_2344:;				
            _A523506CC_2344:
            ; //	asm	nop				
00CF9:      	nop
            ; //_A523506CC_2345:;				
            _A523506CC_2345:
            ; //	asm	nop				
00CFA:      	nop
            ; //_A523506CC_2346:;				
            _A523506CC_2346:
            ; //	asm	nop				
00CFB:      	nop
            ; //_A523506CC_2347:;				
            _A523506CC_2347:
            ; //	asm	nop				
00CFC:      	nop
            ; //_A523506CC_2348:;				
            _A523506CC_2348:
            ; //	asm	nop				
00CFD:      	nop
            ; //_A523506CC_2349:;				
            _A523506CC_2349:
            ; //	asm	nop				
00CFE:      	nop
            ; //_A523506CC_2350:;				
            _A523506CC_2350:
            ; //	asm	nop				
00CFF:      	nop
            ; //_A523506CC_2351:;				
            _A523506CC_2351:
            ; //	asm	nop				
00D00:      	nop
            ; //_A523506CC_2352:;				
            _A523506CC_2352:
            ; //	asm	nop				
00D01:      	nop
            ; //_A523506CC_2353:;				
            _A523506CC_2353:
            ; //	asm set io[0x09].b14;			
00D02:      	set io[0x09].b14//
            ; //_A523506CC_2354:;				
            _A523506CC_2354:
            ; //	asm	nop				
00D03:      	nop
            ; //_A523506CC_2355:;				
            _A523506CC_2355:
            ; //	asm	nop				
00D04:      	nop
            ; //_A523506CC_2356:;				
            _A523506CC_2356:
            ; //	asm	nop				
00D05:      	nop
            ; //_A523506CC_2357:;				
            _A523506CC_2357:
            ; //	asm clr io[0x09].b14;			
00D06:      	clr io[0x09].b14//
            ; //_A523506CC_2358:;				
            _A523506CC_2358:
            ; //	asm	nop				
00D07:      	nop
            ; //_A523506CC_2359:;				
            _A523506CC_2359:
            ; //	asm	nop				
00D08:      	nop
            ; //_A523506CC_2360:;				
            _A523506CC_2360:
            ; //	asm	nop				
00D09:      	nop
            ; //_A523506CC_2361:;				
            _A523506CC_2361:
            ; //	asm	nop				
00D0A:      	nop
            ; //_A523506CC_2362:;				
            _A523506CC_2362:
            ; //	asm	nop				
00D0B:      	nop
            ; //_A523506CC_2363:;				
            _A523506CC_2363:
            ; //	asm	nop				
00D0C:      	nop
            ; //_A523506CC_2364:;				
            _A523506CC_2364:
            ; //	asm	nop				
00D0D:      	nop
            ; //_A523506CC_2365:;				
            _A523506CC_2365:
            ; //	asm	nop				
00D0E:      	nop
            ; //_A523506CC_2366:;				
            _A523506CC_2366:
            ; //	asm	nop				
00D0F:      	nop
            ; //_A523506CC_2367:;				
            _A523506CC_2367:
            ; //	asm	nop				
00D10:      	nop
            ; //_A523506CC_2368:;				
            _A523506CC_2368:
            ; //	asm	nop				
00D11:      	nop
            ; //_A523506CC_2369:;				
            _A523506CC_2369:
            ; //	asm	nop				
00D12:      	nop
            ; //_A523506CC_2370:;				
            _A523506CC_2370:
            ; //	asm set io[0x09].b14;			
00D13:      	set io[0x09].b14//
            ; //_A523506CC_2371:;				
            _A523506CC_2371:
            ; //	asm	nop				
00D14:      	nop
            ; //_A523506CC_2372:;				
            _A523506CC_2372:
            ; //	asm	nop				
00D15:      	nop
            ; //_A523506CC_2373:;				
            _A523506CC_2373:
            ; //	asm	nop				
00D16:      	nop
            ; //_A523506CC_2374:;				
            _A523506CC_2374:
            ; //	asm clr io[0x09].b14;			
00D17:      	clr io[0x09].b14//
            ; //_A523506CC_2375:;				
            _A523506CC_2375:
            ; //	asm	nop				
00D18:      	nop
            ; //_A523506CC_2376:;				
            _A523506CC_2376:
            ; //	asm	nop				
00D19:      	nop
            ; //_A523506CC_2377:;				
            _A523506CC_2377:
            ; //	asm	nop				
00D1A:      	nop
            ; //_A523506CC_2378:;				
            _A523506CC_2378:
            ; //	asm	nop				
00D1B:      	nop
            ; //_A523506CC_2379:;				
            _A523506CC_2379:
            ; //	asm	nop				
00D1C:      	nop
            ; //_A523506CC_2380:;				
            _A523506CC_2380:
            ; //	asm	nop				
00D1D:      	nop
            ; //_A523506CC_2381:;				
            _A523506CC_2381:
            ; //	asm	nop				
00D1E:      	nop
            ; //_A523506CC_2382:;				
            _A523506CC_2382:
            ; //	asm	nop				
00D1F:      	nop
            ; //_A523506CC_2383:;				
            _A523506CC_2383:
            ; //	asm	nop				
00D20:      	nop
            ; //_A523506CC_2384:;				
            _A523506CC_2384:
            ; //	asm	nop				
00D21:      	nop
            ; //_A523506CC_2385:;				
            _A523506CC_2385:
            ; //	asm	nop				
00D22:      	nop
            ; //_A523506CC_2386:;				
            _A523506CC_2386:
            ; //	asm	nop				
00D23:      	nop
            ; //_A523506CC_2387:;				
            _A523506CC_2387:
            ; //	asm set io[0x09].b14;			
00D24:      	set io[0x09].b14//
            ; //_A523506CC_2388:;				
            _A523506CC_2388:
            ; //	asm	nop				
00D25:      	nop
            ; //_A523506CC_2389:;				
            _A523506CC_2389:
            ; //	asm	nop				
00D26:      	nop
            ; //_A523506CC_2390:;				
            _A523506CC_2390:
            ; //	asm	nop				
00D27:      	nop
            ; //_A523506CC_2391:;				
            _A523506CC_2391:
            ; //	asm clr io[0x09].b14;			
00D28:      	clr io[0x09].b14//
            ; //_A523506CC_2392:;				
            _A523506CC_2392:
            ; //	asm	nop				
00D29:      	nop
            ; //_A523506CC_2393:;				
            _A523506CC_2393:
            ; //	asm	nop				
00D2A:      	nop
            ; //_A523506CC_2394:;				
            _A523506CC_2394:
            ; //	asm	nop				
00D2B:      	nop
            ; //_A523506CC_2395:;				
            _A523506CC_2395:
            ; //	asm	nop				
00D2C:      	nop
            ; //_A523506CC_2396:;				
            _A523506CC_2396:
            ; //	asm	nop				
00D2D:      	nop
            ; //_A523506CC_2397:;				
            _A523506CC_2397:
            ; //	asm	nop				
00D2E:      	nop
            ; //_A523506CC_2398:;				
            _A523506CC_2398:
            ; //	asm	nop				
00D2F:      	nop
            ; //_A523506CC_2399:;				
            _A523506CC_2399:
            ; //	asm	nop				
00D30:      	nop
            ; //_A523506CC_2400:;				
            _A523506CC_2400:
            ; //	asm	nop				
00D31:      	nop
            ; //_A523506CC_2401:;				
            _A523506CC_2401:
            ; //	asm	nop				
00D32:      	nop
            ; //_A523506CC_2402:;				
            _A523506CC_2402:
            ; //	asm	nop				
00D33:      	nop
            ; //_A523506CC_2403:;				
            _A523506CC_2403:
            ; //	asm	nop				
00D34:      	nop
            ; //_A523506CC_2404:;				
            _A523506CC_2404:
            ; //	asm set io[0x09].b14;			
00D35:      	set io[0x09].b14//
            ; //_A523506CC_2405:;				
            _A523506CC_2405:
            ; //	asm	nop				
00D36:      	nop
            ; //_A523506CC_2406:;				
            _A523506CC_2406:
            ; //	asm	nop				
00D37:      	nop
            ; //_A523506CC_2407:;				
            _A523506CC_2407:
            ; //	asm	nop				
00D38:      	nop
            ; //_A523506CC_2408:;				
            _A523506CC_2408:
            ; //	asm clr io[0x09].b14;			
00D39:      	clr io[0x09].b14//
            ; //_A523506CC_2409:;				
            _A523506CC_2409:
            ; //	asm	nop				
00D3A:      	nop
            ; //_A523506CC_2410:;				
            _A523506CC_2410:
            ; //	asm	nop				
00D3B:      	nop
            ; //_A523506CC_2411:;				
            _A523506CC_2411:
            ; //	asm	nop				
00D3C:      	nop
            ; //_A523506CC_2412:;				
            _A523506CC_2412:
            ; //	asm	nop				
00D3D:      	nop
            ; //_A523506CC_2413:;				
            _A523506CC_2413:
            ; //	asm	nop				
00D3E:      	nop
            ; //_A523506CC_2414:;				
            _A523506CC_2414:
            ; //	asm	nop				
00D3F:      	nop
            ; //_A523506CC_2415:;				
            _A523506CC_2415:
            ; //	asm	nop				
00D40:      	nop
            ; //_A523506CC_2416:;				
            _A523506CC_2416:
            ; //	asm	nop				
00D41:      	nop
            ; //_A523506CC_2417:;				
            _A523506CC_2417:
            ; //	asm	nop				
00D42:      	nop
            ; //_A523506CC_2418:;				
            _A523506CC_2418:
            ; //	asm	nop				
00D43:      	nop
            ; //_A523506CC_2419:;				
            _A523506CC_2419:
            ; //	asm	nop				
00D44:      	nop
            ; //_A523506CC_2420:;				
            _A523506CC_2420:
            ; //	asm	nop				
00D45:      	nop
            ; //_A523506CC_2421:;				
            _A523506CC_2421:
            ; //	asm set io[0x09].b14;			
00D46:      	set io[0x09].b14//
            ; //_A523506CC_2422:;				
            _A523506CC_2422:
            ; //	asm	nop				
00D47:      	nop
            ; //_A523506CC_2423:;				
            _A523506CC_2423:
            ; //	asm	nop				
00D48:      	nop
            ; //_A523506CC_2424:;				
            _A523506CC_2424:
            ; //	asm	nop				
00D49:      	nop
            ; //_A523506CC_2425:;				
            _A523506CC_2425:
            ; //	asm clr io[0x09].b14;			
00D4A:      	clr io[0x09].b14//
            ; //_A523506CC_2426:;				
            _A523506CC_2426:
            ; //	asm	nop				
00D4B:      	nop
            ; //_A523506CC_2427:;				
            _A523506CC_2427:
            ; //	asm	nop				
00D4C:      	nop
            ; //_A523506CC_2428:;				
            _A523506CC_2428:
            ; //	asm	nop				
00D4D:      	nop
            ; //_A523506CC_2429:;				
            _A523506CC_2429:
            ; //	asm	nop				
00D4E:      	nop
            ; //_A523506CC_2430:;				
            _A523506CC_2430:
            ; //	asm	nop				
00D4F:      	nop
            ; //_A523506CC_2431:;				
            _A523506CC_2431:
            ; //	asm	nop				
00D50:      	nop
            ; //_A523506CC_2432:;				
            _A523506CC_2432:
            ; //	asm	nop				
00D51:      	nop
            ; //_A523506CC_2433:;				
            _A523506CC_2433:
            ; //	asm	nop				
00D52:      	nop
            ; //_A523506CC_2434:;				
            _A523506CC_2434:
            ; //	asm	nop				
00D53:      	nop
            ; //_A523506CC_2435:;				
            _A523506CC_2435:
            ; //	asm	nop				
00D54:      	nop
            ; //_A523506CC_2436:;				
            _A523506CC_2436:
            ; //	asm	nop				
00D55:      	nop
            ; //_A523506CC_2437:;				
            _A523506CC_2437:
            ; //	asm	nop				
00D56:      	nop
            ; //_A523506CC_2438:;				
            _A523506CC_2438:
            ; //	asm set io[0x09].b14;			
00D57:      	set io[0x09].b14//
            ; //_A523506CC_2439:;				
            _A523506CC_2439:
            ; //	asm	nop				
00D58:      	nop
            ; //_A523506CC_2440:;				
            _A523506CC_2440:
            ; //	asm	nop				
00D59:      	nop
            ; //_A523506CC_2441:;				
            _A523506CC_2441:
            ; //	asm	nop				
00D5A:      	nop
            ; //_A523506CC_2442:;				
            _A523506CC_2442:
            ; //	asm clr io[0x09].b14;			
00D5B:      	clr io[0x09].b14//
            ; //_A523506CC_2443:;				
            _A523506CC_2443:
            ; //	asm	nop				
00D5C:      	nop
            ; //_A523506CC_2444:;				
            _A523506CC_2444:
            ; //	asm	nop				
00D5D:      	nop
            ; //_A523506CC_2445:;				
            _A523506CC_2445:
            ; //	asm	nop				
00D5E:      	nop
            ; //_A523506CC_2446:;				
            _A523506CC_2446:
            ; //	asm	nop				
00D5F:      	nop
            ; //_A523506CC_2447:;				
            _A523506CC_2447:
            ; //	asm	nop				
00D60:      	nop
            ; //_A523506CC_2448:;				
            _A523506CC_2448:
            ; //	asm	nop				
00D61:      	nop
            ; //_A523506CC_2449:;				
            _A523506CC_2449:
            ; //	asm	nop				
00D62:      	nop
            ; //_A523506CC_2450:;				
            _A523506CC_2450:
            ; //	asm	nop				
00D63:      	nop
            ; //_A523506CC_2451:;				
            _A523506CC_2451:
            ; //	asm	nop				
00D64:      	nop
            ; //_A523506CC_2452:;				
            _A523506CC_2452:
            ; //	asm	nop				
00D65:      	nop
            ; //_A523506CC_2453:;				
            _A523506CC_2453:
            ; //	asm	nop				
00D66:      	nop
            ; //_A523506CC_2454:;				
            _A523506CC_2454:
            ; //	asm	nop				
00D67:      	nop
            ; //_A523506CC_2455:;				
            _A523506CC_2455:
            ; //	asm set io[0x09].b14;			
00D68:      	set io[0x09].b14//
            ; //_A523506CC_2456:;				
            _A523506CC_2456:
            ; //	asm	nop				
00D69:      	nop
            ; //_A523506CC_2457:;				
            _A523506CC_2457:
            ; //	asm	nop				
00D6A:      	nop
            ; //_A523506CC_2458:;				
            _A523506CC_2458:
            ; //	asm	nop				
00D6B:      	nop
            ; //_A523506CC_2459:;				
            _A523506CC_2459:
            ; //	asm clr io[0x09].b14;			
00D6C:      	clr io[0x09].b14//
            ; //_A523506CC_2460:;				
            _A523506CC_2460:
            ; //	asm	nop				
00D6D:      	nop
            ; //_A523506CC_2461:;				
            _A523506CC_2461:
            ; //	asm	nop				
00D6E:      	nop
            ; //_A523506CC_2462:;				
            _A523506CC_2462:
            ; //	asm	nop				
00D6F:      	nop
            ; //_A523506CC_2463:;				
            _A523506CC_2463:
            ; //	asm	nop				
00D70:      	nop
            ; //_A523506CC_2464:;				
            _A523506CC_2464:
            ; //	asm	nop				
00D71:      	nop
            ; //_A523506CC_2465:;				
            _A523506CC_2465:
            ; //	asm	nop				
00D72:      	nop
            ; //_A523506CC_2466:;				
            _A523506CC_2466:
            ; //	asm	nop				
00D73:      	nop
            ; //_A523506CC_2467:;				
            _A523506CC_2467:
            ; //	asm	nop				
00D74:      	nop
            ; //_A523506CC_2468:;				
            _A523506CC_2468:
            ; //	asm	nop				
00D75:      	nop
            ; //_A523506CC_2469:;				
            _A523506CC_2469:
            ; //	asm	nop				
00D76:      	nop
            ; //_A523506CC_2470:;				
            _A523506CC_2470:
            ; //	asm	nop				
00D77:      	nop
            ; //_A523506CC_2471:;				
            _A523506CC_2471:
            ; //	asm	nop				
00D78:      	nop
            ; //_A523506CC_2472:;				
            _A523506CC_2472:
            ; //	asm set io[0x09].b14;			
00D79:      	set io[0x09].b14//
            ; //_A523506CC_2473:;				
            _A523506CC_2473:
            ; //	asm	nop				
00D7A:      	nop
            ; //_A523506CC_2474:;				
            _A523506CC_2474:
            ; //	asm	nop				
00D7B:      	nop
            ; //_A523506CC_2475:;				
            _A523506CC_2475:
            ; //	asm	nop				
00D7C:      	nop
            ; //_A523506CC_2476:;				
            _A523506CC_2476:
            ; //	asm clr io[0x09].b14;			
00D7D:      	clr io[0x09].b14//
            ; //_A523506CC_2477:;				
            _A523506CC_2477:
            ; //	asm	nop				
00D7E:      	nop
            ; //_A523506CC_2478:;				
            _A523506CC_2478:
            ; //	asm	nop				
00D7F:      	nop
            ; //_A523506CC_2479:;				
            _A523506CC_2479:
            ; //	asm	nop				
00D80:      	nop
            ; //_A523506CC_2480:;				
            _A523506CC_2480:
            ; //	asm	nop				
00D81:      	nop
            ; //_A523506CC_2481:;				
            _A523506CC_2481:
            ; //	asm	nop				
00D82:      	nop
            ; //_A523506CC_2482:;				
            _A523506CC_2482:
            ; //	asm	nop				
00D83:      	nop
            ; //_A523506CC_2483:;				
            _A523506CC_2483:
            ; //	asm	nop				
00D84:      	nop
            ; //_A523506CC_2484:;				
            _A523506CC_2484:
            ; //	asm	nop				
00D85:      	nop
            ; //_A523506CC_2485:;				
            _A523506CC_2485:
            ; //	asm	nop				
00D86:      	nop
            ; //_A523506CC_2486:;				
            _A523506CC_2486:
            ; //	asm	nop				
00D87:      	nop
            ; //_A523506CC_2487:;				
            _A523506CC_2487:
            ; //	asm	nop				
00D88:      	nop
            ; //_A523506CC_2488:;				
            _A523506CC_2488:
            ; //	asm	nop				
00D89:      	nop
            ; //_A523506CC_2489:;				
            _A523506CC_2489:
            ; //	asm set io[0x09].b14;			
00D8A:      	set io[0x09].b14//
            ; //_A523506CC_2490:;				
            _A523506CC_2490:
            ; //	asm	nop				
00D8B:      	nop
            ; //_A523506CC_2491:;				
            _A523506CC_2491:
            ; //	asm	nop				
00D8C:      	nop
            ; //_A523506CC_2492:;				
            _A523506CC_2492:
            ; //	asm	nop				
00D8D:      	nop
            ; //_A523506CC_2493:;				
            _A523506CC_2493:
            ; //	asm clr io[0x09].b14;			
00D8E:      	clr io[0x09].b14//
            ; //_A523506CC_2494:;				
            _A523506CC_2494:
            ; //	asm	nop				
00D8F:      	nop
            ; //_A523506CC_2495:;				
            _A523506CC_2495:
            ; //	asm	nop				
00D90:      	nop
            ; //_A523506CC_2496:;				
            _A523506CC_2496:
            ; //	asm	nop				
00D91:      	nop
            ; //_A523506CC_2497:;				
            _A523506CC_2497:
            ; //	asm	nop				
00D92:      	nop
            ; //_A523506CC_2498:;				
            _A523506CC_2498:
            ; //	asm	nop				
00D93:      	nop
            ; //_A523506CC_2499:;				
            _A523506CC_2499:
            ; //	asm	nop				
00D94:      	nop
            ; //_A523506CC_2500:;				
            _A523506CC_2500:
            ; //	asm	nop				
00D95:      	nop
            ; //_A523506CC_2501:;				
            _A523506CC_2501:
            ; //	asm	nop				
00D96:      	nop
            ; //_A523506CC_2502:;				
            _A523506CC_2502:
            ; //	asm	nop				
00D97:      	nop
            ; //_A523506CC_2503:;				
            _A523506CC_2503:
            ; //	asm	nop				
00D98:      	nop
            ; //_A523506CC_2504:;				
            _A523506CC_2504:
            ; //	asm	nop				
00D99:      	nop
            ; //_A523506CC_2505:;				
            _A523506CC_2505:
            ; //	asm	nop				
00D9A:      	nop
            ; //_A523506CC_2506:;				
            _A523506CC_2506:
            ; //	asm set io[0x09].b14;			
00D9B:      	set io[0x09].b14//
            ; //_A523506CC_2507:;				
            _A523506CC_2507:
            ; //	asm	nop				
00D9C:      	nop
            ; //_A523506CC_2508:;				
            _A523506CC_2508:
            ; //	asm	nop				
00D9D:      	nop
            ; //_A523506CC_2509:;				
            _A523506CC_2509:
            ; //	asm	nop				
00D9E:      	nop
            ; //_A523506CC_2510:;				
            _A523506CC_2510:
            ; //	asm clr io[0x09].b14;			
00D9F:      	clr io[0x09].b14//
            ; //_A523506CC_2511:;				
            _A523506CC_2511:
            ; //	asm	nop				
00DA0:      	nop
            ; //_A523506CC_2512:;				
            _A523506CC_2512:
            ; //	asm	nop				
00DA1:      	nop
            ; //_A523506CC_2513:;				
            _A523506CC_2513:
            ; //	asm	nop				
00DA2:      	nop
            ; //_A523506CC_2514:;				
            _A523506CC_2514:
            ; //	asm	nop				
00DA3:      	nop
            ; //_A523506CC_2515:;				
            _A523506CC_2515:
            ; //	asm	nop				
00DA4:      	nop
            ; //_A523506CC_2516:;				
            _A523506CC_2516:
            ; //	asm	nop				
00DA5:      	nop
            ; //_A523506CC_2517:;				
            _A523506CC_2517:
            ; //	asm	nop				
00DA6:      	nop
            ; //_A523506CC_2518:;				
            _A523506CC_2518:
            ; //	asm	nop				
00DA7:      	nop
            ; //_A523506CC_2519:;				
            _A523506CC_2519:
            ; //	asm	nop				
00DA8:      	nop
            ; //_A523506CC_2520:;				
            _A523506CC_2520:
            ; //	asm	nop				
00DA9:      	nop
            ; //_A523506CC_2521:;				
            _A523506CC_2521:
            ; //	asm	nop				
00DAA:      	nop
            ; //_A523506CC_2522:;				
            _A523506CC_2522:
            ; //	asm	nop				
00DAB:      	nop
            ; //_A523506CC_2523:;				
            _A523506CC_2523:
            ; //	asm set io[0x09].b14;			
00DAC:      	set io[0x09].b14//
            ; //_A523506CC_2524:;				
            _A523506CC_2524:
            ; //	asm	nop				
00DAD:      	nop
            ; //_A523506CC_2525:;				
            _A523506CC_2525:
            ; //	asm	nop				
00DAE:      	nop
            ; //_A523506CC_2526:;				
            _A523506CC_2526:
            ; //	asm	nop				
00DAF:      	nop
            ; //_A523506CC_2527:;				
            _A523506CC_2527:
            ; //	asm clr io[0x09].b14;			
00DB0:      	clr io[0x09].b14//
            ; //_A523506CC_2528:;				
            _A523506CC_2528:
            ; //	asm	nop				
00DB1:      	nop
            ; //_A523506CC_2529:;				
            _A523506CC_2529:
            ; //	asm	nop				
00DB2:      	nop
            ; //_A523506CC_2530:;				
            _A523506CC_2530:
            ; //	asm	nop				
00DB3:      	nop
            ; //_A523506CC_2531:;				
            _A523506CC_2531:
            ; //	asm	nop				
00DB4:      	nop
            ; //_A523506CC_2532:;				
            _A523506CC_2532:
            ; //	asm	nop				
00DB5:      	nop
            ; //_A523506CC_2533:;				
            _A523506CC_2533:
            ; //	asm	nop				
00DB6:      	nop
            ; //_A523506CC_2534:;				
            _A523506CC_2534:
            ; //	asm	nop				
00DB7:      	nop
            ; //_A523506CC_2535:;				
            _A523506CC_2535:
            ; //	asm	nop				
00DB8:      	nop
            ; //_A523506CC_2536:;				
            _A523506CC_2536:
            ; //	asm	nop				
00DB9:      	nop
            ; //_A523506CC_2537:;				
            _A523506CC_2537:
            ; //	asm	nop				
00DBA:      	nop
            ; //_A523506CC_2538:;				
            _A523506CC_2538:
            ; //	asm	nop				
00DBB:      	nop
            ; //_A523506CC_2539:;				
            _A523506CC_2539:
            ; //	asm	nop				
00DBC:      	nop
            ; //_A523506CC_2540:;				
            _A523506CC_2540:
            ; //	asm set io[0x09].b14;			
00DBD:      	set io[0x09].b14//
            ; //_A523506CC_2541:;				
            _A523506CC_2541:
            ; //	asm	nop				
00DBE:      	nop
            ; //_A523506CC_2542:;				
            _A523506CC_2542:
            ; //	asm	nop				
00DBF:      	nop
            ; //_A523506CC_2543:;				
            _A523506CC_2543:
            ; //	asm	nop				
00DC0:      	nop
            ; //_A523506CC_2544:;				
            _A523506CC_2544:
            ; //	asm clr io[0x09].b14;			
00DC1:      	clr io[0x09].b14//
            ; //_A523506CC_2545:;				
            _A523506CC_2545:
            ; //	asm	nop				
00DC2:      	nop
            ; //_A523506CC_2546:;				
            _A523506CC_2546:
            ; //	asm	nop				
00DC3:      	nop
            ; //_A523506CC_2547:;				
            _A523506CC_2547:
            ; //	asm	nop				
00DC4:      	nop
            ; //_A523506CC_2548:;				
            _A523506CC_2548:
            ; //	asm	nop				
00DC5:      	nop
            ; //_A523506CC_2549:;				
            _A523506CC_2549:
            ; //	asm	nop				
00DC6:      	nop
            ; //_A523506CC_2550:;				
            _A523506CC_2550:
            ; //	asm	nop				
00DC7:      	nop
            ; //_A523506CC_2551:;				
            _A523506CC_2551:
            ; //	asm	nop				
00DC8:      	nop
            ; //_A523506CC_2552:;				
            _A523506CC_2552:
            ; //	asm	nop				
00DC9:      	nop
            ; //_A523506CC_2553:;				
            _A523506CC_2553:
            ; //	asm	nop				
00DCA:      	nop
            ; //_A523506CC_2554:;				
            _A523506CC_2554:
            ; //	asm	nop				
00DCB:      	nop
            ; //_A523506CC_2555:;				
            _A523506CC_2555:
            ; //	asm	nop				
00DCC:      	nop
            ; //_A523506CC_2556:;				
            _A523506CC_2556:
            ; //	asm	nop				
00DCD:      	nop
            ; //_A523506CC_2557:;				
            _A523506CC_2557:
            ; //	asm set io[0x09].b14;			
00DCE:      	set io[0x09].b14//
            ; //_A523506CC_2558:;				
            _A523506CC_2558:
            ; //	asm	nop				
00DCF:      	nop
            ; //_A523506CC_2559:;				
            _A523506CC_2559:
            ; //	asm	nop				
00DD0:      	nop
            ; //_A523506CC_2560:;				
            _A523506CC_2560:
            ; //	asm	nop				
00DD1:      	nop
            ; //_A523506CC_2561:;				
            _A523506CC_2561:
            ; //	asm clr io[0x09].b14;			
00DD2:      	clr io[0x09].b14//
            ; //_A523506CC_2562:;				
            _A523506CC_2562:
            ; //	asm	nop				
00DD3:      	nop
            ; //_A523506CC_2563:;				
            _A523506CC_2563:
            ; //	asm	nop				
00DD4:      	nop
            ; //_A523506CC_2564:;				
            _A523506CC_2564:
            ; //	asm	nop				
00DD5:      	nop
            ; //_A523506CC_2565:;				
            _A523506CC_2565:
            ; //	asm	nop				
00DD6:      	nop
            ; //_A523506CC_2566:;				
            _A523506CC_2566:
            ; //	asm	nop				
00DD7:      	nop
            ; //_A523506CC_2567:;				
            _A523506CC_2567:
            ; //	asm	nop				
00DD8:      	nop
            ; //_A523506CC_2568:;				
            _A523506CC_2568:
            ; //	asm	nop				
00DD9:      	nop
            ; //_A523506CC_2569:;				
            _A523506CC_2569:
            ; //	asm	nop				
00DDA:      	nop
            ; //_A523506CC_2570:;				
            _A523506CC_2570:
            ; //	asm	nop				
00DDB:      	nop
            ; //_A523506CC_2571:;				
            _A523506CC_2571:
            ; //	asm	nop				
00DDC:      	nop
            ; //_A523506CC_2572:;				
            _A523506CC_2572:
            ; //	asm	nop				
00DDD:      	nop
            ; //_A523506CC_2573:;				
            _A523506CC_2573:
            ; //	asm	nop				
00DDE:      	nop
            ; //_A523506CC_2574:;				
            _A523506CC_2574:
            ; //	asm set io[0x09].b14;			
00DDF:      	set io[0x09].b14//
            ; //_A523506CC_2575:;				
            _A523506CC_2575:
            ; //	asm	nop				
00DE0:      	nop
            ; //_A523506CC_2576:;				
            _A523506CC_2576:
            ; //	asm	nop				
00DE1:      	nop
            ; //_A523506CC_2577:;				
            _A523506CC_2577:
            ; //	asm	nop				
00DE2:      	nop
            ; //_A523506CC_2578:;				
            _A523506CC_2578:
            ; //	asm clr io[0x09].b14;			
00DE3:      	clr io[0x09].b14//
            ; //_A523506CC_2579:;				
            _A523506CC_2579:
            ; //	asm	nop				
00DE4:      	nop
            ; //_A523506CC_2580:;				
            _A523506CC_2580:
            ; //	asm	nop				
00DE5:      	nop
            ; //_A523506CC_2581:;				
            _A523506CC_2581:
            ; //	asm	nop				
00DE6:      	nop
            ; //_A523506CC_2582:;				
            _A523506CC_2582:
            ; //	asm	nop				
00DE7:      	nop
            ; //_A523506CC_2583:;				
            _A523506CC_2583:
            ; //	asm	nop				
00DE8:      	nop
            ; //_A523506CC_2584:;				
            _A523506CC_2584:
            ; //	asm	nop				
00DE9:      	nop
            ; //_A523506CC_2585:;				
            _A523506CC_2585:
            ; //	asm	nop				
00DEA:      	nop
            ; //_A523506CC_2586:;				
            _A523506CC_2586:
            ; //	asm	nop				
00DEB:      	nop
            ; //_A523506CC_2587:;				
            _A523506CC_2587:
            ; //	asm	nop				
00DEC:      	nop
            ; //_A523506CC_2588:;				
            _A523506CC_2588:
            ; //	asm	nop				
00DED:      	nop
            ; //_A523506CC_2589:;				
            _A523506CC_2589:
            ; //	asm	nop				
00DEE:      	nop
            ; //_A523506CC_2590:;				
            _A523506CC_2590:
            ; //	asm	nop				
00DEF:      	nop
            ; //_A523506CC_2591:;				
            _A523506CC_2591:
            ; //	asm set io[0x09].b14;			
00DF0:      	set io[0x09].b14//
            ; //_A523506CC_2592:;				
            _A523506CC_2592:
            ; //	asm	nop				
00DF1:      	nop
            ; //_A523506CC_2593:;				
            _A523506CC_2593:
            ; //	asm	nop				
00DF2:      	nop
            ; //_A523506CC_2594:;				
            _A523506CC_2594:
            ; //	asm	nop				
00DF3:      	nop
            ; //_A523506CC_2595:;				
            _A523506CC_2595:
            ; //	asm clr io[0x09].b14;			
00DF4:      	clr io[0x09].b14//
            ; //_A523506CC_2596:;				
            _A523506CC_2596:
            ; //	asm	nop				
00DF5:      	nop
            ; //_A523506CC_2597:;				
            _A523506CC_2597:
            ; //	asm	nop				
00DF6:      	nop
            ; //_A523506CC_2598:;				
            _A523506CC_2598:
            ; //	asm	nop				
00DF7:      	nop
            ; //_A523506CC_2599:;				
            _A523506CC_2599:
            ; //	asm	nop				
00DF8:      	nop
            ; //_A523506CC_2600:;				
            _A523506CC_2600:
            ; //	asm	nop				
00DF9:      	nop
            ; //_A523506CC_2601:;				
            _A523506CC_2601:
            ; //	asm	nop				
00DFA:      	nop
            ; //_A523506CC_2602:;				
            _A523506CC_2602:
            ; //	asm	nop				
00DFB:      	nop
            ; //_A523506CC_2603:;				
            _A523506CC_2603:
            ; //	asm	nop				
00DFC:      	nop
            ; //_A523506CC_2604:;				
            _A523506CC_2604:
            ; //	asm	nop				
00DFD:      	nop
            ; //_A523506CC_2605:;				
            _A523506CC_2605:
            ; //	asm	nop				
00DFE:      	nop
            ; //_A523506CC_2606:;				
            _A523506CC_2606:
            ; //	asm	nop				
00DFF:      	nop
            ; //_A523506CC_2607:;				
            _A523506CC_2607:
            ; //	asm	nop				
00E00:      	nop
            ; //_A523506CC_2608:;				
            _A523506CC_2608:
            ; //	asm set io[0x09].b14;			
00E01:      	set io[0x09].b14//
            ; //_A523506CC_2609:;				
            _A523506CC_2609:
            ; //	asm	nop				
00E02:      	nop
            ; //_A523506CC_2610:;				
            _A523506CC_2610:
            ; //	asm	nop				
00E03:      	nop
            ; //_A523506CC_2611:;				
            _A523506CC_2611:
            ; //	asm	nop				
00E04:      	nop
            ; //_A523506CC_2612:;				
            _A523506CC_2612:
            ; //	asm	nop				
00E05:      	nop
            ; //_A523506CC_2613:;				
            _A523506CC_2613:
            ; //	asm	nop				
00E06:      	nop
            ; //_A523506CC_2614:;				
            _A523506CC_2614:
            ; //	asm	nop				
00E07:      	nop
            ; //_A523506CC_2615:;				
            _A523506CC_2615:
            ; //	asm	nop				
00E08:      	nop
            ; //_A523506CC_2616:;				
            _A523506CC_2616:
            ; //	asm	nop				
00E09:      	nop
            ; //_A523506CC_2617:;				
            _A523506CC_2617:
            ; //	asm	nop				
00E0A:      	nop
            ; //_A523506CC_2618:;				
            _A523506CC_2618:
            ; //	asm	nop				
00E0B:      	nop
            ; //_A523506CC_2619:;				
            _A523506CC_2619:
            ; //	asm	nop				
00E0C:      	nop
            ; //_A523506CC_2620:;				
            _A523506CC_2620:
            ; //	asm	nop				
00E0D:      	nop
            ; //_A523506CC_2621:;				
            _A523506CC_2621:
            ; //	asm clr io[0x09].b14;			
00E0E:      	clr io[0x09].b14//
            ; //_A523506CC_2622:;				
            _A523506CC_2622:
            ; //	asm	nop				
00E0F:      	nop
            ; //_A523506CC_2623:;				
            _A523506CC_2623:
            ; //	asm	nop				
00E10:      	nop
            ; //_A523506CC_2624:;				
            _A523506CC_2624:
            ; //	asm	nop				
00E11:      	nop
            ; //_A523506CC_2625:;				
            _A523506CC_2625:
            ; //	asm set io[0x09].b14;			
00E12:      	set io[0x09].b14//
            ; //_A523506CC_2626:;				
            _A523506CC_2626:
            ; //	asm	nop				
00E13:      	nop
            ; //_A523506CC_2627:;				
            _A523506CC_2627:
            ; //	asm	nop				
00E14:      	nop
            ; //_A523506CC_2628:;				
            _A523506CC_2628:
            ; //	asm	nop				
00E15:      	nop
            ; //_A523506CC_2629:;				
            _A523506CC_2629:
            ; //	asm	nop				
00E16:      	nop
            ; //_A523506CC_2630:;				
            _A523506CC_2630:
            ; //	asm	nop				
00E17:      	nop
            ; //_A523506CC_2631:;				
            _A523506CC_2631:
            ; //	asm	nop				
00E18:      	nop
            ; //_A523506CC_2632:;				
            _A523506CC_2632:
            ; //	asm	nop				
00E19:      	nop
            ; //_A523506CC_2633:;				
            _A523506CC_2633:
            ; //	asm	nop				
00E1A:      	nop
            ; //_A523506CC_2634:;				
            _A523506CC_2634:
            ; //	asm	nop				
00E1B:      	nop
            ; //_A523506CC_2635:;				
            _A523506CC_2635:
            ; //	asm	nop				
00E1C:      	nop
            ; //_A523506CC_2636:;				
            _A523506CC_2636:
            ; //	asm	nop				
00E1D:      	nop
            ; //_A523506CC_2637:;				
            _A523506CC_2637:
            ; //	asm	nop				
00E1E:      	nop
            ; //_A523506CC_2638:;				
            _A523506CC_2638:
            ; //	asm clr io[0x09].b14;			
00E1F:      	clr io[0x09].b14//
            ; //_A523506CC_2639:;				
            _A523506CC_2639:
            ; //	asm	nop				
00E20:      	nop
            ; //_A523506CC_2640:;				
            _A523506CC_2640:
            ; //	asm	nop				
00E21:      	nop
            ; //_A523506CC_2641:;				
            _A523506CC_2641:
            ; //	asm	nop				
00E22:      	nop
            ; //_A523506CC_2642:;				
            _A523506CC_2642:
            ; //	asm set io[0x09].b14;			
00E23:      	set io[0x09].b14//
            ; //_A523506CC_2643:;				
            _A523506CC_2643:
            ; //	asm	nop				
00E24:      	nop
            ; //_A523506CC_2644:;				
            _A523506CC_2644:
            ; //	asm	nop				
00E25:      	nop
            ; //_A523506CC_2645:;				
            _A523506CC_2645:
            ; //	asm	nop				
00E26:      	nop
            ; //_A523506CC_2646:;				
            _A523506CC_2646:
            ; //	asm	nop				
00E27:      	nop
            ; //_A523506CC_2647:;				
            _A523506CC_2647:
            ; //	asm	nop				
00E28:      	nop
            ; //_A523506CC_2648:;				
            _A523506CC_2648:
            ; //	asm	nop				
00E29:      	nop
            ; //_A523506CC_2649:;				
            _A523506CC_2649:
            ; //	asm	nop				
00E2A:      	nop
            ; //_A523506CC_2650:;				
            _A523506CC_2650:
            ; //	asm	nop				
00E2B:      	nop
            ; //_A523506CC_2651:;				
            _A523506CC_2651:
            ; //	asm	nop				
00E2C:      	nop
            ; //_A523506CC_2652:;				
            _A523506CC_2652:
            ; //	asm	nop				
00E2D:      	nop
            ; //_A523506CC_2653:;				
            _A523506CC_2653:
            ; //	asm	nop				
00E2E:      	nop
            ; //_A523506CC_2654:;				
            _A523506CC_2654:
            ; //	asm	nop				
00E2F:      	nop
            ; //_A523506CC_2655:;				
            _A523506CC_2655:
            ; //	asm clr io[0x09].b14;			
00E30:      	clr io[0x09].b14//
            ; //_A523506CC_2656:;				
            _A523506CC_2656:
            ; //	asm	nop				
00E31:      	nop
            ; //_A523506CC_2657:;				
            _A523506CC_2657:
            ; //	asm	nop				
00E32:      	nop
            ; //_A523506CC_2658:;				
            _A523506CC_2658:
            ; //	asm	nop				
00E33:      	nop
            ; //_A523506CC_2659:;				
            _A523506CC_2659:
            ; //	asm set io[0x09].b14;			
00E34:      	set io[0x09].b14//
            ; //_A523506CC_2660:;				
            _A523506CC_2660:
            ; //	asm	nop				
00E35:      	nop
            ; //_A523506CC_2661:;				
            _A523506CC_2661:
            ; //	asm	nop				
00E36:      	nop
            ; //_A523506CC_2662:;				
            _A523506CC_2662:
            ; //	asm	nop				
00E37:      	nop
            ; //_A523506CC_2663:;				
            _A523506CC_2663:
            ; //	asm	nop				
00E38:      	nop
            ; //_A523506CC_2664:;				
            _A523506CC_2664:
            ; //	asm	nop				
00E39:      	nop
            ; //_A523506CC_2665:;				
            _A523506CC_2665:
            ; //	asm	nop				
00E3A:      	nop
            ; //_A523506CC_2666:;				
            _A523506CC_2666:
            ; //	asm	nop				
00E3B:      	nop
            ; //_A523506CC_2667:;				
            _A523506CC_2667:
            ; //	asm	nop				
00E3C:      	nop
            ; //_A523506CC_2668:;				
            _A523506CC_2668:
            ; //	asm	nop				
00E3D:      	nop
            ; //_A523506CC_2669:;				
            _A523506CC_2669:
            ; //	asm	nop				
00E3E:      	nop
            ; //_A523506CC_2670:;				
            _A523506CC_2670:
            ; //	asm	nop				
00E3F:      	nop
            ; //_A523506CC_2671:;				
            _A523506CC_2671:
            ; //	asm	nop				
00E40:      	nop
            ; //_A523506CC_2672:;				
            _A523506CC_2672:
            ; //	asm clr io[0x09].b14;			
00E41:      	clr io[0x09].b14//
            ; //_A523506CC_2673:;				
            _A523506CC_2673:
            ; //	asm	nop				
00E42:      	nop
            ; //_A523506CC_2674:;				
            _A523506CC_2674:
            ; //	asm	nop				
00E43:      	nop
            ; //_A523506CC_2675:;				
            _A523506CC_2675:
            ; //	asm	nop				
00E44:      	nop
            ; //_A523506CC_2676:;				
            _A523506CC_2676:
            ; //	asm set io[0x09].b14;			
00E45:      	set io[0x09].b14//
            ; //_A523506CC_2677:;				
            _A523506CC_2677:
            ; //	asm	nop				
00E46:      	nop
            ; //_A523506CC_2678:;				
            _A523506CC_2678:
            ; //	asm	nop				
00E47:      	nop
            ; //_A523506CC_2679:;				
            _A523506CC_2679:
            ; //	asm	nop				
00E48:      	nop
            ; //_A523506CC_2680:;				
            _A523506CC_2680:
            ; //	asm	nop				
00E49:      	nop
            ; //_A523506CC_2681:;				
            _A523506CC_2681:
            ; //	asm	nop				
00E4A:      	nop
            ; //_A523506CC_2682:;				
            _A523506CC_2682:
            ; //	asm	nop				
00E4B:      	nop
            ; //_A523506CC_2683:;				
            _A523506CC_2683:
            ; //	asm	nop				
00E4C:      	nop
            ; //_A523506CC_2684:;				
            _A523506CC_2684:
            ; //	asm	nop				
00E4D:      	nop
            ; //_A523506CC_2685:;				
            _A523506CC_2685:
            ; //	asm	nop				
00E4E:      	nop
            ; //_A523506CC_2686:;				
            _A523506CC_2686:
            ; //	asm	nop				
00E4F:      	nop
            ; //_A523506CC_2687:;				
            _A523506CC_2687:
            ; //	asm	nop				
00E50:      	nop
            ; //_A523506CC_2688:;				
            _A523506CC_2688:
            ; //	asm	nop				
00E51:      	nop
            ; //_A523506CC_2689:;				
            _A523506CC_2689:
            ; //	asm clr io[0x09].b14;			
00E52:      	clr io[0x09].b14//
            ; //_A523506CC_2690:;				
            _A523506CC_2690:
            ; //	asm	nop				
00E53:      	nop
            ; //_A523506CC_2691:;				
            _A523506CC_2691:
            ; //	asm	nop				
00E54:      	nop
            ; //_A523506CC_2692:;				
            _A523506CC_2692:
            ; //	asm	nop				
00E55:      	nop
            ; //_A523506CC_2693:;				
            _A523506CC_2693:
            ; //	asm set io[0x09].b14;			
00E56:      	set io[0x09].b14//
            ; //_A523506CC_2694:;				
            _A523506CC_2694:
            ; //	asm	nop				
00E57:      	nop
            ; //_A523506CC_2695:;				
            _A523506CC_2695:
            ; //	asm	nop				
00E58:      	nop
            ; //_A523506CC_2696:;				
            _A523506CC_2696:
            ; //	asm	nop				
00E59:      	nop
            ; //_A523506CC_2697:;				
            _A523506CC_2697:
            ; //	asm	nop				
00E5A:      	nop
            ; //_A523506CC_2698:;				
            _A523506CC_2698:
            ; //	asm	nop				
00E5B:      	nop
            ; //_A523506CC_2699:;				
            _A523506CC_2699:
            ; //	asm	nop				
00E5C:      	nop
            ; //_A523506CC_2700:;				
            _A523506CC_2700:
            ; //	asm	nop				
00E5D:      	nop
            ; //_A523506CC_2701:;				
            _A523506CC_2701:
            ; //	asm	nop				
00E5E:      	nop
            ; //_A523506CC_2702:;				
            _A523506CC_2702:
            ; //	asm	nop				
00E5F:      	nop
            ; //_A523506CC_2703:;				
            _A523506CC_2703:
            ; //	asm	nop				
00E60:      	nop
            ; //_A523506CC_2704:;				
            _A523506CC_2704:
            ; //	asm	nop				
00E61:      	nop
            ; //_A523506CC_2705:;				
            _A523506CC_2705:
            ; //	asm	nop				
00E62:      	nop
            ; //_A523506CC_2706:;				
            _A523506CC_2706:
            ; //	asm clr io[0x09].b14;			
00E63:      	clr io[0x09].b14//
            ; //_A523506CC_2707:;				
            _A523506CC_2707:
            ; //	asm	nop				
00E64:      	nop
            ; //_A523506CC_2708:;				
            _A523506CC_2708:
            ; //	asm	nop				
00E65:      	nop
            ; //_A523506CC_2709:;				
            _A523506CC_2709:
            ; //	asm	nop				
00E66:      	nop
            ; //_A523506CC_2710:;				
            _A523506CC_2710:
            ; //	asm set io[0x09].b14;			
00E67:      	set io[0x09].b14//
            ; //_A523506CC_2711:;				
            _A523506CC_2711:
            ; //	asm	nop				
00E68:      	nop
            ; //_A523506CC_2712:;				
            _A523506CC_2712:
            ; //	asm	nop				
00E69:      	nop
            ; //_A523506CC_2713:;				
            _A523506CC_2713:
            ; //	asm	nop				
00E6A:      	nop
            ; //_A523506CC_2714:;				
            _A523506CC_2714:
            ; //	asm	nop				
00E6B:      	nop
            ; //_A523506CC_2715:;				
            _A523506CC_2715:
            ; //	asm	nop				
00E6C:      	nop
            ; //_A523506CC_2716:;				
            _A523506CC_2716:
            ; //	asm	nop				
00E6D:      	nop
            ; //_A523506CC_2717:;				
            _A523506CC_2717:
            ; //	asm	nop				
00E6E:      	nop
            ; //_A523506CC_2718:;				
            _A523506CC_2718:
            ; //	asm	nop				
00E6F:      	nop
            ; //_A523506CC_2719:;				
            _A523506CC_2719:
            ; //	asm	nop				
00E70:      	nop
            ; //_A523506CC_2720:;				
            _A523506CC_2720:
            ; //	asm	nop				
00E71:      	nop
            ; //_A523506CC_2721:;				
            _A523506CC_2721:
            ; //	asm	nop				
00E72:      	nop
            ; //_A523506CC_2722:;				
            _A523506CC_2722:
            ; //	asm	nop				
00E73:      	nop
            ; //_A523506CC_2723:;				
            _A523506CC_2723:
            ; //	asm clr io[0x09].b14;			
00E74:      	clr io[0x09].b14//
            ; //_A523506CC_2724:;				
            _A523506CC_2724:
            ; //	asm	nop				
00E75:      	nop
            ; //_A523506CC_2725:;				
            _A523506CC_2725:
            ; //	asm	nop				
00E76:      	nop
            ; //_A523506CC_2726:;				
            _A523506CC_2726:
            ; //	asm	nop				
00E77:      	nop
            ; //_A523506CC_2727:;				
            _A523506CC_2727:
            ; //	asm set io[0x09].b14;			
00E78:      	set io[0x09].b14//
            ; //_A523506CC_2728:;				
            _A523506CC_2728:
            ; //	asm	nop				
00E79:      	nop
            ; //_A523506CC_2729:;				
            _A523506CC_2729:
            ; //	asm	nop				
00E7A:      	nop
            ; //_A523506CC_2730:;				
            _A523506CC_2730:
            ; //	asm	nop				
00E7B:      	nop
            ; //_A523506CC_2731:;				
            _A523506CC_2731:
            ; //	asm	nop				
00E7C:      	nop
            ; //_A523506CC_2732:;				
            _A523506CC_2732:
            ; //	asm	nop				
00E7D:      	nop
            ; //_A523506CC_2733:;				
            _A523506CC_2733:
            ; //	asm	nop				
00E7E:      	nop
            ; //_A523506CC_2734:;				
            _A523506CC_2734:
            ; //	asm	nop				
00E7F:      	nop
            ; //_A523506CC_2735:;				
            _A523506CC_2735:
            ; //	asm	nop				
00E80:      	nop
            ; //_A523506CC_2736:;				
            _A523506CC_2736:
            ; //	asm	nop				
00E81:      	nop
            ; //_A523506CC_2737:;				
            _A523506CC_2737:
            ; //	asm	nop				
00E82:      	nop
            ; //_A523506CC_2738:;				
            _A523506CC_2738:
            ; //	asm	nop				
00E83:      	nop
            ; //_A523506CC_2739:;				
            _A523506CC_2739:
            ; //	asm	nop				
00E84:      	nop
            ; //_A523506CC_2740:;				
            _A523506CC_2740:
            ; //	asm clr io[0x09].b14;			
00E85:      	clr io[0x09].b14//
            ; //_A523506CC_2741:;				
            _A523506CC_2741:
            ; //	asm	nop				
00E86:      	nop
            ; //_A523506CC_2742:;				
            _A523506CC_2742:
            ; //	asm	nop				
00E87:      	nop
            ; //_A523506CC_2743:;				
            _A523506CC_2743:
            ; //	asm	nop				
00E88:      	nop
            ; //_A523506CC_2744:;				
            _A523506CC_2744:
            ; //	goto LD63FD439_103;			
00E89:      	pch =	LD63FD439_103
00E8A:      	ljmp	LD63FD439_103
            ; //LD63FD439_111:;					
            LD63FD439_111:
            ; //_A523506CC_2745:;				
            _A523506CC_2745:
            ; //	goto LD63FD439_103;			
00E8B:      	pch =	LD63FD439_103
00E8C:      	ljmp	LD63FD439_103
            ; //	goto LD63FD439_103;			
00E8D:      	pch =	LD63FD439_103
00E8E:      	ljmp	LD63FD439_103
            ; //LD63FD439_104:;					
            LD63FD439_104:
            ; //	sCX	= sAX;				
00E8F:      	AR	= AX
00E90:      	CX	= AR
            ; //	sAX	= 0x0000;			
00E91:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00E92:      	pch	= sfx_CMP_AX_CX_JE
00E93:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_112;	
00E94:      	if NZ	jmp LD63FD439_112
            ; //	goto LD63FD439_105;			
00E95:      	pch =	LD63FD439_105
00E96:      	ljmp	LD63FD439_105
            ; //LD63FD439_112:;					
            LD63FD439_112:
            ; //	sAX	= 0x0001;			
00E97:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00E98:      	pch	= sfx_CMP_AX_CX_JE
00E99:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_113;	
00E9A:      	if NZ	jmp LD63FD439_113
            ; //	goto LD63FD439_106;			
00E9B:      	pch =	LD63FD439_106
00E9C:      	ljmp	LD63FD439_106
            ; //LD63FD439_113:;					
            LD63FD439_113:
            ; //	sAX	= 0x0003;			
00E9D:      	AX	= 0x03
            ; //	sfx_CMP_AX_CX_JE();			
00E9E:      	pch	= sfx_CMP_AX_CX_JE
00E9F:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_114;	
00EA0:      	if NZ	jmp LD63FD439_114
            ; //	goto LD63FD439_107;			
00EA1:      	pch =	LD63FD439_107
00EA2:      	ljmp	LD63FD439_107
            ; //LD63FD439_114:;					
            LD63FD439_114:
            ; //	sAX	= 0x0002;			
00EA3:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
00EA4:      	pch	= sfx_CMP_AX_CX_JE
00EA5:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_115;	
00EA6:      	if NZ	jmp LD63FD439_115
            ; //	goto LD63FD439_108;			
00EA7:      	pch =	LD63FD439_108
00EA8:      	ljmp	LD63FD439_108
            ; //LD63FD439_115:;					
            LD63FD439_115:
            ; //	sAX	= 0x0005;			
00EA9:      	AX	= 0x05
            ; //	sfx_CMP_AX_CX_JE();			
00EAA:      	pch	= sfx_CMP_AX_CX_JE
00EAB:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_116;	
00EAC:      	if NZ	jmp LD63FD439_116
            ; //	goto LD63FD439_109;			
00EAD:      	pch =	LD63FD439_109
00EAE:      	ljmp	LD63FD439_109
            ; //LD63FD439_116:;					
            LD63FD439_116:
            ; //	sAX	= 0x0004;			
00EAF:      	AX	= 0x04
            ; //	sfx_CMP_AX_CX_JE();			
00EB0:      	pch	= sfx_CMP_AX_CX_JE
00EB1:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_117;	
00EB2:      	if NZ	jmp LD63FD439_117
            ; //	goto LD63FD439_110;			
00EB3:      	pch =	LD63FD439_110
00EB4:      	ljmp	LD63FD439_110
            ; //LD63FD439_117:;					
            LD63FD439_117:
            ; //	goto	LD63FD439_111;			
00EB5:      	pch =	LD63FD439_111
00EB6:      	ljmp	LD63FD439_111
            ; //LD63FD439_103:;					
            LD63FD439_103:
            ; //	goto LD63FD439_101;			
00EB7:      	pch =	LD63FD439_101
00EB8:      	ljmp	LD63FD439_101
            ; //LD63FD439_100:;					
            LD63FD439_100:
            ; //_A523506CC_2746:;				
            _A523506CC_2746:
            ; //LD63FD439_97:;					
            LD63FD439_97:
            ; //_A523506CC_2747:;				
            _A523506CC_2747:
            ; //	return;					
00EB9:      	AR	= 1
00EBA:      	BP	+= AR
00EBB:      	pop	AR
00EBC:      	rm[BP_SAVE]	= AR
00EBD:      	rets
            ; //_WS_TRSF_color_setE1CC300C_end:;		
            _WS_TRSF_color_setE1CC300C_end:
            ; //_A523506CC_2748:;				
            _A523506CC_2748:
            ; //}
            ; //
            ; //void _WS_RefreshAD7B99B1()			
            _WS_RefreshAD7B99B1:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00EBE:      	AR	= rm[BP_SAVE]
00EBF:      	push	AR
00EC0:      	AR	= BP
00EC1:      	rm[BP_SAVE]	= AR
00EC2:      	AR	 = -1
00EC3:      	BP	+= AR
            ; //_A523506CC_2749:;				
            _A523506CC_2749:
            ; //_A523506CC_2750:;				
            _A523506CC_2750:
            ; //	_i_1_2+0	= 0x00;			
00EC4:      	I1	= rm[BP_SAVE]
00EC5:      	AR	= 0x00
00EC6:      	rm[I1]	= AR
            ; //LD63FD439_119:;					
            LD63FD439_119:
            ; //	sSI	= (int)&_i_1_2;			
00EC7:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00EC8:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00EC9:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00ECA:      	pch	= sfx_CMP_AX_CX_JBE
00ECB:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_123;	
00ECC:      	if ZR	jmp LD63FD439_123
            ; //	goto	LD63FD439_121;			
00ECD:      	pch =	LD63FD439_121
00ECE:      	ljmp	LD63FD439_121
            ; //LD63FD439_123:;					
            LD63FD439_123:
            ; //	goto LD63FD439_120;			
00ECF:      	pch =	LD63FD439_120
00ED0:      	ljmp	LD63FD439_120
            ; //LD63FD439_122:;					
            LD63FD439_122:
            ; //	sSI	= (int)&_i_1_2;			
00ED1:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00ED2:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00ED3:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00ED4:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00ED5:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00ED6:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_119;			
00ED7:      	pch =	LD63FD439_119
00ED8:      	ljmp	LD63FD439_119
            ; //LD63FD439_120:;					
            LD63FD439_120:
            ; //	
            ; //_A523506CC_2751:;				
            _A523506CC_2751:
            ; //_A523506CC_2752:;				
            _A523506CC_2752:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00ED9:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00EDA:      	push	AX
            ; //	sSI	= (int)&_i_1_2;			
00EDB:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00EDC:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
00EDD:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
00EDE:      	pch	= sfx_IMUL_AX_CX
00EDF:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00EE0:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00EE1:      	AR	= CX
00EE2:      	AX	+= AR
            ; //	sSI	= sAX;				
00EE3:      	AR	= AX
00EE4:      	I1	= AR
            ; //	sAX	= *(__int16*)sSI++;		
00EE5:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00EE6:      	DX	= rm[I1--]
            ; //	PUSH(sAX);				
00EE7:      	push	AX
            ; //	_WS_Send24bits851C5C55(STACK[sSP + 0]);	
00EE8:      	pch	= _WS_Send24bits851C5C55
00EE9:      	lcall	_WS_Send24bits851C5C55
            ; //	RESTORESP(1);				
00EEA:      	pop	AR
            ; //	goto LD63FD439_122;			
00EEB:      	pch =	LD63FD439_122
00EEC:      	ljmp	LD63FD439_122
            ; //LD63FD439_121:;					
            LD63FD439_121:
            ; //_A523506CC_2753:;				
            _A523506CC_2753:
            ; //_A523506CC_2754:;				
            _A523506CC_2754:
            ; //	asm clr io[0x09].b14;			
00EED:      	clr io[0x09].b14//
            ; //LD63FD439_118:;					
            LD63FD439_118:
            ; //_A523506CC_2755:;				
            _A523506CC_2755:
            ; //	return;					
00EEE:      	AR	= 1
00EEF:      	BP	+= AR
00EF0:      	pop	AR
00EF1:      	rm[BP_SAVE]	= AR
00EF2:      	rets
            ; //_WS_RefreshAD7B99B1_end:;			
            _WS_RefreshAD7B99B1_end:
            ; //_A523506CC_2756:;				
            _A523506CC_2756:
            ; //}
            ; //
            ; //void _WS_Key_RGBC5B96B6D()			
            _WS_Key_RGBC5B96B6D:
            ; //{
            ; //_A523506CC_2757:;				
            _A523506CC_2757:
            ; //	
            ; //_A523506CC_2758:;				
            _A523506CC_2758:
            ; //	asm I1 = LD63FD439_125+0;		
00EF3:      	I1 = LD63FD439_125+0//
            ; //	sAX	= *(__int16*)sSI;		
00EF4:      	AX	= rm[I1]
            ; //	goto LD63FD439_127;			
00EF5:      	pch =	LD63FD439_127
00EF6:      	ljmp	LD63FD439_127
            ; //LD63FD439_128:;					
            LD63FD439_128:
            ; //_A523506CC_2759:;				
            _A523506CC_2759:
            ; //_A523506CC_2760:;				
            _A523506CC_2760:
            ; //	sAX	= 0x0000;			
00EF7:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EF8:      	push	AX
            ; //	sAX	= 0x0003;			
00EF9:      	AX	= 0x03
            ; //	PUSH(sAX);				
00EFA:      	push	AX
            ; //	sAX	= 0x0000;			
00EFB:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EFC:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00EFD:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00EFE:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00EFF:      	AR	= 3
00F00:      	BP	+= AR
            ; //_A523506CC_2761:;				
            _A523506CC_2761:
            ; //_A523506CC_2762:;				
            _A523506CC_2762:
            ; //	_WS_RefreshAD7B99B1();			
00F01:      	pch	= _WS_RefreshAD7B99B1
00F02:      	lcall	_WS_RefreshAD7B99B1
            ; //_A523506CC_2763:;				
            _A523506CC_2763:
            ; //_A523506CC_2764:;				
            _A523506CC_2764:
            ; //	sAX	= 0x0000;			
00F03:      	AX	= 0x00
            ; //	PUSH(sAX);				
00F04:      	push	AX
            ; //	sAX	= 0x0003;			
00F05:      	AX	= 0x03
            ; //	PUSH(sAX);				
00F06:      	push	AX
            ; //	sAX	= 0x0000;			
00F07:      	AX	= 0x00
            ; //	PUSH(sAX);				
00F08:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00F09:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00F0A:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00F0B:      	AR	= 3
00F0C:      	BP	+= AR
            ; //_A523506CC_2765:;				
            _A523506CC_2765:
            ; //_A523506CC_2766:;				
            _A523506CC_2766:
            ; //	_WS_RefreshAD7B99B1();			
00F0D:      	pch	= _WS_RefreshAD7B99B1
00F0E:      	lcall	_WS_RefreshAD7B99B1
            ; //_A523506CC_2767:;				
            _A523506CC_2767:
            ; //	goto LD63FD439_126;			
00F0F:      	pch =	LD63FD439_126
00F10:      	ljmp	LD63FD439_126
            ; //LD63FD439_129:;					
            LD63FD439_129:
            ; //_A523506CC_2768:;				
            _A523506CC_2768:
            ; //_A523506CC_2769:;				
            _A523506CC_2769:
            ; //	sAX	= 0x0000;			
00F11:      	AX	= 0x00
            ; //	PUSH(sAX);				
00F12:      	push	AX
            ; //	sAX	= 0x0003;			
00F13:      	AX	= 0x03
            ; //	PUSH(sAX);				
00F14:      	push	AX
            ; //	sAX	= 0x0000;			
00F15:      	AX	= 0x00
            ; //	PUSH(sAX);				
00F16:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00F17:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00F18:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00F19:      	AR	= 3
00F1A:      	BP	+= AR
            ; //_A523506CC_2770:;				
            _A523506CC_2770:
            ; //_A523506CC_2771:;				
            _A523506CC_2771:
            ; //	_WS_RefreshAD7B99B1();			
00F1B:      	pch	= _WS_RefreshAD7B99B1
00F1C:      	lcall	_WS_RefreshAD7B99B1
            ; //_A523506CC_2772:;				
            _A523506CC_2772:
            ; //_A523506CC_2773:;				
            _A523506CC_2773:
            ; //	sAX	= 0x001F;			
00F1D:      	AX	= 0x1F
            ; //	PUSH(sAX);				
00F1E:      	push	AX
            ; //	sAX	= 0x0006;			
00F1F:      	AX	= 0x06
            ; //	PUSH(sAX);				
00F20:      	push	AX
            ; //	sAX	= 0x0004;			
00F21:      	AX	= 0x04
            ; //	PUSH(sAX);				
00F22:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00F23:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00F24:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00F25:      	AR	= 3
00F26:      	BP	+= AR
            ; //_A523506CC_2774:;				
            _A523506CC_2774:
            ; //_A523506CC_2775:;				
            _A523506CC_2775:
            ; //	_WS_RefreshAD7B99B1();			
00F27:      	pch	= _WS_RefreshAD7B99B1
00F28:      	lcall	_WS_RefreshAD7B99B1
            ; //_A523506CC_2776:;				
            _A523506CC_2776:
            ; //	goto LD63FD439_126;			
00F29:      	pch =	LD63FD439_126
00F2A:      	ljmp	LD63FD439_126
            ; //LD63FD439_130:;					
            LD63FD439_130:
            ; //_A523506CC_2777:;				
            _A523506CC_2777:
            ; //_A523506CC_2778:;				
            _A523506CC_2778:
            ; //	sAX	= 0x0000;			
00F2B:      	AX	= 0x00
            ; //	PUSH(sAX);				
00F2C:      	push	AX
            ; //	sAX	= 0x0003;			
00F2D:      	AX	= 0x03
            ; //	PUSH(sAX);				
00F2E:      	push	AX
            ; //	sAX	= 0x0000;			
00F2F:      	AX	= 0x00
            ; //	PUSH(sAX);				
00F30:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00F31:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00F32:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00F33:      	AR	= 3
00F34:      	BP	+= AR
            ; //_A523506CC_2779:;				
            _A523506CC_2779:
            ; //_A523506CC_2780:;				
            _A523506CC_2780:
            ; //	_WS_RefreshAD7B99B1();			
00F35:      	pch	= _WS_RefreshAD7B99B1
00F36:      	lcall	_WS_RefreshAD7B99B1
            ; //_A523506CC_2781:;				
            _A523506CC_2781:
            ; //_A523506CC_2782:;				
            _A523506CC_2782:
            ; //	sAX	= 0xFF00;			
00F37:      	AX	= 0xFF00
            ; //	PUSH(sAX);				
00F39:      	push	AX
            ; //	sAX	= 0x000A;			
00F3A:      	AX	= 0x0A
            ; //	PUSH(sAX);				
00F3B:      	push	AX
            ; //	sAX	= 0x0007;			
00F3C:      	AX	= 0x07
            ; //	PUSH(sAX);				
00F3D:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00F3E:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00F3F:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00F40:      	AR	= 3
00F41:      	BP	+= AR
            ; //_A523506CC_2783:;				
            _A523506CC_2783:
            ; //_A523506CC_2784:;				
            _A523506CC_2784:
            ; //	_WS_RefreshAD7B99B1();			
00F42:      	pch	= _WS_RefreshAD7B99B1
00F43:      	lcall	_WS_RefreshAD7B99B1
            ; //_A523506CC_2785:;				
            _A523506CC_2785:
            ; //	goto LD63FD439_126;			
00F44:      	pch =	LD63FD439_126
00F45:      	ljmp	LD63FD439_126
            ; //	goto LD63FD439_126;			
00F46:      	pch =	LD63FD439_126
00F47:      	ljmp	LD63FD439_126
            ; //LD63FD439_127:;					
            LD63FD439_127:
            ; //	sCX	= sAX;				
00F48:      	AR	= AX
00F49:      	CX	= AR
            ; //	sAX	= 0x0000;			
00F4A:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_U_JE();			
00F4B:      	pch	= sfx_CMP_AX_CX_U_JE
00F4C:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_131;	
00F4D:      	if NZ	jmp LD63FD439_131
            ; //	goto LD63FD439_128;			
00F4E:      	pch =	LD63FD439_128
00F4F:      	ljmp	LD63FD439_128
            ; //LD63FD439_131:;					
            LD63FD439_131:
            ; //	sAX	= 0x0001;			
00F50:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_U_JE();			
00F51:      	pch	= sfx_CMP_AX_CX_U_JE
00F52:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_132;	
00F53:      	if NZ	jmp LD63FD439_132
            ; //	goto LD63FD439_129;			
00F54:      	pch =	LD63FD439_129
00F55:      	ljmp	LD63FD439_129
            ; //LD63FD439_132:;					
            LD63FD439_132:
            ; //	sAX	= 0x0002;			
00F56:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_U_JE();			
00F57:      	pch	= sfx_CMP_AX_CX_U_JE
00F58:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_133;	
00F59:      	if NZ	jmp LD63FD439_133
            ; //	goto LD63FD439_130;			
00F5A:      	pch =	LD63FD439_130
00F5B:      	ljmp	LD63FD439_130
            ; //LD63FD439_133:;					
            LD63FD439_133:
            ; //	goto	LD63FD439_126;			
00F5C:      	pch =	LD63FD439_126
00F5D:      	ljmp	LD63FD439_126
            ; //LD63FD439_126:;					
            LD63FD439_126:
            ; //_A523506CC_2786:;				
            _A523506CC_2786:
            ; //	asm I1 = LD63FD439_125+0;		
00F5E:      	I1 = LD63FD439_125+0//
            ; //	sAX	= *(__int16*)sSI;		
00F5F:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_125;		
00F60:      	I1	= LD63FD439_125
            ; //	PUSH(sAX);				
00F61:      	push	AX
            ; //	sAX	= 0x0001;			
00F62:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
00F63:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
00F64:      	AR	= AX
00F65:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
00F66:      	rm[I1]	= CX
            ; //	sAX	= POP();			
00F67:      	pop	AX
            ; //_A523506CC_2787:;				
            _A523506CC_2787:
            ; //	asm I1 = LD63FD439_125+0;		
00F68:      	I1 = LD63FD439_125+0//
            ; //	sAX	= *(__int16*)sSI;		
00F69:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
00F6A:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JA();			
00F6B:      	pch	= sfx_CMP_AX_CX_JA
00F6C:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_135;	
00F6D:      	if ZR	jmp LD63FD439_135
            ; //	goto	LD63FD439_134;			
00F6E:      	pch =	LD63FD439_134
00F6F:      	ljmp	LD63FD439_134
            ; //LD63FD439_135:;					
            LD63FD439_135:
            ; //_A523506CC_2788:;				
            _A523506CC_2788:
            ; //	LD63FD439_125+0	= 0x00;			
00F70:      	AR	= 0x00
00F71:      	rm[LD63FD439_125+0]	= AR
            ; //LD63FD439_134:;					
            LD63FD439_134:
            ; //_A523506CC_2789:;				
            _A523506CC_2789:
            ; //_A523506CC_2790:;				
            _A523506CC_2790:
            ; //_A523506CC_2791:;				
            _A523506CC_2791:
            ; //	sAX	= 0x0032;			
00F72:      	AX	= 0x32
            ; //	PUSH(sAX);				
00F73:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
00F74:      	pch	= _delay6F9F34ED
00F75:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
00F76:      	pop	AR
            ; //LD63FD439_124:;					
            LD63FD439_124:
            ; //_A523506CC_2792:;				
            _A523506CC_2792:
            ; //	return;					
00F77:      	rets
            ; //_WS_Key_RGBC5B96B6D_end:;			
            _WS_Key_RGBC5B96B6D_end:
            ; //_A523506CC_2793:;				
            _A523506CC_2793:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_WS2811_02F950F9_s(void)	
            ginit_code_WS2811_02F950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+0;
00F78:      	P1 = #ginit_seg_WS2811_02F950F9_s+0//
            ; //	asm I1 = LD63FD439_68;			
00F7B:      	I1 = LD63FD439_68//
            ; //	sCX = 1;				
00F7C:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00F7D:      	pch	= sfx_GLOBALINIT
00F7E:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+1;
00F7F:      	P1 = #ginit_seg_WS2811_02F950F9_s+1//
            ; //	asm I1 = LD63FD439_125;			
00F82:      	I1 = LD63FD439_125//
            ; //	sCX = 1;				
00F83:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00F84:      	pch	= sfx_GLOBALINIT
00F85:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00F86:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_WS2811_02F950F9_s[2] = {	
            ginit_seg_WS2811_02F950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
00F87:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00F88:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> Start=========================
            
            
            ; ~~ IO for DSP
            
            
            ; ~~ --------------------------
            ; void ClrWatchDog(void)
            ;~ ClrWatchDog:
            	;~ io[0x1D]=	AR
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void dsi(void)
            ;~ dsi:
            	;~ clr		io[STATUS].b7
            	;~ nop
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void eni(void)
            ;~ eni:
            	;~ set		io[STATUS].b7
            	;~ rets
            
            
            ; ~~ --------------------------
            ; int get_SATV(long value)
            get_SATV:
00F89:      	AR=		BP
00F8A:      	AR=		AR + 1		; ~~ value
00F8B:      	I1=		AR
00F8C:      	AR=		SATV
00F8D:      	AR=		rm[I1++]
00F8E:      	SATV=		AR
00F8F:      	AR=		rm[I1++]
00F90:      	SATV=		AR
00F91:      	AR=		SATV
00F92:      	AX=		AR
00F93:      	rets
            
            #ifdef _MSPEECHDSP_
            
            set_ADPHD:
            get_ADPHD:
            set_ADPDAT:
            get_ADPDAT:
            	AX=		0
            	rets
            
            #else
            
            
            ; ~~ --------------------------
            ; void set_ADPHD(int value)
            set_ADPHD:
00F94:      	AR=		BP
00F95:      	AR=		AR + 1		; ~~ value
00F96:      	I1=		AR
00F97:      	ADPHD=		rm[I1]
00F98:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPHD(void)
            get_ADPHD:
00F99:      	AR=		ADPHD
00F9A:      	AX=		AR
00F9B:      	rets
            
            
            ; ~~ --------------------------
            ; void set_ADPDAT(int value)
            set_ADPDAT:
00F9C:      	AR=		BP
00F9D:      	AR=		AR + 1		; ~~ value
00F9E:      	I1=		AR
00F9F:      	ADPDAT=		rm[I1]
00FA0:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPDAT(void)
            get_ADPDAT:
00FA1:      	AR=		ADPDAT
00FA2:      	AX=		AR
00FA3:      	rets
            
            #endif
            
            
            
            ; ~~ --------------------------
            ; int get_ADPPCM(void)
            get_FLTI:
            get_ADPPCM:
00FA4:      	AR=		ADPPCM
00FA5:      	AX=		AR
00FA6:      	rets
            
            
            ; ~~ --------------------------
            ; int get_CBL(void)
            get_CBL:
00FA7:      	AR=		CBL
00FA8:      	AX=		AR
00FA9:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTO(void)
            get_FLTO:
00FAA:      	AR=		FLTO
00FAB:      	AX=		AR
00FAC:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTA(void)
            get_FLTA:
00FAD:      	AR=		FLTA
00FAE:      	AX=		AR
00FAF:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTP(void)
            get_FLTP:
00FB0:      	AR=		FLTP
00FB1:      	AX=		AR
00FB2:      	rets
            
            ; ///////////////////////////////////////////////////////////////////////////
            ; ///////////////////////////////////////////////////////////////////////////
            
            ; ~~ --------------------------
            ; void set_UART(void)
            set_UART:
00FB3:      	set		io[STATUS].b5
00FB4:      	rets
            
            ; ~~ --------------------------
            ; void clr_UART(void)
            clr_UART:
00FB5:      	clr		io[STATUS].b5
00FB6:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIM(void)
            set_SPIM:
00FB7:      	set		io[STATUS].b8
00FB8:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIM(void)
            clr_SPIM:
00FB9:      	clr		io[STATUS].b8
00FBA:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIS(void)
            set_SPIS:
00FBB:      	set		io[STATUS].b9
00FBC:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIS(void)
            clr_SPIS:
00FBD:      	clr		io[STATUS].b9
00FBE:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_IntPrWR:
00FBF:      	set		io[STATUS].b11
00FC0:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_IntPrWR:
00FC1:      	clr		io[STATUS].b11
00FC2:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_SD:
00FC3:      	set		io[STATUS].b12
00FC4:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_SD:
00FC5:      	clr		io[STATUS].b12
00FC6:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVWR(void)
            set_IntVWR:
00FC7:      	set		io[STATUS].b13
00FC8:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntVWR(void)
            clr_IntVWR:
00FC9:      	clr		io[STATUS].b13
00FCA:      	rets
            
            ; ~~ --------------------------
            ; void set_INTENA(int value)
            set_INTENA:
00FCB:      	AR=		BP
00FCC:      	AR=		AR + 1		; ~~ value
00FCD:      	I1=		AR
00FCE:      	AR=		rm[I1]
00FCF:      	io[INTENA]=	AR
00FD0:      	rets
            
            ; ~~ --------------------------
            ; int get_INTENA(int value)
            get_INTENA:
00FD1:      	AR=		io[INTENA]
00FD2:      	AX=		AR
00FD3:      	rets
            
            ; ~~ --------------------------
            ; void set_INTREQ(int value)
            set_INTREQ:
00FD4:      	AR=		BP
00FD5:      	AR=		AR + 1		; ~~ value
00FD6:      	I1=		AR
00FD7:      	AR=		rm[I1]
00FD8:      	io[INTREQ]	=AR
00FD9:      	rets
            
            ; ~~ --------------------------
            ; int get_INTREQ(int value)
            get_INTREQ:
00FDA:      	AR=		io[INTREQ]
00FDB:      	AX=		AR
00FDC:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVect(int value)
            set_IntVect:
00FDD:      	AR=		BP
00FDE:      	AR=		AR + 1		; ~~ value
00FDF:      	I1=		AR
00FE0:      	AR=		rm[I1]
00FE1:      	io[IntVect]	=AR
00FE2:      	rets
            
            ; ~~ --------------------------
            ; int get_IntVect(int value)
            get_IntVect:
00FE3:      	AR=		io[IntVect]
00FE4:      	AX=		AR
00FE5:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PA(int value)
            get_IOC_PA:
00FE6:      	AR=		io[IOC_PA]
00FE7:      	AX=		AR
00FE8:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PB(int value)
            get_IOC_PB:
00FE9:      	AR=		io[IOC_PB]
00FEA:      	AX=		AR
00FEB:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PC(int value)
            get_IOC_PC:
00FEC:      	AR=		io[IOC_PC]
00FED:      	AX=		AR
00FEE:      	rets
            
            ; ~~ --------------------------
            ; int get_PortA(int value)
            get_PortA:
00FEF:      	AR=		io[PortA]
00FF0:      	AX=		AR
00FF1:      	rets
            
            ; ~~ --------------------------
            ; int get_PortB(int value)
            get_PortB:
00FF2:      	AR=		io[PortB]
00FF3:      	AX=		AR
00FF4:      	rets
            
            
            ; ~~ --------------------------
            ; int get_PortC(int value)
            get_PortC:
00FF5:      	AR=		io[PortC]
00FF6:      	AX=		AR
00FF7:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_CTL(int value)
            set_SPI_CTL:
00FF8:      	AR=		BP
00FF9:      	AR=		AR + 1		; ~~ value
00FFA:      	I1=		AR
00FFB:      	AR=		rm[I1]
00FFC:      	io[SPI_CTL]=	AR
00FFD:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_CTL(int value)
            get_SPI_CTL:
00FFE:      	AR=		io[SPI_CTL]
00FFF:      	AX=		AR
01000:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_DAT(int value)
            set_SPI_DAT:
01001:      	AR=		BP
01002:      	AR=		AR + 1		; ~~ value
01003:      	I1=		AR
01004:      	AR=		rm[I1]
01005:      	io[SPI_DAT]=	AR
01006:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_DAT(int value)
            get_SPI_DAT:
01007:      	AR=		io[SPI_DAT]
01008:      	AX=		AR
01009:      	rets
            
            
            ; ~~ --------------------------
            ; void set_MISC(int value)
            set_MISC:
0100A:      	AR=		BP
0100B:      	AR=		AR + 1		; ~~ value
0100C:      	I1=		AR
0100D:      	AR=		rm[I1]
            	;~ io[0x1C]	=AR
0100E:      	rets
            
            ; ~~ --------------------------
            ; int get_MISC(int value)
            get_MISC:
0100F:      	AR=		io[MISC]
01010:      	AX=		AR
01011:      	rets
            
            ; ~~ --------------------------
            ; int get_Real_T(int value)
            get_Real_T:
            	;~ AR=		io[0x1D]
01012:      	AX=		AR
01013:      	rets
            
            
            ; ~~ --------------------------
            ; int get_MACOP(void)
            get_MACOP:
01014:      	AR=		MACOP
01015:      	AX=		AR
01016:      	rets
            
            
            ; ~~ --------------------------
            ; void set_INTMASK(int value)
            ; set_INTMASK:
            	; AR=			BP
            	; AR=			AR + 1		; ~~ value
            	; I1=			AR
            	; AR=			rm[I1]
            	; io[INTMASK]=AR
            	; rets
            
            ; ~~ --------------------------
            ; int get_INTMASK(int value)
            ; get_INTMASK:
            	; AR=			io[INTMASK]
            	; AX=			AR
            	; rets
            
            ; ~~ --------------------------
            ; int vXCHG(int value)
            vXCHG:
01017:      	AR=		BP
01018:      	AR=		AR + 1
01019:      	I1=		AR
0101A:      	AR=		rm[I1]
0101B:      	xchg		AR
0101C:      	AX=		AR
0101D:      	rets
            
            ; ~~ --------------------------
            ; void cpuHalt(void)
            cpuHalt:
0101E:      	halt
            
            
            #ifdef _MFDSP_
            
            ; ~~ --------------------------
            ; void setSystemSpeed(int value)
            set_SystemSpeed:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPEED]=	AR
            	rets
            
            
            ; ~~ --------------------------
            ; void set_SD_CTL(int value)
            set_SD_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_CTL(int value)
            get_SD_CTL:
            	AR=		io[SD_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_DAT(int value)
            set_SD_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_DAT(void)
            get_SD_DAT:
            	AR=		io[SD_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_RSP(int value)
            set_SD_RSP:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_RSP]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_RSP(int value)
            get_SD_RSP:
            	AR=		io[SD_RSP]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_CTL(int value)
            set_UART_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_CTL(int value)
            get_UART_CTL:
            	AR=		io[UART_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_DAT(int value)
            set_UART_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_DAT(int value)
            get_UART_DAT:
            	AR=		io[UART_DAT]
            	AX=		AR
            	rets
            
            
            ; By Tsao	20161103
            
            ; ~~ --------------------------
            ; void set_ADH_CFG0(int value)
            set_ADH_CFG0:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG0]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG0(void)
            get_ADH_CFG0:
            	AR=		io[ADH_CFG0]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_ADH_CFG1(int value)
            set_ADH_CFG1:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG1]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG1(void)
            get_ADH_CFG1:
            	AR=		io[ADH_CFG1]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_DO(void)
            get_ADH_DO:
            	AR=		io[ADH_DO]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_CTL(int value)
            set_SPIS_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_CTL(int value)
            get_SPIS_CTL:
            	AR=		io[SPIS_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_DAT(int value)
            set_SPIS_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_DAT(int value)
            get_SPIS_DAT:
            	AR=		io[SPIS_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_GreenMode(int value)
            set_GreenMode:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[GREEN]=	AR
            	rets
            
            ; ~~ --------------------------
            ; void cpuStall(int value)
            cpuStall:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SLEEP]=	AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_CTL:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_CTL]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_CTL:
            	AR=		io[SPI_DMA_CTL]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_RADR:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_RADR]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_RADR:
            	AR=		io[SPI_DMA_RADR]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_DMANUM:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[0x55]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_DMANUM:
            	AR=		io[SPI_DMA_DMANUM]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            #endif
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_I0:
0101F:      	AX=		rm[I0]
01020:      	rets
            
            read_I0P:
01021:      	AX=		rm[I0++]
01022:      	rets
            
            read_I0P2:
01023:      	AX=		rm[I0++2]
01024:      	rets
            
            read_I0M:
01025:      	AX=		rm[I0--]
01026:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_I0:
01027:      	AR=		I0
01028:      	AX=		AR
01029:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_P0:
0102A:      	AX=		pm[P0]
0102B:      	rets
            
            read_P0P:
0102C:      	AX=		pm[P0++]
0102D:      	rets
            
            read_P0M:
0102E:      	AX=		pm[P0--]
0102F:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_P0:
01030:      	AR=		P0
01031:      	AX=		AR
01032:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            FA:
01033:      	AX=		1
01034:      	if FA jmp	@fa_label_1504
01035:      	AX=		0
            @fa_label_1504:
01036:      	rets
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> Start=========================
            _lptr_read:
01037:      	AR=		DX
01038:      	test		AR.b11
01039:      	if ZR jmp	@_lptr_read_label_1510
            
0103A:      	P1.hh=		AR
0103B:      	AR=		AX
0103C:      	P1=		AR
0103D:      	AX=		pm[P1]
0103E:      	P1.hh=		0
0103F:      	rets
            
            @_lptr_read_label_1510:
            
01040:      	AR=		AX
01041:      	I1=		AR
01042:      	AX=		rm[I1]
01043:      	rets
            
            
            _lptr_read32:
01044:      	AR=		DX
01045:      	test		AR.b11
01046:      	if ZR jmp	@_lptr_read_label_1510_32
            
01047:      	P1.hh=		AR
01048:      	AR=		AX
01049:      	P1=		AR
0104A:      	AX=		pm[P1++]
0104B:      	DX=		pm[P1]
0104C:      	P1.hh=		0
0104D:      	rets
            
            @_lptr_read_label_1510_32:
            
0104E:      	AR=		AX
0104F:      	I1=		AR
01050:      	AX=		rm[I1++]
01051:      	DX=		rm[I1]
01052:      	rets
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> Start=========================
            
            
            _ClearTickCount5DDE4003:
            #ifdef _MFDSP_
            	set		io[MISC].b8
            #else
01053:      	set		io[MISC].b7
            #endif
01054:      	set		io[MISC].b15
            	
01055:      	io[REAL_T]=	AR
01056:      	AR=		io[REAL_T]
01057:      	AR=		io[REAL_T]
01058:      	io[REAL_T]=	AR
01059:      	rets
            
            ; -----------------------------------------------
            
            _GetTickCount18DC070C:
0105A:      	AX=		0xFFF0
            @gettickcount_loop_1000:
0105C:      	io[ClrWDT]=	AR
0105D:      	AR=		io[REAL_T]
0105E:      	AR=		AR & AX
0105F:      	SF=		AR - AX
01060:      	if ZR jmp	@gettickcount_loop_1000
01061:      	AX=		AR
01062:      	AR=		io[REAL_T]
01063:      	DX=		AR
01064:      	rets
            
            	
            ; -----------------------------------------------
            ; void delay(int ms)
            ;
            ; in:
            ;     BP + 1 - int ms
            ;
            ; -----------------------------------------------
            _delay6F9F34ED:
            ; {
01065:      	AR=		BP
01066:      	AR=		AR + 1		; ~~ port
01067:      	I1=		AR
            
            	; unsigned long tick;
            	; unsigned long msr;
            
            	; ~~ 1ms = 32768 ticks
            
            	; msr = (unsigned long)ms << 15;
01068:      		R0=		0
01069:      		R1=		rm[I1]
0106A:      		clr		C
0106B:      		src		R1, 1
0106C:      		src		R0, 1
            	
            	; tick = GetTickCount();
0106D:      		call		_GetTickCount18DC070C
0106E:      		AR=		AX
0106F:      		CX=		AR
01070:      		AR=		DX
01071:      		BX=		AR
            	
            	; while((GetTickCount() - tick) < msr);
            	@delay_loop_1024:
01072:      		call		_GetTickCount18DC070C
01073:      		AR=		CX
01074:      		AX=		AX - AR
01075:      		AR=		BX
01076:      		DX=		DX - AR + C - 1
01077:      		AR=		R0
01078:      		AX=		AX - AR
01079:      		AR=		R1
0107A:      		DX=		DX - AR + C - 1
0107B:      		AR=		0
0107C:      		AR=		AR - 0 + C - 1
0107D:      		if AN jmp	@delay_loop_1024
            
0107E:      	rets
            ; }
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> Start=========================
            ; .\lib\libsubb3\sub3_cshell.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3_cshell_257767F9_s(void)
            ginit_code_sub3_cshell_257767F9_s:
            ; //{
            ; //	return;					
0107F:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //	nop
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> End=========================
            
            ;
            #LINKOBJ ".\LIB\LIBSUBB3\SBB3_CH0DECV05.OBJ"
            ;
            
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> Start=========================
            
            
            #ifdef _MSPEECHDSP_
            
            Subb3_Init:
            	PCH=            SDSP_Sbb3_Ch0InitV05
            	lcall           SDSP_Sbb3_Ch0InitV05
            	rets
            
            Subb3_Dec:
            	PCH=		SDSP_Sbb3_Ch0decV05
            	lcall		SDSP_Sbb3_Ch0decV05
                    AX=		0
                    if NZ jmp	@sdsp_sbb2_ch0dec_a
                    AX=		1
            @sdsp_sbb2_ch0dec_a:
            	rets
            	
            #else
            
            Subb3_Init:
033D0:      	PCH=            Sbb3_Ch0InitV05
033D1:      	lcall           Sbb3_Ch0InitV05
033D2:      	rets
            
            Subb3_Dec:
033D3:      	PCH=		Sbb3_Ch0decV05
033D4:      	lcall		Sbb3_Ch0decV05
033D5:              AX=		0
033D6:              if NZ jmp	@sdsp_sbb2_ch0dec_a
033D7:              AX=		1
            @sdsp_sbb2_ch0dec_a:
033D8:      	rets
            	
            #endif
            
            
            
            	
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> End=========================
            
            ;=========================Include <DEPS\B7AD0F15_GINIT.S.CODE.ASM> Start=========================
            ; B7AD0F15_ginit.s.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code(void)			
            ginit_code:
            ; //{
            ; //	ginit_code_SUNB3_593950F9_s();		
033D9:      	pch	= ginit_code_SUNB3_593950F9_s
033DA:      	lcall	ginit_code_SUNB3_593950F9_s
            ; //	ginit_code_global_6037E6D5_s();		
033DB:      	pch	= ginit_code_global_6037E6D5_s
033DC:      	lcall	ginit_code_global_6037E6D5_s
            ; //	ginit_code_sub3play_8ED4FA41_s();	
033DD:      	pch	= ginit_code_sub3play_8ED4FA41_s
033DE:      	lcall	ginit_code_sub3play_8ED4FA41_s
            ; //	ginit_code_WS2811_02F950F9_s();		
033DF:      	pch	= ginit_code_WS2811_02F950F9_s
033E0:      	lcall	ginit_code_WS2811_02F950F9_s
            ; //	ginit_code_sub3_cshell_257767F9_s();	
033E1:      	pch	= ginit_code_sub3_cshell_257767F9_s
033E2:      	lcall	ginit_code_sub3_cshell_257767F9_s
            ; //	return;					
033E3:      	rets
            ; //}
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\B7AD0F15_GINIT.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> Start=========================
            
            
            ; ~~ CRT0 support functions
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GLOBALINIT(void)
            ; void sfx_LOCALINIT(void)
            ;
            ; in:
            ;     I1	- pointer to SRAM initial value
            ;     P1	- pointer to PROM initial data
            ;     CX	- total count (word)
            ;
            ; out:
            ;     none
            ;
            ; --------------------------------------------
            sfx_GLOBALINIT:
            sfx_LOCALINIT:
033E4:      	P1.hh=		0
033E5:      	jmp		@glinit_label_1409
            @glinit_loop_1409:
033E6:      	AR=		pm[P1++]
033E7:      	rm[I1++]=	AR
            @glinit_label_1409:
033E8:      	loop		@glinit_loop_1409
033E9:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MUL_AX_CX(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MUL_AX_CX:
            
033EA:      	AR=		AX
033EB:      	MX=		AR
033EC:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033ED:      	MACOP=		3
033EE:      	MR=		MX * AR
            #endif
            
033EF:      	AR=		MR0
033F0:      	AX=		AR
033F1:      	AR=		MR1
033F2:      	DX=		AR
033F3:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMUL_AX_CX(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMUL_AX_CX:
            
033F4:      	AR=		AX
033F5:      	MX=		AR
033F6:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
033F7:      	MACOP=		0
033F8:      	MR=		MX * AR
            #endif
            
033F9:      	AR=		MR0
033FA:      	AX=		AR
033FB:      	AR=		MR1
033FC:      	DX=		AR
033FD:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMULLONG(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMULLONG:
033FE:      	AR=		rm[BP_SAVE]
033FF:      	push		AR
03400:      	AR=		BP
03401:      	rm[BP_SAVE]=	AR
03402:      	AR=		AR - 3
03403:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
03404:      	AR=		CX
03405:      	MX=		AR
03406:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03407:      	MACOP=		3		; unsigned
03408:      	MR=		MX * AR
            #endif
            
03409:      	I1=		rm[BP_SAVE]
0340A:      	AR=		2
0340B:      	I1=		I1 - AR
0340C:      	rm[I1++]=	MR0
0340D:      	rm[I1++]=	MR1
0340E:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
0340F:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUS
            #else
03410:      	MACOP=		1		; mx:unsigned / my:signed
03411:      	MR=		MX * AR
            #endif
            
03412:      	AR=		rm[I1]
03413:      	AR=		AR + MR0
03414:      	rm[I1++]=	AR
03415:      	AR=		rm[I1]
03416:      	AR=		AR + MR1 + C
03417:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
03418:      	AR=		BX
03419:      	MX=		AR
0341A:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULSU
            #else
0341B:      	MACOP=		2		; mx:signed / my:unsigned
0341C:      	MR=		MX * AR
            #endif
            
0341D:      	AR=		rm[I1]
0341E:      	AR=		AR + MR0
0341F:      	rm[I1++]=	AR
03420:      	AR=		rm[I1]
03421:      	AR=		AR + MR1 + C
03422:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
03423:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
03424:      	MACOP=		0		; mx:signed / my:signed
03425:      	MR=		MX * AR
            #endif
            
03426:      	AR=		rm[I1]
03427:      	AR=		AR + MR0
03428:      	rm[I1]=		AR
            
03429:      	I1=		rm[BP_SAVE]
0342A:      	CX=		rm[I1--]
0342B:      	DX=		rm[I1--]
0342C:      	AX=		rm[I1]
            
0342D:      	AR=		3
0342E:      	BP=		BP + AR
0342F:      	pop		AR
03430:      	rm[BP_SAVE]=	AR
            
03431:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MULLONG(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MULLONG:
03432:      	AR=		rm[BP_SAVE]
03433:      	push		AR
03434:      	AR=		BP
03435:      	rm[BP_SAVE]=	AR
03436:      	AR=		AR - 3
03437:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
03438:      	AR=		CX
03439:      	MX=		AR
0343A:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0343B:      	MACOP=		3		; unsigned
0343C:      	MR=		MX * AR
            #endif
            
0343D:      	I1=		rm[BP_SAVE]
0343E:      	AR=		2
0343F:      	I1=		I1 - AR
03440:      	rm[I1++]=	MR0
03441:      	rm[I1++]=	MR1
03442:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
03443:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03444:      	MR=		MX * AR
            #endif
            
03445:      	AR=		rm[I1]
03446:      	AR=		AR + MR0
03447:      	rm[I1++]=	AR
03448:      	AR=		rm[I1]
03449:      	AR=		AR + MR1 + C
0344A:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
0344B:      	AR=		BX
0344C:      	MX=		AR
0344D:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0344E:      	MR=		MX * AR
            #endif
            
0344F:      	AR=		rm[I1]
03450:      	AR=		AR + MR0
03451:      	rm[I1++]=	AR
03452:      	AR=		rm[I1]
03453:      	AR=		AR + MR1 + C
03454:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
03455:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03456:      	MR=		MX * AR
            #endif
            
03457:      	AR=		rm[I1]
03458:      	AR=		AR + MR0
03459:      	rm[I1]=		AR
            
0345A:      	I1=		rm[BP_SAVE]
0345B:      	CX=		rm[I1--]
0345C:      	DX=		rm[I1--]
0345D:      	AX=		rm[I1]
            
0345E:      	AR=		3
0345F:      	BP=		BP + AR
03460:      	pop		AR
03461:      	rm[BP_SAVE]=	AR
            
03462:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIV_AX_CX(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIV_AX_CX:
            	; unsigned int reste = 0;
03463:      		DX=		0
            	; unsigned char count = 16;
03464:      		R0=		16
            	; BOOL c;
            
            	; do
            	@divword_loop_1824:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
03465:      			slz		AX, 1
            		; reste <<= 1;
03466:      			slc		DX, 1
            
            		; if (c)
            		; {
            			; reste |= 1;
            		; }
            		@divword_label_1822:
            
            		; if (reste >= y)
03467:      			AR=		DX
03468:      			AR-=		CX
03469:      			AR=		0
0346A:      			AR=		AR - 0 + C - 1
0346B:      			if AN jmp	@divword_label_1823
            		; {
            			; reste -= y;
0346C:      				AR=		CX
0346D:      				DX=		DX - AR
            			; ~~ x <- (result = 1)
            			; x |= 1;
0346E:      				set		AX.b0
            		; }
            		@divword_label_1823:
            
0346F:      		R0--
03470:      		if NZ jmp	@divword_loop_1824
            	; }while (--count);
            
            	; return x;
03471:      		rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIV_AX_CX(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIV_AX_CX:
            
            	; register int r;
            
            	; r = sfx_DIV_AX_CX((x < 0 ? -x : x), (y < 0 ? -y : y));
03472:      		R1=		0
03473:      		AR=		0
03474:      		test		AX.b15
03475:      		if ZR jmp	@divsword_label_1833
03476:      			AX=		AR - AX
03477:      			set		R1.b0
            		@divsword_label_1833:
03478:      		test		CX.b15
03479:      		if ZR jmp	@divsword_label_1834
0347A:      			CX=		AR - CX
0347B:      			set		R1.b1
            		@divsword_label_1834:
0347C:      		call		sfx_DIV_AX_CX
            
            	; if ((x < 0) ^ (y < 0))
0347D:      		AR=		R1
0347E:      		slz		AR, 1
0347F:      		AR^=		R1
03480:      		test		AR.b1
03481:      		if ZR jmp	@divsword_label_1835
            	; {
            		; return (0 - r);
03482:      			AR=		0
03483:      			AX=		AR - AX
03484:      			DX=		AR - DX
            
            	; }
            	@divsword_label_1835:
            
            	; return r;
03485:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIVLONG(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIVLONG:
            	; unsigned long reste = 0L;
03486:      		R0=		0	; L
03487:      		R1=		0	; H
            	; unsigned char count = 32;
03488:      		R2=		32
            	; BOOL c;
            
            	; do
            	@divulong_loop_1723:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
03489:      			slz		AX, 1
0348A:      			slc		DX, 1
            		; reste <<= 1;
0348B:      			slc		R0, 1
0348C:      			slc		R1, 1
            
            		; if (c)
            		; {
            			; reste |= 1L;
            		; }
            		@divulong_label_1726:
            
            		; if (reste >= y)
0348D:      			AR=		R0
0348E:      			AR-=		CX
0348F:      			AR=		R1
03490:      			AR=		AR - BX + C - 1
03491:      			if AN jmp	@divulong_label_1734
            		; {
            			; reste -= y;
03492:      				AR=		CX
03493:      				R0=		R0 - AR
03494:      				AR=		BX
03495:      				R1=		R1 - AR + C - 1
            			; ~~ x <- (result = 1)
            			; x |= 1L;
03496:      				set		AX.b0
            		; }
            		@divulong_label_1734:
            
03497:      		R2--
03498:      		if NZ jmp	@divulong_loop_1723
            	; }while (--count);
            
            	; return x;
03499:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIVLONG(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     BX:DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIVLONG:
            	; long r;
            
            	; r = divulong((x < 0 ? -x : x), (y < 0 ? -y : y));
0349A:      		R3=		0
0349B:      		AR=		0
0349C:      		test		DX.b15
0349D:      		if ZR jmp	@divslong_label_1759
0349E:      			AX=		AR - AX
0349F:      			DX=		AR - DX + C - 1
034A0:      			set		R3.b0
            		@divslong_label_1759:
034A1:      		test		BX.b15
034A2:      		if ZR jmp	@divslong_label_1800
034A3:      			CX=		AR - CX
034A4:      			BX=		AR - BX + C - 1
034A5:      			set		R3.b1
            		@divslong_label_1800:
034A6:      		call		sfx_DIVLONG
            
            	; if ((x < 0) ^ (y < 0))
034A7:      		AR=		R3
034A8:      		slz		AR, 1
034A9:      		AR^=		R3
034AA:      		test		AR.b1
034AB:      		if ZR jmp	@divslong_label_1807
            	; {
            		; return -r;
034AC:      			AR=		0
034AD:      			AX=		AR - AX
034AE:      			DX=		AR - DX + C - 1
034AF:      			R0=		AR - R0
034B0:      			R1=		AR - R1 + C - 1
            
            	; }
            	@divslong_label_1807:
            
            	; return r;
034B1:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MOD_AX_CX(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_MOD_AX_CX:
034B2:      	call		sfx_DIV_AX_CX
034B3:      	AR=		DX
034B4:      	AX=		AR
034B5:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMOD_AX_CX(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMOD_AX_CX:
034B6:      	call		sfx_IDIV_AX_CX
034B7:      	AR=		DX
034B8:      	AX=		AR
034B9:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MODLONG(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_MODLONG:
034BA:      	call		sfx_DIVLONG
034BB:      	AR=		R0
034BC:      	AX=		AR
034BD:      	AR=		R1
034BE:      	DX=		AR
034BF:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMODLONG(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMODLONG:
034C0:      	call		sfx_IDIVLONG
034C1:      	AR=		R0
034C2:      	AX=		AR
034C3:      	AR=		R1
034C4:      	DX=		AR
034C5:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG:
            	; AR=		CX
            	; AX=		AX + AR
            	; AR=		BX
            	; DX=		DX + AR + C
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG_BXCX_DXAX(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG_BXCX_DXAX:
            	; AR=		AX
            	; CX=		CX + AR
            	; AR=		DX
            	; BX=		BX + AR + C
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBLONG(void)
            ;
            ; note:
            ;     signed sub
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SUBLONG:
            	; AR=		CX
            	; AX=		AX - AR
            	; AR=		BX
            	; DX=		DX - AR + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDDIOFS(void)
            ;
            ; note:
            ;     add P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDDIOFS:
034C6:      	AR=		AX
034C7:      	P1=		P1 + AR
034C8:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDSIOFS(void)
            ;
            ; note:
            ;     add I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDSIOFS:
034C9:      	AR=		AX
034CA:      	I1=		I1 + AR
034CB:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDAXOFS(void)
            ;
            ; note:
            ;     add AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_ADDAXOFS:
034CC:      	AR=		CX
034CD:      	AX=		AX + AR
034CE:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBDIOFS(void)
            ;
            ; note:
            ;     sub P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBDIOFS:
034CF:      	AR=		AX
034D0:      	P1=		P1 - AR
034D1:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBSIOFS(void)
            ;
            ; note:
            ;     sub I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBSIOFS:
034D2:      	AR=		AX
034D3:      	I1=		I1 - AR
034D4:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBAXOFS(void)
            ;
            ; note:
            ;     sub AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_SUBAXOFS:
034D5:      	AR=		CX
034D6:      	AX=		AX + AR
034D7:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_DXAX(void)
            ;
            ; note:
            ;     load long data from PROM to DX:AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG:
            ; sfx_GETDILONG_DXAX:
            	; AX=		pm[P1++]
            	; DX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_BXCX(void)
            ;
            ; note:
            ;     load long data from PROM to BX:CX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG_BXCX:
            	; CX=		pm[P1++]
            	; BX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_DXAX(void)
            ; void sfx_GETSILONG_DXAX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to DX:AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG:
            ; sfx_GETSILONG_D:
            ; sfx_GETSILONG_DXAX:
            ; sfx_GETSILONG_DXAX_D:
            	; AX=		rm[I1++]
            	; DX=		rm[I1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_BXCX(void)
            ; void sfx_GETSILONG_BXCX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to BX:CX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG_BXCX:
            ; sfx_GETSILONG_BXCX_D:
            	; CX=		rm[I1++]
            	; BX=		rm[I1--]
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ANDLONG(void)
            ;
            ; note:
            ;     AND two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ANDLONG:
            	; AR=		CX
            	; AX=		AX & AR
            	; AR=		BX
            	; DX=		DX & AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ORLONG(void)
            ;
            ; note:
            ;     OR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ORLONG:
            	; AR=		CX
            	; AX=		AX | AR
            	; AR=		BX
            	; DX=		DX | AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XORLONG(void)
            ;
            ; note:
            ;     XOR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_XORLONG:
            	; AR=		CX
            	; AX=		AX ^ AR
            	; AR=		BX
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHL_AX_CX(void)
            ;
            ; note:
            ;     left shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHL_AX_CX:
            	; jmp		@shlac_label_1653
            ; @shlac_loop_1653:
            	; slz		AX, 1
            ; @shlac_label_1653:
            	; loop		@shlac_loop_1653
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SHLLONG(void)
            ;
            ; note:
            ;     left shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHLLONG:
            	; jmp		@shllong_label_1653
            ; @shllong_loop_1653:
            	; slz		AX, 1
            	; slc		DX, 1
            ; @shllong_label_1653:
            	; loop		@shllong_loop_1653
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX_CX(void)
            ;
            ; note:
            ;     unsigned right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX_CX:
            	; jmp		@shrac_label_1657
            ; @shrac_loop_1657:
            	; clr		C
            	; src		AX, 1
            ; @shrac_label_1657:
            	; loop		@shrac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX_CX(void)
            ;
            ; note:
            ;     signed right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX_CX:
            	; jmp		@sarac_label_1657
            ; @sarac_loop_1657:
            	; sra		AX, 1
            ; @sarac_label_1657:
            	; loop		@sarac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SARLONG(void)
            ;
            ; note:
            ;     signed right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SARLONG:
            	; jmp		@sarlong_label_1657
            ; @sarlong_loop_1657:
            	; sra		DX, 1
            	; src		AX, 1
            ; @sarlong_label_1657:
            	; loop		@sarlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHRLONG(void)
            ;
            ; note:
            ;     unsigned right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- ulong data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHRLONG:
            	; jmp		@shrlong_label_1657
            ; @shrlong_loop_1657:
            	; clr		C
            	; src		DX, 1
            	; src		AX, 1
            ; @shrlong_label_1657:
            	; loop		@shrlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX(void)
            ;
            ; note:
            ;     unsigned right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX:
            	; clr		C
            	; src		AX, 1
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX(void)
            ;
            ; note:
            ;     signed right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX:
            	; sra		AX, 1
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG(void)
            ; void sfx_STORSILONG_D(void)		; for function's parameter
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG:
            ; sfx_STORSILONG_D:
            	; rm[I1++]=	AX
            	; rm[I1--]=	DX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG_BXCX(void)
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG_BXCX:
            	; rm[I1++]=	CX
            	; rm[I1--]=	BX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG:
034D8:      	pm[P1++]=	AX
034D9:      	pm[P1--]=	DX
034DA:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG_BXCX:
034DB:      	pm[P1++]=	CX
034DC:      	pm[P1--]=	BX
034DD:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CX to BX
            ;
            ; in:
            ;     CX	- signed short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_CX:
            ; sfx_INT2ULONG_CX:
            	; BX=		0
            	; test		CX.b15
            	; if ZR jmp	@i2lcx_label_1756
            	; BX=		-1
            ; @i2lcx_label_1756:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_CX(void)
            ;
            ; note:
            ;     convert short unsigned value CX to long (BX:CX)
            ;
            ; in:
            ;     CX	- unsigned short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_CX:
            ; sfx_UINT2ULONG_CX:
            	; BX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CL to BX:CH
            ;
            ; in:
            ;     CX	- signed char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_CX:
034DE:      	BX=		0
034DF:      	CX.h=		0
034E0:      	test		CX.b7
034E1:      	if ZR jmp	@c2lcx_label_1800
034E2:      	CX.h=		0xFF
034E3:      	BX=		-1
            @c2lcx_label_1800:
034E4:      	rets
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_CX(void)
            ;
            ; note:
            ;     convert unsigned char value CL to long (BX:CX)
            ;
            ; in:
            ;     CL	- unsigned char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_CX:
            	; CX.h=		0
            	; BX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AX to DX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_AX:
            ; sfx_INT2ULONG_AX:
            	; DX=		0
            	; test		AX.b15
            	; if ZR jmp	@i2lax_label_1756
            	; DX=		-1
            ; @i2lax_label_1756:
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_AX(void)
            ;
            ; note:
            ;     convert short unsigned value AX to long (DX:AX)
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_AX:
            ; sfx_UINT2ULONG_AX:
            	; DX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AL to DX:AH
            ;
            ; in:
            ;     AX	- signed char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_AX:
034E5:      	DX=		0
034E6:      	AX.h=		0
034E7:      	test		AX.b7
034E8:      	if ZR jmp	@c2lax_label_1800
034E9:      	AX.h=		0xFF
034EA:      	DX=		-1
            @c2lax_label_1800:
034EB:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_AX(void)
            ;
            ; note:
            ;     convert unsigned char value AL to long (DX:AX)
            ;
            ; in:
            ;     AL	- unsigned char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_AX:
            	; AX.h=		0
            	; DX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CALL_BY_AX(void)
            ;
            ; note:
            ;     call sub routine in AX (address)
            ;
            ; in:
            ;     AX	- sub routine address
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_CALL_BY_AX:
            	; AR=		AX
            	; P1=		AR
            	; P1.hh=		0
            	; fjmp		pm[P1]
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHG_AX_CX(void)
            ;
            ; note:
            ;     exchange AX CX value
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; result:
            ;     AX <-> CX
            ;
            ; --------------------------------------------
            ; sfx_XCHG_AX_CX:
            	; push		AX
            	; push		CX
            	; pop		AX
            	; pop		CX
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHGLONG(void)
            ;
            ; note:
            ;     exchange DX:AX BX:CX value
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; result:
            ;     DX:AX <-> BX:CX
            ;
            ; --------------------------------------------
            sfx_XCHGLONG:
034EC:      	push		AX
034ED:      	push		CX
034EE:      	pop		AX
034EF:      	pop		CX
034F0:      	push		DX
034F1:      	push		BX
034F2:      	pop		DX
034F3:      	pop		BX
034F4:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEG_AX(void)
            ;
            ; note:
            ;     negative AX
            ;
            ; in:
            ;     AX	- operator 1
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEG_AX:
            	; AR=		0
            	; AX=		AR - AX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEGLONG(void)
            ;
            ; note:
            ;     negative DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEGLONG:
            	; AR=		0
            	; AX=		AR - AX
            	; DX=		AR - DX + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOT_AX(void)
            ;
            ; note:
            ;     not AX
            ;
            ; in:
            ;     AX	- operator
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOT_AX:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOTLONG(void)
            ;
            ; note:
            ;     not DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOTLONG:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOT_AX(void)
            ;
            ; note:
            ;     logical NOT
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_LOGNOT_AX:
            	;; x86 code
            	;;   neg AX
            	;;   sbb AX,AX
            	;;   inc AX
            	; AR=		0
            	; AR=		AR - AX
            	; AX=		AR
            	; AX=		AR - AX + C - 1
            	; AX++
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOTLONG(void)
            ;
            ; note:
            ;     logical NOT (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            sfx_LOGNOTLONG:
            	; x86 code
            	;   neg AX
            	;   sbb AX,AX
            	;   inc AX
034F5:      	AR=		DX
034F6:      	DX=		0
034F7:      	AR=		AR | AX
034F8:      	AX=		1
034F9:      	if ZR jmp	@longnotl_label_1120
034FA:      	AX=		0
            @longnotl_label_1120:
034FB:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOL_AX(void)
            ;
            ; note:
            ;     logical BOOL
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOL_AX:
            	;; x86 code
            	;;   neg ax
            	;;   sbb ax,ax
            	;;   neg ax
            	; AR=		AX
            	; AX=		0
            	; if ZR jmp	@boolax_label_1758
            	; AX=		1
            ; @boolax_label_1758:
            	; rets
            	
            	; AR=		-1
            	; AR=		AR + AX
            	; AX=		0
            	; AX += C
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOLLONG(void)
            ;
            ; note:
            ;     logical BOOL (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOLLONG:
            	; AR=		DX
            	; DX=		0
            	; AR=		AR | AX
            	; AX=		0
            	; if ZR jmp	@boollong_label_1801
            	; AX=		1
            ; @boollong_label_1801:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INITSISTOR(void)
            ;
            ; note:
            ;     for used in global/local variable initial
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     I1 + 1
            ;
            ; --------------------------------------------
            ; sfx_INITSISTOR:
            	; rm[I1++]=	AX
            	; rets
            
            ; --------------------------------------------
            
            ; sfx_INITSISTORLONG:
            	; rm[I1++]=	AX
            	; rm[I1++]=	DX
            	; rets
            
            
            ; ~~ condition assistant functions ~~
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; JNE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            sfx_CMP_AX_CX_U_JNE:
034FC:      	DX=		0
034FD:      	BX=		0
            sfx_CMPLONG_JNE:
034FE:      	AR=		CX
034FF:      	AX=		AX - AR
03500:      	AR=		BX
03501:      	AR=		DX - AR + C - 1
03502:      	AR=		AR | AX
03503:      	if EQ jmp	@sfx_cl_jne_f
03504:      	set		Z		; true
03505:      	rets
            @sfx_cl_jne_f:
03506:      	clr		Z		; false
03507:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JNE:
03508:      	DX=		0
03509:      	BX=		0
            sfx_CMPLONG_BCDA_JNE:
0350A:      	AR=		AX
0350B:      	CX=		CX - AR
0350C:      	AR=		DX
0350D:      	AR=		BX - AR + C - 1
0350E:      	AR=		AR | CX
0350F:      	if EQ jmp	@sfx_clbcda_jne_f
03510:      	set		Z		; true
03511:      	rets
            @sfx_clbcda_jne_f:
03512:      	clr		Z		; false
03513:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JNE:
03514:      	AR=		CX
03515:      	SF=		AX - AR
03516:      	if EQ jmp	@sfx_ac_jne_f
03517:      	set		Z
03518:      	rets
            @sfx_ac_jne_f:
03519:      	clr		Z
0351A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JNE:
0351B:      	AR=		AX
0351C:      	SF=		CX - AR
0351D:      	if EQ jmp	@sfx_ca_jne_f
0351E:      	set		Z
0351F:      	rets
            @sfx_ca_jne_f:
03520:      	clr		Z
03521:      	rets
            
            
            
            ; JE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            
            
            sfx_CMP_AX_CX_U_JE:
03522:      	DX=		0
03523:      	BX=		0
            sfx_CMPLONG_JE:
03524:      	AR=		CX
03525:      	AX=		AX - AR
03526:      	AR=		BX
03527:      	AR=		DX - AR + C - 1
03528:      	AR=		AR | AX
03529:      	if NE jmp	@sfx_cl_jz_f
0352A:      	set		Z		; true
0352B:      	rets
            @sfx_cl_jz_f:
0352C:      	clr		Z		; false
0352D:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JE:
0352E:      	DX=		0
0352F:      	BX=		0
            sfx_CMPLONG_BCDA_JE:
03530:      	AR=		AX
03531:      	CX=		CX - AR
03532:      	AR=		DX
03533:      	AR=		BX - AR + C - 1
03534:      	AR=		AR | CX
03535:      	if NE jmp	@sfx_clbcda_jz_f
03536:      	set		Z		; true
03537:      	rets
            @sfx_clbcda_jz_f:
03538:      	clr		Z		; false
03539:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JE:
0353A:      	AR=		CX
0353B:      	SF=		AX - AR
0353C:      	if NE jmp	@sfx_ac_je_f
0353D:      	set		Z
0353E:      	rets
            @sfx_ac_je_f:
0353F:      	clr		Z
03540:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JE:
03541:      	AR=		AX
03542:      	SF=		CX - AR
03543:      	if NE jmp	@sfx_ca_je_f
03544:      	set		Z
03545:      	rets
            @sfx_ca_je_f:
03546:      	clr		Z
03547:      	rets
            
            
            
            ; JG group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; A - above (unsigned)
            ; G - greater (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JA:
            sfx_CMP_AX_CX_JA:
03548:      	DX=		0
03549:      	BX=		0
            sfx_CMPLONG_JG:
0354A:      	AR=		CX
0354B:      	AX=		AX - AR
0354C:      	AR=		BX
0354D:      	AR=		DX - AR + C - 1
0354E:      	if AN jmp	@sfx_cl_jg_f
            
            	; exclude EQU condition
0354F:      	AR=		AR | AX
03550:      	if ZR jmp	@sfx_cl_jg_f
            
03551:      	set		Z		; true
03552:      	rets
            @sfx_cl_jg_f:
03553:      	clr		Z		; false
03554:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JA:
03555:      	AR=		CX
03556:      	AX=		AX - AR
03557:      	AR=		BX
03558:      	DX=		DX - AR + C - 1
03559:      	AR=		0
0355A:      	AR=		AR - 0 + C - 1
0355B:      	if AN jmp	@sfx_cl_jg_f
            
0355C:      	AR=		AR | DX		; exclude EQU condition
0355D:      	AR=		AR | AX
0355E:      	if ZR jmp	@sfx_cl_jg_f
            
0355F:      	set		Z		; true
03560:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JA:
            sfx_CMP_CX_AX_JA:
03561:      	DX=		0
03562:      	BX=		0
            sfx_CMPLONG_BCDA_JG:
03563:      	AR=		AX
03564:      	CX=		CX - AR
03565:      	AR=		DX
03566:      	AR=		BX - AR + C - 1
03567:      	if AN jmp	@sfx_clbcda_jg_f
            
03568:      	AR=		AR | CX		; exclude EQU condition
03569:      	if ZR jmp	@sfx_clbcda_jg_f
            
0356A:      	set		Z		; true
0356B:      	rets
            @sfx_clbcda_jg_f:
0356C:      	clr		Z		; false
0356D:      	rets
            
            ; ~~---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JA:
0356E:      	AR=		AX
0356F:      	CX=		CX - AR
03570:      	AR=		DX
03571:      	BX=		BX - AR + C - 1
03572:      	AR=		0
03573:      	AR=		AR - 0 + C - 1
03574:      	if AN jmp	@sfx_clbcda_jg_f
            
03575:      	AR=		AR | BX		; exclude EQU condition
03576:      	AR=		AR | CX
03577:      	if ZR jmp	@sfx_clbcda_jg_f
            
03578:      	set		Z		; true
03579:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JG:
0357A:      	AR=		CX
0357B:      	SF=		AX - AR
0357C:      	if LE jmp	@sfx_cmp_ac_jg_f
0357D:      	set		Z
0357E:      	rets
            @sfx_cmp_ac_jg_f:
0357F:      	clr		Z
03580:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JG:
03581:      	AR=		AX
03582:      	SF=		CX - AR
03583:      	if LE jmp	@sfx_cmp_ca_jg_f
03584:      	set		Z
03585:      	rets
            @sfx_cmp_ca_jg_f:
03586:      	clr		Z
03587:      	rets
            
            
            ; JGE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JAE:
            sfx_CMP_AX_CX_JAE:
03588:      	DX=		0
03589:      	BX=		0
            sfx_CMPLONG_JGE:
0358A:      	AR=		CX
0358B:      	AX=		AX - AR
0358C:      	AR=		BX
0358D:      	DX=		DX - AR + C - 1
0358E:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
            
0358F:      	set		Z		; true
03590:      	rets
            @sfx_cl_jge_f:
03591:      	clr		Z		; false
03592:      	rets
            
            ; ~~-----------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JAE:
03593:      	AR=		CX
03594:      	AX=		AX - AR
03595:      	AR=		BX
03596:      	DX=		DX - AR + C - 1
03597:      	AR=		0
03598:      	AR=		AR - 0 + C - 1
03599:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
0359A:      	set		Z		; true
0359B:      	rets
            
            ; ---------
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JAE:
            sfx_CMP_CX_AX_JAE:
0359C:      	DX=		0
0359D:      	BX=		0
            sfx_CMPLONG_BCDA_JGE:
0359E:      	AR=		AX
0359F:      	CX=		CX - AR
035A0:      	AR=		DX
035A1:      	BX=		BX - AR + C - 1
035A2:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
            
035A3:      	set		Z		; true
035A4:      	rets
            @sfx_clbcda_jge_f:
035A5:      	clr		Z		; false
035A6:      	rets
            
            ; ---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JAE:
035A7:      	AR=		AX
035A8:      	CX=		CX - AR
035A9:      	AR=		DX
035AA:      	BX=		BX - AR + C - 1
035AB:      	AR=		0
035AC:      	AR=		AR - 0 + C - 1
035AD:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
035AE:      	set		Z		; true
035AF:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JGE:
035B0:      	AR=		CX
035B1:      	SF=		AX - AR
035B2:      	if AN jmp	@sfx_cmp_ac_jge_f
035B3:      	set		Z
035B4:      	rets
            @sfx_cmp_ac_jge_f:
035B5:      	clr		Z
035B6:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JGE:
035B7:      	AR=		AX
035B8:      	SF=		CX - AR
035B9:      	if AN jmp	@sfx_cmp_ca_jge_f
035BA:      	set		Z
035BB:      	rets
            @sfx_cmp_ca_jge_f:
035BC:      	clr		Z
035BD:      	rets
            
            
            ; JL group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; B - below (unsigned)
            ; L - less (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JB:
            sfx_CMP_AX_CX_JB:
035BE:      	DX=		0
035BF:      	BX=		0
            sfx_CMPLONG_JL:
035C0:      	AR=		CX
035C1:      	AX=		AX - AR
035C2:      	AR=		BX
035C3:      	AR=		DX - AR + C - 1
035C4:      	if AN jmp	@sfx_cl_jl_chk
            
            @sfx_cl_jl_f:
035C5:      	clr		Z		; false
035C6:      	rets
            
            @sfx_cl_jl_chk:
035C7:      	AR=		AR | AX		; exclude EQU condition
035C8:      	if ZR jmp	@sfx_cl_jl_f
035C9:      	set		Z
035CA:      	rets
            
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JB:
035CB:      	AR=		CX
035CC:      	AX=		AX - AR
035CD:      	AR=		BX
035CE:      	DX=		DX - AR + C - 1
035CF:      	AR=		0
035D0:      	AR=		AR - 0 + C - 1
035D1:      	if AN jmp	@sfx_cl_jb_chk
            
            @sfx_cl_jb_f:
035D2:      	clr		Z		; false
035D3:      	rets
            
            @sfx_cl_jb_chk:
035D4:      	AR=		AR | DX
035D5:      	AR=		AR | AX		; exclude EQU condition
035D6:      	if ZR jmp	@sfx_cl_jb_f
035D7:      	set		Z
035D8:      	rets
            
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JB:
            sfx_CMP_CX_AX_JB:
035D9:      	DX=		0
035DA:      	BX=		0
            sfx_CMPLONG_BCDA_JL:
035DB:      	AR=		AX
035DC:      	CX=		CX - AR
035DD:      	AR=		DX
035DE:      	AR=		BX - AR + C - 1
035DF:      	if AN jmp	@sfx_clbcda_jl_chk
            
            @sfx_clbcda_jl_f:
035E0:      	clr		Z		; false
035E1:      	rets
            
            @sfx_clbcda_jl_chk:
035E2:      	AR=		AR | CX		; exclude EQU condition
035E3:      	if ZR jmp	@sfx_clbcda_jl_f
035E4:      	set		Z		; true
035E5:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JB:
035E6:      	AR=		AX
035E7:      	CX=		CX - AR
035E8:      	AR=		DX
035E9:      	BX=		BX - AR + C - 1
035EA:      	AR=		0
035EB:      	AR=		AR - 0 + C - 1
035EC:      	if AN jmp	@sfx_clbcda_jb_chk
            
            @sfx_clbcda_jb_f:
035ED:      	clr		Z		; false
035EE:      	rets
            
            @sfx_clbcda_jb_chk:
035EF:      	AR=		AR | CX
035F0:      	AR=		AR | BX
035F1:      	if ZR jmp	@sfx_clbcda_jb_f
035F2:      	set		Z		; true
035F3:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JL:
035F4:      	AR=		CX
035F5:      	SF=		AX - AR
035F6:      	if GE jmp	@sfx_cmp_ac_jl_f
035F7:      	set		Z
035F8:      	rets
            @sfx_cmp_ac_jl_f:
035F9:      	clr		Z
035FA:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JL:
035FB:      	AR=		AX
035FC:      	SF=		CX - AR
035FD:      	if GE jmp	@sfx_cmp_ca_jl_f
035FE:      	set		Z
035FF:      	rets
            @sfx_cmp_ca_jl_f:
03600:      	clr		Z
03601:      	rets
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JBE:
            sfx_CMP_AX_CX_JBE:
03602:      	DX=		0
03603:      	BX=		0
            sfx_CMPLONG_JLE:
03604:      	AR=		CX
03605:      	AX=		AX - AR
03606:      	AR=		BX
03607:      	AR=		DX - AR + C - 1
03608:      	if AN jmp	@sfx_cl_jle_t
            
03609:      	AR=		AR | AX		; include EQU condition
0360A:      	if ZR jmp	@sfx_cl_jle_t
            
0360B:      	clr		Z		; false
0360C:      	rets
            @sfx_cl_jle_t:
0360D:      	set		Z		; true
0360E:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JBE:
0360F:      	AR=		CX
03610:      	AX=		AX - AR
03611:      	AR=		BX
03612:      	DX=		DX - AR + C - 1
03613:      	AR=		0
03614:      	AR=		AR - 0 + C - 1
03615:      	if AN jmp	@sfx_cl_jle_t
            
03616:      	AR=		AR | DX
03617:      	AR=		AR | AX
03618:      	if ZR jmp	@sfx_cl_jle_t
            
03619:      	clr		Z		; false
0361A:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JBE:
            sfx_CMP_CX_AX_JBE:
0361B:      	DX=		0
0361C:      	BX=		0
            sfx_CMPLONG_BCDA_JLE:
0361D:      	AR=		AX
0361E:      	CX=		CX - AR
0361F:      	AR=		DX
03620:      	AR=		BX - AR + C - 1
03621:      	if AN jmp	@sfx_clbcda_jle_t
            
03622:      	AR=		AR | CX		; include EQU condition
03623:      	if ZR jmp	@sfx_clbcda_jle_t
            
03624:      	clr		Z		; false
03625:      	rets
            @sfx_clbcda_jle_t:
03626:      	set		Z		; true
03627:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JBE:
03628:      	AR=		AX
03629:      	CX=		CX - AR
0362A:      	AR=		DX
0362B:      	BX=		BX - AR + C - 1
0362C:      	AR=		0
0362D:      	AR=		AR - 0 + C - 1
0362E:      	if AN jmp	@sfx_clbcda_jle_t
            
0362F:      	AR=		AR | BX
03630:      	AR=		AR | CX
03631:      	if ZR jmp	@sfx_clbcda_jle_t
            
03632:      	clr		Z		; false
03633:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JLE:
03634:      	AR=		CX
03635:      	SF=		AX - AR
03636:      	if LE jmp	@sfx_cmp_ac_jl_t
03637:      	clr		Z
03638:      	rets
            @sfx_cmp_ac_jl_t:
03639:      	set		Z
0363A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JLE:
0363B:      	AR=		AX
0363C:      	SF=		CX - AR
0363D:      	if LE jmp	@sfx_cmp_ca_jl_t
0363E:      	clr		Z
0363F:      	rets
            @sfx_cmp_ca_jl_t:
03640:      	set		Z
03641:      	rets
            
            
            ; ~!~ bit-field support
            
            @sfx_ortable_0:
03642:      	DW 0xFFFE
            @sfx_ortable_1:
03643:      	DW 0xFFFC
            @sfx_ortable_2:
03644:      	DW 0xFFF8
            @sfx_ortable_3:
03645:      	DW 0xFFF0
            @sfx_ortable_4:
03646:      	DW 0xFFE0
            @sfx_ortable_5:
03647:      	DW 0xFFC0
            @sfx_ortable_6:
03648:      	DW 0xFF80
            @sfx_ortable_7:
03649:      	DW 0xFF00
            @sfx_ortable_8:
0364A:      	DW 0xFE00
            @sfx_ortable_9:
0364B:      	DW 0xFC00
            @sfx_ortable_10:
0364C:      	DW 0xF800
            @sfx_ortable_11:
0364D:      	DW 0xF000
            @sfx_ortable_12:
0364E:      	DW 0xE000
            @sfx_ortable_13:
0364F:      	DW 0xC000
            @sfx_ortable_14:
03650:      	DW 0x8000
            
            ; ~!~
            
            @sfx_orhigh:
03651:      	AR=		pm[P1]
03652:      	DX=		DX | AR
03653:      	rets
            
            @sfx_orhigh_dx:
03654:      	DX=		-1
            @sfx_orlow:
03655:      	AR=		pm[P1]
03656:      	AX=		AX | AR
            @sfx_sextw_rets:
03657:      	rets
            
            ; ~!~ signed short
            
            sfx_SignExtW0:
03658:      	P1=		#@sfx_ortable_0
0365B:      	test		AX.b0
0365C:      	if ZR jmp	@sfx_sextw_rets
0365D:      	jmp		@sfx_orlow
            
            sfx_SignExtW1:
0365E:      	P1=		#@sfx_ortable_1
03661:      	test		AX.b1
03662:      	if ZR jmp	@sfx_sextw_rets
03663:      	jmp		@sfx_orlow
            
            sfx_SignExtW2:
03664:      	P1=		#@sfx_ortable_2
03667:      	test		AX.b2
03668:      	if ZR jmp	@sfx_sextw_rets
03669:      	jmp		@sfx_orlow
            
            sfx_SignExtW3:
0366A:      	P1=		#@sfx_ortable_3
0366D:      	test		AX.b3
0366E:      	if ZR jmp	@sfx_sextw_rets
0366F:      	jmp		@sfx_orlow
            
            sfx_SignExtW4:
03670:      	P1=		#@sfx_ortable_4
03673:      	test		AX.b4
03674:      	if ZR jmp	@sfx_sextw_rets
03675:      	jmp		@sfx_orlow
            
            sfx_SignExtW5:
03676:      	P1=		#@sfx_ortable_5
03679:      	test		AX.b5
0367A:      	if ZR jmp	@sfx_sextw_rets
0367B:      	jmp		@sfx_orlow
            
            sfx_SignExtW6:
0367C:      	P1=		#@sfx_ortable_6
0367F:      	test		AX.b6
03680:      	if ZR jmp	@sfx_sextw_rets
03681:      	jmp		@sfx_orlow
            
            sfx_SignExtW7:
03682:      	P1=		#@sfx_ortable_7
03685:      	test		AX.b7
03686:      	if ZR jmp	@sfx_sextw_rets
03687:      	jmp		@sfx_orlow
            
            sfx_SignExtW8:
03688:      	P1=		#@sfx_ortable_8
0368B:      	test		AX.b8
0368C:      	if ZR jmp	@sfx_sextw_rets
0368D:      	jmp		@sfx_orlow
            
            sfx_SignExtW9:
0368E:      	P1=		#@sfx_ortable_9
03691:      	test		AX.b9
03692:      	if ZR jmp	@sfx_sextw_rets
03693:      	jmp		@sfx_orlow
            
            sfx_SignExtW10:
03694:      	P1=		#@sfx_ortable_10
03697:      	test		AX.b10
03698:      	if ZR jmp	@sfx_sextw_rets
03699:      	jmp		@sfx_orlow
            
            sfx_SignExtW11:
0369A:      	P1=		#@sfx_ortable_11
0369D:      	test		AX.b11
0369E:      	if ZR jmp	@sfx_sextw_rets
0369F:      	jmp		@sfx_orlow
            
            sfx_SignExtW12:
036A0:      	P1=		#@sfx_ortable_12
036A3:      	test		AX.b12
036A4:      	if ZR jmp	@sfx_sextw_rets
036A5:      	jmp		@sfx_orlow
            
            sfx_SignExtW13:
036A6:      	P1=		#@sfx_ortable_13
036A9:      	test		AX.b13
036AA:      	if ZR jmp	@sfx_sextw_rets
036AB:      	jmp		@sfx_orlow
            
            sfx_SignExtW14:
036AC:      	P1=		#@sfx_ortable_14
036AF:      	test		AX.b14
036B0:      	if ZR jmp	@sfx_sextw_rets
036B1:      	jmp		@sfx_orlow
            
            ; ~!~ signed long
            
            sfx_SignExtL0:
036B2:      	P1=		#@sfx_ortable_0
036B5:      	test		AX.b0
036B6:      	if ZR jmp	@sfx_sextw_rets
036B7:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL1:
036B8:      	P1=		#@sfx_ortable_1
036BB:      	test		AX.b1
036BC:      	if ZR jmp	@sfx_sextw_rets
036BD:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL2:
036BE:      	P1=		#@sfx_ortable_2
036C1:      	test		AX.b2
036C2:      	if ZR jmp	@sfx_sextw_rets
036C3:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL3:
036C4:      	P1=		#@sfx_ortable_3
036C7:      	test		AX.b3
036C8:      	if ZR jmp	@sfx_sextw_rets
036C9:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL4:
036CA:      	P1=		#@sfx_ortable_4
036CD:      	test		AX.b4
036CE:      	if ZR jmp	@sfx_sextw_rets
036CF:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL5:
036D0:      	P1=		#@sfx_ortable_5
036D3:      	test		AX.b5
036D4:      	if ZR jmp	@sfx_sextw_rets
036D5:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL6:
036D6:      	P1=		#@sfx_ortable_6
036D9:      	test		AX.b6
036DA:      	if ZR jmp	@sfx_sextw_rets
036DB:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL7:
036DC:      	P1=		#@sfx_ortable_7
036DF:      	test		AX.b7
036E0:      	if ZR jmp	@sfx_sextw_rets
036E1:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL8:
036E2:      	P1=		#@sfx_ortable_8
036E5:      	test		AX.b8
036E6:      	if ZR jmp	@sfx_sextw_rets
036E7:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL9:
036E8:      	P1=		#@sfx_ortable_9
036EB:      	test		AX.b9
036EC:      	if ZR jmp	@sfx_sextw_rets
036ED:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL10:
036EE:      	P1=		#@sfx_ortable_10
036F1:      	test		AX.b10
036F2:      	if ZR jmp	@sfx_sextw_rets
036F3:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL11:
036F4:      	P1=		#@sfx_ortable_11
036F7:      	test		AX.b11
036F8:      	if ZR jmp	@sfx_sextw_rets
036F9:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL12:
036FA:      	P1=		#@sfx_ortable_12
036FD:      	test		AX.b12
036FE:      	if ZR jmp	@sfx_sextw_rets
036FF:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL13:
03700:      	P1=		#@sfx_ortable_13
03703:      	test		AX.b13
03704:      	if ZR jmp	@sfx_sextw_rets
03705:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL14:
03706:      	P1=		#@sfx_ortable_14
03709:      	test		AX.b14
0370A:      	if ZR jmp	@sfx_sextw_rets
0370B:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL15:
0370C:      	test		AX.b15
0370D:      	if ZR jmp	@sfx_sextw_rets
0370E:      	DX=		-1
0370F:      	rets
            
            sfx_SignExtL16:
03710:      	P1=		#@sfx_ortable_0
03713:      	test		DX.b0
03714:      	if ZR jmp	@sfx_sextw_rets
03715:      	jmp		@sfx_orhigh
            
            sfx_SignExtL17:
03716:      	P1=		#@sfx_ortable_1
03719:      	test		DX.b1
0371A:      	if ZR jmp	@sfx_sextw_rets
0371B:      	jmp		@sfx_orhigh
            
            sfx_SignExtL18:
0371C:      	P1=		#@sfx_ortable_2
0371F:      	test		DX.b2
03720:      	if ZR jmp	@sfx_sextw_rets
03721:      	jmp		@sfx_orhigh
            
            sfx_SignExtL19:
03722:      	P1=		#@sfx_ortable_3
03725:      	test		DX.b3
03726:      	if ZR jmp	@sfx_sextw_rets
03727:      	jmp		@sfx_orhigh
            
            sfx_SignExtL20:
03728:      	P1=		#@sfx_ortable_4
0372B:      	test		DX.b4
0372C:      	if ZR jmp	@sfx_sextw_rets
0372D:      	jmp		@sfx_orhigh
            
            sfx_SignExtL21:
0372E:      	P1=		#@sfx_ortable_5
03731:      	test		DX.b5
03732:      	if ZR jmp	@sfx_sextw_rets
03733:      	jmp		@sfx_orhigh
            
            sfx_SignExtL22:
03734:      	P1=		#@sfx_ortable_6
03737:      	test		DX.b6
03738:      	if ZR jmp	@sfx_sextw_rets
03739:      	jmp		@sfx_orhigh
            
            sfx_SignExtL23:
0373A:      	P1=		#@sfx_ortable_7
0373D:      	test		DX.b7
0373E:      	if ZR jmp	@sfx_sextw_rets
0373F:      	jmp		@sfx_orhigh
            
            sfx_SignExtL24:
03740:      	P1=		#@sfx_ortable_8
03743:      	test		DX.b8
03744:      	if ZR jmp	@sfx_sextw_rets
03745:      	jmp		@sfx_orhigh
            
            sfx_SignExtL25:
03746:      	P1=		#@sfx_ortable_9
03749:      	test		DX.b9
0374A:      	if ZR jmp	@sfx_sextw_rets
0374B:      	jmp		@sfx_orhigh
            
            sfx_SignExtL26:
0374C:      	P1=		#@sfx_ortable_10
0374F:      	test		DX.b10
03750:      	if ZR jmp	@sfx_sextw_rets
03751:      	jmp		@sfx_orhigh
            
            sfx_SignExtL27:
03752:      	P1=		#@sfx_ortable_11
03755:      	test		DX.b11
03756:      	if ZR jmp	@sfx_sextw_rets
03757:      	jmp		@sfx_orhigh
            
            sfx_SignExtL28:
03758:      	P1=		#@sfx_ortable_12
0375B:      	test		DX.b12
0375C:      	if ZR jmp	@sfx_sextw_rets
0375D:      	jmp		@sfx_orhigh
            
            sfx_SignExtL29:
0375E:      	P1=		#@sfx_ortable_13
03761:      	test		DX.b13
03762:      	if ZR jmp	@sfx_sextw_rets
03763:      	jmp		@sfx_orhigh
            
            sfx_SignExtL30:
03764:      	P1=		#@sfx_ortable_14
03767:      	test		DX.b14
03768:      	if ZR jmp	@sfx_sextw_rets
03769:      	jmp		@sfx_orhigh
            
            
            ; ~.~--------------------
            ; I1, AX
            
            sfx_REPMOV_SS:
            @sfx_repmov_ss_loop_1804:
0376A:      	push		I1
0376B:      	AR=		AX
0376C:      	I1=		AR
0376D:      	AR=		rm[I1]
0376E:      	pop		I1
0376F:      	rm[I1++]=	AR
03770:      	AX++
03771:      	loop		@sfx_repmov_ss_loop_1804
03772:      	rets
            
            ; ~~
            
            sfx_REPMOV_SR:
03773:      	AR=		AX
03774:      	P1=		AR
            @sfx_repmov_sr_loop_1804:
03775:      	rm[I1++]=	pm[P1++]
03776:      	loop		@sfx_repmov_sr_loop_1804
03777:      	rets
            
            
            ; ~~
            
            sfx_REPMOV_RS:
03778:      	AR=		AX
03779:      	I1=		AR
            @sfx_repmov_rs_loop_1804:
0377A:      	AR=		rm[I1++]
0377B:      	pm[P1++]=	AR
0377C:      	loop		@sfx_repmov_rs_loop_1804
0377D:      	rets
            
            ; ~~
            
            sfx_REPMOV_RR:
            @sfx_repmov_rr_loop_1804:
0377E:      	push		P1
0377F:      	AR=		AX
03780:      	P1=		AR
03781:      	AR=		pm[P1]
03782:      	pop		P1
03783:      	pm[P1++]=	AR
03784:      	AX++
03785:      	loop		@sfx_repmov_rr_loop_1804
03786:      	rets
            
            ; ~~
            
            ; sfx_CHECKZERO:
            	; AR=		AX
            	; rets
            
            ; ~~
            
            ; sfx_CHECKZEROLONG:
            	; AR=		AX
            	; AR=		AR | DX
            	; rets
            
            ; ~~
            
            
            #ifdef PRAM_BANK
            
            ;  ~~ simple link list for PRAM allocate
            
            ;  +---------+---------+
            ;  | field 0 | field 1 |
            ;  +---------+---------+
            ;  |   PROM  |  next   |
            ;  +---------+---------+
            
            sfx_DynFastCallInit:
            ; {
            	P1.hh=		PRAM_BANK
            	P1=		PRAM_OFFSET
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	rets
            ; }
            
            
            ; ~~ for C / ASM progam compatible used
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            ; bool sfx_DynFindPrg(PRGADR)
            ;
            ; in:
            ;    P1		- function start address
            ;
            ; out:
            ;     Z		- found, P0 = program entry address at PRAM
            ;     NZ	- not found, P0 = free space (list) start at PRAM
            ; ----------------------------------------------------------------
            
            sfx_DynFindPrg:
            ; {
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfp_loop_1320:
            	AR=		pm[P0++]	; program address
            	if ZR jmp	@sfxdfp_label_1321
            	SF=		AR - P1
            	if NE jmp	@sfxdfp_label_1323
            	
            	P0++
            	set		Z
            	rets
            
            @sfxdfp_label_1323:
            	AR=		pm[P0]		; next
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfp_label_1655
            	P0=		AR
            	jmp		@sfxdfp_loop_1320
            
            @sfxdfp_label_1321:
            	P0--				; list
            	clr		Z
            	rets
            	
            @sfxdfp_label_1655:
            ; ~~ list broken...
            	P0=		PRAM_OFFSET
            	clr		Z
            	rets
            ; }
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free link start
            ; AX = function end address
            
            
            sfx_DynBooking:
            ; {
            	; check if PRG to big to fit in PRAM
            
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	; ~~ can not cache PRG (total PRAM_SIZE) ??
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdb_label_1345
            
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdb_label_1349
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdb_label_1349:
            	; create link list
            
            	AR=		P1
            	pm[P0++]=	AR		; PRG
            	AR=		P0
            	AR=		AR - 3		; remove 1 list and 1 next
            	CX=		CX + AR
            	pm[P0++]=	CX		; next
            
            	push		P1
            	P1=		#@sfxdfc_label_1840
            	AR=		pm[P1]		; inst -> P1.hh = 0
            	pm[P0++]=	AR
            	AR=		CX
            	P1=		AR
            	P1.hh=		PRAM_BANK
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	pop		P1
            	
            	set		Z
            	rets
            
            @sfxdb_label_1345:
            	P0.hh=		0
            	clr		Z
            	rets
            ; }
            
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free PRG entry
            ; AX = function end address
            
            sfx_DynCache:
            	push		P0
            	AR=		AX
            	AR=		AR - P1
            	CX=		AR
            	jmp		@sfxdynch_label_1650
            @sfxdynch_loop_1650:
            	AR=		pm[P1++]
            	pm[P0++]=	AR
            @sfxdynch_label_1650:
            	loop		@sfxdynch_loop_1650
            	pop		P0
            	P0--
            	rets
            
            ; --------------------------------------------------------
            
            
            ; ~~ for C
            
            ; P1 = function start address
            ; AX = function end address
            
            sfx_DynFastCall:
            ; {
            	; look up function entry by prom address (P1)
            
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfc_label_1759:
            	AR=		pm[P0++]		; next
            	if ZR jmp	@sfxdfc_label_1758
            	SF=		AR - P1
            	if EQ jmp	@sfxdfc_label_1722
            	AR=		pm[P0]
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfc_label_2035
            	P0=		AR
            	jmp		@sfxdfc_label_1759
            
            @sfxdfc_label_2035:
            	P0=		PRAM_OFFSET + 1
            
            ; -----
            
            @sfxdfc_label_1758:
            
            	; look for remain free space
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	P0--
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdfc_label_1840
            	
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdfc_label_1817
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdfc_label_1817:
            
            	; copy program to pram
            
            	; ~~ PROM field
            		AR=		P1
            		pm[P0++]=	AR
            	; ~~ next field
            		AR=		P0
            		AR=		AR - 3		; remove 1 list and 1 next
            		CX=		CX + AR
            		pm[P0++]=	CX		; next
            
            	; ~~ booking
            		push		P1
            		P1=		#@sfxdfc_label_1840
            		AR=		pm[P1]		; inst -> P1.hh = 0
            		pm[P0++]=	AR
            		AR=		CX
            		P1=		AR
            		P1.hh=		PRAM_BANK
            		AR=		0
            		pm[P1++]=	AR
            		pm[P1]=		AR
            		P1.hh=		0
            		pop		P1
            
            	; copy instruction  "P0.hh = 0"
            		push		P0		; save exec address
            	@sfxdfc_loop_1829:
            		AR=		pm[P1++]
            		pm[P0++]=	AR
            		AR=		P0
            		SF=		AR - CX
            		if AN jmp	@sfxdfc_loop_1829
            		pop		P0
            		P0--
            		fjmp		pm[P0]
            
            @sfxdfc_label_1722:
            	P0++			; program entry
            	fjmp		pm[P0]
            
            @sfxdfc_label_1840:
            	P0.hh=		0
            
            @sfxdfc_label_1733:
            	; free space too small, direct run
            	fjmp		pm[P1]
            ; }
            
            
            
            
            #endif
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> End=========================
            
            
            
            // .code segment
            
            WAKEUP_PROC:
03787:      	PCH=	SYS_PROG_ENTRY
03788:      	ljmp	SYS_PROG_ENTRY
            
            IntVectTable:
03789:      	DW #EMPTY_INTENTRY
0378A:      	DW #EMPTY_INTENTRY
0378B:      	DW #_RTC24B6AA79
0378C:      	DW #EMPTY_INTENTRY
0378D:      	DW #EMPTY_INTENTRY
0378E:      	DW #Pwm_process
            
            // .code ends
            ;;FDSP-IDE V2.53
            _SYSTEM_MAIN_PROGRAM_END_ADDRESS: 
