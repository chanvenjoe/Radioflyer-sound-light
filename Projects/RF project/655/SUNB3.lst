            ;=========================Include <OPTION.INC> Start=========================
            //--------------------------------------------------------------------------------------------------
            // TRITAN FDSP-IDE Option define file.
            // WARNING! All changes made in this file will be lost when recompiling.
            //--------------------------------------------------------------------------------------------------
            // Part number    : TRSF16127A
            // Option version : 2.2
            // Base Information--------------------------------------------------------------------------------
            #define       _OPT_TRSF16127A_                
            #define       _OPT_PROMSize_                0x20000   //PROM Size
            #define       _OPT_SRAMSize_                3072      //SRAM Size
            // I/O Configuration--------------------------------------------------------------------------------
            #define       _OPT_EXTReset_EN_             0         //EXT Reset Enable,0:Disable,1:Enable
            #define       _OPT_EXTINT1_EN_              0         //EXTINT1_EN,0:Disable,1:Enable
            #define       _OPT_EXTINT0_EN_              0         //EXTINT0_EN,0:Disable,1:Enable
            #define       _OPT_SpreadSpectrum_          0         //Spread Spectrum Enable,0:Disable,1:Enable
            #define       _OPT_EXTResetPin_             0         //EXT Reset Pin Select,0:PB3,1:PC3
            #define       _OPT_EXTINT1_INV_             0         //EXTINT1_INV,0:Disable,1:Enable
            #define       _OPT_EXTINT0_INV_             0         //EXTINT0_INV,0:Disable,1:Enable
            // Memory Configuration-----------------------------------------------------------------------------
            #define       _OPT_PRAMBank_                0         //PRAM Bank
            #define       _OPT_PRAMSize_                0         //PRAM Size(Words)
            #define       _OPT_WriteSegmentProtection_  0x0FFFF   //Write Segment Protection(0000H~ )
            // System Control Setup-----------------------------------------------------------------------------
            #define       _OPT_Bank0Speed_              11        //Bank0 Speed(MHz)
            #define       _OPT_RTCINT_                  1         //RTC interrupt,0:Disable,1:Enable
            #define       _OPT_RTCinHalt_               0         //RTC LP32K in Halt Mode,0:Disable,1:Enable
            #define       _OPT_LVR_                     2200      //LVR(mv)
            #define       _OPT_WatchDog_                256       //Watch dog(ms)
            #define       _OPT_ICEEnable_               1         //ICE Disable/Enable,0:Disable,1:Enable
            // Audio Configuration------------------------------------------------------------------------------
            #define       _OPT_AudioSamplingRate_       32        //Audio Sampling Rate(KHz)
            #define       _OPT_PWMBit_                  16        //PWM Bit
            #define       _OPT_DACFIFO_                 1         //DAC FIFO,0:Disable,1:Enable
            //--------------------------------------------------------------------------------------------------
            ;=========================Include <OPTION.INC> End=========================
            
            #define DSP_SRAM_SIZE		3072
            #define DSP_VECT_SUPPORT		6
            #define _PROJECT_CONFIG_FILE_		
            #define _PWM_32K_		
            #define MD2_USE_PROM		
            #define MD2_WORD_ADR		
            #define RAMBANK 		 15
            #define MD2_PRAM_START_BASE 		 0x0000
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> Start=========================
            
            ; =====================
            ;      COMMON I/O
            ; =====================
            
            #ifdef _MFDSP_
            
            ; {
            	STATUS          EQU             00H             ;R/W, BIT0: Zero.
            							;R/W, BIT1: Carry.
            							;R/W, BIT2: Overflow.
            							;R/W, BIT3: Negative.
            							;R/W, BIT7: Global Interrupt Enable.
            							;R/W, BIT[12:8]: SD_EN, TRA_EN, ADH_EN, SPIS_EN, SPIM_EN.
            							;R/W, BIT13: Interrupt Vector Table Access Enable.
            							;R/W, BIT14: Filter Buffer Available.
            							;R/W, BIT15: Parser Buffer Available.
            
            	INTENA          EQU             01H             ;R/W, Int Enable.
            	INTREQ          EQU             02H             ;R/W, Int Request.
            	IntVect         EQU             03H             ;R/W, Interrupt Table
            	IOC_PA          EQU             04H             ;R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB          EQU             05H             ;R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PCI         EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PC          EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA           EQU             07H             ;R/W, General input/output port.
            	PortB           EQU             08H             ;R/W, General input/output port.
            	PortCI          EQU             09H             ;R/W, General input/output port.
            	PortC           EQU             09H             ;R/W, General input/output port.
            	INTMASK         EQU             0AH             ;R/W, Int Mask.
            	SPIS_CTL        EQU             0BH             ;R/W, SPI slaver control register.
            	SPIS_DAT        EQU             0CH             ;R/W, SPI slaver data    register.
            	SPI_CTL         EQU             0DH             ;R/W, SPI master control register.
            	SPI_DAT         EQU             0EH             ;R/W, SPI master data    register.
            	SD_CTL          EQU             0FH             ;R/W, SD card interface control register.
            	SD_DAT          EQU             10H             ;R/W, SD card interface data.
            	SD_RSP          EQU             11H             ;R/W, SD card interface response register.
            	UART_CTL        EQU             12H
            	UART_DAT        EQU             13H
            	DPPWM           EQU             14H
            	//------------------------------------
            	PUPD_PA         EQU             15H             ;R/W, PortA  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	DACL            EQU             16H
            	DACR            EQU             17H
            	USB_CTL         EQU             18H
            	USB_DAT         EQU             19H
            	PUPD_PB         EQU             1AH             ;R/W, PortB  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	PUPD_PC         EQU             1BH             ;R/W, PortC  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	MISC            EQU             1CH
            	ClrWDT          EQU             1DH             ;W, Clear Watch-dog reset.
            	Real_T          EQU             1DH             ;R, System Real-Time Counter, base on 31.25us
            	IOP_IX          EQU             1EH             ;W, Programming IO Port index .
            	IOP_DAT         EQU             1FH             ;W, Programming IO Port Data .
            
            	//------------------------------------
            	// Virtual         Program IO Port
            	IOP_Timer1      EQU             00H
            	IOP_Timer2      EQU             01H
            	IOP_RTC32K      EQU             02H
            	IOP_PreScale    EQU             03H
            	IOP_FGREEN32K   EQU             04H
            	IOP_ODEN_PA     EQU             05H
            	IOP_ODEN_PB     EQU             06H
            	IOP_ODEN_PC     EQU             07H
            
            	IOP_TOUCH_CFG   EQU             08H
            	IOP_TOUCH_DAT   EQU             09H
            
            	IOP_CLK_CFG     EQU             0AH
            	IOP_CLK_DAT1    EQU             0BH
            	IOP_CLK_DAT2    EQU             0CH
            	IOP_CUR_PA      EQU             0DH
            	IOP_CUR_PB      EQU             0EH
            	IOP_CUR_PC      EQU             0FH
            
            	//------------------------------------
            	// IO[0x40-0x7F]
            	ADH_CFG0        EQU             40H
            	ADH_CFG1        EQU             41H
            	ADH_CFG2        EQU             42H
            	ADH_CFG3        EQU             43H
            	ADH_DO          EQU             44H
            
            	ADL_CFG         EQU             45H
            
            	TRA_CFG         EQU             46H
            	TRA_DAT         EQU             47H
            
            	I2C_CTL         EQU             48H
            	I2C_DAT         EQU             49H
            	I2C_CMD         EQU             4AH
            	I2C_SR          EQU             4AH             ; same as I2C_CMD
            
            	I80_CTL         EQU             4BH
            	I80_INX         EQU             4CH
            	I80_DAT         EQU             4DH
            	I80_RADR        EQU             4EH
            	I80_DMANUM      EQU             4FH
            
            	SD_DMA_CTL      EQU             50H
            	SD_DMA_RADR     EQU             51H
            	SD_DMA_DMANUM   EQU             52H
            
            	SPI_DMA_CTL     EQU             53H
            	SPI_DMA_RADR    EQU             54H
            	SPI_DMA_DMANUM  EQU             55H
            
            	USB_DMA_CTL     EQU             56H
            	USB_DMA_RADR    EQU             57H
            	USB_DMA_DMANUM  EQU             58H
            
            	SSC             EQU             63H
            	MIC             EQU             64H
            	GREEN           EQU             65H
            	SLEEP           EQU             66H
            	SPEED           EQU             67H
            	PR              EQU             68H
            
            	//------------------------------------
            	IOP_WAKEN_PA    EQU             10H
            	IOP_WAKEN_PB    EQU             11H
            	IOP_WAKEN_PC    EQU             12H
            ; }
            
            #endif
            
            
            
            
            #ifdef _MSPEECHDSP_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            #ifdef _MSPEECHDSP2_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            
            ;-----------------------------------------------------------
            
            #ifdef NO_OPTIMAL_RM
            
            
            #else
            
            #define Optimal_RM	; Optimal RAM function Enable
            
            #endif
            
            
            VarRM[0:127] = {
            BP_SAVE,
            
            }
            
            VarRM[128:511] = {
            
            }
            
            VarRM[512:4095] = {
            
            }
            
            ShareVar = {
            
            }
            
            ;--------------------------------------------------------------------
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> Start=========================
            
            	org	0000h
            RSTB_ENTRY:
00000:      	PCH=		SYS_PROG_ENTRY
00001:      	ljmp		SYS_PROG_ENTRY
            
            
            	org	0004h
            WAKEUP_ENTRY:
00004:      	PCH=		WAKEUP_PROC
00005:      	ljmp		WAKEUP_PROC
            
            
            	org	0100h
            
            
            
            SYS_PROG_ENTRY:
            	; ~~ DSP initial
            
00100:      	dsi
00101:      	nop
00102:      	AR=		@STACKBOTTOM
00104:      	BP=		AR
00105:      	AR=		DSP_SRAM_SIZE
00107:      	AR--
00108:      	CX=		AR
00109:      	I1=		AR
0010A:      	AR=		0
            @clearram_loop_1705:
0010B:      	rm[I1--]=	AR
0010C:      	loop		@clearram_loop_1705
            
0010D:      	io[ClrWDT]=	AR
            
0010E:      	set		io[STATUS].b13
0010F:      	CX=		DSP_VECT_SUPPORT
00110:      	P1=		#IntVectTable
00113:      	jmp		@setintvect_label_1548
            @setintvect_loop_1548:
00114:      	AR=		pm[P1++]
00115:      	io[IntVect]=	AR
            @setintvect_label_1548:
00116:      	loop		@setintvect_loop_1548
            
00117:      	clr		io[STATUS].b13
            
            	; ~~ C code
            
            #ifdef PRAM_BANK
            	PCH=		sfx_DynFastCallInit
            	lcall		sfx_DynFastCallInit
            #endif
            
00118:      	PCH=		ginit_code
00119:      	lcall		ginit_code
            
0011A:      	PCH=		_main
0011B:      	lcall		_main
0011C:      	jmp		SYS_PROG_ENTRY
            
            
            /* ================================================================= */
            // ------------- Interrupt Service Routine--------------------------
            /* ================================================================= */
            
            EMPTY_INTENTRY:
0011D:      	reti
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> End=========================
            
            ;=========================Include <DEPS\SUNB3_593950F9.S.CODE.ASM> Start=========================
            ; SUNB3.C Code Start!!;
            VarRM[0:4095]={
             L2A70A9A2_2,L2A70A9A2_4,L2A70A9A2_3,_Key_press_flag14FFF825,_Play_flag71A588D5 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //naked void MyData();
            ; //interrupt rjmp void _RTC24B6AA79();
            ; //rjmp void _main();
            ; //rjmp void _InitSound5CCD501D();
            ; //rjmp void _INITIAL0C18377D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //interrupt rjmp void _RTC24B6AA79()		
            _RTC24B6AA79:
            ; //{						
0011E:      	push ax
0011F:      	push bx
00120:      	push cx
00121:      	push dx
00122:      	push r0
00123:      	push r1
00124:      	push r2
00125:      	push r3
00126:      	push i1
00127:      	push p1
00128:      	push mx
00129:      	push mr0
0012A:      	push mr1
0012B:      	push mr2
0012C:      	ar = p1.hh
0012D:      	push ar
            ; //_A8ADEC9C4_0:;					
            _A8ADEC9C4_0:
            ; //_A8ADEC9C4_1:;					
            _A8ADEC9C4_1:
            ; //	asm	clr io[INTREQ].b3		
0012E:      	clr io[INTREQ].b3
            ; //	
            ; //_A8ADEC9C4_2:;					
            _A8ADEC9C4_2:
            ; //	sAX	= 0;				
0012F:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00130:      	test io[0x08].b2//
            ; //	if(__jz__) goto L2A70A9A2_8;		
00131:      	if ZR	jmp L2A70A9A2_8
            ; //	sAX	= 1;				
00132:      	AX	= 0x01
            ; //L2A70A9A2_8:;					
            L2A70A9A2_8:
            ; //	sCX	= 0x0000;			
00133:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00134:      	pch	= sfx_CMP_AX_CX_JE
00135:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_9;	
00136:      	if ZR	jmp L2A70A9A2_9
            ; //	goto	L2A70A9A2_6;			
00137:      	jmp	L2A70A9A2_6
            ; //L2A70A9A2_9:;					
            L2A70A9A2_9:
            ; //	sAX	= 0x0001;			
00138:      	AX	= 0x01
            ; //	goto L2A70A9A2_7;			
00139:      	jmp	L2A70A9A2_7
            ; //L2A70A9A2_6:;					
            L2A70A9A2_6:
            ; //	sAX	= 0x0000;			
0013A:      	AX	= 0x00
            ; //L2A70A9A2_7:;					
            L2A70A9A2_7:
            ; //	sSI	= (int)&L2A70A9A2_4;		
0013B:      	I1	= L2A70A9A2_4
            ; //	*(__int16*)sSI	= sAX			
0013C:      	rm[I1]	= AX
            ; //_A8ADEC9C4_3:;					
            _A8ADEC9C4_3:
            ; //	asm I1 = L2A70A9A2_3+0;			
0013D:      	I1 = L2A70A9A2_3+0//
            ; //	sAX	= *(__int16*)sSI;		
0013E:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
0013F:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00140:      	pch	= sfx_CMP_AX_CX_JE
00141:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_11;	
00142:      	if ZR	jmp L2A70A9A2_11
            ; //	goto	L2A70A9A2_10;			
00143:      	jmp	L2A70A9A2_10
            ; //L2A70A9A2_11:;					
            L2A70A9A2_11:
            ; //	
            ; //_A8ADEC9C4_4:;					
            _A8ADEC9C4_4:
            ; //_A8ADEC9C4_5:;					
            _A8ADEC9C4_5:
            ; //	sAX	= 0x0003;			
00144:      	AX	= 0x03
            ; //	PUSH(sAX);				
00145:      	push	AX
            ; //	sAX	= 0x0005;			
00146:      	AX	= 0x05
            ; //	PUSH(sAX);				
00147:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00148:      	pch	= _WS_TRSF_color_setE1CC300C
00149:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
0014A:      	pop	AR
0014B:      	pop	AR
            ; //_A8ADEC9C4_6:;					
            _A8ADEC9C4_6:
            ; //	asm clr io[0x09].b14;			
0014C:      	clr io[0x09].b14//
            ; //	goto L2A70A9A2_12;			
0014D:      	jmp	L2A70A9A2_12
            ; //L2A70A9A2_10:;					
            L2A70A9A2_10:
            ; //_A8ADEC9C4_7:;					
            _A8ADEC9C4_7:
            ; //	asm I1 = L2A70A9A2_3+0;			
0014E:      	I1 = L2A70A9A2_3+0//
            ; //	sAX	= *(__int16*)sSI;		
0014F:      	AX	= rm[I1]
            ; //	sCX	= 0x0001;			
00150:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00151:      	pch	= sfx_CMP_AX_CX_JE
00152:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_14;	
00153:      	if ZR	jmp L2A70A9A2_14
            ; //	goto	L2A70A9A2_13;			
00154:      	jmp	L2A70A9A2_13
            ; //L2A70A9A2_14:;					
            L2A70A9A2_14:
            ; //	
            ; //_A8ADEC9C4_8:;					
            _A8ADEC9C4_8:
            ; //_A8ADEC9C4_9:;					
            _A8ADEC9C4_9:
            ; //	sAX	= 0x0003;			
00155:      	AX	= 0x03
            ; //	PUSH(sAX);				
00156:      	push	AX
            ; //	sAX	= 0x0003;			
00157:      	AX	= 0x03
            ; //	PUSH(sAX);				
00158:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00159:      	pch	= _WS_TRSF_color_setE1CC300C
0015A:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
0015B:      	pop	AR
0015C:      	pop	AR
            ; //_A8ADEC9C4_10:;					
            _A8ADEC9C4_10:
            ; //	asm clr io[0x09].b14;			
0015D:      	clr io[0x09].b14//
            ; //	goto L2A70A9A2_15;			
0015E:      	jmp	L2A70A9A2_15
            ; //L2A70A9A2_13:;					
            L2A70A9A2_13:
            ; //_A8ADEC9C4_11:;					
            _A8ADEC9C4_11:
            ; //	asm I1 = L2A70A9A2_3+0;			
0015F:      	I1 = L2A70A9A2_3+0//
            ; //	sAX	= *(__int16*)sSI;		
00160:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
00161:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
00162:      	pch	= sfx_CMP_AX_CX_JE
00163:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_17;	
00164:      	if ZR	jmp L2A70A9A2_17
            ; //	goto	L2A70A9A2_16;			
00165:      	jmp	L2A70A9A2_16
            ; //L2A70A9A2_17:;					
            L2A70A9A2_17:
            ; //	
            ; //_A8ADEC9C4_12:;					
            _A8ADEC9C4_12:
            ; //_A8ADEC9C4_13:;					
            _A8ADEC9C4_13:
            ; //	sAX	= 0x0003;			
00166:      	AX	= 0x03
            ; //	PUSH(sAX);				
00167:      	push	AX
            ; //	sAX	= 0x0004;			
00168:      	AX	= 0x04
            ; //	PUSH(sAX);				
00169:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
0016A:      	pch	= _WS_TRSF_color_setE1CC300C
0016B:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
0016C:      	pop	AR
0016D:      	pop	AR
            ; //_A8ADEC9C4_14:;					
            _A8ADEC9C4_14:
            ; //	asm clr io[0x09].b14;			
0016E:      	clr io[0x09].b14//
            ; //L2A70A9A2_16:;					
            L2A70A9A2_16:
            ; //_A8ADEC9C4_15:;					
            _A8ADEC9C4_15:
            ; //L2A70A9A2_15:;					
            L2A70A9A2_15:
            ; //_A8ADEC9C4_16:;					
            _A8ADEC9C4_16:
            ; //L2A70A9A2_12:;					
            L2A70A9A2_12:
            ; //_A8ADEC9C4_17:;					
            _A8ADEC9C4_17:
            ; //_A8ADEC9C4_18:;					
            _A8ADEC9C4_18:
            ; //	asm I1 = L2A70A9A2_3+0;			
0016F:      	I1 = L2A70A9A2_3+0//
            ; //	sAX	= *(__int16*)sSI;		
00170:      	AX	= rm[I1]
            ; //	sSI	= (int)&L2A70A9A2_3;		
00171:      	I1	= L2A70A9A2_3
            ; //	PUSH(sAX);				
00172:      	push	AX
            ; //	sAX	= 0x0001;			
00173:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
00174:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
00175:      	AR	= AX
00176:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
00177:      	rm[I1]	= CX
            ; //	sAX	= POP();			
00178:      	pop	AX
            ; //_A8ADEC9C4_19:;					
            _A8ADEC9C4_19:
            ; //	asm I1 = L2A70A9A2_3+0;			
00179:      	I1 = L2A70A9A2_3+0//
            ; //	sAX	= *(__int16*)sSI;		
0017A:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
0017B:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
0017C:      	pch	= sfx_CMP_AX_CX_JE
0017D:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L2A70A9A2_19;	
0017E:      	if ZR	jmp L2A70A9A2_19
            ; //	goto	L2A70A9A2_18;			
0017F:      	jmp	L2A70A9A2_18
            ; //L2A70A9A2_19:;					
            L2A70A9A2_19:
            ; //_A8ADEC9C4_20:;					
            _A8ADEC9C4_20:
            ; //	sAX	= 0x0000;			
00180:      	AX	= 0x00
            ; //	sSI	= (int)&L2A70A9A2_3;		
00181:      	I1	= L2A70A9A2_3
            ; //	*(__int16*)sSI	= sAX			
00182:      	rm[I1]	= AX
            ; //L2A70A9A2_18:;					
            L2A70A9A2_18:
            ; //_A8ADEC9C4_21:;					
            _A8ADEC9C4_21:
            ; //L2A70A9A2_5:;					
            L2A70A9A2_5:
            ; //_A8ADEC9C4_22:;					
            _A8ADEC9C4_22:
            ; //	return;					
00183:      	pop ar
00184:      	p1.hh = ar
00185:      	pop mr2
00186:      	pop mr1
00187:      	pop mr0
00188:      	pop mx
00189:      	pop p1
0018A:      	pop i1
0018B:      	pop r3
0018C:      	pop r2
0018D:      	pop r1
0018E:      	pop r0
0018F:      	pop dx
00190:      	pop cx
00191:      	pop bx
00192:      	pop ax
00193:      	reti
            ; //_RTC24B6AA79_end:;				
            _RTC24B6AA79_end:
            ; //_A8ADEC9C4_23:;					
            _A8ADEC9C4_23:
            ; //}
            ; //
            ; //rjmp void _main()				
            _main:
            ; //{
            ; //_A8ADEC9C4_24:;					
            _A8ADEC9C4_24:
            ; //	
            ; //_A8ADEC9C4_25:;					
            _A8ADEC9C4_25:
            ; //_A8ADEC9C4_26:;					
            _A8ADEC9C4_26:
            ; //	F_ChangePWMVectTabletobank2();		
00194:      	pch	= F_ChangePWMVectTabletobank2
00195:      	lcall	F_ChangePWMVectTabletobank2
            ; //_A8ADEC9C4_27:;					
            _A8ADEC9C4_27:
            ; //	sAX	= 0x0000;			
00196:      	AX	= 0x00
            ; //	asm I1 = _sub_vol980B1B83+0;		
00197:      	I1 = _sub_vol980B1B83+0//
            ; //	*(__int16*)sSI	= sAX			
00198:      	rm[I1]	= AX
            ; //_A8ADEC9C4_28:;					
            _A8ADEC9C4_28:
            ; //_A8ADEC9C4_29:;					
            _A8ADEC9C4_29:
            ; //	_INITIAL0C18377D();			
00199:      	pch	= _INITIAL0C18377D
0019A:      	lcall	_INITIAL0C18377D
            ; //_A8ADEC9C4_30:;					
            _A8ADEC9C4_30:
            ; //_A8ADEC9C4_31:;					
            _A8ADEC9C4_31:
            ; //	_InitialDA4A7CC4();			
0019B:      	pch	= _InitialDA4A7CC4
0019C:      	lcall	_InitialDA4A7CC4
            ; //_A8ADEC9C4_32:;					
            _A8ADEC9C4_32:
            ; //_A8ADEC9C4_33:;					
            _A8ADEC9C4_33:
            ; //	_ClearTickCount5DDE4003();		
0019D:      	pch	= _ClearTickCount5DDE4003
0019E:      	lcall	_ClearTickCount5DDE4003
            ; //_A8ADEC9C4_34:;					
            _A8ADEC9C4_34:
            ; //_A8ADEC9C4_35:;					
            _A8ADEC9C4_35:
            ; //	asm AX = #MyData+0;			
0019F:      	AX = #MyData+0//
            ; //	asm DX = #MyData.n2			
001A1:      	DX = #MyData.n2
            ; //	asm set DX.b11				
001A2:      	set DX.b11
            ; //	PUSH(sDX);				
001A3:      	push	DX
            ; //	PUSH(sAX);				
001A4:      	push	AX
            ; //	_Sub3Play422CAD6D(STACK[sSP + 0], STACK[sSP + 1]);
001A5:      	pch	= _Sub3Play422CAD6D
001A6:      	lcall	_Sub3Play422CAD6D
            ; //	RESTORESP(2);				
001A7:      	pop	AR
001A8:      	pop	AR
            ; //L2A70A9A2_22:;					
            L2A70A9A2_22:
            ; //_A8ADEC9C4_36:;					
            _A8ADEC9C4_36:
            ; //_A8ADEC9C4_37:;					
            _A8ADEC9C4_37:
            ; //	asm	io[ClrWDT] = AR			
001A9:      	io[ClrWDT] = AR
            ; //	
            ; //	goto L2A70A9A2_22;			
001AA:      	jmp	L2A70A9A2_22
            ; //L2A70A9A2_21:;					
            L2A70A9A2_21:
            ; //L2A70A9A2_20:;					
            L2A70A9A2_20:
            ; //_A8ADEC9C4_38:;					
            _A8ADEC9C4_38:
            ; //	return;					
001AB:      	rets
            ; //_main_end:;					
            _main_end:
            ; //_A8ADEC9C4_39:;					
            _A8ADEC9C4_39:
            ; //}
            ; //
            ; //rjmp void _InitSound5CCD501D()			
            _InitSound5CCD501D:
            ; //{
            ; //_A8ADEC9C4_40:;					
            _A8ADEC9C4_40:
            ; //	
            ; //_A8ADEC9C4_41:;					
            _A8ADEC9C4_41:
            ; //	io[0x3E]	= 0x3FFF;		
001AC:      	AR	= 0x3FFF
001AE:      	io[0x3E]	= AR
            ; //_A8ADEC9C4_42:;					
            _A8ADEC9C4_42:
            ; //	io[0x16]	= 0x0000;		
001AF:      	AR	= 0x00
001B0:      	io[0x16]	= AR
            ; //_A8ADEC9C4_43:;					
            _A8ADEC9C4_43:
            ; //	io[0x16]	= 0x0000;		
001B1:      	AR	= 0x00
001B2:      	io[0x16]	= AR
            ; //_A8ADEC9C4_44:;					
            _A8ADEC9C4_44:
            ; //	io[0x16]	= 0x0000;		
001B3:      	AR	= 0x00
001B4:      	io[0x16]	= AR
            ; //_A8ADEC9C4_45:;					
            _A8ADEC9C4_45:
            ; //	io[0x16]	= 0x0000;		
001B5:      	AR	= 0x00
001B6:      	io[0x16]	= AR
            ; //_A8ADEC9C4_46:;					
            _A8ADEC9C4_46:
            ; //	io[0x36]	= 0x0000;		
001B7:      	AR	= 0x00
001B8:      	io[0x36]	= AR
            ; //_A8ADEC9C4_47:;					
            _A8ADEC9C4_47:
            ; //	io[0x36]	= 0x0000;		
001B9:      	AR	= 0x00
001BA:      	io[0x36]	= AR
            ; //_A8ADEC9C4_48:;					
            _A8ADEC9C4_48:
            ; //	io[0x36]	= 0x0000;		
001BB:      	AR	= 0x00
001BC:      	io[0x36]	= AR
            ; //_A8ADEC9C4_49:;					
            _A8ADEC9C4_49:
            ; //	io[0x36]	= 0x0000;		
001BD:      	AR	= 0x00
001BE:      	io[0x36]	= AR
            ; //_A8ADEC9C4_50:;					
            _A8ADEC9C4_50:
            ; //	io[0x36]	= 0x0000;		
001BF:      	AR	= 0x00
001C0:      	io[0x36]	= AR
            ; //_A8ADEC9C4_51:;					
            _A8ADEC9C4_51:
            ; //	io[0x36]	= 0x0000;		
001C1:      	AR	= 0x00
001C2:      	io[0x36]	= AR
            ; //_A8ADEC9C4_52:;					
            _A8ADEC9C4_52:
            ; //	io[0x36]	= 0x0000;		
001C3:      	AR	= 0x00
001C4:      	io[0x36]	= AR
            ; //_A8ADEC9C4_53:;					
            _A8ADEC9C4_53:
            ; //	io[0x36]	= 0x0000;		
001C5:      	AR	= 0x00
001C6:      	io[0x36]	= AR
            ; //_A8ADEC9C4_54:;					
            _A8ADEC9C4_54:
            ; //	io[0x3C]	= 0x0000;		
001C7:      	AR	= 0x00
001C8:      	io[0x3C]	= AR
            ; //_A8ADEC9C4_55:;					
            _A8ADEC9C4_55:
            ; //	sAX	= io[0x3C];			
001C9:      	AR	= io[0x3C]
001CA:      	AX	= AR
            ; //_A8ADEC9C4_56:;					
            _A8ADEC9C4_56:
            ; //	asm	set io[MISC].b9			
001CB:      	set io[MISC].b9
            ; //_A8ADEC9C4_57:;					
            _A8ADEC9C4_57:
            ; //	asm	set io[MISC].b8			
001CC:      	set io[MISC].b8
            ; //_A8ADEC9C4_58:;					
            _A8ADEC9C4_58:
            ; //	asm	set io[MISC].b4			
001CD:      	set io[MISC].b4
            ; //L2A70A9A2_23:;					
            L2A70A9A2_23:
            ; //_A8ADEC9C4_59:;					
            _A8ADEC9C4_59:
            ; //	return;					
001CE:      	rets
            ; //_InitSound5CCD501D_end:;			
            _InitSound5CCD501D_end:
            ; //_A8ADEC9C4_60:;					
            _A8ADEC9C4_60:
            ; //}
            ; //
            ; //rjmp void _INITIAL0C18377D()			
            _INITIAL0C18377D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
001CF:      	AR	= rm[BP_SAVE]
001D0:      	push	AR
001D1:      	AR	= BP
001D2:      	rm[BP_SAVE]	= AR
001D3:      	AR	 = -1
001D4:      	BP	+= AR
            ; //_A8ADEC9C4_61:;					
            _A8ADEC9C4_61:
            ; //_A8ADEC9C4_62:;					
            _A8ADEC9C4_62:
            ; //_A8ADEC9C4_63:;					
            _A8ADEC9C4_63:
            ; //	NEARCALL(_InitSound5CCD501D);		
001D5:      	call	_InitSound5CCD501D
            ; //	
            ; //_A8ADEC9C4_64:;					
            _A8ADEC9C4_64:
            ; //	asm AX = PCMY+0;			
001D6:      	AX = PCMY+0//
            ; //_A8ADEC9C4_65:;					
            _A8ADEC9C4_65:
            ; //	asm	AR = AX				
001D8:      	AR = AX
            ; //_A8ADEC9C4_66:;					
            _A8ADEC9C4_66:
            ; //	asm	I0 = AR				
001D9:      	I0 = AR
            ; //_A8ADEC9C4_67:;					
            _A8ADEC9C4_67:
            ; //	_i_1_2+0	= 0x0200;		
001DA:      	I1	= rm[BP_SAVE]
001DB:      	AR	= 0x0200
001DD:      	rm[I1]	= AR
            ; //L2A70A9A2_26:;					
            L2A70A9A2_26:
            ; //_A8ADEC9C4_68:;					
            _A8ADEC9C4_68:
            ; //	sSI	= (int)&_i_1_2;			
001DE:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
001DF:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
001E0:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
001E1:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
001E2:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
001E3:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
001E4:      	AR	= AX
            ; //	if(__jnz__)	goto L2A70A9A2_27;	
001E5:      	if NZ	jmp L2A70A9A2_27
            ; //	goto	L2A70A9A2_25;			
001E6:      	jmp	L2A70A9A2_25
            ; //L2A70A9A2_27:;					
            L2A70A9A2_27:
            ; //	
            ; //_A8ADEC9C4_69:;					
            _A8ADEC9C4_69:
            ; //	sAX	= 0x0000;			
001E7:      	AX	= 0x00
            ; //_A8ADEC9C4_70:;					
            _A8ADEC9C4_70:
            ; //	asm	rm[I0++] = AX			
001E8:      	rm[I0++] = AX
            ; //	goto L2A70A9A2_26;			
001E9:      	jmp	L2A70A9A2_26
            ; //L2A70A9A2_25:;					
            L2A70A9A2_25:
            ; //_A8ADEC9C4_71:;					
            _A8ADEC9C4_71:
            ; //	asm AX = PCMY+0;			
001EA:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
001EC:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
001ED:      	rm[I1]	= AX
            ; //_A8ADEC9C4_72:;					
            _A8ADEC9C4_72:
            ; //	asm AX = PCMY+0;			
001EE:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
001F0:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
001F1:      	rm[I1]	= AX
            ; //_A8ADEC9C4_73:;					
            _A8ADEC9C4_73:
            ; //	asm I1 = _sub_vol980B1B83+0;		
001F2:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
001F3:      	AX	= rm[I1]
            ; //	io[0x3C]	= sAX;			
001F4:      	AR	= AX
001F5:      	io[0x3C]	= AR
            ; //_A8ADEC9C4_74:;					
            _A8ADEC9C4_74:
            ; //	io[0x3E]	= 0x1FFF;		
001F6:      	AR	= 0x1FFF
001F8:      	io[0x3E]	= AR
            ; //_A8ADEC9C4_75:;					
            _A8ADEC9C4_75:
            ; //	io[0x3B]	= 0x0000;		
001F9:      	AR	= 0x00
001FA:      	io[0x3B]	= AR
            ; //L2A70A9A2_24:;					
            L2A70A9A2_24:
            ; //_A8ADEC9C4_76:;					
            _A8ADEC9C4_76:
            ; //	return;					
001FB:      	AR	= 1
001FC:      	BP	+= AR
001FD:      	pop	AR
001FE:      	rm[BP_SAVE]	= AR
001FF:      	rets
            ; //_INITIAL0C18377D_end:;				
            _INITIAL0C18377D_end:
            ; //_A8ADEC9C4_77:;					
            _A8ADEC9C4_77:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_SUNB3_593950F9_s(void)	
            ginit_code_SUNB3_593950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_SUNB3_593950F9_s+0;	
00200:      	P1 = #ginit_seg_SUNB3_593950F9_s+0//
            ; //	asm I1 = L2A70A9A2_2;			
00203:      	I1 = L2A70A9A2_2//
            ; //	sCX = 1;				
00204:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00205:      	pch	= sfx_GLOBALINIT
00206:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_SUNB3_593950F9_s+1;	
00207:      	P1 = #ginit_seg_SUNB3_593950F9_s+1//
            ; //	asm I1 = L2A70A9A2_4;			
0020A:      	I1 = L2A70A9A2_4//
            ; //	sCX = 1;				
0020B:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
0020C:      	pch	= sfx_GLOBALINIT
0020D:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
0020E:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_SUNB3_593950F9_s[2] = {	
            ginit_seg_SUNB3_593950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
0020F:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00210:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //naked void MyData()				
            MyData:
            ; //{
            ; //	asm	DW "subband3\Song_Scan_and_Sort_@11K7bps.T3Z"
0374F:      DW "subband3\Song_Scan_and_Sort_@11K7bps.T3Z"
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUNB3_593950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> Start=========================
            ; global.c Code Start!!;
            VarRM[0:4095]={
             _sub_vol980B1B83,_ticksA7263C09[2] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _RampUpFF7996DA();
            ; //rjmp void _RampDown1D382EDA();
            ; //rjmp void _InitialDA4A7CC4();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _RampUpFF7996DA()			
            _RampUpFF7996DA:
            ; //{
            ; //_A8ADEC9C4_78:;					
            _A8ADEC9C4_78:
            ; //	
            ; //_A8ADEC9C4_79:;					
            _A8ADEC9C4_79:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00211:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00212:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
00213:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
00214:      	AX = AX & AR//
            ; //	sCX	= 0x003F;			
00215:      	CX	= 0x3F
            ; //	sfx_CMP_AX_CX_JE();			
00216:      	pch	= sfx_CMP_AX_CX_JE
00217:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_33;	
00218:      	if ZR	jmp L0E8FA404_33
            ; //	goto	L0E8FA404_32;			
00219:      	jmp	L0E8FA404_32
            ; //L0E8FA404_33:;					
            L0E8FA404_33:
            ; //_A8ADEC9C4_80:;					
            _A8ADEC9C4_80:
            ; //	sAX	= 0x0000;			
0021A:      	AX	= 0x00
            ; //	goto L0E8FA404_31;			
0021B:      	jmp	L0E8FA404_31
            ; //L0E8FA404_32:;					
            L0E8FA404_32:
            ; //_A8ADEC9C4_81:;					
            _A8ADEC9C4_81:
            ; //_A8ADEC9C4_82:;					
            _A8ADEC9C4_82:
            ; //_A8ADEC9C4_83:;					
            _A8ADEC9C4_83:
            ; //	_GetTickCount18DC070C();		
0021C:      	pch	= _GetTickCount18DC070C
0021D:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
0021E:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
0021F:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00220:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00221:      	AR	= CX
00222:      	AX	= AX - AR
00223:      	AR	= BX
00224:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
00225:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
00226:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
00227:      	pch	= sfx_CMPLONG_JA
00228:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_35;	
00229:      	if ZR	jmp L0E8FA404_35
            ; //	goto	L0E8FA404_34;			
0022A:      	jmp	L0E8FA404_34
            ; //L0E8FA404_35:;					
            L0E8FA404_35:
            ; //	
            ; //_A8ADEC9C4_84:;					
            _A8ADEC9C4_84:
            ; //_A8ADEC9C4_85:;					
            _A8ADEC9C4_85:
            ; //	_GetTickCount18DC070C();		
0022B:      	pch	= _GetTickCount18DC070C
0022C:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
0022D:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
0022E:      	rm[I1++]	= AX
0022F:      	rm[I1--]	= DX
            ; //_A8ADEC9C4_86:;					
            _A8ADEC9C4_86:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00230:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00231:      	AX	= rm[I1]
            ; //	sAX++;					
00232:      	AX++
            ; //	*(__int16*)sSI	= sAX;			
00233:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
00234:      	AR	= AX
00235:      	io[0x3C]	= AR
            ; //L0E8FA404_34:;					
            L0E8FA404_34:
            ; //_A8ADEC9C4_87:;					
            _A8ADEC9C4_87:
            ; //_A8ADEC9C4_88:;					
            _A8ADEC9C4_88:
            ; //	sAX	= 0x0001;			
00236:      	AX	= 0x01
            ; //	goto L0E8FA404_31;			
00237:      	jmp	L0E8FA404_31
            ; //L0E8FA404_31:;					
            L0E8FA404_31:
            ; //_A8ADEC9C4_89:;					
            _A8ADEC9C4_89:
            ; //	return;					
00238:      	rets
            ; //_RampUpFF7996DA_end:;				
            _RampUpFF7996DA_end:
            ; //_A8ADEC9C4_90:;					
            _A8ADEC9C4_90:
            ; //}
            ; //
            ; //rjmp void _RampDown1D382EDA()			
            _RampDown1D382EDA:
            ; //{
            ; //_A8ADEC9C4_91:;					
            _A8ADEC9C4_91:
            ; //	
            ; //_A8ADEC9C4_92:;					
            _A8ADEC9C4_92:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00239:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
0023A:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
0023B:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
0023C:      	AX = AX & AR//
            ; //	sCX	= 0x0000;			
0023D:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
0023E:      	pch	= sfx_CMP_AX_CX_JE
0023F:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_38;	
00240:      	if ZR	jmp L0E8FA404_38
            ; //	goto	L0E8FA404_37;			
00241:      	jmp	L0E8FA404_37
            ; //L0E8FA404_38:;					
            L0E8FA404_38:
            ; //_A8ADEC9C4_93:;					
            _A8ADEC9C4_93:
            ; //	sAX	= 0x0000;			
00242:      	AX	= 0x00
            ; //	goto L0E8FA404_36;			
00243:      	jmp	L0E8FA404_36
            ; //L0E8FA404_37:;					
            L0E8FA404_37:
            ; //_A8ADEC9C4_94:;					
            _A8ADEC9C4_94:
            ; //_A8ADEC9C4_95:;					
            _A8ADEC9C4_95:
            ; //_A8ADEC9C4_96:;					
            _A8ADEC9C4_96:
            ; //	_GetTickCount18DC070C();		
00244:      	pch	= _GetTickCount18DC070C
00245:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00246:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
00247:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00248:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00249:      	AR	= CX
0024A:      	AX	= AX - AR
0024B:      	AR	= BX
0024C:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
0024D:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
0024E:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
0024F:      	pch	= sfx_CMPLONG_JA
00250:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_40;	
00251:      	if ZR	jmp L0E8FA404_40
            ; //	goto	L0E8FA404_39;			
00252:      	jmp	L0E8FA404_39
            ; //L0E8FA404_40:;					
            L0E8FA404_40:
            ; //	
            ; //_A8ADEC9C4_97:;					
            _A8ADEC9C4_97:
            ; //_A8ADEC9C4_98:;					
            _A8ADEC9C4_98:
            ; //	_GetTickCount18DC070C();		
00253:      	pch	= _GetTickCount18DC070C
00254:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00255:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
00256:      	rm[I1++]	= AX
00257:      	rm[I1--]	= DX
            ; //_A8ADEC9C4_99:;					
            _A8ADEC9C4_99:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00258:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00259:      	AX	= rm[I1]
            ; //	sAX--;					
0025A:      	AX--
            ; //	*(__int16*)sSI	= sAX;			
0025B:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
0025C:      	AR	= AX
0025D:      	io[0x3C]	= AR
            ; //L0E8FA404_39:;					
            L0E8FA404_39:
            ; //_A8ADEC9C4_100:;				
            _A8ADEC9C4_100:
            ; //_A8ADEC9C4_101:;				
            _A8ADEC9C4_101:
            ; //	sAX	= 0x0001;			
0025E:      	AX	= 0x01
            ; //	goto L0E8FA404_36;			
0025F:      	jmp	L0E8FA404_36
            ; //L0E8FA404_36:;					
            L0E8FA404_36:
            ; //_A8ADEC9C4_102:;				
            _A8ADEC9C4_102:
            ; //	return;					
00260:      	rets
            ; //_RampDown1D382EDA_end:;				
            _RampDown1D382EDA_end:
            ; //_A8ADEC9C4_103:;				
            _A8ADEC9C4_103:
            ; //}
            ; //
            ; //rjmp void _InitialDA4A7CC4()			
            _InitialDA4A7CC4:
            ; //{
            ; //_A8ADEC9C4_104:;				
            _A8ADEC9C4_104:
            ; //	
            ; //_A8ADEC9C4_105:;				
            _A8ADEC9C4_105:
            ; //	io[0x67]	= 0x0007;		
00261:      	AR	= 0x07
00262:      	io[0x67]	= AR
            ; //_A8ADEC9C4_106:;				
            _A8ADEC9C4_106:
            ; //	io[0x06]	= 0xC004;		
00263:      	AR	= 0xC004
00265:      	io[0x06]	= AR
            ; //_A8ADEC9C4_107:;				
            _A8ADEC9C4_107:
            ; //	io[0x05]	= 0x0000;		
00266:      	AR	= 0x00
00267:      	io[0x05]	= AR
            ; //_A8ADEC9C4_108:;				
            _A8ADEC9C4_108:
            ; //	io[0x09]	= 0x0000;		
00268:      	AR	= 0x00
00269:      	io[0x09]	= AR
            ; //_A8ADEC9C4_109:;				
            _A8ADEC9C4_109:
            ; //	io[0x08]	= 0xFFFF;		
0026A:      	AR	= 0xFFFF
0026C:      	io[0x08]	= AR
            ; //	
            ; //_A8ADEC9C4_110:;				
            _A8ADEC9C4_110:
            ; //	sAX	= 0x0002;			
0026D:      	AX	= 0x02
            ; //_A8ADEC9C4_111:;				
            _A8ADEC9C4_111:
            ; //	asm	AR = AX				
0026E:      	AR = AX
            ; //_A8ADEC9C4_112:;				
            _A8ADEC9C4_112:
            ; //	asm	io[IOP_IX] = AR			
0026F:      	io[IOP_IX] = AR
            ; //	
            ; //_A8ADEC9C4_113:;				
            _A8ADEC9C4_113:
            ; //	sAX	= 0x2AAA;			
00270:      	AX	= 0x2AAA
            ; //_A8ADEC9C4_114:;				
            _A8ADEC9C4_114:
            ; //	asm	AR = AX				
00272:      	AR = AX
            ; //_A8ADEC9C4_115:;				
            _A8ADEC9C4_115:
            ; //	asm	io[IOP_DAT] = AR		
00273:      	io[IOP_DAT] = AR
            ; //_A8ADEC9C4_116:;				
            _A8ADEC9C4_116:
            ; //	asm	eni				
00274:      	eni
            ; //_A8ADEC9C4_117:;				
            _A8ADEC9C4_117:
            ; //	asm	set io[INTENA].b3		
00275:      	set io[INTENA].b3
            ; //L0E8FA404_41:;					
            L0E8FA404_41:
            ; //_A8ADEC9C4_118:;				
            _A8ADEC9C4_118:
            ; //	return;					
00276:      	rets
            ; //_InitialDA4A7CC4_end:;				
            _InitialDA4A7CC4_end:
            ; //_A8ADEC9C4_119:;				
            _A8ADEC9C4_119:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_global_6037E6D5_s(void)	
            ginit_code_global_6037E6D5_s:
            ; //{
            ; //	return;					
00277:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> Start=========================
            ; sub3play.c Code Start!!;
            VarRM[0:4095]={
             bts_ch0_get_ix[2],PCMYIN_PTR,PCMYOU_PTR,PCMIN,SampleCh0Rate,BaseOn512#PCMY[512],SUBFLTI[4],SUBFLTA
            ,SUBFLTP,SUBFLTG 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _ClearRenderBufB079D01D();
            ; //rjmp void _Sub3Initial96BE24F3();
            ; //rjmp void _WaitPCM_Empty_size53398B9D();
            ; //rjmp void _Sub3ZeroFillABFF23AA();
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1);
            ; //naked rjmp void Sbb_Ch0GetBts();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _ClearRenderBufB079D01D()		
            _ClearRenderBufB079D01D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00278:      	AR	= rm[BP_SAVE]
00279:      	push	AR
0027A:      	AR	= BP
0027B:      	rm[BP_SAVE]	= AR
0027C:      	AR	 = -1
0027D:      	BP	+= AR
            ; //_A8ADEC9C4_120:;				
            _A8ADEC9C4_120:
            ; //	
            ; //_A8ADEC9C4_121:;				
            _A8ADEC9C4_121:
            ; //	asm AX = PCMY+0;			
0027E:      	AX = PCMY+0//
            ; //_A8ADEC9C4_122:;				
            _A8ADEC9C4_122:
            ; //	asm	AR = AX				
00280:      	AR = AX
            ; //_A8ADEC9C4_123:;				
            _A8ADEC9C4_123:
            ; //	asm	I0 = AR				
00281:      	I0 = AR
            ; //_A8ADEC9C4_124:;				
            _A8ADEC9C4_124:
            ; //	_i_1_2+0	= 0x0200;		
00282:      	I1	= rm[BP_SAVE]
00283:      	AR	= 0x0200
00285:      	rm[I1]	= AR
            ; //LFB78B58C_45:;					
            LFB78B58C_45:
            ; //_A8ADEC9C4_125:;				
            _A8ADEC9C4_125:
            ; //	sSI	= (int)&_i_1_2;			
00286:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00287:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00288:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00289:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
0028A:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
0028B:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
0028C:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_46;	
0028D:      	if NZ	jmp LFB78B58C_46
            ; //	goto	LFB78B58C_44;			
0028E:      	jmp	LFB78B58C_44
            ; //LFB78B58C_46:;					
            LFB78B58C_46:
            ; //	
            ; //_A8ADEC9C4_126:;				
            _A8ADEC9C4_126:
            ; //	sAX	= 0x0000;			
0028F:      	AX	= 0x00
            ; //_A8ADEC9C4_127:;				
            _A8ADEC9C4_127:
            ; //	asm	rm[I0++] = AX			
00290:      	rm[I0++] = AX
            ; //	goto LFB78B58C_45;			
00291:      	jmp	LFB78B58C_45
            ; //LFB78B58C_44:;					
            LFB78B58C_44:
            ; //LFB78B58C_43:;					
            LFB78B58C_43:
            ; //_A8ADEC9C4_128:;				
            _A8ADEC9C4_128:
            ; //	return;					
00292:      	AR	= 1
00293:      	BP	+= AR
00294:      	pop	AR
00295:      	rm[BP_SAVE]	= AR
00296:      	rets
            ; //_ClearRenderBufB079D01D_end:;			
            _ClearRenderBufB079D01D_end:
            ; //_A8ADEC9C4_129:;				
            _A8ADEC9C4_129:
            ; //}
            ; //
            ; //rjmp void _Sub3Initial96BE24F3()		
            _Sub3Initial96BE24F3:
            ; //{
            ; //_A8ADEC9C4_130:;				
            _A8ADEC9C4_130:
            ; //_A8ADEC9C4_131:;				
            _A8ADEC9C4_131:
            ; //	asm	dsi				
00297:      	dsi
            ; //_A8ADEC9C4_132:;				
            _A8ADEC9C4_132:
            ; //	asm	nop				
00298:      	nop
            ; //	
            ; //_A8ADEC9C4_133:;				
            _A8ADEC9C4_133:
            ; //_A8ADEC9C4_134:;				
            _A8ADEC9C4_134:
            ; //	_ClearRenderBufB079D01D();		
00299:      	pch	= _ClearRenderBufB079D01D
0029A:      	lcall	_ClearRenderBufB079D01D
            ; //_A8ADEC9C4_135:;				
            _A8ADEC9C4_135:
            ; //	asm	AR = PASR,0			
0029B:      	AR = PASR,0
            ; //_A8ADEC9C4_136:;				
            _A8ADEC9C4_136:
            ; //	asm AX = PCMY+0;			
0029C:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
0029E:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
0029F:      	rm[I1]	= AX
            ; //_A8ADEC9C4_137:;				
            _A8ADEC9C4_137:
            ; //	asm AX = PCMY+0;			
002A0:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
002A2:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
002A3:      	rm[I1]	= AX
            ; //_A8ADEC9C4_138:;				
            _A8ADEC9C4_138:
            ; //	io[0x3B]	= 0x0000;		
002A4:      	AR	= 0x00
002A5:      	io[0x3B]	= AR
            ; //_A8ADEC9C4_139:;				
            _A8ADEC9C4_139:
            ; //_A8ADEC9C4_140:;				
            _A8ADEC9C4_140:
            ; //	Subb3_Init();				
002A6:      	pch	= Subb3_Init
002A7:      	lcall	Subb3_Init
            ; //LFB78B58C_47:;					
            LFB78B58C_47:
            ; //_A8ADEC9C4_141:;				
            _A8ADEC9C4_141:
            ; //	return;					
002A8:      	rets
            ; //_Sub3Initial96BE24F3_end:;			
            _Sub3Initial96BE24F3_end:
            ; //_A8ADEC9C4_142:;				
            _A8ADEC9C4_142:
            ; //}
            ; //
            ; //rjmp void _WaitPCM_Empty_size53398B9D()		
            _WaitPCM_Empty_size53398B9D:
            ; //{
            ; //	__int16 _x_1_2;
            ; //						
002A9:      	AR	= rm[BP_SAVE]
002AA:      	push	AR
002AB:      	AR	= BP
002AC:      	rm[BP_SAVE]	= AR
002AD:      	AR	 = -1
002AE:      	BP	+= AR
            ; //_A8ADEC9C4_143:;				
            _A8ADEC9C4_143:
            ; //_A8ADEC9C4_144:;				
            _A8ADEC9C4_144:
            ; //	asm I1 = PCMYOU_PTR+0;			
002AF:      	I1 = PCMYOU_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
002B0:      	AX	= rm[I1]
            ; //	asm I1 = PCMYIN_PTR+0;			
002B1:      	I1 = PCMYIN_PTR+0//
            ; //	sCX	= *(__int16*)sSI;		
002B2:      	CX	= rm[I1]
            ; //	sAX	= sAX - sCX;			
002B3:      	AR	= CX
002B4:      	AX	-= AR
            ; //	
            ; //	sSI	= (int)&_x_1_2;			
002B5:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
002B6:      	rm[I1]	= AX
            ; //_A8ADEC9C4_145:;				
            _A8ADEC9C4_145:
            ; //	sSI	= (int)&_x_1_2;			
002B7:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002B8:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
002B9:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JL();			
002BA:      	pch	= sfx_CMP_AX_CX_JL
002BB:      	lcall	sfx_CMP_AX_CX_JL
            ; //	if(__je__)	goto LFB78B58C_50;	
002BC:      	if ZR	jmp LFB78B58C_50
            ; //	goto	LFB78B58C_49;			
002BD:      	jmp	LFB78B58C_49
            ; //LFB78B58C_50:;					
            LFB78B58C_50:
            ; //	
            ; //_A8ADEC9C4_146:;				
            _A8ADEC9C4_146:
            ; //	sAX	= 0x01FF;			
002BE:      	AX	= 0x01FF
            ; //	sSI	= (int)&_x_1_2;			
002C0:      	I1	= rm[BP_SAVE]
            ; //	sCX	= *(__int16*)sSI;		
002C1:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
002C2:      	AR	= CX
002C3:      	AX	&= AR
            ; //	sSI	= (int)&_x_1_2;			
002C4:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
002C5:      	rm[I1]	= AX
            ; //LFB78B58C_49:;					
            LFB78B58C_49:
            ; //_A8ADEC9C4_147:;				
            _A8ADEC9C4_147:
            ; //_A8ADEC9C4_148:;				
            _A8ADEC9C4_148:
            ; //	sSI	= (int)&_x_1_2;			
002C6:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002C7:      	AX	= rm[I1]
            ; //	sCX	= 0x0121;			
002C8:      	CX	= 0x0121
            ; //	sAX	= sAX - sCX;			
002CA:      	AR	= CX
002CB:      	AX	-= AR
            ; //	sSI	= (int)&_x_1_2;			
002CC:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
002CD:      	rm[I1]	= AX
            ; //_A8ADEC9C4_149:;				
            _A8ADEC9C4_149:
            ; //	sSI	= (int)&_x_1_2;			
002CE:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002CF:      	AX	= rm[I1]
            ; //	goto LFB78B58C_48;			
002D0:      	jmp	LFB78B58C_48
            ; //LFB78B58C_48:;					
            LFB78B58C_48:
            ; //_A8ADEC9C4_150:;				
            _A8ADEC9C4_150:
            ; //	return;					
002D1:      	AR	= 1
002D2:      	BP	+= AR
002D3:      	pop	AR
002D4:      	rm[BP_SAVE]	= AR
002D5:      	rets
            ; //_WaitPCM_Empty_size53398B9D_end:;		
            _WaitPCM_Empty_size53398B9D_end:
            ; //_A8ADEC9C4_151:;				
            _A8ADEC9C4_151:
            ; //}
            ; //
            ; //rjmp void _Sub3ZeroFillABFF23AA()		
            _Sub3ZeroFillABFF23AA:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
002D6:      	AR	= rm[BP_SAVE]
002D7:      	push	AR
002D8:      	AR	= BP
002D9:      	rm[BP_SAVE]	= AR
002DA:      	AR	 = -1
002DB:      	BP	+= AR
            ; //_A8ADEC9C4_152:;				
            _A8ADEC9C4_152:
            ; //_A8ADEC9C4_153:;				
            _A8ADEC9C4_153:
            ; //	asm	push CBL			
002DC:      	push CBL
            ; //_A8ADEC9C4_154:;				
            _A8ADEC9C4_154:
            ; //	io[0x3B]	= 0x0009;		
002DD:      	AR	= 0x09
002DE:      	io[0x3B]	= AR
            ; //	
            ; //_A8ADEC9C4_155:;				
            _A8ADEC9C4_155:
            ; //	asm I1 = PCMYIN_PTR+0;			
002DF:      	I1 = PCMYIN_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
002E0:      	AX	= rm[I1]
            ; //_A8ADEC9C4_156:;				
            _A8ADEC9C4_156:
            ; //	asm	AR = AX				
002E1:      	AR = AX
            ; //_A8ADEC9C4_157:;				
            _A8ADEC9C4_157:
            ; //	asm	I0 = AR				
002E2:      	I0 = AR
            ; //_A8ADEC9C4_158:;				
            _A8ADEC9C4_158:
            ; //	_i_1_2+0	= 0x0120;		
002E3:      	I1	= rm[BP_SAVE]
002E4:      	AR	= 0x0120
002E6:      	rm[I1]	= AR
            ; //LFB78B58C_53:;					
            LFB78B58C_53:
            ; //_A8ADEC9C4_159:;				
            _A8ADEC9C4_159:
            ; //	sSI	= (int)&_i_1_2;			
002E7:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002E8:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
002E9:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
002EA:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
002EB:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
002EC:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
002ED:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_54;	
002EE:      	if NZ	jmp LFB78B58C_54
            ; //	goto	LFB78B58C_52;			
002EF:      	jmp	LFB78B58C_52
            ; //LFB78B58C_54:;					
            LFB78B58C_54:
            ; //	
            ; //_A8ADEC9C4_160:;				
            _A8ADEC9C4_160:
            ; //	sAX	= 0x0000;			
002F0:      	AX	= 0x00
            ; //_A8ADEC9C4_161:;				
            _A8ADEC9C4_161:
            ; //	asm	rm[I0++] = AX			
002F1:      	rm[I0++] = AX
            ; //	goto LFB78B58C_53;			
002F2:      	jmp	LFB78B58C_53
            ; //LFB78B58C_52:;					
            LFB78B58C_52:
            ; //_A8ADEC9C4_162:;				
            _A8ADEC9C4_162:
            ; //_A8ADEC9C4_163:;				
            _A8ADEC9C4_163:
            ; //	get_I0();				
002F3:      	push	I0
002F4:      	pop	AX
            ; //	asm I1 = PCMYIN_PTR+0;			
002F5:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
002F6:      	rm[I1]	= AX
            ; //_A8ADEC9C4_164:;				
            _A8ADEC9C4_164:
            ; //	asm	pop CBL				
002F7:      	pop CBL
            ; //LFB78B58C_51:;					
            LFB78B58C_51:
            ; //_A8ADEC9C4_165:;				
            _A8ADEC9C4_165:
            ; //	return;					
002F8:      	AR	= 1
002F9:      	BP	+= AR
002FA:      	pop	AR
002FB:      	rm[BP_SAVE]	= AR
002FC:      	rets
            ; //_Sub3ZeroFillABFF23AA_end:;			
            _Sub3ZeroFillABFF23AA_end:
            ; //_A8ADEC9C4_166:;				
            _A8ADEC9C4_166:
            ; //}
            ; //
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1)
            _Sub3Play422CAD6D:
            ; //{						
002FD:      	AR	= rm[BP_SAVE]
002FE:      	push	AR
002FF:      	AR	= BP
00300:      	rm[BP_SAVE]	= AR
            ; //_A8ADEC9C4_167:;				
            _A8ADEC9C4_167:
            ; //	
            ; //_A8ADEC9C4_168:;				
            _A8ADEC9C4_168:
            ; //	sSI	= (int)&_sdata_0_4_0;		
00301:      	AR	= 2
00302:      	I1	= rm[BP_SAVE]
00303:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI++;		
00304:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00305:      	DX	= rm[I1--]
            ; //	asm I1 = bts_ch0_get_ix+0;		
00306:      	I1 = bts_ch0_get_ix+0//
            ; //	sfx_STORSILONG();			
00307:      	rm[I1++]	= AX
00308:      	rm[I1--]	= DX
            ; //_A8ADEC9C4_169:;				
            _A8ADEC9C4_169:
            ; //_A8ADEC9C4_170:;				
            _A8ADEC9C4_170:
            ; //	_Sub3Initial96BE24F3();			
00309:      	pch	= _Sub3Initial96BE24F3
0030A:      	lcall	_Sub3Initial96BE24F3
            ; //_A8ADEC9C4_171:;				
            _A8ADEC9C4_171:
            ; //	asm AX = SUBFLTI+0;			
0030B:      	AX = SUBFLTI+0//
            ; //	PUSH(sAX);				
0030C:      	push	AX
            ; //	sAX	= 0x0000;			
0030D:      	AX	= 0x00
            ; //	sSI	= POP();			
0030E:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
0030F:      	rm[I1]	= AX
            ; //_A8ADEC9C4_172:;				
            _A8ADEC9C4_172:
            ; //	asm AX = SUBFLTI+1;			
00310:      	AX = SUBFLTI+1//
            ; //	PUSH(sAX);				
00311:      	push	AX
            ; //	sAX	= 0x0000;			
00312:      	AX	= 0x00
            ; //	sSI	= POP();			
00313:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00314:      	rm[I1]	= AX
            ; //_A8ADEC9C4_173:;				
            _A8ADEC9C4_173:
            ; //	asm AX = SUBFLTI+2;			
00315:      	AX = SUBFLTI+2//
            ; //	PUSH(sAX);				
00316:      	push	AX
            ; //	sAX	= 0x0000;			
00317:      	AX	= 0x00
            ; //	sSI	= POP();			
00318:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00319:      	rm[I1]	= AX
            ; //_A8ADEC9C4_174:;				
            _A8ADEC9C4_174:
            ; //	asm AX = SUBFLTI+3;			
0031A:      	AX = SUBFLTI+3//
            ; //	PUSH(sAX);				
0031B:      	push	AX
            ; //	sAX	= 0x0000;			
0031C:      	AX	= 0x00
            ; //	sSI	= POP();			
0031D:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
0031E:      	rm[I1]	= AX
            ; //_A8ADEC9C4_175:;				
            _A8ADEC9C4_175:
            ; //	sAX	= 0x0000;			
0031F:      	AX	= 0x00
            ; //	asm I1 = SUBFLTA+0;			
00320:      	I1 = SUBFLTA+0//
            ; //	*(__int16*)sSI	= sAX			
00321:      	rm[I1]	= AX
            ; //_A8ADEC9C4_176:;				
            _A8ADEC9C4_176:
            ; //	asm I1 = SampleCh0Rate+0;		
00322:      	I1 = SampleCh0Rate+0//
            ; //	sAX	= *(__int16*)sSI;		
00323:      	AX	= rm[I1]
            ; //	asm I1 = SUBFLTP+0;			
00324:      	I1 = SUBFLTP+0//
            ; //	*(__int16*)sSI	= sAX			
00325:      	rm[I1]	= AX
            ; //_A8ADEC9C4_177:;				
            _A8ADEC9C4_177:
            ; //	sAX	= 0x003F;			
00326:      	AX	= 0x3F
            ; //	asm I1 = SUBFLTG+0;			
00327:      	I1 = SUBFLTG+0//
            ; //	*(__int16*)sSI	= sAX			
00328:      	rm[I1]	= AX
            ; //_A8ADEC9C4_178:;				
            _A8ADEC9C4_178:
            ; //	asm	set io[INTENA].b0		
00329:      	set io[INTENA].b0
            ; //_A8ADEC9C4_179:;				
            _A8ADEC9C4_179:
            ; //	asm	eni				
0032A:      	eni
            ; //LFB78B58C_55:;					
            LFB78B58C_55:
            ; //_A8ADEC9C4_180:;				
            _A8ADEC9C4_180:
            ; //	return;					
0032B:      	pop	AR
0032C:      	rm[BP_SAVE]	= AR
0032D:      	rets
            ; //_Sub3Play422CAD6D_end:;				
            _Sub3Play422CAD6D_end:
            ; //_A8ADEC9C4_181:;				
            _A8ADEC9C4_181:
            ; //}
            ; //
            ; //naked rjmp void Sbb_Ch0GetBts()			
            Sbb_Ch0GetBts:
            ; //{
            ; //_A8ADEC9C4_182:;				
            _A8ADEC9C4_182:
            ; //_A8ADEC9C4_183:;				
            _A8ADEC9C4_183:
            ; //	asm	push I1				
0032E:      	push I1
            ; //_A8ADEC9C4_184:;				
            _A8ADEC9C4_184:
            ; //	asm	push P1				
0032F:      	push P1
            ; //_A8ADEC9C4_185:;				
            _A8ADEC9C4_185:
            ; //	asm	push AX				
00330:      	push AX
            ; //_A8ADEC9C4_186:;				
            _A8ADEC9C4_186:
            ; //	asm	push BX				
00331:      	push BX
            ; //_A8ADEC9C4_187:;				
            _A8ADEC9C4_187:
            ; //	asm	push CX				
00332:      	push CX
            ; //_A8ADEC9C4_188:;				
            _A8ADEC9C4_188:
            ; //	asm	push DX				
00333:      	push DX
            ; //_A8ADEC9C4_189:;				
            _A8ADEC9C4_189:
            ; //	asm	AR = P1.hh			
00334:      	AR = P1.hh
            ; //_A8ADEC9C4_190:;				
            _A8ADEC9C4_190:
            ; //	asm	push AR				
00335:      	push AR
            ; //	
            ; //_A8ADEC9C4_191:;				
            _A8ADEC9C4_191:
            ; //_A8ADEC9C4_192:;				
            _A8ADEC9C4_192:
            ; //_A8ADEC9C4_193:;				
            _A8ADEC9C4_193:
            ; //	asm I1 = bts_ch0_get_ix+0;		
00336:      	I1 = bts_ch0_get_ix+0//
            ; //	sAX	= *(__int16*)sSI++;		
00337:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00338:      	DX	= rm[I1--]
            ; //	sSI	= (int)&bts_ch0_get_ix[0];	
00339:      	I1	= bts_ch0_get_ix
            ; //	PUSH(sAX);				
0033A:      	push	AX
            ; //	PUSH(sDX);				
0033B:      	push	DX
            ; //	sfx_GETSILONG_BXCX();			
0033C:      	CX	= rm[I1++]
0033D:      	BX	= rm[I1--]
            ; //	sAX = 0x0001;				
0033E:      	AX	= 0x01
            ; //	sDX = 0x0000;				
0033F:      	DX	= 0x00
            ; //	sfx_ADDLONG_BXCX_DXAX();		
00340:      	AR	= AX
00341:      	CX	= CX + AR
00342:      	AR	= DX
00343:      	BX	= BX + AR + C
            ; //	sfx_STORSILONG_BXCX();			
00344:      	rm[I1++]	= CX
00345:      	rm[I1--]	= BX
            ; //	sDX	= POP();			
00346:      	pop	DX
            ; //	sAX	= POP();			
00347:      	pop	AX
            ; //	_lptr_read(STACK[sSP + 0], STACK[sSP + 1]);
00348:      	pch	= _lptr_read
00349:      	lcall	_lptr_read
            ; //	vXCHG(STACK[sSP + 0]);			
0034A:      	AR	= AX
0034B:      	AX	= xchg AR
            ; //_A8ADEC9C4_194:;				
            _A8ADEC9C4_194:
            ; //	asm	pop AR				
0034C:      	pop AR
            ; //_A8ADEC9C4_195:;				
            _A8ADEC9C4_195:
            ; //	asm	P1.hh = AR			
0034D:      	P1.hh = AR
            ; //_A8ADEC9C4_196:;				
            _A8ADEC9C4_196:
            ; //	asm	AR = AX				
0034E:      	AR = AX
            ; //	
            ; //_A8ADEC9C4_197:;				
            _A8ADEC9C4_197:
            ; //	asm	pop DX				
0034F:      	pop DX
            ; //_A8ADEC9C4_198:;				
            _A8ADEC9C4_198:
            ; //	asm	pop CX				
00350:      	pop CX
            ; //_A8ADEC9C4_199:;				
            _A8ADEC9C4_199:
            ; //	asm	pop BX				
00351:      	pop BX
            ; //_A8ADEC9C4_200:;				
            _A8ADEC9C4_200:
            ; //	asm	pop AX				
00352:      	pop AX
            ; //_A8ADEC9C4_201:;				
            _A8ADEC9C4_201:
            ; //	asm	pop P1				
00353:      	pop P1
            ; //_A8ADEC9C4_202:;				
            _A8ADEC9C4_202:
            ; //	asm	pop I1				
00354:      	pop I1
            ; //LFB78B58C_56:;					
            LFB78B58C_56:
            ; //_A8ADEC9C4_203:;				
            _A8ADEC9C4_203:
            ; //	return;					
00355:      	rets
            ; //Sbb_Ch0GetBts_end:;				
            Sbb_Ch0GetBts_end:
            ; //_A8ADEC9C4_204:;				
            _A8ADEC9C4_204:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3play_8ED4FA41_s(void)	
            ginit_code_sub3play_8ED4FA41_s:
            ; //{
            ; //	return;					
00356:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> End=========================
            
            ;=========================Include <ASMFUNC\SUPPORT.ASM> Start=========================
            Pwm_process:    
00357:      		CLR             IO[INTREQ].B0                                                 
00358:                      push            i0                              
00359:                      push            cx                              
0035A:                      push            CBL                             
0035B:                      ar              = 9                             ; 
0035C:                      CBL             = ar                            ; 
            //---------------------
0035D:                      cx              = 0x3                           ; 
0035E:                      i0              = rm[PCMYOU_PTR]                ; 
            L_dac_fill_lp:                                                  
0035F:                      jfa             L_filter_out                    // check filter buffer availed
00360:                      FLTI            = rm[i0++]                      ;   // filter in
            L_filter_out:                                                   
00361:                      ar              = FLTO                          ;   // get filter out, and start delay 4 cycles to get next filter out
00362:                      io[DACL]        = ar                            // output PWM DAC
00363:                      nop                                             
00364:                      loop            L_dac_fill_lp                   
            
00365:                      rm[PCMYOU_PTR]  = i0                            // restore index
00366:                      pop             CBL                             
00367:                      pop             cx                              
00368:                      pop             i0                            
                            
00369:                      RETI  
            Pwm_process_end: 
            ///////////////////////////////////////////////////////////////////////////////////////////////
            F_ChangePWMVectTabletobank2:                                            
            // eable int-vector table access		
0036A:                      set             io[STATUS].b13 
0036B:                      i1		= PCMY                 
0036D:                      cx		= 4
            F_ChangePWMVectTabletobank2_lp:                            
0036E:      		ar              = io[0x3]                      ; 
0036F:                      rm[i1++]        = ar                           ;	// Int5~0         
00370:      		ar		= pcb 
00371:                      rm[i1++]        = ar                           ;	// Int5~0 pcb    
00372:                      loop            F_ChangePWMVectTabletobank2_lp          
             		//pwm to bank2         
             		; ar              = 0x039c                       ; 	// pwm addr .. ;0~0x039b has used by subband 2 
                            ; rm[i1++]        = ar                           ;	// Int5~0
             		; ar		= RAMBANK 
                            ; rm[i1++]        = ar                           ;	// Int5~0 pcb 		
00373:       		ar              = #PWM_process                       ; 	// pwm addr .. ;0~0x039b has used by subband 2 
00375:                      rm[i1++]        = ar                           ;	// Int5~0
00376:       		ar		= 0 
00377:                      rm[i1++]        = ar                           ;	// Int5~0 pcb 		
            		
00378:                      clr             io[STATUS].b13 
                            
00379:                      set             io[STATUS].b13 
0037A:                      i1		= PCMY 
                            //write new int-vector	
0037C:      		cx		= 5
            F_ChangePWMVectTabletobank2_lp2:                 
0037D:      		ax		= rm[i1++]  
0037E:      		ar		= rm[i1++] 
0037F:      		pcb		= ar     
00380:      		ar		= ax 
00381:      		io[0x3]		= ar 	
00382:      		pcb		= 0 	
00383:                      loop            F_ChangePWMVectTabletobank2_lp2  
                                            
                            // Dis-int-vector table access
00384:                      clr             io[STATUS].b13   
                            
                            ; p1 =		0x039c                
                            ; p0		= #Pwm_process
            		; ar		= #Pwm_process_end	
            		; pch=		MoveProgToBank2
            		; lcall		MoveProgToBank2
00385:      		p1.hh		= 0 
            		               
00386:                      rets                                            
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////
            MoveProgToBank2:	
00387:      		CBL		= 0 	
00388:      		p1.hh=		7	
00389:      		p0.hh		= 0		
0038A:      		ar		= ar - p0 
0038B:      		cx		= ar
0038C:      		cx-- 
            	MoveProgToBank2_Loop:	
0038D:      		ar		= pm[p0++]
0038E:      		pm[p1++]	= ar	
0038F:      		loop		MoveProgToBank2_Loop
00390:      		p1		= 0		
00391:      		rets
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <ASMFUNC\SUPPORT.ASM> End=========================
            
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> Start=========================
            ; WS2811.c Code Start!!;
            VarRM[0:4095]={
             LD63FD439_57,LD63FD439_114,_LED_Buf98A4A35A[20],_sum6BC8EB73,LD63FD439_70 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4);
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6);
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8);
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6);
            ; //void _WS_RefreshAD7B99B1();
            ; //void _WS_Key_RGBC5B96B6D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4)	
            _WS_Send24bits851C5C55:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00392:      	AR	= rm[BP_SAVE]
00393:      	push	AR
00394:      	AR	= BP
00395:      	rm[BP_SAVE]	= AR
00396:      	AR	 = -1
00397:      	BP	+= AR
            ; //_A8ADEC9C4_205:;				
            _A8ADEC9C4_205:
            ; //_A8ADEC9C4_206:;				
            _A8ADEC9C4_206:
            ; //	_i_1_2+0	= 0x00;			
00398:      	I1	= rm[BP_SAVE]
00399:      	AR	= 0x00
0039A:      	rm[I1]	= AR
            ; //LD63FD439_60:;					
            LD63FD439_60:
            ; //	sSI	= (int)&_i_1_2;			
0039B:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
0039C:      	AX	= rm[I1]
            ; //	sCX	= 0x0018;			
0039D:      	CX	= 0x18
            ; //	sfx_CMP_AX_CX_JB();			
0039E:      	pch	= sfx_CMP_AX_CX_JB
0039F:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_64;	
003A0:      	if ZR	jmp LD63FD439_64
            ; //	goto	LD63FD439_62;			
003A1:      	pch =	LD63FD439_62
003A2:      	ljmp	LD63FD439_62
            ; //LD63FD439_64:;					
            LD63FD439_64:
            ; //	goto LD63FD439_61;			
003A3:      	pch =	LD63FD439_61
003A4:      	ljmp	LD63FD439_61
            ; //LD63FD439_63:;					
            LD63FD439_63:
            ; //	sSI	= (int)&_i_1_2;			
003A5:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
003A6:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
003A7:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
003A8:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
003A9:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
003AA:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_60;			
003AB:      	pch =	LD63FD439_60
003AC:      	ljmp	LD63FD439_60
            ; //LD63FD439_61:;					
            LD63FD439_61:
            ; //	
            ; //_A8ADEC9C4_207:;				
            _A8ADEC9C4_207:
            ; //	sSI	= (int)&_color_0_4;		
003AD:      	AR	= 2
003AE:      	I1	= rm[BP_SAVE]
003AF:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
003B0:      	AX	= rm[I1]
            ; //	asm AR = 0x0000;			
003B1:      	AR = 0x0000//
            ; //	asm AX = AX & AR;			
003B2:      	AX = AX & AR//
            ; //	sfx_CHECKZERO();			
003B3:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_66;	
003B4:      	if NZ	jmp LD63FD439_66
            ; //	goto	LD63FD439_65;			
003B5:      	pch =	LD63FD439_65
003B6:      	ljmp	LD63FD439_65
            ; //LD63FD439_66:;					
            LD63FD439_66:
            ; //	
            ; //_A8ADEC9C4_208:;				
            _A8ADEC9C4_208:
            ; //	asm set io[0x09].b14;			
003B7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_209:;				
            _A8ADEC9C4_209:
            ; //	asm	nop				
003B8:      	nop
            ; //_A8ADEC9C4_210:;				
            _A8ADEC9C4_210:
            ; //	asm	nop				
003B9:      	nop
            ; //_A8ADEC9C4_211:;				
            _A8ADEC9C4_211:
            ; //	asm	nop				
003BA:      	nop
            ; //_A8ADEC9C4_212:;				
            _A8ADEC9C4_212:
            ; //	asm	nop				
003BB:      	nop
            ; //_A8ADEC9C4_213:;				
            _A8ADEC9C4_213:
            ; //	asm	nop				
003BC:      	nop
            ; //_A8ADEC9C4_214:;				
            _A8ADEC9C4_214:
            ; //	asm	nop				
003BD:      	nop
            ; //_A8ADEC9C4_215:;				
            _A8ADEC9C4_215:
            ; //	asm	nop				
003BE:      	nop
            ; //_A8ADEC9C4_216:;				
            _A8ADEC9C4_216:
            ; //	asm	nop				
003BF:      	nop
            ; //_A8ADEC9C4_217:;				
            _A8ADEC9C4_217:
            ; //	asm	nop				
003C0:      	nop
            ; //_A8ADEC9C4_218:;				
            _A8ADEC9C4_218:
            ; //	asm	nop				
003C1:      	nop
            ; //_A8ADEC9C4_219:;				
            _A8ADEC9C4_219:
            ; //	asm	nop				
003C2:      	nop
            ; //_A8ADEC9C4_220:;				
            _A8ADEC9C4_220:
            ; //	asm	nop				
003C3:      	nop
            ; //_A8ADEC9C4_221:;				
            _A8ADEC9C4_221:
            ; //	asm clr io[0x09].b14;			
003C4:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_222:;				
            _A8ADEC9C4_222:
            ; //	asm	nop				
003C5:      	nop
            ; //_A8ADEC9C4_223:;				
            _A8ADEC9C4_223:
            ; //	asm	nop				
003C6:      	nop
            ; //_A8ADEC9C4_224:;				
            _A8ADEC9C4_224:
            ; //	asm	nop				
003C7:      	nop
            ; //	goto LD63FD439_67;			
003C8:      	pch =	LD63FD439_67
003C9:      	ljmp	LD63FD439_67
            ; //LD63FD439_65:;					
            LD63FD439_65:
            ; //_A8ADEC9C4_225:;				
            _A8ADEC9C4_225:
            ; //	asm set io[0x09].b14;			
003CA:      	set io[0x09].b14//
            ; //LD63FD439_67:;					
            LD63FD439_67:
            ; //_A8ADEC9C4_226:;				
            _A8ADEC9C4_226:
            ; //_A8ADEC9C4_227:;				
            _A8ADEC9C4_227:
            ; //	asm	nop				
003CB:      	nop
            ; //_A8ADEC9C4_228:;				
            _A8ADEC9C4_228:
            ; //	asm	nop				
003CC:      	nop
            ; //_A8ADEC9C4_229:;				
            _A8ADEC9C4_229:
            ; //	asm	nop				
003CD:      	nop
            ; //_A8ADEC9C4_230:;				
            _A8ADEC9C4_230:
            ; //	asm clr io[0x09].b14;			
003CE:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_231:;				
            _A8ADEC9C4_231:
            ; //	asm	nop				
003CF:      	nop
            ; //_A8ADEC9C4_232:;				
            _A8ADEC9C4_232:
            ; //	asm	nop				
003D0:      	nop
            ; //_A8ADEC9C4_233:;				
            _A8ADEC9C4_233:
            ; //	asm	nop				
003D1:      	nop
            ; //_A8ADEC9C4_234:;				
            _A8ADEC9C4_234:
            ; //	asm	nop				
003D2:      	nop
            ; //_A8ADEC9C4_235:;				
            _A8ADEC9C4_235:
            ; //	asm	nop				
003D3:      	nop
            ; //_A8ADEC9C4_236:;				
            _A8ADEC9C4_236:
            ; //	asm	nop				
003D4:      	nop
            ; //_A8ADEC9C4_237:;				
            _A8ADEC9C4_237:
            ; //	asm	nop				
003D5:      	nop
            ; //_A8ADEC9C4_238:;				
            _A8ADEC9C4_238:
            ; //	asm	nop				
003D6:      	nop
            ; //_A8ADEC9C4_239:;				
            _A8ADEC9C4_239:
            ; //	asm	nop				
003D7:      	nop
            ; //_A8ADEC9C4_240:;				
            _A8ADEC9C4_240:
            ; //	asm	nop				
003D8:      	nop
            ; //_A8ADEC9C4_241:;				
            _A8ADEC9C4_241:
            ; //	asm	nop				
003D9:      	nop
            ; //_A8ADEC9C4_242:;				
            _A8ADEC9C4_242:
            ; //	asm	nop				
003DA:      	nop
            ; //_A8ADEC9C4_243:;				
            _A8ADEC9C4_243:
            ; //	sSI	= (int)&_color_0_4;		
003DB:      	AR	= 2
003DC:      	I1	= rm[BP_SAVE]
003DD:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
003DE:      	AX	= rm[I1]
            ; //	asm slz AX, 1;				
003DF:      	slz AX, 1//
            ; //	sSI	= (int)&_color_0_4;		
003E0:      	AR	= 2
003E1:      	I1	= rm[BP_SAVE]
003E2:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
003E3:      	rm[I1]	= AX
            ; //	goto LD63FD439_63;			
003E4:      	pch =	LD63FD439_63
003E5:      	ljmp	LD63FD439_63
            ; //LD63FD439_62:;					
            LD63FD439_62:
            ; //_A8ADEC9C4_244:;				
            _A8ADEC9C4_244:
            ; //LD63FD439_59:;					
            LD63FD439_59:
            ; //_A8ADEC9C4_245:;				
            _A8ADEC9C4_245:
            ; //	return;					
003E6:      	AR	= 1
003E7:      	BP	+= AR
003E8:      	pop	AR
003E9:      	rm[BP_SAVE]	= AR
003EA:      	rets
            ; //_WS_Send24bits851C5C55_end:;			
            _WS_Send24bits851C5C55_end:
            ; //_A8ADEC9C4_246:;				
            _A8ADEC9C4_246:
            ; //}
            ; //
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6)
            _WS_Color_copyADB1DFED:
            ; //{						
003EB:      	AR	= rm[BP_SAVE]
003EC:      	push	AR
003ED:      	AR	= BP
003EE:      	rm[BP_SAVE]	= AR
            ; //_A8ADEC9C4_247:;				
            _A8ADEC9C4_247:
            ; //	
            ; //_A8ADEC9C4_248:;				
            _A8ADEC9C4_248:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
003EF:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
003F0:      	push	AX
            ; //	sSI	= (int)&_No_0_4;		
003F1:      	AR	= 2
003F2:      	I1	= rm[BP_SAVE]
003F3:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
003F4:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
003F5:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
003F6:      	pch	= sfx_IMUL_AX_CX
003F7:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
003F8:      	pop	CX
            ; //	sAX	= sAX + sCX;			
003F9:      	AR	= CX
003FA:      	AX	+= AR
            ; //	PUSH(sAX);				
003FB:      	push	AX
            ; //	sSI	= (int)&_color_0_6;		
003FC:      	AR	= 3
003FD:      	I1	= rm[BP_SAVE]
003FE:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
003FF:      	AX	= rm[I1]
            ; //	sfx_UINT2ULONG_AX();			
00400:      	DX	= 0
            ; //	sSI	= POP();			
00401:      	pop	I1
            ; //	sfx_STORSILONG();			
00402:      	rm[I1++]	= AX
00403:      	rm[I1--]	= DX
            ; //LD63FD439_68:;					
            LD63FD439_68:
            ; //_A8ADEC9C4_249:;				
            _A8ADEC9C4_249:
            ; //	return;					
00404:      	pop	AR
00405:      	rm[BP_SAVE]	= AR
00406:      	rets
            ; //_WS_Color_copyADB1DFED_end:;			
            _WS_Color_copyADB1DFED_end:
            ; //_A8ADEC9C4_250:;				
            _A8ADEC9C4_250:
            ; //}
            ; //
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8)
            _WS_ColorSet_LEDCA3DEB8C:
            ; //{						
00407:      	AR	= rm[BP_SAVE]
00408:      	push	AR
00409:      	AR	= BP
0040A:      	rm[BP_SAVE]	= AR
            ; //_A8ADEC9C4_251:;				
            _A8ADEC9C4_251:
            ; //	
            ; //_A8ADEC9C4_252:;				
            _A8ADEC9C4_252:
            ; //	sSI	= (int)&_to_0_6;		
0040B:      	AR	= 3
0040C:      	I1	= rm[BP_SAVE]
0040D:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0040E:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
0040F:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00410:      	pch	= sfx_CMP_AX_CX_JBE
00411:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_72;	
00412:      	if ZR	jmp LD63FD439_72
            ; //	sAX	= 1;				
00413:      	AX	= 0x01
            ; //	goto	LD63FD439_73;			
00414:      	pch =	LD63FD439_73
00415:      	ljmp	LD63FD439_73
            ; //LD63FD439_72:;					
            LD63FD439_72:
            ; //	sAX	= 0;				
00416:      	AX	= 0x00
            ; //LD63FD439_73:;					
            LD63FD439_73:
            ; //	sfx_CHECKZERO();			
00417:      	AR	= AX
            ; //	if(__jz__)	goto LD63FD439_74;	
00418:      	if ZR	jmp LD63FD439_74
            ; //	goto	LD63FD439_71;			
00419:      	pch =	LD63FD439_71
0041A:      	ljmp	LD63FD439_71
            ; //LD63FD439_74:;					
            LD63FD439_74:
            ; //	sSI	= (int)&_from_0_4;		
0041B:      	AR	= 2
0041C:      	I1	= rm[BP_SAVE]
0041D:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0041E:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
0041F:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JAE();			
00420:      	pch	= sfx_CMP_AX_CX_JAE
00421:      	lcall	sfx_CMP_AX_CX_JAE
            ; //	if(__je__)	goto LD63FD439_75;	
00422:      	if ZR	jmp LD63FD439_75
            ; //	sAX	= 1;				
00423:      	AX	= 0x01
            ; //	goto	LD63FD439_76;			
00424:      	pch =	LD63FD439_76
00425:      	ljmp	LD63FD439_76
            ; //LD63FD439_75:;					
            LD63FD439_75:
            ; //	sAX	= 0;				
00426:      	AX	= 0x00
            ; //LD63FD439_76:;					
            LD63FD439_76:
            ; //LD63FD439_71:;					
            LD63FD439_71:
            ; //	sfx_CHECKZERO();			
00427:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_78;	
00428:      	if NZ	jmp LD63FD439_78
            ; //	goto	LD63FD439_77;			
00429:      	pch =	LD63FD439_77
0042A:      	ljmp	LD63FD439_77
            ; //LD63FD439_78:;					
            LD63FD439_78:
            ; //	
            ; //_A8ADEC9C4_253:;				
            _A8ADEC9C4_253:
            ; //	_to_0_6+0	= 0x03;			
0042B:      	AR	= 3
0042C:      	I1	= rm[BP_SAVE]
0042D:      	I1	+= AR
0042E:      	AR	= 0x03
0042F:      	rm[I1]	= AR
            ; //_A8ADEC9C4_254:;				
            _A8ADEC9C4_254:
            ; //	_from_0_4+0	= 0x00;			
00430:      	AR	= 2
00431:      	I1	= rm[BP_SAVE]
00432:      	I1	+= AR
00433:      	AR	= 0x00
00434:      	rm[I1]	= AR
            ; //LD63FD439_77:;					
            LD63FD439_77:
            ; //_A8ADEC9C4_255:;				
            _A8ADEC9C4_255:
            ; //_A8ADEC9C4_256:;				
            _A8ADEC9C4_256:
            ; //	sAX	= 0xFFFF;			
00435:      	AX	= 0xFFFF
            ; //	sSI	= (int)&_color_0_8;		
00437:      	AR	= 4
00438:      	I1	= rm[BP_SAVE]
00439:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
0043A:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
0043B:      	AR	= CX
0043C:      	AX	&= AR
            ; //	sSI	= (int)&_color_0_8;		
0043D:      	AR	= 4
0043E:      	I1	= rm[BP_SAVE]
0043F:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00440:      	rm[I1]	= AX
            ; //_A8ADEC9C4_257:;				
            _A8ADEC9C4_257:
            ; //	sSI	= (int)&_from_0_4;		
00441:      	AR	= 2
00442:      	I1	= rm[BP_SAVE]
00443:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00444:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
00445:      	AR	= 3
00446:      	I1	= rm[BP_SAVE]
00447:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
00448:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JA();			
00449:      	pch	= sfx_CMP_AX_CX_JA
0044A:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_80;	
0044B:      	if ZR	jmp LD63FD439_80
            ; //	goto	LD63FD439_79;			
0044C:      	pch =	LD63FD439_79
0044D:      	ljmp	LD63FD439_79
            ; //LD63FD439_80:;					
            LD63FD439_80:
            ; //	
            ; //_A8ADEC9C4_258:;				
            _A8ADEC9C4_258:
            ; //	sSI	= (int)&_from_0_4;		
0044E:      	AR	= 2
0044F:      	I1	= rm[BP_SAVE]
00450:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00451:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_70;		
00452:      	I1	= LD63FD439_70
            ; //	*(__int16*)sSI	= sAX			
00453:      	rm[I1]	= AX
            ; //_A8ADEC9C4_259:;				
            _A8ADEC9C4_259:
            ; //	sSI	= (int)&_to_0_6;		
00454:      	AR	= 3
00455:      	I1	= rm[BP_SAVE]
00456:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00457:      	AX	= rm[I1]
            ; //	sSI	= (int)&_from_0_4;		
00458:      	AR	= 2
00459:      	I1	= rm[BP_SAVE]
0045A:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
0045B:      	rm[I1]	= AX
            ; //_A8ADEC9C4_260:;				
            _A8ADEC9C4_260:
            ; //	asm I1 = LD63FD439_70+0;		
0045C:      	I1 = LD63FD439_70+0//
            ; //	sAX	= *(__int16*)sSI;		
0045D:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
0045E:      	AR	= 3
0045F:      	I1	= rm[BP_SAVE]
00460:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00461:      	rm[I1]	= AX
            ; //LD63FD439_79:;					
            LD63FD439_79:
            ; //_A8ADEC9C4_261:;				
            _A8ADEC9C4_261:
            ; //_A8ADEC9C4_262:;				
            _A8ADEC9C4_262:
            ; //	sSI	= (int)&_from_0_4;		
00462:      	AR	= 2
00463:      	I1	= rm[BP_SAVE]
00464:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00465:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_70;		
00466:      	I1	= LD63FD439_70
            ; //	*(__int16*)sSI	= sAX			
00467:      	rm[I1]	= AX
            ; //LD63FD439_81:;					
            LD63FD439_81:
            ; //	asm I1 = LD63FD439_70+0;		
00468:      	I1 = LD63FD439_70+0//
            ; //	sAX	= *(__int16*)sSI;		
00469:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
0046A:      	AR	= 3
0046B:      	I1	= rm[BP_SAVE]
0046C:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
0046D:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JLE();			
0046E:      	pch	= sfx_CMP_AX_CX_JLE
0046F:      	lcall	sfx_CMP_AX_CX_JLE
            ; //	if(__je__)	goto LD63FD439_85;	
00470:      	if ZR	jmp LD63FD439_85
            ; //	goto	LD63FD439_83;			
00471:      	pch =	LD63FD439_83
00472:      	ljmp	LD63FD439_83
            ; //LD63FD439_85:;					
            LD63FD439_85:
            ; //	goto LD63FD439_82;			
00473:      	pch =	LD63FD439_82
00474:      	ljmp	LD63FD439_82
            ; //LD63FD439_84:;					
            LD63FD439_84:
            ; //	asm I1 = LD63FD439_70+0;		
00475:      	I1 = LD63FD439_70+0//
            ; //	sAX	= *(__int16*)sSI;		
00476:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_70;		
00477:      	I1	= LD63FD439_70
            ; //	PUSH(sAX);				
00478:      	push	AX
            ; //	sAX	= 0x0001;			
00479:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
0047A:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
0047B:      	AR	= AX
0047C:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
0047D:      	rm[I1]	= CX
            ; //	sAX	= POP();			
0047E:      	pop	AX
            ; //	goto LD63FD439_81;			
0047F:      	pch =	LD63FD439_81
00480:      	ljmp	LD63FD439_81
            ; //LD63FD439_82:;					
            LD63FD439_82:
            ; //	
            ; //_A8ADEC9C4_263:;				
            _A8ADEC9C4_263:
            ; //_A8ADEC9C4_264:;				
            _A8ADEC9C4_264:
            ; //	sSI	= (int)&_color_0_8;		
00481:      	AR	= 4
00482:      	I1	= rm[BP_SAVE]
00483:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00484:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
00485:      	push	AX
            ; //	asm I1 = LD63FD439_70+0;		
00486:      	I1 = LD63FD439_70+0//
            ; //	sAX	= *(__int16*)sSI;		
00487:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
00488:      	push	AX
            ; //	_WS_Color_copyADB1DFED(STACK[sSP + 0], STACK[sSP + 1]);
00489:      	pch	= _WS_Color_copyADB1DFED
0048A:      	lcall	_WS_Color_copyADB1DFED
            ; //	RESTORESP(2);				
0048B:      	pop	AR
0048C:      	pop	AR
            ; //	goto LD63FD439_84;			
0048D:      	pch =	LD63FD439_84
0048E:      	ljmp	LD63FD439_84
            ; //LD63FD439_83:;					
            LD63FD439_83:
            ; //_A8ADEC9C4_265:;				
            _A8ADEC9C4_265:
            ; //LD63FD439_69:;					
            LD63FD439_69:
            ; //_A8ADEC9C4_266:;				
            _A8ADEC9C4_266:
            ; //	return;					
0048F:      	pop	AR
00490:      	rm[BP_SAVE]	= AR
00491:      	rets
            ; //_WS_ColorSet_LEDCA3DEB8C_end:;			
            _WS_ColorSet_LEDCA3DEB8C_end:
            ; //_A8ADEC9C4_267:;				
            _A8ADEC9C4_267:
            ; //}
            ; //
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6)
            _WS_TRSF_color_setE1CC300C:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00492:      	AR	= rm[BP_SAVE]
00493:      	push	AR
00494:      	AR	= BP
00495:      	rm[BP_SAVE]	= AR
00496:      	AR	 = -1
00497:      	BP	+= AR
            ; //_A8ADEC9C4_268:;				
            _A8ADEC9C4_268:
            ; //_A8ADEC9C4_269:;				
            _A8ADEC9C4_269:
            ; //	_i_1_2+0	= 0x00;			
00498:      	I1	= rm[BP_SAVE]
00499:      	AR	= 0x00
0049A:      	rm[I1]	= AR
            ; //LD63FD439_87:;					
            LD63FD439_87:
            ; //	sSI	= (int)&_i_1_2;			
0049B:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
0049C:      	AX	= rm[I1]
            ; //	sSI	= (int)&_Led_num_0_6;		
0049D:      	AR	= 3
0049E:      	I1	= rm[BP_SAVE]
0049F:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
004A0:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JB();			
004A1:      	pch	= sfx_CMP_AX_CX_JB
004A2:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_91;	
004A3:      	if ZR	jmp LD63FD439_91
            ; //	goto	LD63FD439_89;			
004A4:      	pch =	LD63FD439_89
004A5:      	ljmp	LD63FD439_89
            ; //LD63FD439_91:;					
            LD63FD439_91:
            ; //	goto LD63FD439_88;			
004A6:      	pch =	LD63FD439_88
004A7:      	ljmp	LD63FD439_88
            ; //LD63FD439_90:;					
            LD63FD439_90:
            ; //	sSI	= (int)&_i_1_2;			
004A8:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
004A9:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
004AA:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
004AB:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
004AC:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
004AD:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_87;			
004AE:      	pch =	LD63FD439_87
004AF:      	ljmp	LD63FD439_87
            ; //LD63FD439_88:;					
            LD63FD439_88:
            ; //	
            ; //_A8ADEC9C4_270:;				
            _A8ADEC9C4_270:
            ; //	sSI	= (int)&_color_0_4;		
004B0:      	AR	= 2
004B1:      	I1	= rm[BP_SAVE]
004B2:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
004B3:      	AX	= rm[I1]
            ; //	goto LD63FD439_93;			
004B4:      	pch =	LD63FD439_93
004B5:      	ljmp	LD63FD439_93
            ; //LD63FD439_94:;					
            LD63FD439_94:
            ; //_A8ADEC9C4_271:;				
            _A8ADEC9C4_271:
            ; //	asm set io[0x09].b14;			
004B6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_272:;				
            _A8ADEC9C4_272:
            ; //	asm	nop				
004B7:      	nop
            ; //_A8ADEC9C4_273:;				
            _A8ADEC9C4_273:
            ; //	asm	nop				
004B8:      	nop
            ; //_A8ADEC9C4_274:;				
            _A8ADEC9C4_274:
            ; //	asm	nop				
004B9:      	nop
            ; //_A8ADEC9C4_275:;				
            _A8ADEC9C4_275:
            ; //	asm	nop				
004BA:      	nop
            ; //_A8ADEC9C4_276:;				
            _A8ADEC9C4_276:
            ; //	asm	nop				
004BB:      	nop
            ; //_A8ADEC9C4_277:;				
            _A8ADEC9C4_277:
            ; //	asm	nop				
004BC:      	nop
            ; //_A8ADEC9C4_278:;				
            _A8ADEC9C4_278:
            ; //	asm	nop				
004BD:      	nop
            ; //_A8ADEC9C4_279:;				
            _A8ADEC9C4_279:
            ; //	asm	nop				
004BE:      	nop
            ; //_A8ADEC9C4_280:;				
            _A8ADEC9C4_280:
            ; //	asm	nop				
004BF:      	nop
            ; //_A8ADEC9C4_281:;				
            _A8ADEC9C4_281:
            ; //	asm	nop				
004C0:      	nop
            ; //_A8ADEC9C4_282:;				
            _A8ADEC9C4_282:
            ; //	asm	nop				
004C1:      	nop
            ; //_A8ADEC9C4_283:;				
            _A8ADEC9C4_283:
            ; //	asm	nop				
004C2:      	nop
            ; //_A8ADEC9C4_284:;				
            _A8ADEC9C4_284:
            ; //	asm clr io[0x09].b14;			
004C3:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_285:;				
            _A8ADEC9C4_285:
            ; //	asm	nop				
004C4:      	nop
            ; //_A8ADEC9C4_286:;				
            _A8ADEC9C4_286:
            ; //	asm	nop				
004C5:      	nop
            ; //_A8ADEC9C4_287:;				
            _A8ADEC9C4_287:
            ; //	asm	nop				
004C6:      	nop
            ; //_A8ADEC9C4_288:;				
            _A8ADEC9C4_288:
            ; //	asm set io[0x09].b14;			
004C7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_289:;				
            _A8ADEC9C4_289:
            ; //	asm	nop				
004C8:      	nop
            ; //_A8ADEC9C4_290:;				
            _A8ADEC9C4_290:
            ; //	asm	nop				
004C9:      	nop
            ; //_A8ADEC9C4_291:;				
            _A8ADEC9C4_291:
            ; //	asm	nop				
004CA:      	nop
            ; //_A8ADEC9C4_292:;				
            _A8ADEC9C4_292:
            ; //	asm	nop				
004CB:      	nop
            ; //_A8ADEC9C4_293:;				
            _A8ADEC9C4_293:
            ; //	asm	nop				
004CC:      	nop
            ; //_A8ADEC9C4_294:;				
            _A8ADEC9C4_294:
            ; //	asm	nop				
004CD:      	nop
            ; //_A8ADEC9C4_295:;				
            _A8ADEC9C4_295:
            ; //	asm	nop				
004CE:      	nop
            ; //_A8ADEC9C4_296:;				
            _A8ADEC9C4_296:
            ; //	asm	nop				
004CF:      	nop
            ; //_A8ADEC9C4_297:;				
            _A8ADEC9C4_297:
            ; //	asm	nop				
004D0:      	nop
            ; //_A8ADEC9C4_298:;				
            _A8ADEC9C4_298:
            ; //	asm	nop				
004D1:      	nop
            ; //_A8ADEC9C4_299:;				
            _A8ADEC9C4_299:
            ; //	asm	nop				
004D2:      	nop
            ; //_A8ADEC9C4_300:;				
            _A8ADEC9C4_300:
            ; //	asm	nop				
004D3:      	nop
            ; //_A8ADEC9C4_301:;				
            _A8ADEC9C4_301:
            ; //	asm clr io[0x09].b14;			
004D4:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_302:;				
            _A8ADEC9C4_302:
            ; //	asm	nop				
004D5:      	nop
            ; //_A8ADEC9C4_303:;				
            _A8ADEC9C4_303:
            ; //	asm	nop				
004D6:      	nop
            ; //_A8ADEC9C4_304:;				
            _A8ADEC9C4_304:
            ; //	asm	nop				
004D7:      	nop
            ; //_A8ADEC9C4_305:;				
            _A8ADEC9C4_305:
            ; //	asm set io[0x09].b14;			
004D8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_306:;				
            _A8ADEC9C4_306:
            ; //	asm	nop				
004D9:      	nop
            ; //_A8ADEC9C4_307:;				
            _A8ADEC9C4_307:
            ; //	asm	nop				
004DA:      	nop
            ; //_A8ADEC9C4_308:;				
            _A8ADEC9C4_308:
            ; //	asm	nop				
004DB:      	nop
            ; //_A8ADEC9C4_309:;				
            _A8ADEC9C4_309:
            ; //	asm	nop				
004DC:      	nop
            ; //_A8ADEC9C4_310:;				
            _A8ADEC9C4_310:
            ; //	asm	nop				
004DD:      	nop
            ; //_A8ADEC9C4_311:;				
            _A8ADEC9C4_311:
            ; //	asm	nop				
004DE:      	nop
            ; //_A8ADEC9C4_312:;				
            _A8ADEC9C4_312:
            ; //	asm	nop				
004DF:      	nop
            ; //_A8ADEC9C4_313:;				
            _A8ADEC9C4_313:
            ; //	asm	nop				
004E0:      	nop
            ; //_A8ADEC9C4_314:;				
            _A8ADEC9C4_314:
            ; //	asm	nop				
004E1:      	nop
            ; //_A8ADEC9C4_315:;				
            _A8ADEC9C4_315:
            ; //	asm	nop				
004E2:      	nop
            ; //_A8ADEC9C4_316:;				
            _A8ADEC9C4_316:
            ; //	asm	nop				
004E3:      	nop
            ; //_A8ADEC9C4_317:;				
            _A8ADEC9C4_317:
            ; //	asm	nop				
004E4:      	nop
            ; //_A8ADEC9C4_318:;				
            _A8ADEC9C4_318:
            ; //	asm clr io[0x09].b14;			
004E5:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_319:;				
            _A8ADEC9C4_319:
            ; //	asm	nop				
004E6:      	nop
            ; //_A8ADEC9C4_320:;				
            _A8ADEC9C4_320:
            ; //	asm	nop				
004E7:      	nop
            ; //_A8ADEC9C4_321:;				
            _A8ADEC9C4_321:
            ; //	asm	nop				
004E8:      	nop
            ; //_A8ADEC9C4_322:;				
            _A8ADEC9C4_322:
            ; //	asm set io[0x09].b14;			
004E9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_323:;				
            _A8ADEC9C4_323:
            ; //	asm	nop				
004EA:      	nop
            ; //_A8ADEC9C4_324:;				
            _A8ADEC9C4_324:
            ; //	asm	nop				
004EB:      	nop
            ; //_A8ADEC9C4_325:;				
            _A8ADEC9C4_325:
            ; //	asm	nop				
004EC:      	nop
            ; //_A8ADEC9C4_326:;				
            _A8ADEC9C4_326:
            ; //	asm	nop				
004ED:      	nop
            ; //_A8ADEC9C4_327:;				
            _A8ADEC9C4_327:
            ; //	asm	nop				
004EE:      	nop
            ; //_A8ADEC9C4_328:;				
            _A8ADEC9C4_328:
            ; //	asm	nop				
004EF:      	nop
            ; //_A8ADEC9C4_329:;				
            _A8ADEC9C4_329:
            ; //	asm	nop				
004F0:      	nop
            ; //_A8ADEC9C4_330:;				
            _A8ADEC9C4_330:
            ; //	asm	nop				
004F1:      	nop
            ; //_A8ADEC9C4_331:;				
            _A8ADEC9C4_331:
            ; //	asm	nop				
004F2:      	nop
            ; //_A8ADEC9C4_332:;				
            _A8ADEC9C4_332:
            ; //	asm	nop				
004F3:      	nop
            ; //_A8ADEC9C4_333:;				
            _A8ADEC9C4_333:
            ; //	asm	nop				
004F4:      	nop
            ; //_A8ADEC9C4_334:;				
            _A8ADEC9C4_334:
            ; //	asm	nop				
004F5:      	nop
            ; //_A8ADEC9C4_335:;				
            _A8ADEC9C4_335:
            ; //	asm clr io[0x09].b14;			
004F6:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_336:;				
            _A8ADEC9C4_336:
            ; //	asm	nop				
004F7:      	nop
            ; //_A8ADEC9C4_337:;				
            _A8ADEC9C4_337:
            ; //	asm	nop				
004F8:      	nop
            ; //_A8ADEC9C4_338:;				
            _A8ADEC9C4_338:
            ; //	asm	nop				
004F9:      	nop
            ; //_A8ADEC9C4_339:;				
            _A8ADEC9C4_339:
            ; //	asm set io[0x09].b14;			
004FA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_340:;				
            _A8ADEC9C4_340:
            ; //	asm	nop				
004FB:      	nop
            ; //_A8ADEC9C4_341:;				
            _A8ADEC9C4_341:
            ; //	asm	nop				
004FC:      	nop
            ; //_A8ADEC9C4_342:;				
            _A8ADEC9C4_342:
            ; //	asm	nop				
004FD:      	nop
            ; //_A8ADEC9C4_343:;				
            _A8ADEC9C4_343:
            ; //	asm	nop				
004FE:      	nop
            ; //_A8ADEC9C4_344:;				
            _A8ADEC9C4_344:
            ; //	asm	nop				
004FF:      	nop
            ; //_A8ADEC9C4_345:;				
            _A8ADEC9C4_345:
            ; //	asm	nop				
00500:      	nop
            ; //_A8ADEC9C4_346:;				
            _A8ADEC9C4_346:
            ; //	asm	nop				
00501:      	nop
            ; //_A8ADEC9C4_347:;				
            _A8ADEC9C4_347:
            ; //	asm	nop				
00502:      	nop
            ; //_A8ADEC9C4_348:;				
            _A8ADEC9C4_348:
            ; //	asm	nop				
00503:      	nop
            ; //_A8ADEC9C4_349:;				
            _A8ADEC9C4_349:
            ; //	asm	nop				
00504:      	nop
            ; //_A8ADEC9C4_350:;				
            _A8ADEC9C4_350:
            ; //	asm	nop				
00505:      	nop
            ; //_A8ADEC9C4_351:;				
            _A8ADEC9C4_351:
            ; //	asm	nop				
00506:      	nop
            ; //_A8ADEC9C4_352:;				
            _A8ADEC9C4_352:
            ; //	asm clr io[0x09].b14;			
00507:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_353:;				
            _A8ADEC9C4_353:
            ; //	asm	nop				
00508:      	nop
            ; //_A8ADEC9C4_354:;				
            _A8ADEC9C4_354:
            ; //	asm	nop				
00509:      	nop
            ; //_A8ADEC9C4_355:;				
            _A8ADEC9C4_355:
            ; //	asm	nop				
0050A:      	nop
            ; //_A8ADEC9C4_356:;				
            _A8ADEC9C4_356:
            ; //	asm set io[0x09].b14;			
0050B:      	set io[0x09].b14//
            ; //_A8ADEC9C4_357:;				
            _A8ADEC9C4_357:
            ; //	asm	nop				
0050C:      	nop
            ; //_A8ADEC9C4_358:;				
            _A8ADEC9C4_358:
            ; //	asm	nop				
0050D:      	nop
            ; //_A8ADEC9C4_359:;				
            _A8ADEC9C4_359:
            ; //	asm	nop				
0050E:      	nop
            ; //_A8ADEC9C4_360:;				
            _A8ADEC9C4_360:
            ; //	asm	nop				
0050F:      	nop
            ; //_A8ADEC9C4_361:;				
            _A8ADEC9C4_361:
            ; //	asm	nop				
00510:      	nop
            ; //_A8ADEC9C4_362:;				
            _A8ADEC9C4_362:
            ; //	asm	nop				
00511:      	nop
            ; //_A8ADEC9C4_363:;				
            _A8ADEC9C4_363:
            ; //	asm	nop				
00512:      	nop
            ; //_A8ADEC9C4_364:;				
            _A8ADEC9C4_364:
            ; //	asm	nop				
00513:      	nop
            ; //_A8ADEC9C4_365:;				
            _A8ADEC9C4_365:
            ; //	asm	nop				
00514:      	nop
            ; //_A8ADEC9C4_366:;				
            _A8ADEC9C4_366:
            ; //	asm	nop				
00515:      	nop
            ; //_A8ADEC9C4_367:;				
            _A8ADEC9C4_367:
            ; //	asm	nop				
00516:      	nop
            ; //_A8ADEC9C4_368:;				
            _A8ADEC9C4_368:
            ; //	asm	nop				
00517:      	nop
            ; //_A8ADEC9C4_369:;				
            _A8ADEC9C4_369:
            ; //	asm clr io[0x09].b14;			
00518:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_370:;				
            _A8ADEC9C4_370:
            ; //	asm	nop				
00519:      	nop
            ; //_A8ADEC9C4_371:;				
            _A8ADEC9C4_371:
            ; //	asm	nop				
0051A:      	nop
            ; //_A8ADEC9C4_372:;				
            _A8ADEC9C4_372:
            ; //	asm	nop				
0051B:      	nop
            ; //_A8ADEC9C4_373:;				
            _A8ADEC9C4_373:
            ; //	asm set io[0x09].b14;			
0051C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_374:;				
            _A8ADEC9C4_374:
            ; //	asm	nop				
0051D:      	nop
            ; //_A8ADEC9C4_375:;				
            _A8ADEC9C4_375:
            ; //	asm	nop				
0051E:      	nop
            ; //_A8ADEC9C4_376:;				
            _A8ADEC9C4_376:
            ; //	asm	nop				
0051F:      	nop
            ; //_A8ADEC9C4_377:;				
            _A8ADEC9C4_377:
            ; //	asm	nop				
00520:      	nop
            ; //_A8ADEC9C4_378:;				
            _A8ADEC9C4_378:
            ; //	asm	nop				
00521:      	nop
            ; //_A8ADEC9C4_379:;				
            _A8ADEC9C4_379:
            ; //	asm	nop				
00522:      	nop
            ; //_A8ADEC9C4_380:;				
            _A8ADEC9C4_380:
            ; //	asm	nop				
00523:      	nop
            ; //_A8ADEC9C4_381:;				
            _A8ADEC9C4_381:
            ; //	asm	nop				
00524:      	nop
            ; //_A8ADEC9C4_382:;				
            _A8ADEC9C4_382:
            ; //	asm	nop				
00525:      	nop
            ; //_A8ADEC9C4_383:;				
            _A8ADEC9C4_383:
            ; //	asm	nop				
00526:      	nop
            ; //_A8ADEC9C4_384:;				
            _A8ADEC9C4_384:
            ; //	asm	nop				
00527:      	nop
            ; //_A8ADEC9C4_385:;				
            _A8ADEC9C4_385:
            ; //	asm	nop				
00528:      	nop
            ; //_A8ADEC9C4_386:;				
            _A8ADEC9C4_386:
            ; //	asm clr io[0x09].b14;			
00529:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_387:;				
            _A8ADEC9C4_387:
            ; //	asm	nop				
0052A:      	nop
            ; //_A8ADEC9C4_388:;				
            _A8ADEC9C4_388:
            ; //	asm	nop				
0052B:      	nop
            ; //_A8ADEC9C4_389:;				
            _A8ADEC9C4_389:
            ; //	asm	nop				
0052C:      	nop
            ; //_A8ADEC9C4_390:;				
            _A8ADEC9C4_390:
            ; //	asm set io[0x09].b14;			
0052D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_391:;				
            _A8ADEC9C4_391:
            ; //	asm	nop				
0052E:      	nop
            ; //_A8ADEC9C4_392:;				
            _A8ADEC9C4_392:
            ; //	asm	nop				
0052F:      	nop
            ; //_A8ADEC9C4_393:;				
            _A8ADEC9C4_393:
            ; //	asm	nop				
00530:      	nop
            ; //_A8ADEC9C4_394:;				
            _A8ADEC9C4_394:
            ; //	asm	nop				
00531:      	nop
            ; //_A8ADEC9C4_395:;				
            _A8ADEC9C4_395:
            ; //	asm	nop				
00532:      	nop
            ; //_A8ADEC9C4_396:;				
            _A8ADEC9C4_396:
            ; //	asm	nop				
00533:      	nop
            ; //_A8ADEC9C4_397:;				
            _A8ADEC9C4_397:
            ; //	asm	nop				
00534:      	nop
            ; //_A8ADEC9C4_398:;				
            _A8ADEC9C4_398:
            ; //	asm	nop				
00535:      	nop
            ; //_A8ADEC9C4_399:;				
            _A8ADEC9C4_399:
            ; //	asm	nop				
00536:      	nop
            ; //_A8ADEC9C4_400:;				
            _A8ADEC9C4_400:
            ; //	asm	nop				
00537:      	nop
            ; //_A8ADEC9C4_401:;				
            _A8ADEC9C4_401:
            ; //	asm	nop				
00538:      	nop
            ; //_A8ADEC9C4_402:;				
            _A8ADEC9C4_402:
            ; //	asm	nop				
00539:      	nop
            ; //_A8ADEC9C4_403:;				
            _A8ADEC9C4_403:
            ; //	asm clr io[0x09].b14;			
0053A:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_404:;				
            _A8ADEC9C4_404:
            ; //	asm	nop				
0053B:      	nop
            ; //_A8ADEC9C4_405:;				
            _A8ADEC9C4_405:
            ; //	asm	nop				
0053C:      	nop
            ; //_A8ADEC9C4_406:;				
            _A8ADEC9C4_406:
            ; //	asm	nop				
0053D:      	nop
            ; //_A8ADEC9C4_407:;				
            _A8ADEC9C4_407:
            ; //	asm set io[0x09].b14;			
0053E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_408:;				
            _A8ADEC9C4_408:
            ; //	asm	nop				
0053F:      	nop
            ; //_A8ADEC9C4_409:;				
            _A8ADEC9C4_409:
            ; //	asm	nop				
00540:      	nop
            ; //_A8ADEC9C4_410:;				
            _A8ADEC9C4_410:
            ; //	asm	nop				
00541:      	nop
            ; //_A8ADEC9C4_411:;				
            _A8ADEC9C4_411:
            ; //	asm	nop				
00542:      	nop
            ; //_A8ADEC9C4_412:;				
            _A8ADEC9C4_412:
            ; //	asm	nop				
00543:      	nop
            ; //_A8ADEC9C4_413:;				
            _A8ADEC9C4_413:
            ; //	asm	nop				
00544:      	nop
            ; //_A8ADEC9C4_414:;				
            _A8ADEC9C4_414:
            ; //	asm	nop				
00545:      	nop
            ; //_A8ADEC9C4_415:;				
            _A8ADEC9C4_415:
            ; //	asm	nop				
00546:      	nop
            ; //_A8ADEC9C4_416:;				
            _A8ADEC9C4_416:
            ; //	asm	nop				
00547:      	nop
            ; //_A8ADEC9C4_417:;				
            _A8ADEC9C4_417:
            ; //	asm	nop				
00548:      	nop
            ; //_A8ADEC9C4_418:;				
            _A8ADEC9C4_418:
            ; //	asm	nop				
00549:      	nop
            ; //_A8ADEC9C4_419:;				
            _A8ADEC9C4_419:
            ; //	asm	nop				
0054A:      	nop
            ; //_A8ADEC9C4_420:;				
            _A8ADEC9C4_420:
            ; //	asm clr io[0x09].b14;			
0054B:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_421:;				
            _A8ADEC9C4_421:
            ; //	asm	nop				
0054C:      	nop
            ; //_A8ADEC9C4_422:;				
            _A8ADEC9C4_422:
            ; //	asm	nop				
0054D:      	nop
            ; //_A8ADEC9C4_423:;				
            _A8ADEC9C4_423:
            ; //	asm	nop				
0054E:      	nop
            ; //_A8ADEC9C4_424:;				
            _A8ADEC9C4_424:
            ; //	asm set io[0x09].b14;			
0054F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_425:;				
            _A8ADEC9C4_425:
            ; //	asm	nop				
00550:      	nop
            ; //_A8ADEC9C4_426:;				
            _A8ADEC9C4_426:
            ; //	asm	nop				
00551:      	nop
            ; //_A8ADEC9C4_427:;				
            _A8ADEC9C4_427:
            ; //	asm	nop				
00552:      	nop
            ; //_A8ADEC9C4_428:;				
            _A8ADEC9C4_428:
            ; //	asm	nop				
00553:      	nop
            ; //_A8ADEC9C4_429:;				
            _A8ADEC9C4_429:
            ; //	asm	nop				
00554:      	nop
            ; //_A8ADEC9C4_430:;				
            _A8ADEC9C4_430:
            ; //	asm	nop				
00555:      	nop
            ; //_A8ADEC9C4_431:;				
            _A8ADEC9C4_431:
            ; //	asm	nop				
00556:      	nop
            ; //_A8ADEC9C4_432:;				
            _A8ADEC9C4_432:
            ; //	asm	nop				
00557:      	nop
            ; //_A8ADEC9C4_433:;				
            _A8ADEC9C4_433:
            ; //	asm	nop				
00558:      	nop
            ; //_A8ADEC9C4_434:;				
            _A8ADEC9C4_434:
            ; //	asm	nop				
00559:      	nop
            ; //_A8ADEC9C4_435:;				
            _A8ADEC9C4_435:
            ; //	asm	nop				
0055A:      	nop
            ; //_A8ADEC9C4_436:;				
            _A8ADEC9C4_436:
            ; //	asm	nop				
0055B:      	nop
            ; //_A8ADEC9C4_437:;				
            _A8ADEC9C4_437:
            ; //	asm clr io[0x09].b14;			
0055C:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_438:;				
            _A8ADEC9C4_438:
            ; //	asm	nop				
0055D:      	nop
            ; //_A8ADEC9C4_439:;				
            _A8ADEC9C4_439:
            ; //	asm	nop				
0055E:      	nop
            ; //_A8ADEC9C4_440:;				
            _A8ADEC9C4_440:
            ; //	asm	nop				
0055F:      	nop
            ; //_A8ADEC9C4_441:;				
            _A8ADEC9C4_441:
            ; //	asm set io[0x09].b14;			
00560:      	set io[0x09].b14//
            ; //_A8ADEC9C4_442:;				
            _A8ADEC9C4_442:
            ; //	asm	nop				
00561:      	nop
            ; //_A8ADEC9C4_443:;				
            _A8ADEC9C4_443:
            ; //	asm	nop				
00562:      	nop
            ; //_A8ADEC9C4_444:;				
            _A8ADEC9C4_444:
            ; //	asm	nop				
00563:      	nop
            ; //_A8ADEC9C4_445:;				
            _A8ADEC9C4_445:
            ; //	asm	nop				
00564:      	nop
            ; //_A8ADEC9C4_446:;				
            _A8ADEC9C4_446:
            ; //	asm	nop				
00565:      	nop
            ; //_A8ADEC9C4_447:;				
            _A8ADEC9C4_447:
            ; //	asm	nop				
00566:      	nop
            ; //_A8ADEC9C4_448:;				
            _A8ADEC9C4_448:
            ; //	asm	nop				
00567:      	nop
            ; //_A8ADEC9C4_449:;				
            _A8ADEC9C4_449:
            ; //	asm	nop				
00568:      	nop
            ; //_A8ADEC9C4_450:;				
            _A8ADEC9C4_450:
            ; //	asm	nop				
00569:      	nop
            ; //_A8ADEC9C4_451:;				
            _A8ADEC9C4_451:
            ; //	asm	nop				
0056A:      	nop
            ; //_A8ADEC9C4_452:;				
            _A8ADEC9C4_452:
            ; //	asm	nop				
0056B:      	nop
            ; //_A8ADEC9C4_453:;				
            _A8ADEC9C4_453:
            ; //	asm	nop				
0056C:      	nop
            ; //_A8ADEC9C4_454:;				
            _A8ADEC9C4_454:
            ; //	asm clr io[0x09].b14;			
0056D:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_455:;				
            _A8ADEC9C4_455:
            ; //	asm	nop				
0056E:      	nop
            ; //_A8ADEC9C4_456:;				
            _A8ADEC9C4_456:
            ; //	asm	nop				
0056F:      	nop
            ; //_A8ADEC9C4_457:;				
            _A8ADEC9C4_457:
            ; //	asm	nop				
00570:      	nop
            ; //_A8ADEC9C4_458:;				
            _A8ADEC9C4_458:
            ; //	asm set io[0x09].b14;			
00571:      	set io[0x09].b14//
            ; //_A8ADEC9C4_459:;				
            _A8ADEC9C4_459:
            ; //	asm	nop				
00572:      	nop
            ; //_A8ADEC9C4_460:;				
            _A8ADEC9C4_460:
            ; //	asm	nop				
00573:      	nop
            ; //_A8ADEC9C4_461:;				
            _A8ADEC9C4_461:
            ; //	asm	nop				
00574:      	nop
            ; //_A8ADEC9C4_462:;				
            _A8ADEC9C4_462:
            ; //	asm	nop				
00575:      	nop
            ; //_A8ADEC9C4_463:;				
            _A8ADEC9C4_463:
            ; //	asm	nop				
00576:      	nop
            ; //_A8ADEC9C4_464:;				
            _A8ADEC9C4_464:
            ; //	asm	nop				
00577:      	nop
            ; //_A8ADEC9C4_465:;				
            _A8ADEC9C4_465:
            ; //	asm	nop				
00578:      	nop
            ; //_A8ADEC9C4_466:;				
            _A8ADEC9C4_466:
            ; //	asm	nop				
00579:      	nop
            ; //_A8ADEC9C4_467:;				
            _A8ADEC9C4_467:
            ; //	asm	nop				
0057A:      	nop
            ; //_A8ADEC9C4_468:;				
            _A8ADEC9C4_468:
            ; //	asm	nop				
0057B:      	nop
            ; //_A8ADEC9C4_469:;				
            _A8ADEC9C4_469:
            ; //	asm	nop				
0057C:      	nop
            ; //_A8ADEC9C4_470:;				
            _A8ADEC9C4_470:
            ; //	asm	nop				
0057D:      	nop
            ; //_A8ADEC9C4_471:;				
            _A8ADEC9C4_471:
            ; //	asm clr io[0x09].b14;			
0057E:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_472:;				
            _A8ADEC9C4_472:
            ; //	asm	nop				
0057F:      	nop
            ; //_A8ADEC9C4_473:;				
            _A8ADEC9C4_473:
            ; //	asm	nop				
00580:      	nop
            ; //_A8ADEC9C4_474:;				
            _A8ADEC9C4_474:
            ; //	asm	nop				
00581:      	nop
            ; //_A8ADEC9C4_475:;				
            _A8ADEC9C4_475:
            ; //	asm set io[0x09].b14;			
00582:      	set io[0x09].b14//
            ; //_A8ADEC9C4_476:;				
            _A8ADEC9C4_476:
            ; //	asm	nop				
00583:      	nop
            ; //_A8ADEC9C4_477:;				
            _A8ADEC9C4_477:
            ; //	asm	nop				
00584:      	nop
            ; //_A8ADEC9C4_478:;				
            _A8ADEC9C4_478:
            ; //	asm	nop				
00585:      	nop
            ; //_A8ADEC9C4_479:;				
            _A8ADEC9C4_479:
            ; //	asm	nop				
00586:      	nop
            ; //_A8ADEC9C4_480:;				
            _A8ADEC9C4_480:
            ; //	asm	nop				
00587:      	nop
            ; //_A8ADEC9C4_481:;				
            _A8ADEC9C4_481:
            ; //	asm	nop				
00588:      	nop
            ; //_A8ADEC9C4_482:;				
            _A8ADEC9C4_482:
            ; //	asm	nop				
00589:      	nop
            ; //_A8ADEC9C4_483:;				
            _A8ADEC9C4_483:
            ; //	asm	nop				
0058A:      	nop
            ; //_A8ADEC9C4_484:;				
            _A8ADEC9C4_484:
            ; //	asm	nop				
0058B:      	nop
            ; //_A8ADEC9C4_485:;				
            _A8ADEC9C4_485:
            ; //	asm	nop				
0058C:      	nop
            ; //_A8ADEC9C4_486:;				
            _A8ADEC9C4_486:
            ; //	asm	nop				
0058D:      	nop
            ; //_A8ADEC9C4_487:;				
            _A8ADEC9C4_487:
            ; //	asm	nop				
0058E:      	nop
            ; //_A8ADEC9C4_488:;				
            _A8ADEC9C4_488:
            ; //	asm clr io[0x09].b14;			
0058F:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_489:;				
            _A8ADEC9C4_489:
            ; //	asm	nop				
00590:      	nop
            ; //_A8ADEC9C4_490:;				
            _A8ADEC9C4_490:
            ; //	asm	nop				
00591:      	nop
            ; //_A8ADEC9C4_491:;				
            _A8ADEC9C4_491:
            ; //	asm	nop				
00592:      	nop
            ; //_A8ADEC9C4_492:;				
            _A8ADEC9C4_492:
            ; //	asm set io[0x09].b14;			
00593:      	set io[0x09].b14//
            ; //_A8ADEC9C4_493:;				
            _A8ADEC9C4_493:
            ; //	asm	nop				
00594:      	nop
            ; //_A8ADEC9C4_494:;				
            _A8ADEC9C4_494:
            ; //	asm	nop				
00595:      	nop
            ; //_A8ADEC9C4_495:;				
            _A8ADEC9C4_495:
            ; //	asm	nop				
00596:      	nop
            ; //_A8ADEC9C4_496:;				
            _A8ADEC9C4_496:
            ; //	asm	nop				
00597:      	nop
            ; //_A8ADEC9C4_497:;				
            _A8ADEC9C4_497:
            ; //	asm	nop				
00598:      	nop
            ; //_A8ADEC9C4_498:;				
            _A8ADEC9C4_498:
            ; //	asm	nop				
00599:      	nop
            ; //_A8ADEC9C4_499:;				
            _A8ADEC9C4_499:
            ; //	asm	nop				
0059A:      	nop
            ; //_A8ADEC9C4_500:;				
            _A8ADEC9C4_500:
            ; //	asm	nop				
0059B:      	nop
            ; //_A8ADEC9C4_501:;				
            _A8ADEC9C4_501:
            ; //	asm	nop				
0059C:      	nop
            ; //_A8ADEC9C4_502:;				
            _A8ADEC9C4_502:
            ; //	asm	nop				
0059D:      	nop
            ; //_A8ADEC9C4_503:;				
            _A8ADEC9C4_503:
            ; //	asm	nop				
0059E:      	nop
            ; //_A8ADEC9C4_504:;				
            _A8ADEC9C4_504:
            ; //	asm	nop				
0059F:      	nop
            ; //_A8ADEC9C4_505:;				
            _A8ADEC9C4_505:
            ; //	asm clr io[0x09].b14;			
005A0:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_506:;				
            _A8ADEC9C4_506:
            ; //	asm	nop				
005A1:      	nop
            ; //_A8ADEC9C4_507:;				
            _A8ADEC9C4_507:
            ; //	asm	nop				
005A2:      	nop
            ; //_A8ADEC9C4_508:;				
            _A8ADEC9C4_508:
            ; //	asm	nop				
005A3:      	nop
            ; //_A8ADEC9C4_509:;				
            _A8ADEC9C4_509:
            ; //	asm set io[0x09].b14;			
005A4:      	set io[0x09].b14//
            ; //_A8ADEC9C4_510:;				
            _A8ADEC9C4_510:
            ; //	asm	nop				
005A5:      	nop
            ; //_A8ADEC9C4_511:;				
            _A8ADEC9C4_511:
            ; //	asm	nop				
005A6:      	nop
            ; //_A8ADEC9C4_512:;				
            _A8ADEC9C4_512:
            ; //	asm	nop				
005A7:      	nop
            ; //_A8ADEC9C4_513:;				
            _A8ADEC9C4_513:
            ; //	asm	nop				
005A8:      	nop
            ; //_A8ADEC9C4_514:;				
            _A8ADEC9C4_514:
            ; //	asm	nop				
005A9:      	nop
            ; //_A8ADEC9C4_515:;				
            _A8ADEC9C4_515:
            ; //	asm	nop				
005AA:      	nop
            ; //_A8ADEC9C4_516:;				
            _A8ADEC9C4_516:
            ; //	asm	nop				
005AB:      	nop
            ; //_A8ADEC9C4_517:;				
            _A8ADEC9C4_517:
            ; //	asm	nop				
005AC:      	nop
            ; //_A8ADEC9C4_518:;				
            _A8ADEC9C4_518:
            ; //	asm	nop				
005AD:      	nop
            ; //_A8ADEC9C4_519:;				
            _A8ADEC9C4_519:
            ; //	asm	nop				
005AE:      	nop
            ; //_A8ADEC9C4_520:;				
            _A8ADEC9C4_520:
            ; //	asm	nop				
005AF:      	nop
            ; //_A8ADEC9C4_521:;				
            _A8ADEC9C4_521:
            ; //	asm	nop				
005B0:      	nop
            ; //_A8ADEC9C4_522:;				
            _A8ADEC9C4_522:
            ; //	asm clr io[0x09].b14;			
005B1:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_523:;				
            _A8ADEC9C4_523:
            ; //	asm	nop				
005B2:      	nop
            ; //_A8ADEC9C4_524:;				
            _A8ADEC9C4_524:
            ; //	asm	nop				
005B3:      	nop
            ; //_A8ADEC9C4_525:;				
            _A8ADEC9C4_525:
            ; //	asm	nop				
005B4:      	nop
            ; //_A8ADEC9C4_526:;				
            _A8ADEC9C4_526:
            ; //	asm set io[0x09].b14;			
005B5:      	set io[0x09].b14//
            ; //_A8ADEC9C4_527:;				
            _A8ADEC9C4_527:
            ; //	asm	nop				
005B6:      	nop
            ; //_A8ADEC9C4_528:;				
            _A8ADEC9C4_528:
            ; //	asm	nop				
005B7:      	nop
            ; //_A8ADEC9C4_529:;				
            _A8ADEC9C4_529:
            ; //	asm	nop				
005B8:      	nop
            ; //_A8ADEC9C4_530:;				
            _A8ADEC9C4_530:
            ; //	asm	nop				
005B9:      	nop
            ; //_A8ADEC9C4_531:;				
            _A8ADEC9C4_531:
            ; //	asm	nop				
005BA:      	nop
            ; //_A8ADEC9C4_532:;				
            _A8ADEC9C4_532:
            ; //	asm	nop				
005BB:      	nop
            ; //_A8ADEC9C4_533:;				
            _A8ADEC9C4_533:
            ; //	asm	nop				
005BC:      	nop
            ; //_A8ADEC9C4_534:;				
            _A8ADEC9C4_534:
            ; //	asm	nop				
005BD:      	nop
            ; //_A8ADEC9C4_535:;				
            _A8ADEC9C4_535:
            ; //	asm	nop				
005BE:      	nop
            ; //_A8ADEC9C4_536:;				
            _A8ADEC9C4_536:
            ; //	asm	nop				
005BF:      	nop
            ; //_A8ADEC9C4_537:;				
            _A8ADEC9C4_537:
            ; //	asm	nop				
005C0:      	nop
            ; //_A8ADEC9C4_538:;				
            _A8ADEC9C4_538:
            ; //	asm	nop				
005C1:      	nop
            ; //_A8ADEC9C4_539:;				
            _A8ADEC9C4_539:
            ; //	asm clr io[0x09].b14;			
005C2:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_540:;				
            _A8ADEC9C4_540:
            ; //	asm	nop				
005C3:      	nop
            ; //_A8ADEC9C4_541:;				
            _A8ADEC9C4_541:
            ; //	asm	nop				
005C4:      	nop
            ; //_A8ADEC9C4_542:;				
            _A8ADEC9C4_542:
            ; //	asm	nop				
005C5:      	nop
            ; //_A8ADEC9C4_543:;				
            _A8ADEC9C4_543:
            ; //	asm set io[0x09].b14;			
005C6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_544:;				
            _A8ADEC9C4_544:
            ; //	asm	nop				
005C7:      	nop
            ; //_A8ADEC9C4_545:;				
            _A8ADEC9C4_545:
            ; //	asm	nop				
005C8:      	nop
            ; //_A8ADEC9C4_546:;				
            _A8ADEC9C4_546:
            ; //	asm	nop				
005C9:      	nop
            ; //_A8ADEC9C4_547:;				
            _A8ADEC9C4_547:
            ; //	asm	nop				
005CA:      	nop
            ; //_A8ADEC9C4_548:;				
            _A8ADEC9C4_548:
            ; //	asm	nop				
005CB:      	nop
            ; //_A8ADEC9C4_549:;				
            _A8ADEC9C4_549:
            ; //	asm	nop				
005CC:      	nop
            ; //_A8ADEC9C4_550:;				
            _A8ADEC9C4_550:
            ; //	asm	nop				
005CD:      	nop
            ; //_A8ADEC9C4_551:;				
            _A8ADEC9C4_551:
            ; //	asm	nop				
005CE:      	nop
            ; //_A8ADEC9C4_552:;				
            _A8ADEC9C4_552:
            ; //	asm	nop				
005CF:      	nop
            ; //_A8ADEC9C4_553:;				
            _A8ADEC9C4_553:
            ; //	asm	nop				
005D0:      	nop
            ; //_A8ADEC9C4_554:;				
            _A8ADEC9C4_554:
            ; //	asm	nop				
005D1:      	nop
            ; //_A8ADEC9C4_555:;				
            _A8ADEC9C4_555:
            ; //	asm	nop				
005D2:      	nop
            ; //_A8ADEC9C4_556:;				
            _A8ADEC9C4_556:
            ; //	asm clr io[0x09].b14;			
005D3:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_557:;				
            _A8ADEC9C4_557:
            ; //	asm	nop				
005D4:      	nop
            ; //_A8ADEC9C4_558:;				
            _A8ADEC9C4_558:
            ; //	asm	nop				
005D5:      	nop
            ; //_A8ADEC9C4_559:;				
            _A8ADEC9C4_559:
            ; //	asm	nop				
005D6:      	nop
            ; //_A8ADEC9C4_560:;				
            _A8ADEC9C4_560:
            ; //	asm set io[0x09].b14;			
005D7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_561:;				
            _A8ADEC9C4_561:
            ; //	asm	nop				
005D8:      	nop
            ; //_A8ADEC9C4_562:;				
            _A8ADEC9C4_562:
            ; //	asm	nop				
005D9:      	nop
            ; //_A8ADEC9C4_563:;				
            _A8ADEC9C4_563:
            ; //	asm	nop				
005DA:      	nop
            ; //_A8ADEC9C4_564:;				
            _A8ADEC9C4_564:
            ; //	asm	nop				
005DB:      	nop
            ; //_A8ADEC9C4_565:;				
            _A8ADEC9C4_565:
            ; //	asm	nop				
005DC:      	nop
            ; //_A8ADEC9C4_566:;				
            _A8ADEC9C4_566:
            ; //	asm	nop				
005DD:      	nop
            ; //_A8ADEC9C4_567:;				
            _A8ADEC9C4_567:
            ; //	asm	nop				
005DE:      	nop
            ; //_A8ADEC9C4_568:;				
            _A8ADEC9C4_568:
            ; //	asm	nop				
005DF:      	nop
            ; //_A8ADEC9C4_569:;				
            _A8ADEC9C4_569:
            ; //	asm	nop				
005E0:      	nop
            ; //_A8ADEC9C4_570:;				
            _A8ADEC9C4_570:
            ; //	asm	nop				
005E1:      	nop
            ; //_A8ADEC9C4_571:;				
            _A8ADEC9C4_571:
            ; //	asm	nop				
005E2:      	nop
            ; //_A8ADEC9C4_572:;				
            _A8ADEC9C4_572:
            ; //	asm	nop				
005E3:      	nop
            ; //_A8ADEC9C4_573:;				
            _A8ADEC9C4_573:
            ; //	asm clr io[0x09].b14;			
005E4:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_574:;				
            _A8ADEC9C4_574:
            ; //	asm	nop				
005E5:      	nop
            ; //_A8ADEC9C4_575:;				
            _A8ADEC9C4_575:
            ; //	asm	nop				
005E6:      	nop
            ; //_A8ADEC9C4_576:;				
            _A8ADEC9C4_576:
            ; //	asm	nop				
005E7:      	nop
            ; //_A8ADEC9C4_577:;				
            _A8ADEC9C4_577:
            ; //	asm set io[0x09].b14;			
005E8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_578:;				
            _A8ADEC9C4_578:
            ; //	asm	nop				
005E9:      	nop
            ; //_A8ADEC9C4_579:;				
            _A8ADEC9C4_579:
            ; //	asm	nop				
005EA:      	nop
            ; //_A8ADEC9C4_580:;				
            _A8ADEC9C4_580:
            ; //	asm	nop				
005EB:      	nop
            ; //_A8ADEC9C4_581:;				
            _A8ADEC9C4_581:
            ; //	asm	nop				
005EC:      	nop
            ; //_A8ADEC9C4_582:;				
            _A8ADEC9C4_582:
            ; //	asm	nop				
005ED:      	nop
            ; //_A8ADEC9C4_583:;				
            _A8ADEC9C4_583:
            ; //	asm	nop				
005EE:      	nop
            ; //_A8ADEC9C4_584:;				
            _A8ADEC9C4_584:
            ; //	asm	nop				
005EF:      	nop
            ; //_A8ADEC9C4_585:;				
            _A8ADEC9C4_585:
            ; //	asm	nop				
005F0:      	nop
            ; //_A8ADEC9C4_586:;				
            _A8ADEC9C4_586:
            ; //	asm	nop				
005F1:      	nop
            ; //_A8ADEC9C4_587:;				
            _A8ADEC9C4_587:
            ; //	asm	nop				
005F2:      	nop
            ; //_A8ADEC9C4_588:;				
            _A8ADEC9C4_588:
            ; //	asm	nop				
005F3:      	nop
            ; //_A8ADEC9C4_589:;				
            _A8ADEC9C4_589:
            ; //	asm	nop				
005F4:      	nop
            ; //_A8ADEC9C4_590:;				
            _A8ADEC9C4_590:
            ; //	asm clr io[0x09].b14;			
005F5:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_591:;				
            _A8ADEC9C4_591:
            ; //	asm	nop				
005F6:      	nop
            ; //_A8ADEC9C4_592:;				
            _A8ADEC9C4_592:
            ; //	asm	nop				
005F7:      	nop
            ; //_A8ADEC9C4_593:;				
            _A8ADEC9C4_593:
            ; //	asm	nop				
005F8:      	nop
            ; //_A8ADEC9C4_594:;				
            _A8ADEC9C4_594:
            ; //	asm set io[0x09].b14;			
005F9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_595:;				
            _A8ADEC9C4_595:
            ; //	asm	nop				
005FA:      	nop
            ; //_A8ADEC9C4_596:;				
            _A8ADEC9C4_596:
            ; //	asm	nop				
005FB:      	nop
            ; //_A8ADEC9C4_597:;				
            _A8ADEC9C4_597:
            ; //	asm	nop				
005FC:      	nop
            ; //_A8ADEC9C4_598:;				
            _A8ADEC9C4_598:
            ; //	asm	nop				
005FD:      	nop
            ; //_A8ADEC9C4_599:;				
            _A8ADEC9C4_599:
            ; //	asm	nop				
005FE:      	nop
            ; //_A8ADEC9C4_600:;				
            _A8ADEC9C4_600:
            ; //	asm	nop				
005FF:      	nop
            ; //_A8ADEC9C4_601:;				
            _A8ADEC9C4_601:
            ; //	asm	nop				
00600:      	nop
            ; //_A8ADEC9C4_602:;				
            _A8ADEC9C4_602:
            ; //	asm	nop				
00601:      	nop
            ; //_A8ADEC9C4_603:;				
            _A8ADEC9C4_603:
            ; //	asm	nop				
00602:      	nop
            ; //_A8ADEC9C4_604:;				
            _A8ADEC9C4_604:
            ; //	asm	nop				
00603:      	nop
            ; //_A8ADEC9C4_605:;				
            _A8ADEC9C4_605:
            ; //	asm	nop				
00604:      	nop
            ; //_A8ADEC9C4_606:;				
            _A8ADEC9C4_606:
            ; //	asm	nop				
00605:      	nop
            ; //_A8ADEC9C4_607:;				
            _A8ADEC9C4_607:
            ; //	asm clr io[0x09].b14;			
00606:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_608:;				
            _A8ADEC9C4_608:
            ; //	asm	nop				
00607:      	nop
            ; //_A8ADEC9C4_609:;				
            _A8ADEC9C4_609:
            ; //	asm	nop				
00608:      	nop
            ; //_A8ADEC9C4_610:;				
            _A8ADEC9C4_610:
            ; //	asm	nop				
00609:      	nop
            ; //_A8ADEC9C4_611:;				
            _A8ADEC9C4_611:
            ; //	asm set io[0x09].b14;			
0060A:      	set io[0x09].b14//
            ; //_A8ADEC9C4_612:;				
            _A8ADEC9C4_612:
            ; //	asm	nop				
0060B:      	nop
            ; //_A8ADEC9C4_613:;				
            _A8ADEC9C4_613:
            ; //	asm	nop				
0060C:      	nop
            ; //_A8ADEC9C4_614:;				
            _A8ADEC9C4_614:
            ; //	asm	nop				
0060D:      	nop
            ; //_A8ADEC9C4_615:;				
            _A8ADEC9C4_615:
            ; //	asm	nop				
0060E:      	nop
            ; //_A8ADEC9C4_616:;				
            _A8ADEC9C4_616:
            ; //	asm	nop				
0060F:      	nop
            ; //_A8ADEC9C4_617:;				
            _A8ADEC9C4_617:
            ; //	asm	nop				
00610:      	nop
            ; //_A8ADEC9C4_618:;				
            _A8ADEC9C4_618:
            ; //	asm	nop				
00611:      	nop
            ; //_A8ADEC9C4_619:;				
            _A8ADEC9C4_619:
            ; //	asm	nop				
00612:      	nop
            ; //_A8ADEC9C4_620:;				
            _A8ADEC9C4_620:
            ; //	asm	nop				
00613:      	nop
            ; //_A8ADEC9C4_621:;				
            _A8ADEC9C4_621:
            ; //	asm	nop				
00614:      	nop
            ; //_A8ADEC9C4_622:;				
            _A8ADEC9C4_622:
            ; //	asm	nop				
00615:      	nop
            ; //_A8ADEC9C4_623:;				
            _A8ADEC9C4_623:
            ; //	asm	nop				
00616:      	nop
            ; //_A8ADEC9C4_624:;				
            _A8ADEC9C4_624:
            ; //	asm clr io[0x09].b14;			
00617:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_625:;				
            _A8ADEC9C4_625:
            ; //	asm	nop				
00618:      	nop
            ; //_A8ADEC9C4_626:;				
            _A8ADEC9C4_626:
            ; //	asm	nop				
00619:      	nop
            ; //_A8ADEC9C4_627:;				
            _A8ADEC9C4_627:
            ; //	asm	nop				
0061A:      	nop
            ; //_A8ADEC9C4_628:;				
            _A8ADEC9C4_628:
            ; //	asm set io[0x09].b14;			
0061B:      	set io[0x09].b14//
            ; //_A8ADEC9C4_629:;				
            _A8ADEC9C4_629:
            ; //	asm	nop				
0061C:      	nop
            ; //_A8ADEC9C4_630:;				
            _A8ADEC9C4_630:
            ; //	asm	nop				
0061D:      	nop
            ; //_A8ADEC9C4_631:;				
            _A8ADEC9C4_631:
            ; //	asm	nop				
0061E:      	nop
            ; //_A8ADEC9C4_632:;				
            _A8ADEC9C4_632:
            ; //	asm	nop				
0061F:      	nop
            ; //_A8ADEC9C4_633:;				
            _A8ADEC9C4_633:
            ; //	asm	nop				
00620:      	nop
            ; //_A8ADEC9C4_634:;				
            _A8ADEC9C4_634:
            ; //	asm	nop				
00621:      	nop
            ; //_A8ADEC9C4_635:;				
            _A8ADEC9C4_635:
            ; //	asm	nop				
00622:      	nop
            ; //_A8ADEC9C4_636:;				
            _A8ADEC9C4_636:
            ; //	asm	nop				
00623:      	nop
            ; //_A8ADEC9C4_637:;				
            _A8ADEC9C4_637:
            ; //	asm	nop				
00624:      	nop
            ; //_A8ADEC9C4_638:;				
            _A8ADEC9C4_638:
            ; //	asm	nop				
00625:      	nop
            ; //_A8ADEC9C4_639:;				
            _A8ADEC9C4_639:
            ; //	asm	nop				
00626:      	nop
            ; //_A8ADEC9C4_640:;				
            _A8ADEC9C4_640:
            ; //	asm	nop				
00627:      	nop
            ; //_A8ADEC9C4_641:;				
            _A8ADEC9C4_641:
            ; //	asm clr io[0x09].b14;			
00628:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_642:;				
            _A8ADEC9C4_642:
            ; //	asm	nop				
00629:      	nop
            ; //_A8ADEC9C4_643:;				
            _A8ADEC9C4_643:
            ; //	asm	nop				
0062A:      	nop
            ; //_A8ADEC9C4_644:;				
            _A8ADEC9C4_644:
            ; //	asm	nop				
0062B:      	nop
            ; //_A8ADEC9C4_645:;				
            _A8ADEC9C4_645:
            ; //	asm set io[0x09].b14;			
0062C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_646:;				
            _A8ADEC9C4_646:
            ; //	asm	nop				
0062D:      	nop
            ; //_A8ADEC9C4_647:;				
            _A8ADEC9C4_647:
            ; //	asm	nop				
0062E:      	nop
            ; //_A8ADEC9C4_648:;				
            _A8ADEC9C4_648:
            ; //	asm	nop				
0062F:      	nop
            ; //_A8ADEC9C4_649:;				
            _A8ADEC9C4_649:
            ; //	asm	nop				
00630:      	nop
            ; //_A8ADEC9C4_650:;				
            _A8ADEC9C4_650:
            ; //	asm	nop				
00631:      	nop
            ; //_A8ADEC9C4_651:;				
            _A8ADEC9C4_651:
            ; //	asm	nop				
00632:      	nop
            ; //_A8ADEC9C4_652:;				
            _A8ADEC9C4_652:
            ; //	asm	nop				
00633:      	nop
            ; //_A8ADEC9C4_653:;				
            _A8ADEC9C4_653:
            ; //	asm	nop				
00634:      	nop
            ; //_A8ADEC9C4_654:;				
            _A8ADEC9C4_654:
            ; //	asm	nop				
00635:      	nop
            ; //_A8ADEC9C4_655:;				
            _A8ADEC9C4_655:
            ; //	asm	nop				
00636:      	nop
            ; //_A8ADEC9C4_656:;				
            _A8ADEC9C4_656:
            ; //	asm	nop				
00637:      	nop
            ; //_A8ADEC9C4_657:;				
            _A8ADEC9C4_657:
            ; //	asm	nop				
00638:      	nop
            ; //_A8ADEC9C4_658:;				
            _A8ADEC9C4_658:
            ; //	asm clr io[0x09].b14;			
00639:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_659:;				
            _A8ADEC9C4_659:
            ; //	asm	nop				
0063A:      	nop
            ; //_A8ADEC9C4_660:;				
            _A8ADEC9C4_660:
            ; //	asm	nop				
0063B:      	nop
            ; //_A8ADEC9C4_661:;				
            _A8ADEC9C4_661:
            ; //	asm	nop				
0063C:      	nop
            ; //_A8ADEC9C4_662:;				
            _A8ADEC9C4_662:
            ; //	asm set io[0x09].b14;			
0063D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_663:;				
            _A8ADEC9C4_663:
            ; //	asm	nop				
0063E:      	nop
            ; //_A8ADEC9C4_664:;				
            _A8ADEC9C4_664:
            ; //	asm	nop				
0063F:      	nop
            ; //_A8ADEC9C4_665:;				
            _A8ADEC9C4_665:
            ; //	asm	nop				
00640:      	nop
            ; //_A8ADEC9C4_666:;				
            _A8ADEC9C4_666:
            ; //	asm	nop				
00641:      	nop
            ; //_A8ADEC9C4_667:;				
            _A8ADEC9C4_667:
            ; //	asm	nop				
00642:      	nop
            ; //_A8ADEC9C4_668:;				
            _A8ADEC9C4_668:
            ; //	asm	nop				
00643:      	nop
            ; //_A8ADEC9C4_669:;				
            _A8ADEC9C4_669:
            ; //	asm	nop				
00644:      	nop
            ; //_A8ADEC9C4_670:;				
            _A8ADEC9C4_670:
            ; //	asm	nop				
00645:      	nop
            ; //_A8ADEC9C4_671:;				
            _A8ADEC9C4_671:
            ; //	asm	nop				
00646:      	nop
            ; //_A8ADEC9C4_672:;				
            _A8ADEC9C4_672:
            ; //	asm	nop				
00647:      	nop
            ; //_A8ADEC9C4_673:;				
            _A8ADEC9C4_673:
            ; //	asm	nop				
00648:      	nop
            ; //_A8ADEC9C4_674:;				
            _A8ADEC9C4_674:
            ; //	asm	nop				
00649:      	nop
            ; //_A8ADEC9C4_675:;				
            _A8ADEC9C4_675:
            ; //	asm clr io[0x09].b14;			
0064A:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_676:;				
            _A8ADEC9C4_676:
            ; //	asm	nop				
0064B:      	nop
            ; //_A8ADEC9C4_677:;				
            _A8ADEC9C4_677:
            ; //	asm	nop				
0064C:      	nop
            ; //_A8ADEC9C4_678:;				
            _A8ADEC9C4_678:
            ; //	asm	nop				
0064D:      	nop
            ; //_A8ADEC9C4_679:;				
            _A8ADEC9C4_679:
            ; //	goto LD63FD439_92;			
0064E:      	pch =	LD63FD439_92
0064F:      	ljmp	LD63FD439_92
            ; //LD63FD439_95:;					
            LD63FD439_95:
            ; //_A8ADEC9C4_680:;				
            _A8ADEC9C4_680:
            ; //	asm set io[0x09].b14;			
00650:      	set io[0x09].b14//
            ; //_A8ADEC9C4_681:;				
            _A8ADEC9C4_681:
            ; //	asm	nop				
00651:      	nop
            ; //_A8ADEC9C4_682:;				
            _A8ADEC9C4_682:
            ; //	asm	nop				
00652:      	nop
            ; //_A8ADEC9C4_683:;				
            _A8ADEC9C4_683:
            ; //	asm	nop				
00653:      	nop
            ; //_A8ADEC9C4_684:;				
            _A8ADEC9C4_684:
            ; //	asm clr io[0x09].b14;			
00654:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_685:;				
            _A8ADEC9C4_685:
            ; //	asm	nop				
00655:      	nop
            ; //_A8ADEC9C4_686:;				
            _A8ADEC9C4_686:
            ; //	asm	nop				
00656:      	nop
            ; //_A8ADEC9C4_687:;				
            _A8ADEC9C4_687:
            ; //	asm	nop				
00657:      	nop
            ; //_A8ADEC9C4_688:;				
            _A8ADEC9C4_688:
            ; //	asm	nop				
00658:      	nop
            ; //_A8ADEC9C4_689:;				
            _A8ADEC9C4_689:
            ; //	asm	nop				
00659:      	nop
            ; //_A8ADEC9C4_690:;				
            _A8ADEC9C4_690:
            ; //	asm	nop				
0065A:      	nop
            ; //_A8ADEC9C4_691:;				
            _A8ADEC9C4_691:
            ; //	asm	nop				
0065B:      	nop
            ; //_A8ADEC9C4_692:;				
            _A8ADEC9C4_692:
            ; //	asm	nop				
0065C:      	nop
            ; //_A8ADEC9C4_693:;				
            _A8ADEC9C4_693:
            ; //	asm	nop				
0065D:      	nop
            ; //_A8ADEC9C4_694:;				
            _A8ADEC9C4_694:
            ; //	asm	nop				
0065E:      	nop
            ; //_A8ADEC9C4_695:;				
            _A8ADEC9C4_695:
            ; //	asm	nop				
0065F:      	nop
            ; //_A8ADEC9C4_696:;				
            _A8ADEC9C4_696:
            ; //	asm	nop				
00660:      	nop
            ; //_A8ADEC9C4_697:;				
            _A8ADEC9C4_697:
            ; //	asm set io[0x09].b14;			
00661:      	set io[0x09].b14//
            ; //_A8ADEC9C4_698:;				
            _A8ADEC9C4_698:
            ; //	asm	nop				
00662:      	nop
            ; //_A8ADEC9C4_699:;				
            _A8ADEC9C4_699:
            ; //	asm	nop				
00663:      	nop
            ; //_A8ADEC9C4_700:;				
            _A8ADEC9C4_700:
            ; //	asm	nop				
00664:      	nop
            ; //_A8ADEC9C4_701:;				
            _A8ADEC9C4_701:
            ; //	asm clr io[0x09].b14;			
00665:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_702:;				
            _A8ADEC9C4_702:
            ; //	asm	nop				
00666:      	nop
            ; //_A8ADEC9C4_703:;				
            _A8ADEC9C4_703:
            ; //	asm	nop				
00667:      	nop
            ; //_A8ADEC9C4_704:;				
            _A8ADEC9C4_704:
            ; //	asm	nop				
00668:      	nop
            ; //_A8ADEC9C4_705:;				
            _A8ADEC9C4_705:
            ; //	asm	nop				
00669:      	nop
            ; //_A8ADEC9C4_706:;				
            _A8ADEC9C4_706:
            ; //	asm	nop				
0066A:      	nop
            ; //_A8ADEC9C4_707:;				
            _A8ADEC9C4_707:
            ; //	asm	nop				
0066B:      	nop
            ; //_A8ADEC9C4_708:;				
            _A8ADEC9C4_708:
            ; //	asm	nop				
0066C:      	nop
            ; //_A8ADEC9C4_709:;				
            _A8ADEC9C4_709:
            ; //	asm	nop				
0066D:      	nop
            ; //_A8ADEC9C4_710:;				
            _A8ADEC9C4_710:
            ; //	asm	nop				
0066E:      	nop
            ; //_A8ADEC9C4_711:;				
            _A8ADEC9C4_711:
            ; //	asm	nop				
0066F:      	nop
            ; //_A8ADEC9C4_712:;				
            _A8ADEC9C4_712:
            ; //	asm	nop				
00670:      	nop
            ; //_A8ADEC9C4_713:;				
            _A8ADEC9C4_713:
            ; //	asm	nop				
00671:      	nop
            ; //_A8ADEC9C4_714:;				
            _A8ADEC9C4_714:
            ; //	asm set io[0x09].b14;			
00672:      	set io[0x09].b14//
            ; //_A8ADEC9C4_715:;				
            _A8ADEC9C4_715:
            ; //	asm	nop				
00673:      	nop
            ; //_A8ADEC9C4_716:;				
            _A8ADEC9C4_716:
            ; //	asm	nop				
00674:      	nop
            ; //_A8ADEC9C4_717:;				
            _A8ADEC9C4_717:
            ; //	asm	nop				
00675:      	nop
            ; //_A8ADEC9C4_718:;				
            _A8ADEC9C4_718:
            ; //	asm clr io[0x09].b14;			
00676:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_719:;				
            _A8ADEC9C4_719:
            ; //	asm	nop				
00677:      	nop
            ; //_A8ADEC9C4_720:;				
            _A8ADEC9C4_720:
            ; //	asm	nop				
00678:      	nop
            ; //_A8ADEC9C4_721:;				
            _A8ADEC9C4_721:
            ; //	asm	nop				
00679:      	nop
            ; //_A8ADEC9C4_722:;				
            _A8ADEC9C4_722:
            ; //	asm	nop				
0067A:      	nop
            ; //_A8ADEC9C4_723:;				
            _A8ADEC9C4_723:
            ; //	asm	nop				
0067B:      	nop
            ; //_A8ADEC9C4_724:;				
            _A8ADEC9C4_724:
            ; //	asm	nop				
0067C:      	nop
            ; //_A8ADEC9C4_725:;				
            _A8ADEC9C4_725:
            ; //	asm	nop				
0067D:      	nop
            ; //_A8ADEC9C4_726:;				
            _A8ADEC9C4_726:
            ; //	asm	nop				
0067E:      	nop
            ; //_A8ADEC9C4_727:;				
            _A8ADEC9C4_727:
            ; //	asm	nop				
0067F:      	nop
            ; //_A8ADEC9C4_728:;				
            _A8ADEC9C4_728:
            ; //	asm	nop				
00680:      	nop
            ; //_A8ADEC9C4_729:;				
            _A8ADEC9C4_729:
            ; //	asm	nop				
00681:      	nop
            ; //_A8ADEC9C4_730:;				
            _A8ADEC9C4_730:
            ; //	asm	nop				
00682:      	nop
            ; //_A8ADEC9C4_731:;				
            _A8ADEC9C4_731:
            ; //	asm set io[0x09].b14;			
00683:      	set io[0x09].b14//
            ; //_A8ADEC9C4_732:;				
            _A8ADEC9C4_732:
            ; //	asm	nop				
00684:      	nop
            ; //_A8ADEC9C4_733:;				
            _A8ADEC9C4_733:
            ; //	asm	nop				
00685:      	nop
            ; //_A8ADEC9C4_734:;				
            _A8ADEC9C4_734:
            ; //	asm	nop				
00686:      	nop
            ; //_A8ADEC9C4_735:;				
            _A8ADEC9C4_735:
            ; //	asm clr io[0x09].b14;			
00687:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_736:;				
            _A8ADEC9C4_736:
            ; //	asm	nop				
00688:      	nop
            ; //_A8ADEC9C4_737:;				
            _A8ADEC9C4_737:
            ; //	asm	nop				
00689:      	nop
            ; //_A8ADEC9C4_738:;				
            _A8ADEC9C4_738:
            ; //	asm	nop				
0068A:      	nop
            ; //_A8ADEC9C4_739:;				
            _A8ADEC9C4_739:
            ; //	asm	nop				
0068B:      	nop
            ; //_A8ADEC9C4_740:;				
            _A8ADEC9C4_740:
            ; //	asm	nop				
0068C:      	nop
            ; //_A8ADEC9C4_741:;				
            _A8ADEC9C4_741:
            ; //	asm	nop				
0068D:      	nop
            ; //_A8ADEC9C4_742:;				
            _A8ADEC9C4_742:
            ; //	asm	nop				
0068E:      	nop
            ; //_A8ADEC9C4_743:;				
            _A8ADEC9C4_743:
            ; //	asm	nop				
0068F:      	nop
            ; //_A8ADEC9C4_744:;				
            _A8ADEC9C4_744:
            ; //	asm	nop				
00690:      	nop
            ; //_A8ADEC9C4_745:;				
            _A8ADEC9C4_745:
            ; //	asm	nop				
00691:      	nop
            ; //_A8ADEC9C4_746:;				
            _A8ADEC9C4_746:
            ; //	asm	nop				
00692:      	nop
            ; //_A8ADEC9C4_747:;				
            _A8ADEC9C4_747:
            ; //	asm	nop				
00693:      	nop
            ; //_A8ADEC9C4_748:;				
            _A8ADEC9C4_748:
            ; //	asm set io[0x09].b14;			
00694:      	set io[0x09].b14//
            ; //_A8ADEC9C4_749:;				
            _A8ADEC9C4_749:
            ; //	asm	nop				
00695:      	nop
            ; //_A8ADEC9C4_750:;				
            _A8ADEC9C4_750:
            ; //	asm	nop				
00696:      	nop
            ; //_A8ADEC9C4_751:;				
            _A8ADEC9C4_751:
            ; //	asm	nop				
00697:      	nop
            ; //_A8ADEC9C4_752:;				
            _A8ADEC9C4_752:
            ; //	asm clr io[0x09].b14;			
00698:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_753:;				
            _A8ADEC9C4_753:
            ; //	asm	nop				
00699:      	nop
            ; //_A8ADEC9C4_754:;				
            _A8ADEC9C4_754:
            ; //	asm	nop				
0069A:      	nop
            ; //_A8ADEC9C4_755:;				
            _A8ADEC9C4_755:
            ; //	asm	nop				
0069B:      	nop
            ; //_A8ADEC9C4_756:;				
            _A8ADEC9C4_756:
            ; //	asm	nop				
0069C:      	nop
            ; //_A8ADEC9C4_757:;				
            _A8ADEC9C4_757:
            ; //	asm	nop				
0069D:      	nop
            ; //_A8ADEC9C4_758:;				
            _A8ADEC9C4_758:
            ; //	asm	nop				
0069E:      	nop
            ; //_A8ADEC9C4_759:;				
            _A8ADEC9C4_759:
            ; //	asm	nop				
0069F:      	nop
            ; //_A8ADEC9C4_760:;				
            _A8ADEC9C4_760:
            ; //	asm	nop				
006A0:      	nop
            ; //_A8ADEC9C4_761:;				
            _A8ADEC9C4_761:
            ; //	asm	nop				
006A1:      	nop
            ; //_A8ADEC9C4_762:;				
            _A8ADEC9C4_762:
            ; //	asm	nop				
006A2:      	nop
            ; //_A8ADEC9C4_763:;				
            _A8ADEC9C4_763:
            ; //	asm	nop				
006A3:      	nop
            ; //_A8ADEC9C4_764:;				
            _A8ADEC9C4_764:
            ; //	asm	nop				
006A4:      	nop
            ; //_A8ADEC9C4_765:;				
            _A8ADEC9C4_765:
            ; //	asm set io[0x09].b14;			
006A5:      	set io[0x09].b14//
            ; //_A8ADEC9C4_766:;				
            _A8ADEC9C4_766:
            ; //	asm	nop				
006A6:      	nop
            ; //_A8ADEC9C4_767:;				
            _A8ADEC9C4_767:
            ; //	asm	nop				
006A7:      	nop
            ; //_A8ADEC9C4_768:;				
            _A8ADEC9C4_768:
            ; //	asm	nop				
006A8:      	nop
            ; //_A8ADEC9C4_769:;				
            _A8ADEC9C4_769:
            ; //	asm clr io[0x09].b14;			
006A9:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_770:;				
            _A8ADEC9C4_770:
            ; //	asm	nop				
006AA:      	nop
            ; //_A8ADEC9C4_771:;				
            _A8ADEC9C4_771:
            ; //	asm	nop				
006AB:      	nop
            ; //_A8ADEC9C4_772:;				
            _A8ADEC9C4_772:
            ; //	asm	nop				
006AC:      	nop
            ; //_A8ADEC9C4_773:;				
            _A8ADEC9C4_773:
            ; //	asm	nop				
006AD:      	nop
            ; //_A8ADEC9C4_774:;				
            _A8ADEC9C4_774:
            ; //	asm	nop				
006AE:      	nop
            ; //_A8ADEC9C4_775:;				
            _A8ADEC9C4_775:
            ; //	asm	nop				
006AF:      	nop
            ; //_A8ADEC9C4_776:;				
            _A8ADEC9C4_776:
            ; //	asm	nop				
006B0:      	nop
            ; //_A8ADEC9C4_777:;				
            _A8ADEC9C4_777:
            ; //	asm	nop				
006B1:      	nop
            ; //_A8ADEC9C4_778:;				
            _A8ADEC9C4_778:
            ; //	asm	nop				
006B2:      	nop
            ; //_A8ADEC9C4_779:;				
            _A8ADEC9C4_779:
            ; //	asm	nop				
006B3:      	nop
            ; //_A8ADEC9C4_780:;				
            _A8ADEC9C4_780:
            ; //	asm	nop				
006B4:      	nop
            ; //_A8ADEC9C4_781:;				
            _A8ADEC9C4_781:
            ; //	asm	nop				
006B5:      	nop
            ; //_A8ADEC9C4_782:;				
            _A8ADEC9C4_782:
            ; //	asm set io[0x09].b14;			
006B6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_783:;				
            _A8ADEC9C4_783:
            ; //	asm	nop				
006B7:      	nop
            ; //_A8ADEC9C4_784:;				
            _A8ADEC9C4_784:
            ; //	asm	nop				
006B8:      	nop
            ; //_A8ADEC9C4_785:;				
            _A8ADEC9C4_785:
            ; //	asm	nop				
006B9:      	nop
            ; //_A8ADEC9C4_786:;				
            _A8ADEC9C4_786:
            ; //	asm clr io[0x09].b14;			
006BA:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_787:;				
            _A8ADEC9C4_787:
            ; //	asm	nop				
006BB:      	nop
            ; //_A8ADEC9C4_788:;				
            _A8ADEC9C4_788:
            ; //	asm	nop				
006BC:      	nop
            ; //_A8ADEC9C4_789:;				
            _A8ADEC9C4_789:
            ; //	asm	nop				
006BD:      	nop
            ; //_A8ADEC9C4_790:;				
            _A8ADEC9C4_790:
            ; //	asm	nop				
006BE:      	nop
            ; //_A8ADEC9C4_791:;				
            _A8ADEC9C4_791:
            ; //	asm	nop				
006BF:      	nop
            ; //_A8ADEC9C4_792:;				
            _A8ADEC9C4_792:
            ; //	asm	nop				
006C0:      	nop
            ; //_A8ADEC9C4_793:;				
            _A8ADEC9C4_793:
            ; //	asm	nop				
006C1:      	nop
            ; //_A8ADEC9C4_794:;				
            _A8ADEC9C4_794:
            ; //	asm	nop				
006C2:      	nop
            ; //_A8ADEC9C4_795:;				
            _A8ADEC9C4_795:
            ; //	asm	nop				
006C3:      	nop
            ; //_A8ADEC9C4_796:;				
            _A8ADEC9C4_796:
            ; //	asm	nop				
006C4:      	nop
            ; //_A8ADEC9C4_797:;				
            _A8ADEC9C4_797:
            ; //	asm	nop				
006C5:      	nop
            ; //_A8ADEC9C4_798:;				
            _A8ADEC9C4_798:
            ; //	asm	nop				
006C6:      	nop
            ; //_A8ADEC9C4_799:;				
            _A8ADEC9C4_799:
            ; //	asm set io[0x09].b14;			
006C7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_800:;				
            _A8ADEC9C4_800:
            ; //	asm	nop				
006C8:      	nop
            ; //_A8ADEC9C4_801:;				
            _A8ADEC9C4_801:
            ; //	asm	nop				
006C9:      	nop
            ; //_A8ADEC9C4_802:;				
            _A8ADEC9C4_802:
            ; //	asm	nop				
006CA:      	nop
            ; //_A8ADEC9C4_803:;				
            _A8ADEC9C4_803:
            ; //	asm clr io[0x09].b14;			
006CB:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_804:;				
            _A8ADEC9C4_804:
            ; //	asm	nop				
006CC:      	nop
            ; //_A8ADEC9C4_805:;				
            _A8ADEC9C4_805:
            ; //	asm	nop				
006CD:      	nop
            ; //_A8ADEC9C4_806:;				
            _A8ADEC9C4_806:
            ; //	asm	nop				
006CE:      	nop
            ; //_A8ADEC9C4_807:;				
            _A8ADEC9C4_807:
            ; //	asm	nop				
006CF:      	nop
            ; //_A8ADEC9C4_808:;				
            _A8ADEC9C4_808:
            ; //	asm	nop				
006D0:      	nop
            ; //_A8ADEC9C4_809:;				
            _A8ADEC9C4_809:
            ; //	asm	nop				
006D1:      	nop
            ; //_A8ADEC9C4_810:;				
            _A8ADEC9C4_810:
            ; //	asm	nop				
006D2:      	nop
            ; //_A8ADEC9C4_811:;				
            _A8ADEC9C4_811:
            ; //	asm	nop				
006D3:      	nop
            ; //_A8ADEC9C4_812:;				
            _A8ADEC9C4_812:
            ; //	asm	nop				
006D4:      	nop
            ; //_A8ADEC9C4_813:;				
            _A8ADEC9C4_813:
            ; //	asm	nop				
006D5:      	nop
            ; //_A8ADEC9C4_814:;				
            _A8ADEC9C4_814:
            ; //	asm	nop				
006D6:      	nop
            ; //_A8ADEC9C4_815:;				
            _A8ADEC9C4_815:
            ; //	asm	nop				
006D7:      	nop
            ; //_A8ADEC9C4_816:;				
            _A8ADEC9C4_816:
            ; //	asm set io[0x09].b14;			
006D8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_817:;				
            _A8ADEC9C4_817:
            ; //	asm	nop				
006D9:      	nop
            ; //_A8ADEC9C4_818:;				
            _A8ADEC9C4_818:
            ; //	asm	nop				
006DA:      	nop
            ; //_A8ADEC9C4_819:;				
            _A8ADEC9C4_819:
            ; //	asm	nop				
006DB:      	nop
            ; //_A8ADEC9C4_820:;				
            _A8ADEC9C4_820:
            ; //	asm clr io[0x09].b14;			
006DC:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_821:;				
            _A8ADEC9C4_821:
            ; //	asm	nop				
006DD:      	nop
            ; //_A8ADEC9C4_822:;				
            _A8ADEC9C4_822:
            ; //	asm	nop				
006DE:      	nop
            ; //_A8ADEC9C4_823:;				
            _A8ADEC9C4_823:
            ; //	asm	nop				
006DF:      	nop
            ; //_A8ADEC9C4_824:;				
            _A8ADEC9C4_824:
            ; //	asm	nop				
006E0:      	nop
            ; //_A8ADEC9C4_825:;				
            _A8ADEC9C4_825:
            ; //	asm	nop				
006E1:      	nop
            ; //_A8ADEC9C4_826:;				
            _A8ADEC9C4_826:
            ; //	asm	nop				
006E2:      	nop
            ; //_A8ADEC9C4_827:;				
            _A8ADEC9C4_827:
            ; //	asm	nop				
006E3:      	nop
            ; //_A8ADEC9C4_828:;				
            _A8ADEC9C4_828:
            ; //	asm	nop				
006E4:      	nop
            ; //_A8ADEC9C4_829:;				
            _A8ADEC9C4_829:
            ; //	asm	nop				
006E5:      	nop
            ; //_A8ADEC9C4_830:;				
            _A8ADEC9C4_830:
            ; //	asm	nop				
006E6:      	nop
            ; //_A8ADEC9C4_831:;				
            _A8ADEC9C4_831:
            ; //	asm	nop				
006E7:      	nop
            ; //_A8ADEC9C4_832:;				
            _A8ADEC9C4_832:
            ; //	asm	nop				
006E8:      	nop
            ; //_A8ADEC9C4_833:;				
            _A8ADEC9C4_833:
            ; //	asm set io[0x09].b14;			
006E9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_834:;				
            _A8ADEC9C4_834:
            ; //	asm	nop				
006EA:      	nop
            ; //_A8ADEC9C4_835:;				
            _A8ADEC9C4_835:
            ; //	asm	nop				
006EB:      	nop
            ; //_A8ADEC9C4_836:;				
            _A8ADEC9C4_836:
            ; //	asm	nop				
006EC:      	nop
            ; //_A8ADEC9C4_837:;				
            _A8ADEC9C4_837:
            ; //	asm clr io[0x09].b14;			
006ED:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_838:;				
            _A8ADEC9C4_838:
            ; //	asm	nop				
006EE:      	nop
            ; //_A8ADEC9C4_839:;				
            _A8ADEC9C4_839:
            ; //	asm	nop				
006EF:      	nop
            ; //_A8ADEC9C4_840:;				
            _A8ADEC9C4_840:
            ; //	asm	nop				
006F0:      	nop
            ; //_A8ADEC9C4_841:;				
            _A8ADEC9C4_841:
            ; //	asm	nop				
006F1:      	nop
            ; //_A8ADEC9C4_842:;				
            _A8ADEC9C4_842:
            ; //	asm	nop				
006F2:      	nop
            ; //_A8ADEC9C4_843:;				
            _A8ADEC9C4_843:
            ; //	asm	nop				
006F3:      	nop
            ; //_A8ADEC9C4_844:;				
            _A8ADEC9C4_844:
            ; //	asm	nop				
006F4:      	nop
            ; //_A8ADEC9C4_845:;				
            _A8ADEC9C4_845:
            ; //	asm	nop				
006F5:      	nop
            ; //_A8ADEC9C4_846:;				
            _A8ADEC9C4_846:
            ; //	asm	nop				
006F6:      	nop
            ; //_A8ADEC9C4_847:;				
            _A8ADEC9C4_847:
            ; //	asm	nop				
006F7:      	nop
            ; //_A8ADEC9C4_848:;				
            _A8ADEC9C4_848:
            ; //	asm	nop				
006F8:      	nop
            ; //_A8ADEC9C4_849:;				
            _A8ADEC9C4_849:
            ; //	asm	nop				
006F9:      	nop
            ; //_A8ADEC9C4_850:;				
            _A8ADEC9C4_850:
            ; //	asm set io[0x09].b14;			
006FA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_851:;				
            _A8ADEC9C4_851:
            ; //	asm	nop				
006FB:      	nop
            ; //_A8ADEC9C4_852:;				
            _A8ADEC9C4_852:
            ; //	asm	nop				
006FC:      	nop
            ; //_A8ADEC9C4_853:;				
            _A8ADEC9C4_853:
            ; //	asm	nop				
006FD:      	nop
            ; //_A8ADEC9C4_854:;				
            _A8ADEC9C4_854:
            ; //	asm clr io[0x09].b14;			
006FE:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_855:;				
            _A8ADEC9C4_855:
            ; //	asm	nop				
006FF:      	nop
            ; //_A8ADEC9C4_856:;				
            _A8ADEC9C4_856:
            ; //	asm	nop				
00700:      	nop
            ; //_A8ADEC9C4_857:;				
            _A8ADEC9C4_857:
            ; //	asm	nop				
00701:      	nop
            ; //_A8ADEC9C4_858:;				
            _A8ADEC9C4_858:
            ; //	asm	nop				
00702:      	nop
            ; //_A8ADEC9C4_859:;				
            _A8ADEC9C4_859:
            ; //	asm	nop				
00703:      	nop
            ; //_A8ADEC9C4_860:;				
            _A8ADEC9C4_860:
            ; //	asm	nop				
00704:      	nop
            ; //_A8ADEC9C4_861:;				
            _A8ADEC9C4_861:
            ; //	asm	nop				
00705:      	nop
            ; //_A8ADEC9C4_862:;				
            _A8ADEC9C4_862:
            ; //	asm	nop				
00706:      	nop
            ; //_A8ADEC9C4_863:;				
            _A8ADEC9C4_863:
            ; //	asm	nop				
00707:      	nop
            ; //_A8ADEC9C4_864:;				
            _A8ADEC9C4_864:
            ; //	asm	nop				
00708:      	nop
            ; //_A8ADEC9C4_865:;				
            _A8ADEC9C4_865:
            ; //	asm	nop				
00709:      	nop
            ; //_A8ADEC9C4_866:;				
            _A8ADEC9C4_866:
            ; //	asm	nop				
0070A:      	nop
            ; //_A8ADEC9C4_867:;				
            _A8ADEC9C4_867:
            ; //	asm set io[0x09].b14;			
0070B:      	set io[0x09].b14//
            ; //_A8ADEC9C4_868:;				
            _A8ADEC9C4_868:
            ; //	asm	nop				
0070C:      	nop
            ; //_A8ADEC9C4_869:;				
            _A8ADEC9C4_869:
            ; //	asm	nop				
0070D:      	nop
            ; //_A8ADEC9C4_870:;				
            _A8ADEC9C4_870:
            ; //	asm	nop				
0070E:      	nop
            ; //_A8ADEC9C4_871:;				
            _A8ADEC9C4_871:
            ; //	asm clr io[0x09].b14;			
0070F:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_872:;				
            _A8ADEC9C4_872:
            ; //	asm	nop				
00710:      	nop
            ; //_A8ADEC9C4_873:;				
            _A8ADEC9C4_873:
            ; //	asm	nop				
00711:      	nop
            ; //_A8ADEC9C4_874:;				
            _A8ADEC9C4_874:
            ; //	asm	nop				
00712:      	nop
            ; //_A8ADEC9C4_875:;				
            _A8ADEC9C4_875:
            ; //	asm	nop				
00713:      	nop
            ; //_A8ADEC9C4_876:;				
            _A8ADEC9C4_876:
            ; //	asm	nop				
00714:      	nop
            ; //_A8ADEC9C4_877:;				
            _A8ADEC9C4_877:
            ; //	asm	nop				
00715:      	nop
            ; //_A8ADEC9C4_878:;				
            _A8ADEC9C4_878:
            ; //	asm	nop				
00716:      	nop
            ; //_A8ADEC9C4_879:;				
            _A8ADEC9C4_879:
            ; //	asm	nop				
00717:      	nop
            ; //_A8ADEC9C4_880:;				
            _A8ADEC9C4_880:
            ; //	asm	nop				
00718:      	nop
            ; //_A8ADEC9C4_881:;				
            _A8ADEC9C4_881:
            ; //	asm	nop				
00719:      	nop
            ; //_A8ADEC9C4_882:;				
            _A8ADEC9C4_882:
            ; //	asm	nop				
0071A:      	nop
            ; //_A8ADEC9C4_883:;				
            _A8ADEC9C4_883:
            ; //	asm	nop				
0071B:      	nop
            ; //_A8ADEC9C4_884:;				
            _A8ADEC9C4_884:
            ; //	asm set io[0x09].b14;			
0071C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_885:;				
            _A8ADEC9C4_885:
            ; //	asm	nop				
0071D:      	nop
            ; //_A8ADEC9C4_886:;				
            _A8ADEC9C4_886:
            ; //	asm	nop				
0071E:      	nop
            ; //_A8ADEC9C4_887:;				
            _A8ADEC9C4_887:
            ; //	asm	nop				
0071F:      	nop
            ; //_A8ADEC9C4_888:;				
            _A8ADEC9C4_888:
            ; //	asm clr io[0x09].b14;			
00720:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_889:;				
            _A8ADEC9C4_889:
            ; //	asm	nop				
00721:      	nop
            ; //_A8ADEC9C4_890:;				
            _A8ADEC9C4_890:
            ; //	asm	nop				
00722:      	nop
            ; //_A8ADEC9C4_891:;				
            _A8ADEC9C4_891:
            ; //	asm	nop				
00723:      	nop
            ; //_A8ADEC9C4_892:;				
            _A8ADEC9C4_892:
            ; //	asm	nop				
00724:      	nop
            ; //_A8ADEC9C4_893:;				
            _A8ADEC9C4_893:
            ; //	asm	nop				
00725:      	nop
            ; //_A8ADEC9C4_894:;				
            _A8ADEC9C4_894:
            ; //	asm	nop				
00726:      	nop
            ; //_A8ADEC9C4_895:;				
            _A8ADEC9C4_895:
            ; //	asm	nop				
00727:      	nop
            ; //_A8ADEC9C4_896:;				
            _A8ADEC9C4_896:
            ; //	asm	nop				
00728:      	nop
            ; //_A8ADEC9C4_897:;				
            _A8ADEC9C4_897:
            ; //	asm	nop				
00729:      	nop
            ; //_A8ADEC9C4_898:;				
            _A8ADEC9C4_898:
            ; //	asm	nop				
0072A:      	nop
            ; //_A8ADEC9C4_899:;				
            _A8ADEC9C4_899:
            ; //	asm	nop				
0072B:      	nop
            ; //_A8ADEC9C4_900:;				
            _A8ADEC9C4_900:
            ; //	asm	nop				
0072C:      	nop
            ; //_A8ADEC9C4_901:;				
            _A8ADEC9C4_901:
            ; //	asm set io[0x09].b14;			
0072D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_902:;				
            _A8ADEC9C4_902:
            ; //	asm	nop				
0072E:      	nop
            ; //_A8ADEC9C4_903:;				
            _A8ADEC9C4_903:
            ; //	asm	nop				
0072F:      	nop
            ; //_A8ADEC9C4_904:;				
            _A8ADEC9C4_904:
            ; //	asm	nop				
00730:      	nop
            ; //_A8ADEC9C4_905:;				
            _A8ADEC9C4_905:
            ; //	asm clr io[0x09].b14;			
00731:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_906:;				
            _A8ADEC9C4_906:
            ; //	asm	nop				
00732:      	nop
            ; //_A8ADEC9C4_907:;				
            _A8ADEC9C4_907:
            ; //	asm	nop				
00733:      	nop
            ; //_A8ADEC9C4_908:;				
            _A8ADEC9C4_908:
            ; //	asm	nop				
00734:      	nop
            ; //_A8ADEC9C4_909:;				
            _A8ADEC9C4_909:
            ; //	asm	nop				
00735:      	nop
            ; //_A8ADEC9C4_910:;				
            _A8ADEC9C4_910:
            ; //	asm	nop				
00736:      	nop
            ; //_A8ADEC9C4_911:;				
            _A8ADEC9C4_911:
            ; //	asm	nop				
00737:      	nop
            ; //_A8ADEC9C4_912:;				
            _A8ADEC9C4_912:
            ; //	asm	nop				
00738:      	nop
            ; //_A8ADEC9C4_913:;				
            _A8ADEC9C4_913:
            ; //	asm	nop				
00739:      	nop
            ; //_A8ADEC9C4_914:;				
            _A8ADEC9C4_914:
            ; //	asm	nop				
0073A:      	nop
            ; //_A8ADEC9C4_915:;				
            _A8ADEC9C4_915:
            ; //	asm	nop				
0073B:      	nop
            ; //_A8ADEC9C4_916:;				
            _A8ADEC9C4_916:
            ; //	asm	nop				
0073C:      	nop
            ; //_A8ADEC9C4_917:;				
            _A8ADEC9C4_917:
            ; //	asm	nop				
0073D:      	nop
            ; //_A8ADEC9C4_918:;				
            _A8ADEC9C4_918:
            ; //	asm set io[0x09].b14;			
0073E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_919:;				
            _A8ADEC9C4_919:
            ; //	asm	nop				
0073F:      	nop
            ; //_A8ADEC9C4_920:;				
            _A8ADEC9C4_920:
            ; //	asm	nop				
00740:      	nop
            ; //_A8ADEC9C4_921:;				
            _A8ADEC9C4_921:
            ; //	asm	nop				
00741:      	nop
            ; //_A8ADEC9C4_922:;				
            _A8ADEC9C4_922:
            ; //	asm clr io[0x09].b14;			
00742:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_923:;				
            _A8ADEC9C4_923:
            ; //	asm	nop				
00743:      	nop
            ; //_A8ADEC9C4_924:;				
            _A8ADEC9C4_924:
            ; //	asm	nop				
00744:      	nop
            ; //_A8ADEC9C4_925:;				
            _A8ADEC9C4_925:
            ; //	asm	nop				
00745:      	nop
            ; //_A8ADEC9C4_926:;				
            _A8ADEC9C4_926:
            ; //	asm	nop				
00746:      	nop
            ; //_A8ADEC9C4_927:;				
            _A8ADEC9C4_927:
            ; //	asm	nop				
00747:      	nop
            ; //_A8ADEC9C4_928:;				
            _A8ADEC9C4_928:
            ; //	asm	nop				
00748:      	nop
            ; //_A8ADEC9C4_929:;				
            _A8ADEC9C4_929:
            ; //	asm	nop				
00749:      	nop
            ; //_A8ADEC9C4_930:;				
            _A8ADEC9C4_930:
            ; //	asm	nop				
0074A:      	nop
            ; //_A8ADEC9C4_931:;				
            _A8ADEC9C4_931:
            ; //	asm	nop				
0074B:      	nop
            ; //_A8ADEC9C4_932:;				
            _A8ADEC9C4_932:
            ; //	asm	nop				
0074C:      	nop
            ; //_A8ADEC9C4_933:;				
            _A8ADEC9C4_933:
            ; //	asm	nop				
0074D:      	nop
            ; //_A8ADEC9C4_934:;				
            _A8ADEC9C4_934:
            ; //	asm	nop				
0074E:      	nop
            ; //_A8ADEC9C4_935:;				
            _A8ADEC9C4_935:
            ; //	asm set io[0x09].b14;			
0074F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_936:;				
            _A8ADEC9C4_936:
            ; //	asm	nop				
00750:      	nop
            ; //_A8ADEC9C4_937:;				
            _A8ADEC9C4_937:
            ; //	asm	nop				
00751:      	nop
            ; //_A8ADEC9C4_938:;				
            _A8ADEC9C4_938:
            ; //	asm	nop				
00752:      	nop
            ; //_A8ADEC9C4_939:;				
            _A8ADEC9C4_939:
            ; //	asm clr io[0x09].b14;			
00753:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_940:;				
            _A8ADEC9C4_940:
            ; //	asm	nop				
00754:      	nop
            ; //_A8ADEC9C4_941:;				
            _A8ADEC9C4_941:
            ; //	asm	nop				
00755:      	nop
            ; //_A8ADEC9C4_942:;				
            _A8ADEC9C4_942:
            ; //	asm	nop				
00756:      	nop
            ; //_A8ADEC9C4_943:;				
            _A8ADEC9C4_943:
            ; //	asm	nop				
00757:      	nop
            ; //_A8ADEC9C4_944:;				
            _A8ADEC9C4_944:
            ; //	asm	nop				
00758:      	nop
            ; //_A8ADEC9C4_945:;				
            _A8ADEC9C4_945:
            ; //	asm	nop				
00759:      	nop
            ; //_A8ADEC9C4_946:;				
            _A8ADEC9C4_946:
            ; //	asm	nop				
0075A:      	nop
            ; //_A8ADEC9C4_947:;				
            _A8ADEC9C4_947:
            ; //	asm	nop				
0075B:      	nop
            ; //_A8ADEC9C4_948:;				
            _A8ADEC9C4_948:
            ; //	asm	nop				
0075C:      	nop
            ; //_A8ADEC9C4_949:;				
            _A8ADEC9C4_949:
            ; //	asm	nop				
0075D:      	nop
            ; //_A8ADEC9C4_950:;				
            _A8ADEC9C4_950:
            ; //	asm	nop				
0075E:      	nop
            ; //_A8ADEC9C4_951:;				
            _A8ADEC9C4_951:
            ; //	asm	nop				
0075F:      	nop
            ; //_A8ADEC9C4_952:;				
            _A8ADEC9C4_952:
            ; //	asm set io[0x09].b14;			
00760:      	set io[0x09].b14//
            ; //_A8ADEC9C4_953:;				
            _A8ADEC9C4_953:
            ; //	asm	nop				
00761:      	nop
            ; //_A8ADEC9C4_954:;				
            _A8ADEC9C4_954:
            ; //	asm	nop				
00762:      	nop
            ; //_A8ADEC9C4_955:;				
            _A8ADEC9C4_955:
            ; //	asm	nop				
00763:      	nop
            ; //_A8ADEC9C4_956:;				
            _A8ADEC9C4_956:
            ; //	asm clr io[0x09].b14;			
00764:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_957:;				
            _A8ADEC9C4_957:
            ; //	asm	nop				
00765:      	nop
            ; //_A8ADEC9C4_958:;				
            _A8ADEC9C4_958:
            ; //	asm	nop				
00766:      	nop
            ; //_A8ADEC9C4_959:;				
            _A8ADEC9C4_959:
            ; //	asm	nop				
00767:      	nop
            ; //_A8ADEC9C4_960:;				
            _A8ADEC9C4_960:
            ; //	asm	nop				
00768:      	nop
            ; //_A8ADEC9C4_961:;				
            _A8ADEC9C4_961:
            ; //	asm	nop				
00769:      	nop
            ; //_A8ADEC9C4_962:;				
            _A8ADEC9C4_962:
            ; //	asm	nop				
0076A:      	nop
            ; //_A8ADEC9C4_963:;				
            _A8ADEC9C4_963:
            ; //	asm	nop				
0076B:      	nop
            ; //_A8ADEC9C4_964:;				
            _A8ADEC9C4_964:
            ; //	asm	nop				
0076C:      	nop
            ; //_A8ADEC9C4_965:;				
            _A8ADEC9C4_965:
            ; //	asm	nop				
0076D:      	nop
            ; //_A8ADEC9C4_966:;				
            _A8ADEC9C4_966:
            ; //	asm	nop				
0076E:      	nop
            ; //_A8ADEC9C4_967:;				
            _A8ADEC9C4_967:
            ; //	asm	nop				
0076F:      	nop
            ; //_A8ADEC9C4_968:;				
            _A8ADEC9C4_968:
            ; //	asm	nop				
00770:      	nop
            ; //_A8ADEC9C4_969:;				
            _A8ADEC9C4_969:
            ; //	asm set io[0x09].b14;			
00771:      	set io[0x09].b14//
            ; //_A8ADEC9C4_970:;				
            _A8ADEC9C4_970:
            ; //	asm	nop				
00772:      	nop
            ; //_A8ADEC9C4_971:;				
            _A8ADEC9C4_971:
            ; //	asm	nop				
00773:      	nop
            ; //_A8ADEC9C4_972:;				
            _A8ADEC9C4_972:
            ; //	asm	nop				
00774:      	nop
            ; //_A8ADEC9C4_973:;				
            _A8ADEC9C4_973:
            ; //	asm clr io[0x09].b14;			
00775:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_974:;				
            _A8ADEC9C4_974:
            ; //	asm	nop				
00776:      	nop
            ; //_A8ADEC9C4_975:;				
            _A8ADEC9C4_975:
            ; //	asm	nop				
00777:      	nop
            ; //_A8ADEC9C4_976:;				
            _A8ADEC9C4_976:
            ; //	asm	nop				
00778:      	nop
            ; //_A8ADEC9C4_977:;				
            _A8ADEC9C4_977:
            ; //	asm	nop				
00779:      	nop
            ; //_A8ADEC9C4_978:;				
            _A8ADEC9C4_978:
            ; //	asm	nop				
0077A:      	nop
            ; //_A8ADEC9C4_979:;				
            _A8ADEC9C4_979:
            ; //	asm	nop				
0077B:      	nop
            ; //_A8ADEC9C4_980:;				
            _A8ADEC9C4_980:
            ; //	asm	nop				
0077C:      	nop
            ; //_A8ADEC9C4_981:;				
            _A8ADEC9C4_981:
            ; //	asm	nop				
0077D:      	nop
            ; //_A8ADEC9C4_982:;				
            _A8ADEC9C4_982:
            ; //	asm	nop				
0077E:      	nop
            ; //_A8ADEC9C4_983:;				
            _A8ADEC9C4_983:
            ; //	asm	nop				
0077F:      	nop
            ; //_A8ADEC9C4_984:;				
            _A8ADEC9C4_984:
            ; //	asm	nop				
00780:      	nop
            ; //_A8ADEC9C4_985:;				
            _A8ADEC9C4_985:
            ; //	asm	nop				
00781:      	nop
            ; //_A8ADEC9C4_986:;				
            _A8ADEC9C4_986:
            ; //	asm set io[0x09].b14;			
00782:      	set io[0x09].b14//
            ; //_A8ADEC9C4_987:;				
            _A8ADEC9C4_987:
            ; //	asm	nop				
00783:      	nop
            ; //_A8ADEC9C4_988:;				
            _A8ADEC9C4_988:
            ; //	asm	nop				
00784:      	nop
            ; //_A8ADEC9C4_989:;				
            _A8ADEC9C4_989:
            ; //	asm	nop				
00785:      	nop
            ; //_A8ADEC9C4_990:;				
            _A8ADEC9C4_990:
            ; //	asm clr io[0x09].b14;			
00786:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_991:;				
            _A8ADEC9C4_991:
            ; //	asm	nop				
00787:      	nop
            ; //_A8ADEC9C4_992:;				
            _A8ADEC9C4_992:
            ; //	asm	nop				
00788:      	nop
            ; //_A8ADEC9C4_993:;				
            _A8ADEC9C4_993:
            ; //	asm	nop				
00789:      	nop
            ; //_A8ADEC9C4_994:;				
            _A8ADEC9C4_994:
            ; //	asm	nop				
0078A:      	nop
            ; //_A8ADEC9C4_995:;				
            _A8ADEC9C4_995:
            ; //	asm	nop				
0078B:      	nop
            ; //_A8ADEC9C4_996:;				
            _A8ADEC9C4_996:
            ; //	asm	nop				
0078C:      	nop
            ; //_A8ADEC9C4_997:;				
            _A8ADEC9C4_997:
            ; //	asm	nop				
0078D:      	nop
            ; //_A8ADEC9C4_998:;				
            _A8ADEC9C4_998:
            ; //	asm	nop				
0078E:      	nop
            ; //_A8ADEC9C4_999:;				
            _A8ADEC9C4_999:
            ; //	asm	nop				
0078F:      	nop
            ; //_A8ADEC9C4_1000:;				
            _A8ADEC9C4_1000:
            ; //	asm	nop				
00790:      	nop
            ; //_A8ADEC9C4_1001:;				
            _A8ADEC9C4_1001:
            ; //	asm	nop				
00791:      	nop
            ; //_A8ADEC9C4_1002:;				
            _A8ADEC9C4_1002:
            ; //	asm	nop				
00792:      	nop
            ; //_A8ADEC9C4_1003:;				
            _A8ADEC9C4_1003:
            ; //	asm set io[0x09].b14;			
00793:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1004:;				
            _A8ADEC9C4_1004:
            ; //	asm	nop				
00794:      	nop
            ; //_A8ADEC9C4_1005:;				
            _A8ADEC9C4_1005:
            ; //	asm	nop				
00795:      	nop
            ; //_A8ADEC9C4_1006:;				
            _A8ADEC9C4_1006:
            ; //	asm	nop				
00796:      	nop
            ; //_A8ADEC9C4_1007:;				
            _A8ADEC9C4_1007:
            ; //	asm clr io[0x09].b14;			
00797:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1008:;				
            _A8ADEC9C4_1008:
            ; //	asm	nop				
00798:      	nop
            ; //_A8ADEC9C4_1009:;				
            _A8ADEC9C4_1009:
            ; //	asm	nop				
00799:      	nop
            ; //_A8ADEC9C4_1010:;				
            _A8ADEC9C4_1010:
            ; //	asm	nop				
0079A:      	nop
            ; //_A8ADEC9C4_1011:;				
            _A8ADEC9C4_1011:
            ; //	asm	nop				
0079B:      	nop
            ; //_A8ADEC9C4_1012:;				
            _A8ADEC9C4_1012:
            ; //	asm	nop				
0079C:      	nop
            ; //_A8ADEC9C4_1013:;				
            _A8ADEC9C4_1013:
            ; //	asm	nop				
0079D:      	nop
            ; //_A8ADEC9C4_1014:;				
            _A8ADEC9C4_1014:
            ; //	asm	nop				
0079E:      	nop
            ; //_A8ADEC9C4_1015:;				
            _A8ADEC9C4_1015:
            ; //	asm	nop				
0079F:      	nop
            ; //_A8ADEC9C4_1016:;				
            _A8ADEC9C4_1016:
            ; //	asm	nop				
007A0:      	nop
            ; //_A8ADEC9C4_1017:;				
            _A8ADEC9C4_1017:
            ; //	asm	nop				
007A1:      	nop
            ; //_A8ADEC9C4_1018:;				
            _A8ADEC9C4_1018:
            ; //	asm	nop				
007A2:      	nop
            ; //_A8ADEC9C4_1019:;				
            _A8ADEC9C4_1019:
            ; //	asm	nop				
007A3:      	nop
            ; //_A8ADEC9C4_1020:;				
            _A8ADEC9C4_1020:
            ; //	asm set io[0x09].b14;			
007A4:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1021:;				
            _A8ADEC9C4_1021:
            ; //	asm	nop				
007A5:      	nop
            ; //_A8ADEC9C4_1022:;				
            _A8ADEC9C4_1022:
            ; //	asm	nop				
007A6:      	nop
            ; //_A8ADEC9C4_1023:;				
            _A8ADEC9C4_1023:
            ; //	asm	nop				
007A7:      	nop
            ; //_A8ADEC9C4_1024:;				
            _A8ADEC9C4_1024:
            ; //	asm clr io[0x09].b14;			
007A8:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1025:;				
            _A8ADEC9C4_1025:
            ; //	asm	nop				
007A9:      	nop
            ; //_A8ADEC9C4_1026:;				
            _A8ADEC9C4_1026:
            ; //	asm	nop				
007AA:      	nop
            ; //_A8ADEC9C4_1027:;				
            _A8ADEC9C4_1027:
            ; //	asm	nop				
007AB:      	nop
            ; //_A8ADEC9C4_1028:;				
            _A8ADEC9C4_1028:
            ; //	asm	nop				
007AC:      	nop
            ; //_A8ADEC9C4_1029:;				
            _A8ADEC9C4_1029:
            ; //	asm	nop				
007AD:      	nop
            ; //_A8ADEC9C4_1030:;				
            _A8ADEC9C4_1030:
            ; //	asm	nop				
007AE:      	nop
            ; //_A8ADEC9C4_1031:;				
            _A8ADEC9C4_1031:
            ; //	asm	nop				
007AF:      	nop
            ; //_A8ADEC9C4_1032:;				
            _A8ADEC9C4_1032:
            ; //	asm	nop				
007B0:      	nop
            ; //_A8ADEC9C4_1033:;				
            _A8ADEC9C4_1033:
            ; //	asm	nop				
007B1:      	nop
            ; //_A8ADEC9C4_1034:;				
            _A8ADEC9C4_1034:
            ; //	asm	nop				
007B2:      	nop
            ; //_A8ADEC9C4_1035:;				
            _A8ADEC9C4_1035:
            ; //	asm	nop				
007B3:      	nop
            ; //_A8ADEC9C4_1036:;				
            _A8ADEC9C4_1036:
            ; //	asm	nop				
007B4:      	nop
            ; //_A8ADEC9C4_1037:;				
            _A8ADEC9C4_1037:
            ; //	asm set io[0x09].b14;			
007B5:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1038:;				
            _A8ADEC9C4_1038:
            ; //	asm	nop				
007B6:      	nop
            ; //_A8ADEC9C4_1039:;				
            _A8ADEC9C4_1039:
            ; //	asm	nop				
007B7:      	nop
            ; //_A8ADEC9C4_1040:;				
            _A8ADEC9C4_1040:
            ; //	asm	nop				
007B8:      	nop
            ; //_A8ADEC9C4_1041:;				
            _A8ADEC9C4_1041:
            ; //	asm clr io[0x09].b14;			
007B9:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1042:;				
            _A8ADEC9C4_1042:
            ; //	asm	nop				
007BA:      	nop
            ; //_A8ADEC9C4_1043:;				
            _A8ADEC9C4_1043:
            ; //	asm	nop				
007BB:      	nop
            ; //_A8ADEC9C4_1044:;				
            _A8ADEC9C4_1044:
            ; //	asm	nop				
007BC:      	nop
            ; //_A8ADEC9C4_1045:;				
            _A8ADEC9C4_1045:
            ; //	asm	nop				
007BD:      	nop
            ; //_A8ADEC9C4_1046:;				
            _A8ADEC9C4_1046:
            ; //	asm	nop				
007BE:      	nop
            ; //_A8ADEC9C4_1047:;				
            _A8ADEC9C4_1047:
            ; //	asm	nop				
007BF:      	nop
            ; //_A8ADEC9C4_1048:;				
            _A8ADEC9C4_1048:
            ; //	asm	nop				
007C0:      	nop
            ; //_A8ADEC9C4_1049:;				
            _A8ADEC9C4_1049:
            ; //	asm	nop				
007C1:      	nop
            ; //_A8ADEC9C4_1050:;				
            _A8ADEC9C4_1050:
            ; //	asm	nop				
007C2:      	nop
            ; //_A8ADEC9C4_1051:;				
            _A8ADEC9C4_1051:
            ; //	asm	nop				
007C3:      	nop
            ; //_A8ADEC9C4_1052:;				
            _A8ADEC9C4_1052:
            ; //	asm	nop				
007C4:      	nop
            ; //_A8ADEC9C4_1053:;				
            _A8ADEC9C4_1053:
            ; //	asm	nop				
007C5:      	nop
            ; //_A8ADEC9C4_1054:;				
            _A8ADEC9C4_1054:
            ; //	asm set io[0x09].b14;			
007C6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1055:;				
            _A8ADEC9C4_1055:
            ; //	asm	nop				
007C7:      	nop
            ; //_A8ADEC9C4_1056:;				
            _A8ADEC9C4_1056:
            ; //	asm	nop				
007C8:      	nop
            ; //_A8ADEC9C4_1057:;				
            _A8ADEC9C4_1057:
            ; //	asm	nop				
007C9:      	nop
            ; //_A8ADEC9C4_1058:;				
            _A8ADEC9C4_1058:
            ; //	asm clr io[0x09].b14;			
007CA:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1059:;				
            _A8ADEC9C4_1059:
            ; //	asm	nop				
007CB:      	nop
            ; //_A8ADEC9C4_1060:;				
            _A8ADEC9C4_1060:
            ; //	asm	nop				
007CC:      	nop
            ; //_A8ADEC9C4_1061:;				
            _A8ADEC9C4_1061:
            ; //	asm	nop				
007CD:      	nop
            ; //_A8ADEC9C4_1062:;				
            _A8ADEC9C4_1062:
            ; //	asm	nop				
007CE:      	nop
            ; //_A8ADEC9C4_1063:;				
            _A8ADEC9C4_1063:
            ; //	asm	nop				
007CF:      	nop
            ; //_A8ADEC9C4_1064:;				
            _A8ADEC9C4_1064:
            ; //	asm	nop				
007D0:      	nop
            ; //_A8ADEC9C4_1065:;				
            _A8ADEC9C4_1065:
            ; //	asm	nop				
007D1:      	nop
            ; //_A8ADEC9C4_1066:;				
            _A8ADEC9C4_1066:
            ; //	asm	nop				
007D2:      	nop
            ; //_A8ADEC9C4_1067:;				
            _A8ADEC9C4_1067:
            ; //	asm	nop				
007D3:      	nop
            ; //_A8ADEC9C4_1068:;				
            _A8ADEC9C4_1068:
            ; //	asm	nop				
007D4:      	nop
            ; //_A8ADEC9C4_1069:;				
            _A8ADEC9C4_1069:
            ; //	asm	nop				
007D5:      	nop
            ; //_A8ADEC9C4_1070:;				
            _A8ADEC9C4_1070:
            ; //	asm	nop				
007D6:      	nop
            ; //_A8ADEC9C4_1071:;				
            _A8ADEC9C4_1071:
            ; //	asm set io[0x09].b14;			
007D7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1072:;				
            _A8ADEC9C4_1072:
            ; //	asm	nop				
007D8:      	nop
            ; //_A8ADEC9C4_1073:;				
            _A8ADEC9C4_1073:
            ; //	asm	nop				
007D9:      	nop
            ; //_A8ADEC9C4_1074:;				
            _A8ADEC9C4_1074:
            ; //	asm	nop				
007DA:      	nop
            ; //_A8ADEC9C4_1075:;				
            _A8ADEC9C4_1075:
            ; //	asm clr io[0x09].b14;			
007DB:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1076:;				
            _A8ADEC9C4_1076:
            ; //	asm	nop				
007DC:      	nop
            ; //_A8ADEC9C4_1077:;				
            _A8ADEC9C4_1077:
            ; //	asm	nop				
007DD:      	nop
            ; //_A8ADEC9C4_1078:;				
            _A8ADEC9C4_1078:
            ; //	asm	nop				
007DE:      	nop
            ; //_A8ADEC9C4_1079:;				
            _A8ADEC9C4_1079:
            ; //	asm	nop				
007DF:      	nop
            ; //_A8ADEC9C4_1080:;				
            _A8ADEC9C4_1080:
            ; //	asm	nop				
007E0:      	nop
            ; //_A8ADEC9C4_1081:;				
            _A8ADEC9C4_1081:
            ; //	asm	nop				
007E1:      	nop
            ; //_A8ADEC9C4_1082:;				
            _A8ADEC9C4_1082:
            ; //	asm	nop				
007E2:      	nop
            ; //_A8ADEC9C4_1083:;				
            _A8ADEC9C4_1083:
            ; //	asm	nop				
007E3:      	nop
            ; //_A8ADEC9C4_1084:;				
            _A8ADEC9C4_1084:
            ; //	asm	nop				
007E4:      	nop
            ; //_A8ADEC9C4_1085:;				
            _A8ADEC9C4_1085:
            ; //	asm	nop				
007E5:      	nop
            ; //_A8ADEC9C4_1086:;				
            _A8ADEC9C4_1086:
            ; //	asm	nop				
007E6:      	nop
            ; //_A8ADEC9C4_1087:;				
            _A8ADEC9C4_1087:
            ; //	asm	nop				
007E7:      	nop
            ; //_A8ADEC9C4_1088:;				
            _A8ADEC9C4_1088:
            ; //	goto LD63FD439_92;			
007E8:      	pch =	LD63FD439_92
007E9:      	ljmp	LD63FD439_92
            ; //LD63FD439_96:;					
            LD63FD439_96:
            ; //_A8ADEC9C4_1089:;				
            _A8ADEC9C4_1089:
            ; //	asm set io[0x09].b14;			
007EA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1090:;				
            _A8ADEC9C4_1090:
            ; //	asm	nop				
007EB:      	nop
            ; //_A8ADEC9C4_1091:;				
            _A8ADEC9C4_1091:
            ; //	asm	nop				
007EC:      	nop
            ; //_A8ADEC9C4_1092:;				
            _A8ADEC9C4_1092:
            ; //	asm	nop				
007ED:      	nop
            ; //_A8ADEC9C4_1093:;				
            _A8ADEC9C4_1093:
            ; //	asm clr io[0x09].b14;			
007EE:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1094:;				
            _A8ADEC9C4_1094:
            ; //	asm	nop				
007EF:      	nop
            ; //_A8ADEC9C4_1095:;				
            _A8ADEC9C4_1095:
            ; //	asm	nop				
007F0:      	nop
            ; //_A8ADEC9C4_1096:;				
            _A8ADEC9C4_1096:
            ; //	asm	nop				
007F1:      	nop
            ; //_A8ADEC9C4_1097:;				
            _A8ADEC9C4_1097:
            ; //	asm	nop				
007F2:      	nop
            ; //_A8ADEC9C4_1098:;				
            _A8ADEC9C4_1098:
            ; //	asm	nop				
007F3:      	nop
            ; //_A8ADEC9C4_1099:;				
            _A8ADEC9C4_1099:
            ; //	asm	nop				
007F4:      	nop
            ; //_A8ADEC9C4_1100:;				
            _A8ADEC9C4_1100:
            ; //	asm	nop				
007F5:      	nop
            ; //_A8ADEC9C4_1101:;				
            _A8ADEC9C4_1101:
            ; //	asm	nop				
007F6:      	nop
            ; //_A8ADEC9C4_1102:;				
            _A8ADEC9C4_1102:
            ; //	asm	nop				
007F7:      	nop
            ; //_A8ADEC9C4_1103:;				
            _A8ADEC9C4_1103:
            ; //	asm	nop				
007F8:      	nop
            ; //_A8ADEC9C4_1104:;				
            _A8ADEC9C4_1104:
            ; //	asm	nop				
007F9:      	nop
            ; //_A8ADEC9C4_1105:;				
            _A8ADEC9C4_1105:
            ; //	asm	nop				
007FA:      	nop
            ; //_A8ADEC9C4_1106:;				
            _A8ADEC9C4_1106:
            ; //	asm set io[0x09].b14;			
007FB:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1107:;				
            _A8ADEC9C4_1107:
            ; //	asm	nop				
007FC:      	nop
            ; //_A8ADEC9C4_1108:;				
            _A8ADEC9C4_1108:
            ; //	asm	nop				
007FD:      	nop
            ; //_A8ADEC9C4_1109:;				
            _A8ADEC9C4_1109:
            ; //	asm	nop				
007FE:      	nop
            ; //_A8ADEC9C4_1110:;				
            _A8ADEC9C4_1110:
            ; //	asm clr io[0x09].b14;			
007FF:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1111:;				
            _A8ADEC9C4_1111:
            ; //	asm	nop				
00800:      	nop
            ; //_A8ADEC9C4_1112:;				
            _A8ADEC9C4_1112:
            ; //	asm	nop				
00801:      	nop
            ; //_A8ADEC9C4_1113:;				
            _A8ADEC9C4_1113:
            ; //	asm	nop				
00802:      	nop
            ; //_A8ADEC9C4_1114:;				
            _A8ADEC9C4_1114:
            ; //	asm	nop				
00803:      	nop
            ; //_A8ADEC9C4_1115:;				
            _A8ADEC9C4_1115:
            ; //	asm	nop				
00804:      	nop
            ; //_A8ADEC9C4_1116:;				
            _A8ADEC9C4_1116:
            ; //	asm	nop				
00805:      	nop
            ; //_A8ADEC9C4_1117:;				
            _A8ADEC9C4_1117:
            ; //	asm	nop				
00806:      	nop
            ; //_A8ADEC9C4_1118:;				
            _A8ADEC9C4_1118:
            ; //	asm	nop				
00807:      	nop
            ; //_A8ADEC9C4_1119:;				
            _A8ADEC9C4_1119:
            ; //	asm	nop				
00808:      	nop
            ; //_A8ADEC9C4_1120:;				
            _A8ADEC9C4_1120:
            ; //	asm	nop				
00809:      	nop
            ; //_A8ADEC9C4_1121:;				
            _A8ADEC9C4_1121:
            ; //	asm	nop				
0080A:      	nop
            ; //_A8ADEC9C4_1122:;				
            _A8ADEC9C4_1122:
            ; //	asm	nop				
0080B:      	nop
            ; //_A8ADEC9C4_1123:;				
            _A8ADEC9C4_1123:
            ; //	asm set io[0x09].b14;			
0080C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1124:;				
            _A8ADEC9C4_1124:
            ; //	asm	nop				
0080D:      	nop
            ; //_A8ADEC9C4_1125:;				
            _A8ADEC9C4_1125:
            ; //	asm	nop				
0080E:      	nop
            ; //_A8ADEC9C4_1126:;				
            _A8ADEC9C4_1126:
            ; //	asm	nop				
0080F:      	nop
            ; //_A8ADEC9C4_1127:;				
            _A8ADEC9C4_1127:
            ; //	asm clr io[0x09].b14;			
00810:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1128:;				
            _A8ADEC9C4_1128:
            ; //	asm	nop				
00811:      	nop
            ; //_A8ADEC9C4_1129:;				
            _A8ADEC9C4_1129:
            ; //	asm	nop				
00812:      	nop
            ; //_A8ADEC9C4_1130:;				
            _A8ADEC9C4_1130:
            ; //	asm	nop				
00813:      	nop
            ; //_A8ADEC9C4_1131:;				
            _A8ADEC9C4_1131:
            ; //	asm	nop				
00814:      	nop
            ; //_A8ADEC9C4_1132:;				
            _A8ADEC9C4_1132:
            ; //	asm	nop				
00815:      	nop
            ; //_A8ADEC9C4_1133:;				
            _A8ADEC9C4_1133:
            ; //	asm	nop				
00816:      	nop
            ; //_A8ADEC9C4_1134:;				
            _A8ADEC9C4_1134:
            ; //	asm	nop				
00817:      	nop
            ; //_A8ADEC9C4_1135:;				
            _A8ADEC9C4_1135:
            ; //	asm	nop				
00818:      	nop
            ; //_A8ADEC9C4_1136:;				
            _A8ADEC9C4_1136:
            ; //	asm	nop				
00819:      	nop
            ; //_A8ADEC9C4_1137:;				
            _A8ADEC9C4_1137:
            ; //	asm	nop				
0081A:      	nop
            ; //_A8ADEC9C4_1138:;				
            _A8ADEC9C4_1138:
            ; //	asm	nop				
0081B:      	nop
            ; //_A8ADEC9C4_1139:;				
            _A8ADEC9C4_1139:
            ; //	asm	nop				
0081C:      	nop
            ; //_A8ADEC9C4_1140:;				
            _A8ADEC9C4_1140:
            ; //	asm set io[0x09].b14;			
0081D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1141:;				
            _A8ADEC9C4_1141:
            ; //	asm	nop				
0081E:      	nop
            ; //_A8ADEC9C4_1142:;				
            _A8ADEC9C4_1142:
            ; //	asm	nop				
0081F:      	nop
            ; //_A8ADEC9C4_1143:;				
            _A8ADEC9C4_1143:
            ; //	asm	nop				
00820:      	nop
            ; //_A8ADEC9C4_1144:;				
            _A8ADEC9C4_1144:
            ; //	asm clr io[0x09].b14;			
00821:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1145:;				
            _A8ADEC9C4_1145:
            ; //	asm	nop				
00822:      	nop
            ; //_A8ADEC9C4_1146:;				
            _A8ADEC9C4_1146:
            ; //	asm	nop				
00823:      	nop
            ; //_A8ADEC9C4_1147:;				
            _A8ADEC9C4_1147:
            ; //	asm	nop				
00824:      	nop
            ; //_A8ADEC9C4_1148:;				
            _A8ADEC9C4_1148:
            ; //	asm	nop				
00825:      	nop
            ; //_A8ADEC9C4_1149:;				
            _A8ADEC9C4_1149:
            ; //	asm	nop				
00826:      	nop
            ; //_A8ADEC9C4_1150:;				
            _A8ADEC9C4_1150:
            ; //	asm	nop				
00827:      	nop
            ; //_A8ADEC9C4_1151:;				
            _A8ADEC9C4_1151:
            ; //	asm	nop				
00828:      	nop
            ; //_A8ADEC9C4_1152:;				
            _A8ADEC9C4_1152:
            ; //	asm	nop				
00829:      	nop
            ; //_A8ADEC9C4_1153:;				
            _A8ADEC9C4_1153:
            ; //	asm	nop				
0082A:      	nop
            ; //_A8ADEC9C4_1154:;				
            _A8ADEC9C4_1154:
            ; //	asm	nop				
0082B:      	nop
            ; //_A8ADEC9C4_1155:;				
            _A8ADEC9C4_1155:
            ; //	asm	nop				
0082C:      	nop
            ; //_A8ADEC9C4_1156:;				
            _A8ADEC9C4_1156:
            ; //	asm	nop				
0082D:      	nop
            ; //_A8ADEC9C4_1157:;				
            _A8ADEC9C4_1157:
            ; //	asm set io[0x09].b14;			
0082E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1158:;				
            _A8ADEC9C4_1158:
            ; //	asm	nop				
0082F:      	nop
            ; //_A8ADEC9C4_1159:;				
            _A8ADEC9C4_1159:
            ; //	asm	nop				
00830:      	nop
            ; //_A8ADEC9C4_1160:;				
            _A8ADEC9C4_1160:
            ; //	asm	nop				
00831:      	nop
            ; //_A8ADEC9C4_1161:;				
            _A8ADEC9C4_1161:
            ; //	asm clr io[0x09].b14;			
00832:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1162:;				
            _A8ADEC9C4_1162:
            ; //	asm	nop				
00833:      	nop
            ; //_A8ADEC9C4_1163:;				
            _A8ADEC9C4_1163:
            ; //	asm	nop				
00834:      	nop
            ; //_A8ADEC9C4_1164:;				
            _A8ADEC9C4_1164:
            ; //	asm	nop				
00835:      	nop
            ; //_A8ADEC9C4_1165:;				
            _A8ADEC9C4_1165:
            ; //	asm	nop				
00836:      	nop
            ; //_A8ADEC9C4_1166:;				
            _A8ADEC9C4_1166:
            ; //	asm	nop				
00837:      	nop
            ; //_A8ADEC9C4_1167:;				
            _A8ADEC9C4_1167:
            ; //	asm	nop				
00838:      	nop
            ; //_A8ADEC9C4_1168:;				
            _A8ADEC9C4_1168:
            ; //	asm	nop				
00839:      	nop
            ; //_A8ADEC9C4_1169:;				
            _A8ADEC9C4_1169:
            ; //	asm	nop				
0083A:      	nop
            ; //_A8ADEC9C4_1170:;				
            _A8ADEC9C4_1170:
            ; //	asm	nop				
0083B:      	nop
            ; //_A8ADEC9C4_1171:;				
            _A8ADEC9C4_1171:
            ; //	asm	nop				
0083C:      	nop
            ; //_A8ADEC9C4_1172:;				
            _A8ADEC9C4_1172:
            ; //	asm	nop				
0083D:      	nop
            ; //_A8ADEC9C4_1173:;				
            _A8ADEC9C4_1173:
            ; //	asm	nop				
0083E:      	nop
            ; //_A8ADEC9C4_1174:;				
            _A8ADEC9C4_1174:
            ; //	asm set io[0x09].b14;			
0083F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1175:;				
            _A8ADEC9C4_1175:
            ; //	asm	nop				
00840:      	nop
            ; //_A8ADEC9C4_1176:;				
            _A8ADEC9C4_1176:
            ; //	asm	nop				
00841:      	nop
            ; //_A8ADEC9C4_1177:;				
            _A8ADEC9C4_1177:
            ; //	asm	nop				
00842:      	nop
            ; //_A8ADEC9C4_1178:;				
            _A8ADEC9C4_1178:
            ; //	asm clr io[0x09].b14;			
00843:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1179:;				
            _A8ADEC9C4_1179:
            ; //	asm	nop				
00844:      	nop
            ; //_A8ADEC9C4_1180:;				
            _A8ADEC9C4_1180:
            ; //	asm	nop				
00845:      	nop
            ; //_A8ADEC9C4_1181:;				
            _A8ADEC9C4_1181:
            ; //	asm	nop				
00846:      	nop
            ; //_A8ADEC9C4_1182:;				
            _A8ADEC9C4_1182:
            ; //	asm	nop				
00847:      	nop
            ; //_A8ADEC9C4_1183:;				
            _A8ADEC9C4_1183:
            ; //	asm	nop				
00848:      	nop
            ; //_A8ADEC9C4_1184:;				
            _A8ADEC9C4_1184:
            ; //	asm	nop				
00849:      	nop
            ; //_A8ADEC9C4_1185:;				
            _A8ADEC9C4_1185:
            ; //	asm	nop				
0084A:      	nop
            ; //_A8ADEC9C4_1186:;				
            _A8ADEC9C4_1186:
            ; //	asm	nop				
0084B:      	nop
            ; //_A8ADEC9C4_1187:;				
            _A8ADEC9C4_1187:
            ; //	asm	nop				
0084C:      	nop
            ; //_A8ADEC9C4_1188:;				
            _A8ADEC9C4_1188:
            ; //	asm	nop				
0084D:      	nop
            ; //_A8ADEC9C4_1189:;				
            _A8ADEC9C4_1189:
            ; //	asm	nop				
0084E:      	nop
            ; //_A8ADEC9C4_1190:;				
            _A8ADEC9C4_1190:
            ; //	asm	nop				
0084F:      	nop
            ; //_A8ADEC9C4_1191:;				
            _A8ADEC9C4_1191:
            ; //	asm set io[0x09].b14;			
00850:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1192:;				
            _A8ADEC9C4_1192:
            ; //	asm	nop				
00851:      	nop
            ; //_A8ADEC9C4_1193:;				
            _A8ADEC9C4_1193:
            ; //	asm	nop				
00852:      	nop
            ; //_A8ADEC9C4_1194:;				
            _A8ADEC9C4_1194:
            ; //	asm	nop				
00853:      	nop
            ; //_A8ADEC9C4_1195:;				
            _A8ADEC9C4_1195:
            ; //	asm clr io[0x09].b14;			
00854:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1196:;				
            _A8ADEC9C4_1196:
            ; //	asm	nop				
00855:      	nop
            ; //_A8ADEC9C4_1197:;				
            _A8ADEC9C4_1197:
            ; //	asm	nop				
00856:      	nop
            ; //_A8ADEC9C4_1198:;				
            _A8ADEC9C4_1198:
            ; //	asm	nop				
00857:      	nop
            ; //_A8ADEC9C4_1199:;				
            _A8ADEC9C4_1199:
            ; //	asm	nop				
00858:      	nop
            ; //_A8ADEC9C4_1200:;				
            _A8ADEC9C4_1200:
            ; //	asm	nop				
00859:      	nop
            ; //_A8ADEC9C4_1201:;				
            _A8ADEC9C4_1201:
            ; //	asm	nop				
0085A:      	nop
            ; //_A8ADEC9C4_1202:;				
            _A8ADEC9C4_1202:
            ; //	asm	nop				
0085B:      	nop
            ; //_A8ADEC9C4_1203:;				
            _A8ADEC9C4_1203:
            ; //	asm	nop				
0085C:      	nop
            ; //_A8ADEC9C4_1204:;				
            _A8ADEC9C4_1204:
            ; //	asm	nop				
0085D:      	nop
            ; //_A8ADEC9C4_1205:;				
            _A8ADEC9C4_1205:
            ; //	asm	nop				
0085E:      	nop
            ; //_A8ADEC9C4_1206:;				
            _A8ADEC9C4_1206:
            ; //	asm	nop				
0085F:      	nop
            ; //_A8ADEC9C4_1207:;				
            _A8ADEC9C4_1207:
            ; //	asm	nop				
00860:      	nop
            ; //_A8ADEC9C4_1208:;				
            _A8ADEC9C4_1208:
            ; //	asm set io[0x09].b14;			
00861:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1209:;				
            _A8ADEC9C4_1209:
            ; //	asm	nop				
00862:      	nop
            ; //_A8ADEC9C4_1210:;				
            _A8ADEC9C4_1210:
            ; //	asm	nop				
00863:      	nop
            ; //_A8ADEC9C4_1211:;				
            _A8ADEC9C4_1211:
            ; //	asm	nop				
00864:      	nop
            ; //_A8ADEC9C4_1212:;				
            _A8ADEC9C4_1212:
            ; //	asm clr io[0x09].b14;			
00865:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1213:;				
            _A8ADEC9C4_1213:
            ; //	asm	nop				
00866:      	nop
            ; //_A8ADEC9C4_1214:;				
            _A8ADEC9C4_1214:
            ; //	asm	nop				
00867:      	nop
            ; //_A8ADEC9C4_1215:;				
            _A8ADEC9C4_1215:
            ; //	asm	nop				
00868:      	nop
            ; //_A8ADEC9C4_1216:;				
            _A8ADEC9C4_1216:
            ; //	asm	nop				
00869:      	nop
            ; //_A8ADEC9C4_1217:;				
            _A8ADEC9C4_1217:
            ; //	asm	nop				
0086A:      	nop
            ; //_A8ADEC9C4_1218:;				
            _A8ADEC9C4_1218:
            ; //	asm	nop				
0086B:      	nop
            ; //_A8ADEC9C4_1219:;				
            _A8ADEC9C4_1219:
            ; //	asm	nop				
0086C:      	nop
            ; //_A8ADEC9C4_1220:;				
            _A8ADEC9C4_1220:
            ; //	asm	nop				
0086D:      	nop
            ; //_A8ADEC9C4_1221:;				
            _A8ADEC9C4_1221:
            ; //	asm	nop				
0086E:      	nop
            ; //_A8ADEC9C4_1222:;				
            _A8ADEC9C4_1222:
            ; //	asm	nop				
0086F:      	nop
            ; //_A8ADEC9C4_1223:;				
            _A8ADEC9C4_1223:
            ; //	asm	nop				
00870:      	nop
            ; //_A8ADEC9C4_1224:;				
            _A8ADEC9C4_1224:
            ; //	asm	nop				
00871:      	nop
            ; //_A8ADEC9C4_1225:;				
            _A8ADEC9C4_1225:
            ; //	asm set io[0x09].b14;			
00872:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1226:;				
            _A8ADEC9C4_1226:
            ; //	asm	nop				
00873:      	nop
            ; //_A8ADEC9C4_1227:;				
            _A8ADEC9C4_1227:
            ; //	asm	nop				
00874:      	nop
            ; //_A8ADEC9C4_1228:;				
            _A8ADEC9C4_1228:
            ; //	asm	nop				
00875:      	nop
            ; //_A8ADEC9C4_1229:;				
            _A8ADEC9C4_1229:
            ; //	asm	nop				
00876:      	nop
            ; //_A8ADEC9C4_1230:;				
            _A8ADEC9C4_1230:
            ; //	asm	nop				
00877:      	nop
            ; //_A8ADEC9C4_1231:;				
            _A8ADEC9C4_1231:
            ; //	asm	nop				
00878:      	nop
            ; //_A8ADEC9C4_1232:;				
            _A8ADEC9C4_1232:
            ; //	asm	nop				
00879:      	nop
            ; //_A8ADEC9C4_1233:;				
            _A8ADEC9C4_1233:
            ; //	asm	nop				
0087A:      	nop
            ; //_A8ADEC9C4_1234:;				
            _A8ADEC9C4_1234:
            ; //	asm	nop				
0087B:      	nop
            ; //_A8ADEC9C4_1235:;				
            _A8ADEC9C4_1235:
            ; //	asm	nop				
0087C:      	nop
            ; //_A8ADEC9C4_1236:;				
            _A8ADEC9C4_1236:
            ; //	asm	nop				
0087D:      	nop
            ; //_A8ADEC9C4_1237:;				
            _A8ADEC9C4_1237:
            ; //	asm	nop				
0087E:      	nop
            ; //_A8ADEC9C4_1238:;				
            _A8ADEC9C4_1238:
            ; //	asm clr io[0x09].b14;			
0087F:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1239:;				
            _A8ADEC9C4_1239:
            ; //	asm	nop				
00880:      	nop
            ; //_A8ADEC9C4_1240:;				
            _A8ADEC9C4_1240:
            ; //	asm	nop				
00881:      	nop
            ; //_A8ADEC9C4_1241:;				
            _A8ADEC9C4_1241:
            ; //	asm	nop				
00882:      	nop
            ; //_A8ADEC9C4_1242:;				
            _A8ADEC9C4_1242:
            ; //	asm set io[0x09].b14;			
00883:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1243:;				
            _A8ADEC9C4_1243:
            ; //	asm	nop				
00884:      	nop
            ; //_A8ADEC9C4_1244:;				
            _A8ADEC9C4_1244:
            ; //	asm	nop				
00885:      	nop
            ; //_A8ADEC9C4_1245:;				
            _A8ADEC9C4_1245:
            ; //	asm	nop				
00886:      	nop
            ; //_A8ADEC9C4_1246:;				
            _A8ADEC9C4_1246:
            ; //	asm	nop				
00887:      	nop
            ; //_A8ADEC9C4_1247:;				
            _A8ADEC9C4_1247:
            ; //	asm	nop				
00888:      	nop
            ; //_A8ADEC9C4_1248:;				
            _A8ADEC9C4_1248:
            ; //	asm	nop				
00889:      	nop
            ; //_A8ADEC9C4_1249:;				
            _A8ADEC9C4_1249:
            ; //	asm	nop				
0088A:      	nop
            ; //_A8ADEC9C4_1250:;				
            _A8ADEC9C4_1250:
            ; //	asm	nop				
0088B:      	nop
            ; //_A8ADEC9C4_1251:;				
            _A8ADEC9C4_1251:
            ; //	asm	nop				
0088C:      	nop
            ; //_A8ADEC9C4_1252:;				
            _A8ADEC9C4_1252:
            ; //	asm	nop				
0088D:      	nop
            ; //_A8ADEC9C4_1253:;				
            _A8ADEC9C4_1253:
            ; //	asm	nop				
0088E:      	nop
            ; //_A8ADEC9C4_1254:;				
            _A8ADEC9C4_1254:
            ; //	asm	nop				
0088F:      	nop
            ; //_A8ADEC9C4_1255:;				
            _A8ADEC9C4_1255:
            ; //	asm clr io[0x09].b14;			
00890:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1256:;				
            _A8ADEC9C4_1256:
            ; //	asm	nop				
00891:      	nop
            ; //_A8ADEC9C4_1257:;				
            _A8ADEC9C4_1257:
            ; //	asm	nop				
00892:      	nop
            ; //_A8ADEC9C4_1258:;				
            _A8ADEC9C4_1258:
            ; //	asm	nop				
00893:      	nop
            ; //_A8ADEC9C4_1259:;				
            _A8ADEC9C4_1259:
            ; //	asm set io[0x09].b14;			
00894:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1260:;				
            _A8ADEC9C4_1260:
            ; //	asm	nop				
00895:      	nop
            ; //_A8ADEC9C4_1261:;				
            _A8ADEC9C4_1261:
            ; //	asm	nop				
00896:      	nop
            ; //_A8ADEC9C4_1262:;				
            _A8ADEC9C4_1262:
            ; //	asm	nop				
00897:      	nop
            ; //_A8ADEC9C4_1263:;				
            _A8ADEC9C4_1263:
            ; //	asm	nop				
00898:      	nop
            ; //_A8ADEC9C4_1264:;				
            _A8ADEC9C4_1264:
            ; //	asm	nop				
00899:      	nop
            ; //_A8ADEC9C4_1265:;				
            _A8ADEC9C4_1265:
            ; //	asm	nop				
0089A:      	nop
            ; //_A8ADEC9C4_1266:;				
            _A8ADEC9C4_1266:
            ; //	asm	nop				
0089B:      	nop
            ; //_A8ADEC9C4_1267:;				
            _A8ADEC9C4_1267:
            ; //	asm	nop				
0089C:      	nop
            ; //_A8ADEC9C4_1268:;				
            _A8ADEC9C4_1268:
            ; //	asm	nop				
0089D:      	nop
            ; //_A8ADEC9C4_1269:;				
            _A8ADEC9C4_1269:
            ; //	asm	nop				
0089E:      	nop
            ; //_A8ADEC9C4_1270:;				
            _A8ADEC9C4_1270:
            ; //	asm	nop				
0089F:      	nop
            ; //_A8ADEC9C4_1271:;				
            _A8ADEC9C4_1271:
            ; //	asm	nop				
008A0:      	nop
            ; //_A8ADEC9C4_1272:;				
            _A8ADEC9C4_1272:
            ; //	asm clr io[0x09].b14;			
008A1:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1273:;				
            _A8ADEC9C4_1273:
            ; //	asm	nop				
008A2:      	nop
            ; //_A8ADEC9C4_1274:;				
            _A8ADEC9C4_1274:
            ; //	asm	nop				
008A3:      	nop
            ; //_A8ADEC9C4_1275:;				
            _A8ADEC9C4_1275:
            ; //	asm	nop				
008A4:      	nop
            ; //_A8ADEC9C4_1276:;				
            _A8ADEC9C4_1276:
            ; //	asm set io[0x09].b14;			
008A5:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1277:;				
            _A8ADEC9C4_1277:
            ; //	asm	nop				
008A6:      	nop
            ; //_A8ADEC9C4_1278:;				
            _A8ADEC9C4_1278:
            ; //	asm	nop				
008A7:      	nop
            ; //_A8ADEC9C4_1279:;				
            _A8ADEC9C4_1279:
            ; //	asm	nop				
008A8:      	nop
            ; //_A8ADEC9C4_1280:;				
            _A8ADEC9C4_1280:
            ; //	asm	nop				
008A9:      	nop
            ; //_A8ADEC9C4_1281:;				
            _A8ADEC9C4_1281:
            ; //	asm	nop				
008AA:      	nop
            ; //_A8ADEC9C4_1282:;				
            _A8ADEC9C4_1282:
            ; //	asm	nop				
008AB:      	nop
            ; //_A8ADEC9C4_1283:;				
            _A8ADEC9C4_1283:
            ; //	asm	nop				
008AC:      	nop
            ; //_A8ADEC9C4_1284:;				
            _A8ADEC9C4_1284:
            ; //	asm	nop				
008AD:      	nop
            ; //_A8ADEC9C4_1285:;				
            _A8ADEC9C4_1285:
            ; //	asm	nop				
008AE:      	nop
            ; //_A8ADEC9C4_1286:;				
            _A8ADEC9C4_1286:
            ; //	asm	nop				
008AF:      	nop
            ; //_A8ADEC9C4_1287:;				
            _A8ADEC9C4_1287:
            ; //	asm	nop				
008B0:      	nop
            ; //_A8ADEC9C4_1288:;				
            _A8ADEC9C4_1288:
            ; //	asm	nop				
008B1:      	nop
            ; //_A8ADEC9C4_1289:;				
            _A8ADEC9C4_1289:
            ; //	asm clr io[0x09].b14;			
008B2:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1290:;				
            _A8ADEC9C4_1290:
            ; //	asm	nop				
008B3:      	nop
            ; //_A8ADEC9C4_1291:;				
            _A8ADEC9C4_1291:
            ; //	asm	nop				
008B4:      	nop
            ; //_A8ADEC9C4_1292:;				
            _A8ADEC9C4_1292:
            ; //	asm	nop				
008B5:      	nop
            ; //_A8ADEC9C4_1293:;				
            _A8ADEC9C4_1293:
            ; //	asm set io[0x09].b14;			
008B6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1294:;				
            _A8ADEC9C4_1294:
            ; //	asm	nop				
008B7:      	nop
            ; //_A8ADEC9C4_1295:;				
            _A8ADEC9C4_1295:
            ; //	asm	nop				
008B8:      	nop
            ; //_A8ADEC9C4_1296:;				
            _A8ADEC9C4_1296:
            ; //	asm	nop				
008B9:      	nop
            ; //_A8ADEC9C4_1297:;				
            _A8ADEC9C4_1297:
            ; //	asm	nop				
008BA:      	nop
            ; //_A8ADEC9C4_1298:;				
            _A8ADEC9C4_1298:
            ; //	asm	nop				
008BB:      	nop
            ; //_A8ADEC9C4_1299:;				
            _A8ADEC9C4_1299:
            ; //	asm	nop				
008BC:      	nop
            ; //_A8ADEC9C4_1300:;				
            _A8ADEC9C4_1300:
            ; //	asm	nop				
008BD:      	nop
            ; //_A8ADEC9C4_1301:;				
            _A8ADEC9C4_1301:
            ; //	asm	nop				
008BE:      	nop
            ; //_A8ADEC9C4_1302:;				
            _A8ADEC9C4_1302:
            ; //	asm	nop				
008BF:      	nop
            ; //_A8ADEC9C4_1303:;				
            _A8ADEC9C4_1303:
            ; //	asm	nop				
008C0:      	nop
            ; //_A8ADEC9C4_1304:;				
            _A8ADEC9C4_1304:
            ; //	asm	nop				
008C1:      	nop
            ; //_A8ADEC9C4_1305:;				
            _A8ADEC9C4_1305:
            ; //	asm	nop				
008C2:      	nop
            ; //_A8ADEC9C4_1306:;				
            _A8ADEC9C4_1306:
            ; //	asm clr io[0x09].b14;			
008C3:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1307:;				
            _A8ADEC9C4_1307:
            ; //	asm	nop				
008C4:      	nop
            ; //_A8ADEC9C4_1308:;				
            _A8ADEC9C4_1308:
            ; //	asm	nop				
008C5:      	nop
            ; //_A8ADEC9C4_1309:;				
            _A8ADEC9C4_1309:
            ; //	asm	nop				
008C6:      	nop
            ; //_A8ADEC9C4_1310:;				
            _A8ADEC9C4_1310:
            ; //	asm set io[0x09].b14;			
008C7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1311:;				
            _A8ADEC9C4_1311:
            ; //	asm	nop				
008C8:      	nop
            ; //_A8ADEC9C4_1312:;				
            _A8ADEC9C4_1312:
            ; //	asm	nop				
008C9:      	nop
            ; //_A8ADEC9C4_1313:;				
            _A8ADEC9C4_1313:
            ; //	asm	nop				
008CA:      	nop
            ; //_A8ADEC9C4_1314:;				
            _A8ADEC9C4_1314:
            ; //	asm	nop				
008CB:      	nop
            ; //_A8ADEC9C4_1315:;				
            _A8ADEC9C4_1315:
            ; //	asm	nop				
008CC:      	nop
            ; //_A8ADEC9C4_1316:;				
            _A8ADEC9C4_1316:
            ; //	asm	nop				
008CD:      	nop
            ; //_A8ADEC9C4_1317:;				
            _A8ADEC9C4_1317:
            ; //	asm	nop				
008CE:      	nop
            ; //_A8ADEC9C4_1318:;				
            _A8ADEC9C4_1318:
            ; //	asm	nop				
008CF:      	nop
            ; //_A8ADEC9C4_1319:;				
            _A8ADEC9C4_1319:
            ; //	asm	nop				
008D0:      	nop
            ; //_A8ADEC9C4_1320:;				
            _A8ADEC9C4_1320:
            ; //	asm	nop				
008D1:      	nop
            ; //_A8ADEC9C4_1321:;				
            _A8ADEC9C4_1321:
            ; //	asm	nop				
008D2:      	nop
            ; //_A8ADEC9C4_1322:;				
            _A8ADEC9C4_1322:
            ; //	asm	nop				
008D3:      	nop
            ; //_A8ADEC9C4_1323:;				
            _A8ADEC9C4_1323:
            ; //	asm clr io[0x09].b14;			
008D4:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1324:;				
            _A8ADEC9C4_1324:
            ; //	asm	nop				
008D5:      	nop
            ; //_A8ADEC9C4_1325:;				
            _A8ADEC9C4_1325:
            ; //	asm	nop				
008D6:      	nop
            ; //_A8ADEC9C4_1326:;				
            _A8ADEC9C4_1326:
            ; //	asm	nop				
008D7:      	nop
            ; //_A8ADEC9C4_1327:;				
            _A8ADEC9C4_1327:
            ; //	asm set io[0x09].b14;			
008D8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1328:;				
            _A8ADEC9C4_1328:
            ; //	asm	nop				
008D9:      	nop
            ; //_A8ADEC9C4_1329:;				
            _A8ADEC9C4_1329:
            ; //	asm	nop				
008DA:      	nop
            ; //_A8ADEC9C4_1330:;				
            _A8ADEC9C4_1330:
            ; //	asm	nop				
008DB:      	nop
            ; //_A8ADEC9C4_1331:;				
            _A8ADEC9C4_1331:
            ; //	asm	nop				
008DC:      	nop
            ; //_A8ADEC9C4_1332:;				
            _A8ADEC9C4_1332:
            ; //	asm	nop				
008DD:      	nop
            ; //_A8ADEC9C4_1333:;				
            _A8ADEC9C4_1333:
            ; //	asm	nop				
008DE:      	nop
            ; //_A8ADEC9C4_1334:;				
            _A8ADEC9C4_1334:
            ; //	asm	nop				
008DF:      	nop
            ; //_A8ADEC9C4_1335:;				
            _A8ADEC9C4_1335:
            ; //	asm	nop				
008E0:      	nop
            ; //_A8ADEC9C4_1336:;				
            _A8ADEC9C4_1336:
            ; //	asm	nop				
008E1:      	nop
            ; //_A8ADEC9C4_1337:;				
            _A8ADEC9C4_1337:
            ; //	asm	nop				
008E2:      	nop
            ; //_A8ADEC9C4_1338:;				
            _A8ADEC9C4_1338:
            ; //	asm	nop				
008E3:      	nop
            ; //_A8ADEC9C4_1339:;				
            _A8ADEC9C4_1339:
            ; //	asm	nop				
008E4:      	nop
            ; //_A8ADEC9C4_1340:;				
            _A8ADEC9C4_1340:
            ; //	asm clr io[0x09].b14;			
008E5:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1341:;				
            _A8ADEC9C4_1341:
            ; //	asm	nop				
008E6:      	nop
            ; //_A8ADEC9C4_1342:;				
            _A8ADEC9C4_1342:
            ; //	asm	nop				
008E7:      	nop
            ; //_A8ADEC9C4_1343:;				
            _A8ADEC9C4_1343:
            ; //	asm	nop				
008E8:      	nop
            ; //_A8ADEC9C4_1344:;				
            _A8ADEC9C4_1344:
            ; //	asm set io[0x09].b14;			
008E9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1345:;				
            _A8ADEC9C4_1345:
            ; //	asm	nop				
008EA:      	nop
            ; //_A8ADEC9C4_1346:;				
            _A8ADEC9C4_1346:
            ; //	asm	nop				
008EB:      	nop
            ; //_A8ADEC9C4_1347:;				
            _A8ADEC9C4_1347:
            ; //	asm	nop				
008EC:      	nop
            ; //_A8ADEC9C4_1348:;				
            _A8ADEC9C4_1348:
            ; //	asm	nop				
008ED:      	nop
            ; //_A8ADEC9C4_1349:;				
            _A8ADEC9C4_1349:
            ; //	asm	nop				
008EE:      	nop
            ; //_A8ADEC9C4_1350:;				
            _A8ADEC9C4_1350:
            ; //	asm	nop				
008EF:      	nop
            ; //_A8ADEC9C4_1351:;				
            _A8ADEC9C4_1351:
            ; //	asm	nop				
008F0:      	nop
            ; //_A8ADEC9C4_1352:;				
            _A8ADEC9C4_1352:
            ; //	asm	nop				
008F1:      	nop
            ; //_A8ADEC9C4_1353:;				
            _A8ADEC9C4_1353:
            ; //	asm	nop				
008F2:      	nop
            ; //_A8ADEC9C4_1354:;				
            _A8ADEC9C4_1354:
            ; //	asm	nop				
008F3:      	nop
            ; //_A8ADEC9C4_1355:;				
            _A8ADEC9C4_1355:
            ; //	asm	nop				
008F4:      	nop
            ; //_A8ADEC9C4_1356:;				
            _A8ADEC9C4_1356:
            ; //	asm	nop				
008F5:      	nop
            ; //_A8ADEC9C4_1357:;				
            _A8ADEC9C4_1357:
            ; //	asm clr io[0x09].b14;			
008F6:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1358:;				
            _A8ADEC9C4_1358:
            ; //	asm	nop				
008F7:      	nop
            ; //_A8ADEC9C4_1359:;				
            _A8ADEC9C4_1359:
            ; //	asm	nop				
008F8:      	nop
            ; //_A8ADEC9C4_1360:;				
            _A8ADEC9C4_1360:
            ; //	asm	nop				
008F9:      	nop
            ; //_A8ADEC9C4_1361:;				
            _A8ADEC9C4_1361:
            ; //	asm set io[0x09].b14;			
008FA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1362:;				
            _A8ADEC9C4_1362:
            ; //	asm	nop				
008FB:      	nop
            ; //_A8ADEC9C4_1363:;				
            _A8ADEC9C4_1363:
            ; //	asm	nop				
008FC:      	nop
            ; //_A8ADEC9C4_1364:;				
            _A8ADEC9C4_1364:
            ; //	asm	nop				
008FD:      	nop
            ; //_A8ADEC9C4_1365:;				
            _A8ADEC9C4_1365:
            ; //	asm clr io[0x09].b14;			
008FE:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1366:;				
            _A8ADEC9C4_1366:
            ; //	asm	nop				
008FF:      	nop
            ; //_A8ADEC9C4_1367:;				
            _A8ADEC9C4_1367:
            ; //	asm	nop				
00900:      	nop
            ; //_A8ADEC9C4_1368:;				
            _A8ADEC9C4_1368:
            ; //	asm	nop				
00901:      	nop
            ; //_A8ADEC9C4_1369:;				
            _A8ADEC9C4_1369:
            ; //	asm	nop				
00902:      	nop
            ; //_A8ADEC9C4_1370:;				
            _A8ADEC9C4_1370:
            ; //	asm	nop				
00903:      	nop
            ; //_A8ADEC9C4_1371:;				
            _A8ADEC9C4_1371:
            ; //	asm	nop				
00904:      	nop
            ; //_A8ADEC9C4_1372:;				
            _A8ADEC9C4_1372:
            ; //	asm	nop				
00905:      	nop
            ; //_A8ADEC9C4_1373:;				
            _A8ADEC9C4_1373:
            ; //	asm	nop				
00906:      	nop
            ; //_A8ADEC9C4_1374:;				
            _A8ADEC9C4_1374:
            ; //	asm	nop				
00907:      	nop
            ; //_A8ADEC9C4_1375:;				
            _A8ADEC9C4_1375:
            ; //	asm	nop				
00908:      	nop
            ; //_A8ADEC9C4_1376:;				
            _A8ADEC9C4_1376:
            ; //	asm	nop				
00909:      	nop
            ; //_A8ADEC9C4_1377:;				
            _A8ADEC9C4_1377:
            ; //	asm	nop				
0090A:      	nop
            ; //_A8ADEC9C4_1378:;				
            _A8ADEC9C4_1378:
            ; //	asm set io[0x09].b14;			
0090B:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1379:;				
            _A8ADEC9C4_1379:
            ; //	asm	nop				
0090C:      	nop
            ; //_A8ADEC9C4_1380:;				
            _A8ADEC9C4_1380:
            ; //	asm	nop				
0090D:      	nop
            ; //_A8ADEC9C4_1381:;				
            _A8ADEC9C4_1381:
            ; //	asm	nop				
0090E:      	nop
            ; //_A8ADEC9C4_1382:;				
            _A8ADEC9C4_1382:
            ; //	asm clr io[0x09].b14;			
0090F:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1383:;				
            _A8ADEC9C4_1383:
            ; //	asm	nop				
00910:      	nop
            ; //_A8ADEC9C4_1384:;				
            _A8ADEC9C4_1384:
            ; //	asm	nop				
00911:      	nop
            ; //_A8ADEC9C4_1385:;				
            _A8ADEC9C4_1385:
            ; //	asm	nop				
00912:      	nop
            ; //_A8ADEC9C4_1386:;				
            _A8ADEC9C4_1386:
            ; //	asm	nop				
00913:      	nop
            ; //_A8ADEC9C4_1387:;				
            _A8ADEC9C4_1387:
            ; //	asm	nop				
00914:      	nop
            ; //_A8ADEC9C4_1388:;				
            _A8ADEC9C4_1388:
            ; //	asm	nop				
00915:      	nop
            ; //_A8ADEC9C4_1389:;				
            _A8ADEC9C4_1389:
            ; //	asm	nop				
00916:      	nop
            ; //_A8ADEC9C4_1390:;				
            _A8ADEC9C4_1390:
            ; //	asm	nop				
00917:      	nop
            ; //_A8ADEC9C4_1391:;				
            _A8ADEC9C4_1391:
            ; //	asm	nop				
00918:      	nop
            ; //_A8ADEC9C4_1392:;				
            _A8ADEC9C4_1392:
            ; //	asm	nop				
00919:      	nop
            ; //_A8ADEC9C4_1393:;				
            _A8ADEC9C4_1393:
            ; //	asm	nop				
0091A:      	nop
            ; //_A8ADEC9C4_1394:;				
            _A8ADEC9C4_1394:
            ; //	asm	nop				
0091B:      	nop
            ; //_A8ADEC9C4_1395:;				
            _A8ADEC9C4_1395:
            ; //	asm set io[0x09].b14;			
0091C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1396:;				
            _A8ADEC9C4_1396:
            ; //	asm	nop				
0091D:      	nop
            ; //_A8ADEC9C4_1397:;				
            _A8ADEC9C4_1397:
            ; //	asm	nop				
0091E:      	nop
            ; //_A8ADEC9C4_1398:;				
            _A8ADEC9C4_1398:
            ; //	asm	nop				
0091F:      	nop
            ; //_A8ADEC9C4_1399:;				
            _A8ADEC9C4_1399:
            ; //	asm clr io[0x09].b14;			
00920:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1400:;				
            _A8ADEC9C4_1400:
            ; //	asm	nop				
00921:      	nop
            ; //_A8ADEC9C4_1401:;				
            _A8ADEC9C4_1401:
            ; //	asm	nop				
00922:      	nop
            ; //_A8ADEC9C4_1402:;				
            _A8ADEC9C4_1402:
            ; //	asm	nop				
00923:      	nop
            ; //_A8ADEC9C4_1403:;				
            _A8ADEC9C4_1403:
            ; //	asm	nop				
00924:      	nop
            ; //_A8ADEC9C4_1404:;				
            _A8ADEC9C4_1404:
            ; //	asm	nop				
00925:      	nop
            ; //_A8ADEC9C4_1405:;				
            _A8ADEC9C4_1405:
            ; //	asm	nop				
00926:      	nop
            ; //_A8ADEC9C4_1406:;				
            _A8ADEC9C4_1406:
            ; //	asm	nop				
00927:      	nop
            ; //_A8ADEC9C4_1407:;				
            _A8ADEC9C4_1407:
            ; //	asm	nop				
00928:      	nop
            ; //_A8ADEC9C4_1408:;				
            _A8ADEC9C4_1408:
            ; //	asm	nop				
00929:      	nop
            ; //_A8ADEC9C4_1409:;				
            _A8ADEC9C4_1409:
            ; //	asm	nop				
0092A:      	nop
            ; //_A8ADEC9C4_1410:;				
            _A8ADEC9C4_1410:
            ; //	asm	nop				
0092B:      	nop
            ; //_A8ADEC9C4_1411:;				
            _A8ADEC9C4_1411:
            ; //	asm	nop				
0092C:      	nop
            ; //_A8ADEC9C4_1412:;				
            _A8ADEC9C4_1412:
            ; //	asm set io[0x09].b14;			
0092D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1413:;				
            _A8ADEC9C4_1413:
            ; //	asm	nop				
0092E:      	nop
            ; //_A8ADEC9C4_1414:;				
            _A8ADEC9C4_1414:
            ; //	asm	nop				
0092F:      	nop
            ; //_A8ADEC9C4_1415:;				
            _A8ADEC9C4_1415:
            ; //	asm	nop				
00930:      	nop
            ; //_A8ADEC9C4_1416:;				
            _A8ADEC9C4_1416:
            ; //	asm clr io[0x09].b14;			
00931:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1417:;				
            _A8ADEC9C4_1417:
            ; //	asm	nop				
00932:      	nop
            ; //_A8ADEC9C4_1418:;				
            _A8ADEC9C4_1418:
            ; //	asm	nop				
00933:      	nop
            ; //_A8ADEC9C4_1419:;				
            _A8ADEC9C4_1419:
            ; //	asm	nop				
00934:      	nop
            ; //_A8ADEC9C4_1420:;				
            _A8ADEC9C4_1420:
            ; //	asm	nop				
00935:      	nop
            ; //_A8ADEC9C4_1421:;				
            _A8ADEC9C4_1421:
            ; //	asm	nop				
00936:      	nop
            ; //_A8ADEC9C4_1422:;				
            _A8ADEC9C4_1422:
            ; //	asm	nop				
00937:      	nop
            ; //_A8ADEC9C4_1423:;				
            _A8ADEC9C4_1423:
            ; //	asm	nop				
00938:      	nop
            ; //_A8ADEC9C4_1424:;				
            _A8ADEC9C4_1424:
            ; //	asm	nop				
00939:      	nop
            ; //_A8ADEC9C4_1425:;				
            _A8ADEC9C4_1425:
            ; //	asm	nop				
0093A:      	nop
            ; //_A8ADEC9C4_1426:;				
            _A8ADEC9C4_1426:
            ; //	asm	nop				
0093B:      	nop
            ; //_A8ADEC9C4_1427:;				
            _A8ADEC9C4_1427:
            ; //	asm	nop				
0093C:      	nop
            ; //_A8ADEC9C4_1428:;				
            _A8ADEC9C4_1428:
            ; //	asm	nop				
0093D:      	nop
            ; //_A8ADEC9C4_1429:;				
            _A8ADEC9C4_1429:
            ; //	asm set io[0x09].b14;			
0093E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1430:;				
            _A8ADEC9C4_1430:
            ; //	asm	nop				
0093F:      	nop
            ; //_A8ADEC9C4_1431:;				
            _A8ADEC9C4_1431:
            ; //	asm	nop				
00940:      	nop
            ; //_A8ADEC9C4_1432:;				
            _A8ADEC9C4_1432:
            ; //	asm	nop				
00941:      	nop
            ; //_A8ADEC9C4_1433:;				
            _A8ADEC9C4_1433:
            ; //	asm clr io[0x09].b14;			
00942:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1434:;				
            _A8ADEC9C4_1434:
            ; //	asm	nop				
00943:      	nop
            ; //_A8ADEC9C4_1435:;				
            _A8ADEC9C4_1435:
            ; //	asm	nop				
00944:      	nop
            ; //_A8ADEC9C4_1436:;				
            _A8ADEC9C4_1436:
            ; //	asm	nop				
00945:      	nop
            ; //_A8ADEC9C4_1437:;				
            _A8ADEC9C4_1437:
            ; //	asm	nop				
00946:      	nop
            ; //_A8ADEC9C4_1438:;				
            _A8ADEC9C4_1438:
            ; //	asm	nop				
00947:      	nop
            ; //_A8ADEC9C4_1439:;				
            _A8ADEC9C4_1439:
            ; //	asm	nop				
00948:      	nop
            ; //_A8ADEC9C4_1440:;				
            _A8ADEC9C4_1440:
            ; //	asm	nop				
00949:      	nop
            ; //_A8ADEC9C4_1441:;				
            _A8ADEC9C4_1441:
            ; //	asm	nop				
0094A:      	nop
            ; //_A8ADEC9C4_1442:;				
            _A8ADEC9C4_1442:
            ; //	asm	nop				
0094B:      	nop
            ; //_A8ADEC9C4_1443:;				
            _A8ADEC9C4_1443:
            ; //	asm	nop				
0094C:      	nop
            ; //_A8ADEC9C4_1444:;				
            _A8ADEC9C4_1444:
            ; //	asm	nop				
0094D:      	nop
            ; //_A8ADEC9C4_1445:;				
            _A8ADEC9C4_1445:
            ; //	asm	nop				
0094E:      	nop
            ; //_A8ADEC9C4_1446:;				
            _A8ADEC9C4_1446:
            ; //	asm set io[0x09].b14;			
0094F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1447:;				
            _A8ADEC9C4_1447:
            ; //	asm	nop				
00950:      	nop
            ; //_A8ADEC9C4_1448:;				
            _A8ADEC9C4_1448:
            ; //	asm	nop				
00951:      	nop
            ; //_A8ADEC9C4_1449:;				
            _A8ADEC9C4_1449:
            ; //	asm	nop				
00952:      	nop
            ; //_A8ADEC9C4_1450:;				
            _A8ADEC9C4_1450:
            ; //	asm clr io[0x09].b14;			
00953:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1451:;				
            _A8ADEC9C4_1451:
            ; //	asm	nop				
00954:      	nop
            ; //_A8ADEC9C4_1452:;				
            _A8ADEC9C4_1452:
            ; //	asm	nop				
00955:      	nop
            ; //_A8ADEC9C4_1453:;				
            _A8ADEC9C4_1453:
            ; //	asm	nop				
00956:      	nop
            ; //_A8ADEC9C4_1454:;				
            _A8ADEC9C4_1454:
            ; //	asm	nop				
00957:      	nop
            ; //_A8ADEC9C4_1455:;				
            _A8ADEC9C4_1455:
            ; //	asm	nop				
00958:      	nop
            ; //_A8ADEC9C4_1456:;				
            _A8ADEC9C4_1456:
            ; //	asm	nop				
00959:      	nop
            ; //_A8ADEC9C4_1457:;				
            _A8ADEC9C4_1457:
            ; //	asm	nop				
0095A:      	nop
            ; //_A8ADEC9C4_1458:;				
            _A8ADEC9C4_1458:
            ; //	asm	nop				
0095B:      	nop
            ; //_A8ADEC9C4_1459:;				
            _A8ADEC9C4_1459:
            ; //	asm	nop				
0095C:      	nop
            ; //_A8ADEC9C4_1460:;				
            _A8ADEC9C4_1460:
            ; //	asm	nop				
0095D:      	nop
            ; //_A8ADEC9C4_1461:;				
            _A8ADEC9C4_1461:
            ; //	asm	nop				
0095E:      	nop
            ; //_A8ADEC9C4_1462:;				
            _A8ADEC9C4_1462:
            ; //	asm	nop				
0095F:      	nop
            ; //_A8ADEC9C4_1463:;				
            _A8ADEC9C4_1463:
            ; //	asm set io[0x09].b14;			
00960:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1464:;				
            _A8ADEC9C4_1464:
            ; //	asm	nop				
00961:      	nop
            ; //_A8ADEC9C4_1465:;				
            _A8ADEC9C4_1465:
            ; //	asm	nop				
00962:      	nop
            ; //_A8ADEC9C4_1466:;				
            _A8ADEC9C4_1466:
            ; //	asm	nop				
00963:      	nop
            ; //_A8ADEC9C4_1467:;				
            _A8ADEC9C4_1467:
            ; //	asm clr io[0x09].b14;			
00964:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1468:;				
            _A8ADEC9C4_1468:
            ; //	asm	nop				
00965:      	nop
            ; //_A8ADEC9C4_1469:;				
            _A8ADEC9C4_1469:
            ; //	asm	nop				
00966:      	nop
            ; //_A8ADEC9C4_1470:;				
            _A8ADEC9C4_1470:
            ; //	asm	nop				
00967:      	nop
            ; //_A8ADEC9C4_1471:;				
            _A8ADEC9C4_1471:
            ; //	asm	nop				
00968:      	nop
            ; //_A8ADEC9C4_1472:;				
            _A8ADEC9C4_1472:
            ; //	asm	nop				
00969:      	nop
            ; //_A8ADEC9C4_1473:;				
            _A8ADEC9C4_1473:
            ; //	asm	nop				
0096A:      	nop
            ; //_A8ADEC9C4_1474:;				
            _A8ADEC9C4_1474:
            ; //	asm	nop				
0096B:      	nop
            ; //_A8ADEC9C4_1475:;				
            _A8ADEC9C4_1475:
            ; //	asm	nop				
0096C:      	nop
            ; //_A8ADEC9C4_1476:;				
            _A8ADEC9C4_1476:
            ; //	asm	nop				
0096D:      	nop
            ; //_A8ADEC9C4_1477:;				
            _A8ADEC9C4_1477:
            ; //	asm	nop				
0096E:      	nop
            ; //_A8ADEC9C4_1478:;				
            _A8ADEC9C4_1478:
            ; //	asm	nop				
0096F:      	nop
            ; //_A8ADEC9C4_1479:;				
            _A8ADEC9C4_1479:
            ; //	asm	nop				
00970:      	nop
            ; //_A8ADEC9C4_1480:;				
            _A8ADEC9C4_1480:
            ; //	asm set io[0x09].b14;			
00971:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1481:;				
            _A8ADEC9C4_1481:
            ; //	asm	nop				
00972:      	nop
            ; //_A8ADEC9C4_1482:;				
            _A8ADEC9C4_1482:
            ; //	asm	nop				
00973:      	nop
            ; //_A8ADEC9C4_1483:;				
            _A8ADEC9C4_1483:
            ; //	asm	nop				
00974:      	nop
            ; //_A8ADEC9C4_1484:;				
            _A8ADEC9C4_1484:
            ; //	asm clr io[0x09].b14;			
00975:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1485:;				
            _A8ADEC9C4_1485:
            ; //	asm	nop				
00976:      	nop
            ; //_A8ADEC9C4_1486:;				
            _A8ADEC9C4_1486:
            ; //	asm	nop				
00977:      	nop
            ; //_A8ADEC9C4_1487:;				
            _A8ADEC9C4_1487:
            ; //	asm	nop				
00978:      	nop
            ; //_A8ADEC9C4_1488:;				
            _A8ADEC9C4_1488:
            ; //	asm	nop				
00979:      	nop
            ; //_A8ADEC9C4_1489:;				
            _A8ADEC9C4_1489:
            ; //	asm	nop				
0097A:      	nop
            ; //_A8ADEC9C4_1490:;				
            _A8ADEC9C4_1490:
            ; //	asm	nop				
0097B:      	nop
            ; //_A8ADEC9C4_1491:;				
            _A8ADEC9C4_1491:
            ; //	asm	nop				
0097C:      	nop
            ; //_A8ADEC9C4_1492:;				
            _A8ADEC9C4_1492:
            ; //	asm	nop				
0097D:      	nop
            ; //_A8ADEC9C4_1493:;				
            _A8ADEC9C4_1493:
            ; //	asm	nop				
0097E:      	nop
            ; //_A8ADEC9C4_1494:;				
            _A8ADEC9C4_1494:
            ; //	asm	nop				
0097F:      	nop
            ; //_A8ADEC9C4_1495:;				
            _A8ADEC9C4_1495:
            ; //	asm	nop				
00980:      	nop
            ; //_A8ADEC9C4_1496:;				
            _A8ADEC9C4_1496:
            ; //	asm	nop				
00981:      	nop
            ; //_A8ADEC9C4_1497:;				
            _A8ADEC9C4_1497:
            ; //	goto LD63FD439_92;			
00982:      	pch =	LD63FD439_92
00983:      	ljmp	LD63FD439_92
            ; //LD63FD439_97:;					
            LD63FD439_97:
            ; //_A8ADEC9C4_1498:;				
            _A8ADEC9C4_1498:
            ; //	asm set io[0x09].b14;			
00984:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1499:;				
            _A8ADEC9C4_1499:
            ; //	asm	nop				
00985:      	nop
            ; //_A8ADEC9C4_1500:;				
            _A8ADEC9C4_1500:
            ; //	asm	nop				
00986:      	nop
            ; //_A8ADEC9C4_1501:;				
            _A8ADEC9C4_1501:
            ; //	asm	nop				
00987:      	nop
            ; //_A8ADEC9C4_1502:;				
            _A8ADEC9C4_1502:
            ; //	asm	nop				
00988:      	nop
            ; //_A8ADEC9C4_1503:;				
            _A8ADEC9C4_1503:
            ; //	asm	nop				
00989:      	nop
            ; //_A8ADEC9C4_1504:;				
            _A8ADEC9C4_1504:
            ; //	asm	nop				
0098A:      	nop
            ; //_A8ADEC9C4_1505:;				
            _A8ADEC9C4_1505:
            ; //	asm	nop				
0098B:      	nop
            ; //_A8ADEC9C4_1506:;				
            _A8ADEC9C4_1506:
            ; //	asm	nop				
0098C:      	nop
            ; //_A8ADEC9C4_1507:;				
            _A8ADEC9C4_1507:
            ; //	asm	nop				
0098D:      	nop
            ; //_A8ADEC9C4_1508:;				
            _A8ADEC9C4_1508:
            ; //	asm	nop				
0098E:      	nop
            ; //_A8ADEC9C4_1509:;				
            _A8ADEC9C4_1509:
            ; //	asm	nop				
0098F:      	nop
            ; //_A8ADEC9C4_1510:;				
            _A8ADEC9C4_1510:
            ; //	asm	nop				
00990:      	nop
            ; //_A8ADEC9C4_1511:;				
            _A8ADEC9C4_1511:
            ; //	asm clr io[0x09].b14;			
00991:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1512:;				
            _A8ADEC9C4_1512:
            ; //	asm	nop				
00992:      	nop
            ; //_A8ADEC9C4_1513:;				
            _A8ADEC9C4_1513:
            ; //	asm	nop				
00993:      	nop
            ; //_A8ADEC9C4_1514:;				
            _A8ADEC9C4_1514:
            ; //	asm	nop				
00994:      	nop
            ; //_A8ADEC9C4_1515:;				
            _A8ADEC9C4_1515:
            ; //	asm set io[0x09].b14;			
00995:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1516:;				
            _A8ADEC9C4_1516:
            ; //	asm	nop				
00996:      	nop
            ; //_A8ADEC9C4_1517:;				
            _A8ADEC9C4_1517:
            ; //	asm	nop				
00997:      	nop
            ; //_A8ADEC9C4_1518:;				
            _A8ADEC9C4_1518:
            ; //	asm	nop				
00998:      	nop
            ; //_A8ADEC9C4_1519:;				
            _A8ADEC9C4_1519:
            ; //	asm	nop				
00999:      	nop
            ; //_A8ADEC9C4_1520:;				
            _A8ADEC9C4_1520:
            ; //	asm	nop				
0099A:      	nop
            ; //_A8ADEC9C4_1521:;				
            _A8ADEC9C4_1521:
            ; //	asm	nop				
0099B:      	nop
            ; //_A8ADEC9C4_1522:;				
            _A8ADEC9C4_1522:
            ; //	asm	nop				
0099C:      	nop
            ; //_A8ADEC9C4_1523:;				
            _A8ADEC9C4_1523:
            ; //	asm	nop				
0099D:      	nop
            ; //_A8ADEC9C4_1524:;				
            _A8ADEC9C4_1524:
            ; //	asm	nop				
0099E:      	nop
            ; //_A8ADEC9C4_1525:;				
            _A8ADEC9C4_1525:
            ; //	asm	nop				
0099F:      	nop
            ; //_A8ADEC9C4_1526:;				
            _A8ADEC9C4_1526:
            ; //	asm	nop				
009A0:      	nop
            ; //_A8ADEC9C4_1527:;				
            _A8ADEC9C4_1527:
            ; //	asm	nop				
009A1:      	nop
            ; //_A8ADEC9C4_1528:;				
            _A8ADEC9C4_1528:
            ; //	asm clr io[0x09].b14;			
009A2:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1529:;				
            _A8ADEC9C4_1529:
            ; //	asm	nop				
009A3:      	nop
            ; //_A8ADEC9C4_1530:;				
            _A8ADEC9C4_1530:
            ; //	asm	nop				
009A4:      	nop
            ; //_A8ADEC9C4_1531:;				
            _A8ADEC9C4_1531:
            ; //	asm	nop				
009A5:      	nop
            ; //_A8ADEC9C4_1532:;				
            _A8ADEC9C4_1532:
            ; //	asm set io[0x09].b14;			
009A6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1533:;				
            _A8ADEC9C4_1533:
            ; //	asm	nop				
009A7:      	nop
            ; //_A8ADEC9C4_1534:;				
            _A8ADEC9C4_1534:
            ; //	asm	nop				
009A8:      	nop
            ; //_A8ADEC9C4_1535:;				
            _A8ADEC9C4_1535:
            ; //	asm	nop				
009A9:      	nop
            ; //_A8ADEC9C4_1536:;				
            _A8ADEC9C4_1536:
            ; //	asm	nop				
009AA:      	nop
            ; //_A8ADEC9C4_1537:;				
            _A8ADEC9C4_1537:
            ; //	asm	nop				
009AB:      	nop
            ; //_A8ADEC9C4_1538:;				
            _A8ADEC9C4_1538:
            ; //	asm	nop				
009AC:      	nop
            ; //_A8ADEC9C4_1539:;				
            _A8ADEC9C4_1539:
            ; //	asm	nop				
009AD:      	nop
            ; //_A8ADEC9C4_1540:;				
            _A8ADEC9C4_1540:
            ; //	asm	nop				
009AE:      	nop
            ; //_A8ADEC9C4_1541:;				
            _A8ADEC9C4_1541:
            ; //	asm	nop				
009AF:      	nop
            ; //_A8ADEC9C4_1542:;				
            _A8ADEC9C4_1542:
            ; //	asm	nop				
009B0:      	nop
            ; //_A8ADEC9C4_1543:;				
            _A8ADEC9C4_1543:
            ; //	asm	nop				
009B1:      	nop
            ; //_A8ADEC9C4_1544:;				
            _A8ADEC9C4_1544:
            ; //	asm	nop				
009B2:      	nop
            ; //_A8ADEC9C4_1545:;				
            _A8ADEC9C4_1545:
            ; //	asm clr io[0x09].b14;			
009B3:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1546:;				
            _A8ADEC9C4_1546:
            ; //	asm	nop				
009B4:      	nop
            ; //_A8ADEC9C4_1547:;				
            _A8ADEC9C4_1547:
            ; //	asm	nop				
009B5:      	nop
            ; //_A8ADEC9C4_1548:;				
            _A8ADEC9C4_1548:
            ; //	asm	nop				
009B6:      	nop
            ; //_A8ADEC9C4_1549:;				
            _A8ADEC9C4_1549:
            ; //	asm set io[0x09].b14;			
009B7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1550:;				
            _A8ADEC9C4_1550:
            ; //	asm	nop				
009B8:      	nop
            ; //_A8ADEC9C4_1551:;				
            _A8ADEC9C4_1551:
            ; //	asm	nop				
009B9:      	nop
            ; //_A8ADEC9C4_1552:;				
            _A8ADEC9C4_1552:
            ; //	asm	nop				
009BA:      	nop
            ; //_A8ADEC9C4_1553:;				
            _A8ADEC9C4_1553:
            ; //	asm	nop				
009BB:      	nop
            ; //_A8ADEC9C4_1554:;				
            _A8ADEC9C4_1554:
            ; //	asm	nop				
009BC:      	nop
            ; //_A8ADEC9C4_1555:;				
            _A8ADEC9C4_1555:
            ; //	asm	nop				
009BD:      	nop
            ; //_A8ADEC9C4_1556:;				
            _A8ADEC9C4_1556:
            ; //	asm	nop				
009BE:      	nop
            ; //_A8ADEC9C4_1557:;				
            _A8ADEC9C4_1557:
            ; //	asm	nop				
009BF:      	nop
            ; //_A8ADEC9C4_1558:;				
            _A8ADEC9C4_1558:
            ; //	asm	nop				
009C0:      	nop
            ; //_A8ADEC9C4_1559:;				
            _A8ADEC9C4_1559:
            ; //	asm	nop				
009C1:      	nop
            ; //_A8ADEC9C4_1560:;				
            _A8ADEC9C4_1560:
            ; //	asm	nop				
009C2:      	nop
            ; //_A8ADEC9C4_1561:;				
            _A8ADEC9C4_1561:
            ; //	asm	nop				
009C3:      	nop
            ; //_A8ADEC9C4_1562:;				
            _A8ADEC9C4_1562:
            ; //	asm clr io[0x09].b14;			
009C4:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1563:;				
            _A8ADEC9C4_1563:
            ; //	asm	nop				
009C5:      	nop
            ; //_A8ADEC9C4_1564:;				
            _A8ADEC9C4_1564:
            ; //	asm	nop				
009C6:      	nop
            ; //_A8ADEC9C4_1565:;				
            _A8ADEC9C4_1565:
            ; //	asm	nop				
009C7:      	nop
            ; //_A8ADEC9C4_1566:;				
            _A8ADEC9C4_1566:
            ; //	asm set io[0x09].b14;			
009C8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1567:;				
            _A8ADEC9C4_1567:
            ; //	asm	nop				
009C9:      	nop
            ; //_A8ADEC9C4_1568:;				
            _A8ADEC9C4_1568:
            ; //	asm	nop				
009CA:      	nop
            ; //_A8ADEC9C4_1569:;				
            _A8ADEC9C4_1569:
            ; //	asm	nop				
009CB:      	nop
            ; //_A8ADEC9C4_1570:;				
            _A8ADEC9C4_1570:
            ; //	asm	nop				
009CC:      	nop
            ; //_A8ADEC9C4_1571:;				
            _A8ADEC9C4_1571:
            ; //	asm	nop				
009CD:      	nop
            ; //_A8ADEC9C4_1572:;				
            _A8ADEC9C4_1572:
            ; //	asm	nop				
009CE:      	nop
            ; //_A8ADEC9C4_1573:;				
            _A8ADEC9C4_1573:
            ; //	asm	nop				
009CF:      	nop
            ; //_A8ADEC9C4_1574:;				
            _A8ADEC9C4_1574:
            ; //	asm	nop				
009D0:      	nop
            ; //_A8ADEC9C4_1575:;				
            _A8ADEC9C4_1575:
            ; //	asm	nop				
009D1:      	nop
            ; //_A8ADEC9C4_1576:;				
            _A8ADEC9C4_1576:
            ; //	asm	nop				
009D2:      	nop
            ; //_A8ADEC9C4_1577:;				
            _A8ADEC9C4_1577:
            ; //	asm	nop				
009D3:      	nop
            ; //_A8ADEC9C4_1578:;				
            _A8ADEC9C4_1578:
            ; //	asm	nop				
009D4:      	nop
            ; //_A8ADEC9C4_1579:;				
            _A8ADEC9C4_1579:
            ; //	asm clr io[0x09].b14;			
009D5:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1580:;				
            _A8ADEC9C4_1580:
            ; //	asm	nop				
009D6:      	nop
            ; //_A8ADEC9C4_1581:;				
            _A8ADEC9C4_1581:
            ; //	asm	nop				
009D7:      	nop
            ; //_A8ADEC9C4_1582:;				
            _A8ADEC9C4_1582:
            ; //	asm	nop				
009D8:      	nop
            ; //_A8ADEC9C4_1583:;				
            _A8ADEC9C4_1583:
            ; //	asm set io[0x09].b14;			
009D9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1584:;				
            _A8ADEC9C4_1584:
            ; //	asm	nop				
009DA:      	nop
            ; //_A8ADEC9C4_1585:;				
            _A8ADEC9C4_1585:
            ; //	asm	nop				
009DB:      	nop
            ; //_A8ADEC9C4_1586:;				
            _A8ADEC9C4_1586:
            ; //	asm	nop				
009DC:      	nop
            ; //_A8ADEC9C4_1587:;				
            _A8ADEC9C4_1587:
            ; //	asm	nop				
009DD:      	nop
            ; //_A8ADEC9C4_1588:;				
            _A8ADEC9C4_1588:
            ; //	asm	nop				
009DE:      	nop
            ; //_A8ADEC9C4_1589:;				
            _A8ADEC9C4_1589:
            ; //	asm	nop				
009DF:      	nop
            ; //_A8ADEC9C4_1590:;				
            _A8ADEC9C4_1590:
            ; //	asm	nop				
009E0:      	nop
            ; //_A8ADEC9C4_1591:;				
            _A8ADEC9C4_1591:
            ; //	asm	nop				
009E1:      	nop
            ; //_A8ADEC9C4_1592:;				
            _A8ADEC9C4_1592:
            ; //	asm	nop				
009E2:      	nop
            ; //_A8ADEC9C4_1593:;				
            _A8ADEC9C4_1593:
            ; //	asm	nop				
009E3:      	nop
            ; //_A8ADEC9C4_1594:;				
            _A8ADEC9C4_1594:
            ; //	asm	nop				
009E4:      	nop
            ; //_A8ADEC9C4_1595:;				
            _A8ADEC9C4_1595:
            ; //	asm	nop				
009E5:      	nop
            ; //_A8ADEC9C4_1596:;				
            _A8ADEC9C4_1596:
            ; //	asm clr io[0x09].b14;			
009E6:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1597:;				
            _A8ADEC9C4_1597:
            ; //	asm	nop				
009E7:      	nop
            ; //_A8ADEC9C4_1598:;				
            _A8ADEC9C4_1598:
            ; //	asm	nop				
009E8:      	nop
            ; //_A8ADEC9C4_1599:;				
            _A8ADEC9C4_1599:
            ; //	asm	nop				
009E9:      	nop
            ; //_A8ADEC9C4_1600:;				
            _A8ADEC9C4_1600:
            ; //	asm set io[0x09].b14;			
009EA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1601:;				
            _A8ADEC9C4_1601:
            ; //	asm	nop				
009EB:      	nop
            ; //_A8ADEC9C4_1602:;				
            _A8ADEC9C4_1602:
            ; //	asm	nop				
009EC:      	nop
            ; //_A8ADEC9C4_1603:;				
            _A8ADEC9C4_1603:
            ; //	asm	nop				
009ED:      	nop
            ; //_A8ADEC9C4_1604:;				
            _A8ADEC9C4_1604:
            ; //	asm	nop				
009EE:      	nop
            ; //_A8ADEC9C4_1605:;				
            _A8ADEC9C4_1605:
            ; //	asm	nop				
009EF:      	nop
            ; //_A8ADEC9C4_1606:;				
            _A8ADEC9C4_1606:
            ; //	asm	nop				
009F0:      	nop
            ; //_A8ADEC9C4_1607:;				
            _A8ADEC9C4_1607:
            ; //	asm	nop				
009F1:      	nop
            ; //_A8ADEC9C4_1608:;				
            _A8ADEC9C4_1608:
            ; //	asm	nop				
009F2:      	nop
            ; //_A8ADEC9C4_1609:;				
            _A8ADEC9C4_1609:
            ; //	asm	nop				
009F3:      	nop
            ; //_A8ADEC9C4_1610:;				
            _A8ADEC9C4_1610:
            ; //	asm	nop				
009F4:      	nop
            ; //_A8ADEC9C4_1611:;				
            _A8ADEC9C4_1611:
            ; //	asm	nop				
009F5:      	nop
            ; //_A8ADEC9C4_1612:;				
            _A8ADEC9C4_1612:
            ; //	asm	nop				
009F6:      	nop
            ; //_A8ADEC9C4_1613:;				
            _A8ADEC9C4_1613:
            ; //	asm clr io[0x09].b14;			
009F7:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1614:;				
            _A8ADEC9C4_1614:
            ; //	asm	nop				
009F8:      	nop
            ; //_A8ADEC9C4_1615:;				
            _A8ADEC9C4_1615:
            ; //	asm	nop				
009F9:      	nop
            ; //_A8ADEC9C4_1616:;				
            _A8ADEC9C4_1616:
            ; //	asm	nop				
009FA:      	nop
            ; //_A8ADEC9C4_1617:;				
            _A8ADEC9C4_1617:
            ; //	asm set io[0x09].b14;			
009FB:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1618:;				
            _A8ADEC9C4_1618:
            ; //	asm	nop				
009FC:      	nop
            ; //_A8ADEC9C4_1619:;				
            _A8ADEC9C4_1619:
            ; //	asm	nop				
009FD:      	nop
            ; //_A8ADEC9C4_1620:;				
            _A8ADEC9C4_1620:
            ; //	asm	nop				
009FE:      	nop
            ; //_A8ADEC9C4_1621:;				
            _A8ADEC9C4_1621:
            ; //	asm	nop				
009FF:      	nop
            ; //_A8ADEC9C4_1622:;				
            _A8ADEC9C4_1622:
            ; //	asm	nop				
00A00:      	nop
            ; //_A8ADEC9C4_1623:;				
            _A8ADEC9C4_1623:
            ; //	asm	nop				
00A01:      	nop
            ; //_A8ADEC9C4_1624:;				
            _A8ADEC9C4_1624:
            ; //	asm	nop				
00A02:      	nop
            ; //_A8ADEC9C4_1625:;				
            _A8ADEC9C4_1625:
            ; //	asm	nop				
00A03:      	nop
            ; //_A8ADEC9C4_1626:;				
            _A8ADEC9C4_1626:
            ; //	asm	nop				
00A04:      	nop
            ; //_A8ADEC9C4_1627:;				
            _A8ADEC9C4_1627:
            ; //	asm	nop				
00A05:      	nop
            ; //_A8ADEC9C4_1628:;				
            _A8ADEC9C4_1628:
            ; //	asm	nop				
00A06:      	nop
            ; //_A8ADEC9C4_1629:;				
            _A8ADEC9C4_1629:
            ; //	asm	nop				
00A07:      	nop
            ; //_A8ADEC9C4_1630:;				
            _A8ADEC9C4_1630:
            ; //	asm clr io[0x09].b14;			
00A08:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1631:;				
            _A8ADEC9C4_1631:
            ; //	asm	nop				
00A09:      	nop
            ; //_A8ADEC9C4_1632:;				
            _A8ADEC9C4_1632:
            ; //	asm	nop				
00A0A:      	nop
            ; //_A8ADEC9C4_1633:;				
            _A8ADEC9C4_1633:
            ; //	asm	nop				
00A0B:      	nop
            ; //_A8ADEC9C4_1634:;				
            _A8ADEC9C4_1634:
            ; //	asm set io[0x09].b14;			
00A0C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1635:;				
            _A8ADEC9C4_1635:
            ; //	asm	nop				
00A0D:      	nop
            ; //_A8ADEC9C4_1636:;				
            _A8ADEC9C4_1636:
            ; //	asm	nop				
00A0E:      	nop
            ; //_A8ADEC9C4_1637:;				
            _A8ADEC9C4_1637:
            ; //	asm	nop				
00A0F:      	nop
            ; //_A8ADEC9C4_1638:;				
            _A8ADEC9C4_1638:
            ; //	asm clr io[0x09].b14;			
00A10:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1639:;				
            _A8ADEC9C4_1639:
            ; //	asm	nop				
00A11:      	nop
            ; //_A8ADEC9C4_1640:;				
            _A8ADEC9C4_1640:
            ; //	asm	nop				
00A12:      	nop
            ; //_A8ADEC9C4_1641:;				
            _A8ADEC9C4_1641:
            ; //	asm	nop				
00A13:      	nop
            ; //_A8ADEC9C4_1642:;				
            _A8ADEC9C4_1642:
            ; //	asm	nop				
00A14:      	nop
            ; //_A8ADEC9C4_1643:;				
            _A8ADEC9C4_1643:
            ; //	asm	nop				
00A15:      	nop
            ; //_A8ADEC9C4_1644:;				
            _A8ADEC9C4_1644:
            ; //	asm	nop				
00A16:      	nop
            ; //_A8ADEC9C4_1645:;				
            _A8ADEC9C4_1645:
            ; //	asm	nop				
00A17:      	nop
            ; //_A8ADEC9C4_1646:;				
            _A8ADEC9C4_1646:
            ; //	asm	nop				
00A18:      	nop
            ; //_A8ADEC9C4_1647:;				
            _A8ADEC9C4_1647:
            ; //	asm	nop				
00A19:      	nop
            ; //_A8ADEC9C4_1648:;				
            _A8ADEC9C4_1648:
            ; //	asm	nop				
00A1A:      	nop
            ; //_A8ADEC9C4_1649:;				
            _A8ADEC9C4_1649:
            ; //	asm	nop				
00A1B:      	nop
            ; //_A8ADEC9C4_1650:;				
            _A8ADEC9C4_1650:
            ; //	asm	nop				
00A1C:      	nop
            ; //_A8ADEC9C4_1651:;				
            _A8ADEC9C4_1651:
            ; //	asm set io[0x09].b14;			
00A1D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1652:;				
            _A8ADEC9C4_1652:
            ; //	asm	nop				
00A1E:      	nop
            ; //_A8ADEC9C4_1653:;				
            _A8ADEC9C4_1653:
            ; //	asm	nop				
00A1F:      	nop
            ; //_A8ADEC9C4_1654:;				
            _A8ADEC9C4_1654:
            ; //	asm	nop				
00A20:      	nop
            ; //_A8ADEC9C4_1655:;				
            _A8ADEC9C4_1655:
            ; //	asm clr io[0x09].b14;			
00A21:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1656:;				
            _A8ADEC9C4_1656:
            ; //	asm	nop				
00A22:      	nop
            ; //_A8ADEC9C4_1657:;				
            _A8ADEC9C4_1657:
            ; //	asm	nop				
00A23:      	nop
            ; //_A8ADEC9C4_1658:;				
            _A8ADEC9C4_1658:
            ; //	asm	nop				
00A24:      	nop
            ; //_A8ADEC9C4_1659:;				
            _A8ADEC9C4_1659:
            ; //	asm	nop				
00A25:      	nop
            ; //_A8ADEC9C4_1660:;				
            _A8ADEC9C4_1660:
            ; //	asm	nop				
00A26:      	nop
            ; //_A8ADEC9C4_1661:;				
            _A8ADEC9C4_1661:
            ; //	asm	nop				
00A27:      	nop
            ; //_A8ADEC9C4_1662:;				
            _A8ADEC9C4_1662:
            ; //	asm	nop				
00A28:      	nop
            ; //_A8ADEC9C4_1663:;				
            _A8ADEC9C4_1663:
            ; //	asm	nop				
00A29:      	nop
            ; //_A8ADEC9C4_1664:;				
            _A8ADEC9C4_1664:
            ; //	asm	nop				
00A2A:      	nop
            ; //_A8ADEC9C4_1665:;				
            _A8ADEC9C4_1665:
            ; //	asm	nop				
00A2B:      	nop
            ; //_A8ADEC9C4_1666:;				
            _A8ADEC9C4_1666:
            ; //	asm	nop				
00A2C:      	nop
            ; //_A8ADEC9C4_1667:;				
            _A8ADEC9C4_1667:
            ; //	asm	nop				
00A2D:      	nop
            ; //_A8ADEC9C4_1668:;				
            _A8ADEC9C4_1668:
            ; //	asm set io[0x09].b14;			
00A2E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1669:;				
            _A8ADEC9C4_1669:
            ; //	asm	nop				
00A2F:      	nop
            ; //_A8ADEC9C4_1670:;				
            _A8ADEC9C4_1670:
            ; //	asm	nop				
00A30:      	nop
            ; //_A8ADEC9C4_1671:;				
            _A8ADEC9C4_1671:
            ; //	asm	nop				
00A31:      	nop
            ; //_A8ADEC9C4_1672:;				
            _A8ADEC9C4_1672:
            ; //	asm clr io[0x09].b14;			
00A32:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1673:;				
            _A8ADEC9C4_1673:
            ; //	asm	nop				
00A33:      	nop
            ; //_A8ADEC9C4_1674:;				
            _A8ADEC9C4_1674:
            ; //	asm	nop				
00A34:      	nop
            ; //_A8ADEC9C4_1675:;				
            _A8ADEC9C4_1675:
            ; //	asm	nop				
00A35:      	nop
            ; //_A8ADEC9C4_1676:;				
            _A8ADEC9C4_1676:
            ; //	asm	nop				
00A36:      	nop
            ; //_A8ADEC9C4_1677:;				
            _A8ADEC9C4_1677:
            ; //	asm	nop				
00A37:      	nop
            ; //_A8ADEC9C4_1678:;				
            _A8ADEC9C4_1678:
            ; //	asm	nop				
00A38:      	nop
            ; //_A8ADEC9C4_1679:;				
            _A8ADEC9C4_1679:
            ; //	asm	nop				
00A39:      	nop
            ; //_A8ADEC9C4_1680:;				
            _A8ADEC9C4_1680:
            ; //	asm	nop				
00A3A:      	nop
            ; //_A8ADEC9C4_1681:;				
            _A8ADEC9C4_1681:
            ; //	asm	nop				
00A3B:      	nop
            ; //_A8ADEC9C4_1682:;				
            _A8ADEC9C4_1682:
            ; //	asm	nop				
00A3C:      	nop
            ; //_A8ADEC9C4_1683:;				
            _A8ADEC9C4_1683:
            ; //	asm	nop				
00A3D:      	nop
            ; //_A8ADEC9C4_1684:;				
            _A8ADEC9C4_1684:
            ; //	asm	nop				
00A3E:      	nop
            ; //_A8ADEC9C4_1685:;				
            _A8ADEC9C4_1685:
            ; //	asm set io[0x09].b14;			
00A3F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1686:;				
            _A8ADEC9C4_1686:
            ; //	asm	nop				
00A40:      	nop
            ; //_A8ADEC9C4_1687:;				
            _A8ADEC9C4_1687:
            ; //	asm	nop				
00A41:      	nop
            ; //_A8ADEC9C4_1688:;				
            _A8ADEC9C4_1688:
            ; //	asm	nop				
00A42:      	nop
            ; //_A8ADEC9C4_1689:;				
            _A8ADEC9C4_1689:
            ; //	asm clr io[0x09].b14;			
00A43:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1690:;				
            _A8ADEC9C4_1690:
            ; //	asm	nop				
00A44:      	nop
            ; //_A8ADEC9C4_1691:;				
            _A8ADEC9C4_1691:
            ; //	asm	nop				
00A45:      	nop
            ; //_A8ADEC9C4_1692:;				
            _A8ADEC9C4_1692:
            ; //	asm	nop				
00A46:      	nop
            ; //_A8ADEC9C4_1693:;				
            _A8ADEC9C4_1693:
            ; //	asm	nop				
00A47:      	nop
            ; //_A8ADEC9C4_1694:;				
            _A8ADEC9C4_1694:
            ; //	asm	nop				
00A48:      	nop
            ; //_A8ADEC9C4_1695:;				
            _A8ADEC9C4_1695:
            ; //	asm	nop				
00A49:      	nop
            ; //_A8ADEC9C4_1696:;				
            _A8ADEC9C4_1696:
            ; //	asm	nop				
00A4A:      	nop
            ; //_A8ADEC9C4_1697:;				
            _A8ADEC9C4_1697:
            ; //	asm	nop				
00A4B:      	nop
            ; //_A8ADEC9C4_1698:;				
            _A8ADEC9C4_1698:
            ; //	asm	nop				
00A4C:      	nop
            ; //_A8ADEC9C4_1699:;				
            _A8ADEC9C4_1699:
            ; //	asm	nop				
00A4D:      	nop
            ; //_A8ADEC9C4_1700:;				
            _A8ADEC9C4_1700:
            ; //	asm	nop				
00A4E:      	nop
            ; //_A8ADEC9C4_1701:;				
            _A8ADEC9C4_1701:
            ; //	asm	nop				
00A4F:      	nop
            ; //_A8ADEC9C4_1702:;				
            _A8ADEC9C4_1702:
            ; //	asm set io[0x09].b14;			
00A50:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1703:;				
            _A8ADEC9C4_1703:
            ; //	asm	nop				
00A51:      	nop
            ; //_A8ADEC9C4_1704:;				
            _A8ADEC9C4_1704:
            ; //	asm	nop				
00A52:      	nop
            ; //_A8ADEC9C4_1705:;				
            _A8ADEC9C4_1705:
            ; //	asm	nop				
00A53:      	nop
            ; //_A8ADEC9C4_1706:;				
            _A8ADEC9C4_1706:
            ; //	asm clr io[0x09].b14;			
00A54:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1707:;				
            _A8ADEC9C4_1707:
            ; //	asm	nop				
00A55:      	nop
            ; //_A8ADEC9C4_1708:;				
            _A8ADEC9C4_1708:
            ; //	asm	nop				
00A56:      	nop
            ; //_A8ADEC9C4_1709:;				
            _A8ADEC9C4_1709:
            ; //	asm	nop				
00A57:      	nop
            ; //_A8ADEC9C4_1710:;				
            _A8ADEC9C4_1710:
            ; //	asm	nop				
00A58:      	nop
            ; //_A8ADEC9C4_1711:;				
            _A8ADEC9C4_1711:
            ; //	asm	nop				
00A59:      	nop
            ; //_A8ADEC9C4_1712:;				
            _A8ADEC9C4_1712:
            ; //	asm	nop				
00A5A:      	nop
            ; //_A8ADEC9C4_1713:;				
            _A8ADEC9C4_1713:
            ; //	asm	nop				
00A5B:      	nop
            ; //_A8ADEC9C4_1714:;				
            _A8ADEC9C4_1714:
            ; //	asm	nop				
00A5C:      	nop
            ; //_A8ADEC9C4_1715:;				
            _A8ADEC9C4_1715:
            ; //	asm	nop				
00A5D:      	nop
            ; //_A8ADEC9C4_1716:;				
            _A8ADEC9C4_1716:
            ; //	asm	nop				
00A5E:      	nop
            ; //_A8ADEC9C4_1717:;				
            _A8ADEC9C4_1717:
            ; //	asm	nop				
00A5F:      	nop
            ; //_A8ADEC9C4_1718:;				
            _A8ADEC9C4_1718:
            ; //	asm	nop				
00A60:      	nop
            ; //_A8ADEC9C4_1719:;				
            _A8ADEC9C4_1719:
            ; //	asm set io[0x09].b14;			
00A61:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1720:;				
            _A8ADEC9C4_1720:
            ; //	asm	nop				
00A62:      	nop
            ; //_A8ADEC9C4_1721:;				
            _A8ADEC9C4_1721:
            ; //	asm	nop				
00A63:      	nop
            ; //_A8ADEC9C4_1722:;				
            _A8ADEC9C4_1722:
            ; //	asm	nop				
00A64:      	nop
            ; //_A8ADEC9C4_1723:;				
            _A8ADEC9C4_1723:
            ; //	asm clr io[0x09].b14;			
00A65:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1724:;				
            _A8ADEC9C4_1724:
            ; //	asm	nop				
00A66:      	nop
            ; //_A8ADEC9C4_1725:;				
            _A8ADEC9C4_1725:
            ; //	asm	nop				
00A67:      	nop
            ; //_A8ADEC9C4_1726:;				
            _A8ADEC9C4_1726:
            ; //	asm	nop				
00A68:      	nop
            ; //_A8ADEC9C4_1727:;				
            _A8ADEC9C4_1727:
            ; //	asm	nop				
00A69:      	nop
            ; //_A8ADEC9C4_1728:;				
            _A8ADEC9C4_1728:
            ; //	asm	nop				
00A6A:      	nop
            ; //_A8ADEC9C4_1729:;				
            _A8ADEC9C4_1729:
            ; //	asm	nop				
00A6B:      	nop
            ; //_A8ADEC9C4_1730:;				
            _A8ADEC9C4_1730:
            ; //	asm	nop				
00A6C:      	nop
            ; //_A8ADEC9C4_1731:;				
            _A8ADEC9C4_1731:
            ; //	asm	nop				
00A6D:      	nop
            ; //_A8ADEC9C4_1732:;				
            _A8ADEC9C4_1732:
            ; //	asm	nop				
00A6E:      	nop
            ; //_A8ADEC9C4_1733:;				
            _A8ADEC9C4_1733:
            ; //	asm	nop				
00A6F:      	nop
            ; //_A8ADEC9C4_1734:;				
            _A8ADEC9C4_1734:
            ; //	asm	nop				
00A70:      	nop
            ; //_A8ADEC9C4_1735:;				
            _A8ADEC9C4_1735:
            ; //	asm	nop				
00A71:      	nop
            ; //_A8ADEC9C4_1736:;				
            _A8ADEC9C4_1736:
            ; //	asm set io[0x09].b14;			
00A72:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1737:;				
            _A8ADEC9C4_1737:
            ; //	asm	nop				
00A73:      	nop
            ; //_A8ADEC9C4_1738:;				
            _A8ADEC9C4_1738:
            ; //	asm	nop				
00A74:      	nop
            ; //_A8ADEC9C4_1739:;				
            _A8ADEC9C4_1739:
            ; //	asm	nop				
00A75:      	nop
            ; //_A8ADEC9C4_1740:;				
            _A8ADEC9C4_1740:
            ; //	asm clr io[0x09].b14;			
00A76:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1741:;				
            _A8ADEC9C4_1741:
            ; //	asm	nop				
00A77:      	nop
            ; //_A8ADEC9C4_1742:;				
            _A8ADEC9C4_1742:
            ; //	asm	nop				
00A78:      	nop
            ; //_A8ADEC9C4_1743:;				
            _A8ADEC9C4_1743:
            ; //	asm	nop				
00A79:      	nop
            ; //_A8ADEC9C4_1744:;				
            _A8ADEC9C4_1744:
            ; //	asm	nop				
00A7A:      	nop
            ; //_A8ADEC9C4_1745:;				
            _A8ADEC9C4_1745:
            ; //	asm	nop				
00A7B:      	nop
            ; //_A8ADEC9C4_1746:;				
            _A8ADEC9C4_1746:
            ; //	asm	nop				
00A7C:      	nop
            ; //_A8ADEC9C4_1747:;				
            _A8ADEC9C4_1747:
            ; //	asm	nop				
00A7D:      	nop
            ; //_A8ADEC9C4_1748:;				
            _A8ADEC9C4_1748:
            ; //	asm	nop				
00A7E:      	nop
            ; //_A8ADEC9C4_1749:;				
            _A8ADEC9C4_1749:
            ; //	asm	nop				
00A7F:      	nop
            ; //_A8ADEC9C4_1750:;				
            _A8ADEC9C4_1750:
            ; //	asm	nop				
00A80:      	nop
            ; //_A8ADEC9C4_1751:;				
            _A8ADEC9C4_1751:
            ; //	asm	nop				
00A81:      	nop
            ; //_A8ADEC9C4_1752:;				
            _A8ADEC9C4_1752:
            ; //	asm	nop				
00A82:      	nop
            ; //_A8ADEC9C4_1753:;				
            _A8ADEC9C4_1753:
            ; //	asm set io[0x09].b14;			
00A83:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1754:;				
            _A8ADEC9C4_1754:
            ; //	asm	nop				
00A84:      	nop
            ; //_A8ADEC9C4_1755:;				
            _A8ADEC9C4_1755:
            ; //	asm	nop				
00A85:      	nop
            ; //_A8ADEC9C4_1756:;				
            _A8ADEC9C4_1756:
            ; //	asm	nop				
00A86:      	nop
            ; //_A8ADEC9C4_1757:;				
            _A8ADEC9C4_1757:
            ; //	asm clr io[0x09].b14;			
00A87:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1758:;				
            _A8ADEC9C4_1758:
            ; //	asm	nop				
00A88:      	nop
            ; //_A8ADEC9C4_1759:;				
            _A8ADEC9C4_1759:
            ; //	asm	nop				
00A89:      	nop
            ; //_A8ADEC9C4_1760:;				
            _A8ADEC9C4_1760:
            ; //	asm	nop				
00A8A:      	nop
            ; //_A8ADEC9C4_1761:;				
            _A8ADEC9C4_1761:
            ; //	asm	nop				
00A8B:      	nop
            ; //_A8ADEC9C4_1762:;				
            _A8ADEC9C4_1762:
            ; //	asm	nop				
00A8C:      	nop
            ; //_A8ADEC9C4_1763:;				
            _A8ADEC9C4_1763:
            ; //	asm	nop				
00A8D:      	nop
            ; //_A8ADEC9C4_1764:;				
            _A8ADEC9C4_1764:
            ; //	asm	nop				
00A8E:      	nop
            ; //_A8ADEC9C4_1765:;				
            _A8ADEC9C4_1765:
            ; //	asm	nop				
00A8F:      	nop
            ; //_A8ADEC9C4_1766:;				
            _A8ADEC9C4_1766:
            ; //	asm	nop				
00A90:      	nop
            ; //_A8ADEC9C4_1767:;				
            _A8ADEC9C4_1767:
            ; //	asm	nop				
00A91:      	nop
            ; //_A8ADEC9C4_1768:;				
            _A8ADEC9C4_1768:
            ; //	asm	nop				
00A92:      	nop
            ; //_A8ADEC9C4_1769:;				
            _A8ADEC9C4_1769:
            ; //	asm	nop				
00A93:      	nop
            ; //_A8ADEC9C4_1770:;				
            _A8ADEC9C4_1770:
            ; //	asm set io[0x09].b14;			
00A94:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1771:;				
            _A8ADEC9C4_1771:
            ; //	asm	nop				
00A95:      	nop
            ; //_A8ADEC9C4_1772:;				
            _A8ADEC9C4_1772:
            ; //	asm	nop				
00A96:      	nop
            ; //_A8ADEC9C4_1773:;				
            _A8ADEC9C4_1773:
            ; //	asm	nop				
00A97:      	nop
            ; //_A8ADEC9C4_1774:;				
            _A8ADEC9C4_1774:
            ; //	asm clr io[0x09].b14;			
00A98:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1775:;				
            _A8ADEC9C4_1775:
            ; //	asm	nop				
00A99:      	nop
            ; //_A8ADEC9C4_1776:;				
            _A8ADEC9C4_1776:
            ; //	asm	nop				
00A9A:      	nop
            ; //_A8ADEC9C4_1777:;				
            _A8ADEC9C4_1777:
            ; //	asm	nop				
00A9B:      	nop
            ; //_A8ADEC9C4_1778:;				
            _A8ADEC9C4_1778:
            ; //	asm	nop				
00A9C:      	nop
            ; //_A8ADEC9C4_1779:;				
            _A8ADEC9C4_1779:
            ; //	asm	nop				
00A9D:      	nop
            ; //_A8ADEC9C4_1780:;				
            _A8ADEC9C4_1780:
            ; //	asm	nop				
00A9E:      	nop
            ; //_A8ADEC9C4_1781:;				
            _A8ADEC9C4_1781:
            ; //	asm	nop				
00A9F:      	nop
            ; //_A8ADEC9C4_1782:;				
            _A8ADEC9C4_1782:
            ; //	asm	nop				
00AA0:      	nop
            ; //_A8ADEC9C4_1783:;				
            _A8ADEC9C4_1783:
            ; //	asm	nop				
00AA1:      	nop
            ; //_A8ADEC9C4_1784:;				
            _A8ADEC9C4_1784:
            ; //	asm	nop				
00AA2:      	nop
            ; //_A8ADEC9C4_1785:;				
            _A8ADEC9C4_1785:
            ; //	asm	nop				
00AA3:      	nop
            ; //_A8ADEC9C4_1786:;				
            _A8ADEC9C4_1786:
            ; //	asm	nop				
00AA4:      	nop
            ; //_A8ADEC9C4_1787:;				
            _A8ADEC9C4_1787:
            ; //	asm set io[0x09].b14;			
00AA5:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1788:;				
            _A8ADEC9C4_1788:
            ; //	asm	nop				
00AA6:      	nop
            ; //_A8ADEC9C4_1789:;				
            _A8ADEC9C4_1789:
            ; //	asm	nop				
00AA7:      	nop
            ; //_A8ADEC9C4_1790:;				
            _A8ADEC9C4_1790:
            ; //	asm	nop				
00AA8:      	nop
            ; //_A8ADEC9C4_1791:;				
            _A8ADEC9C4_1791:
            ; //	asm clr io[0x09].b14;			
00AA9:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1792:;				
            _A8ADEC9C4_1792:
            ; //	asm	nop				
00AAA:      	nop
            ; //_A8ADEC9C4_1793:;				
            _A8ADEC9C4_1793:
            ; //	asm	nop				
00AAB:      	nop
            ; //_A8ADEC9C4_1794:;				
            _A8ADEC9C4_1794:
            ; //	asm	nop				
00AAC:      	nop
            ; //_A8ADEC9C4_1795:;				
            _A8ADEC9C4_1795:
            ; //	asm	nop				
00AAD:      	nop
            ; //_A8ADEC9C4_1796:;				
            _A8ADEC9C4_1796:
            ; //	asm	nop				
00AAE:      	nop
            ; //_A8ADEC9C4_1797:;				
            _A8ADEC9C4_1797:
            ; //	asm	nop				
00AAF:      	nop
            ; //_A8ADEC9C4_1798:;				
            _A8ADEC9C4_1798:
            ; //	asm	nop				
00AB0:      	nop
            ; //_A8ADEC9C4_1799:;				
            _A8ADEC9C4_1799:
            ; //	asm	nop				
00AB1:      	nop
            ; //_A8ADEC9C4_1800:;				
            _A8ADEC9C4_1800:
            ; //	asm	nop				
00AB2:      	nop
            ; //_A8ADEC9C4_1801:;				
            _A8ADEC9C4_1801:
            ; //	asm	nop				
00AB3:      	nop
            ; //_A8ADEC9C4_1802:;				
            _A8ADEC9C4_1802:
            ; //	asm	nop				
00AB4:      	nop
            ; //_A8ADEC9C4_1803:;				
            _A8ADEC9C4_1803:
            ; //	asm	nop				
00AB5:      	nop
            ; //_A8ADEC9C4_1804:;				
            _A8ADEC9C4_1804:
            ; //	asm set io[0x09].b14;			
00AB6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1805:;				
            _A8ADEC9C4_1805:
            ; //	asm	nop				
00AB7:      	nop
            ; //_A8ADEC9C4_1806:;				
            _A8ADEC9C4_1806:
            ; //	asm	nop				
00AB8:      	nop
            ; //_A8ADEC9C4_1807:;				
            _A8ADEC9C4_1807:
            ; //	asm	nop				
00AB9:      	nop
            ; //_A8ADEC9C4_1808:;				
            _A8ADEC9C4_1808:
            ; //	asm clr io[0x09].b14;			
00ABA:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1809:;				
            _A8ADEC9C4_1809:
            ; //	asm	nop				
00ABB:      	nop
            ; //_A8ADEC9C4_1810:;				
            _A8ADEC9C4_1810:
            ; //	asm	nop				
00ABC:      	nop
            ; //_A8ADEC9C4_1811:;				
            _A8ADEC9C4_1811:
            ; //	asm	nop				
00ABD:      	nop
            ; //_A8ADEC9C4_1812:;				
            _A8ADEC9C4_1812:
            ; //	asm	nop				
00ABE:      	nop
            ; //_A8ADEC9C4_1813:;				
            _A8ADEC9C4_1813:
            ; //	asm	nop				
00ABF:      	nop
            ; //_A8ADEC9C4_1814:;				
            _A8ADEC9C4_1814:
            ; //	asm	nop				
00AC0:      	nop
            ; //_A8ADEC9C4_1815:;				
            _A8ADEC9C4_1815:
            ; //	asm	nop				
00AC1:      	nop
            ; //_A8ADEC9C4_1816:;				
            _A8ADEC9C4_1816:
            ; //	asm	nop				
00AC2:      	nop
            ; //_A8ADEC9C4_1817:;				
            _A8ADEC9C4_1817:
            ; //	asm	nop				
00AC3:      	nop
            ; //_A8ADEC9C4_1818:;				
            _A8ADEC9C4_1818:
            ; //	asm	nop				
00AC4:      	nop
            ; //_A8ADEC9C4_1819:;				
            _A8ADEC9C4_1819:
            ; //	asm	nop				
00AC5:      	nop
            ; //_A8ADEC9C4_1820:;				
            _A8ADEC9C4_1820:
            ; //	asm	nop				
00AC6:      	nop
            ; //_A8ADEC9C4_1821:;				
            _A8ADEC9C4_1821:
            ; //	asm set io[0x09].b14;			
00AC7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1822:;				
            _A8ADEC9C4_1822:
            ; //	asm	nop				
00AC8:      	nop
            ; //_A8ADEC9C4_1823:;				
            _A8ADEC9C4_1823:
            ; //	asm	nop				
00AC9:      	nop
            ; //_A8ADEC9C4_1824:;				
            _A8ADEC9C4_1824:
            ; //	asm	nop				
00ACA:      	nop
            ; //_A8ADEC9C4_1825:;				
            _A8ADEC9C4_1825:
            ; //	asm clr io[0x09].b14;			
00ACB:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1826:;				
            _A8ADEC9C4_1826:
            ; //	asm	nop				
00ACC:      	nop
            ; //_A8ADEC9C4_1827:;				
            _A8ADEC9C4_1827:
            ; //	asm	nop				
00ACD:      	nop
            ; //_A8ADEC9C4_1828:;				
            _A8ADEC9C4_1828:
            ; //	asm	nop				
00ACE:      	nop
            ; //_A8ADEC9C4_1829:;				
            _A8ADEC9C4_1829:
            ; //	asm	nop				
00ACF:      	nop
            ; //_A8ADEC9C4_1830:;				
            _A8ADEC9C4_1830:
            ; //	asm	nop				
00AD0:      	nop
            ; //_A8ADEC9C4_1831:;				
            _A8ADEC9C4_1831:
            ; //	asm	nop				
00AD1:      	nop
            ; //_A8ADEC9C4_1832:;				
            _A8ADEC9C4_1832:
            ; //	asm	nop				
00AD2:      	nop
            ; //_A8ADEC9C4_1833:;				
            _A8ADEC9C4_1833:
            ; //	asm	nop				
00AD3:      	nop
            ; //_A8ADEC9C4_1834:;				
            _A8ADEC9C4_1834:
            ; //	asm	nop				
00AD4:      	nop
            ; //_A8ADEC9C4_1835:;				
            _A8ADEC9C4_1835:
            ; //	asm	nop				
00AD5:      	nop
            ; //_A8ADEC9C4_1836:;				
            _A8ADEC9C4_1836:
            ; //	asm	nop				
00AD6:      	nop
            ; //_A8ADEC9C4_1837:;				
            _A8ADEC9C4_1837:
            ; //	asm	nop				
00AD7:      	nop
            ; //_A8ADEC9C4_1838:;				
            _A8ADEC9C4_1838:
            ; //	asm set io[0x09].b14;			
00AD8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1839:;				
            _A8ADEC9C4_1839:
            ; //	asm	nop				
00AD9:      	nop
            ; //_A8ADEC9C4_1840:;				
            _A8ADEC9C4_1840:
            ; //	asm	nop				
00ADA:      	nop
            ; //_A8ADEC9C4_1841:;				
            _A8ADEC9C4_1841:
            ; //	asm	nop				
00ADB:      	nop
            ; //_A8ADEC9C4_1842:;				
            _A8ADEC9C4_1842:
            ; //	asm clr io[0x09].b14;			
00ADC:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1843:;				
            _A8ADEC9C4_1843:
            ; //	asm	nop				
00ADD:      	nop
            ; //_A8ADEC9C4_1844:;				
            _A8ADEC9C4_1844:
            ; //	asm	nop				
00ADE:      	nop
            ; //_A8ADEC9C4_1845:;				
            _A8ADEC9C4_1845:
            ; //	asm	nop				
00ADF:      	nop
            ; //_A8ADEC9C4_1846:;				
            _A8ADEC9C4_1846:
            ; //	asm	nop				
00AE0:      	nop
            ; //_A8ADEC9C4_1847:;				
            _A8ADEC9C4_1847:
            ; //	asm	nop				
00AE1:      	nop
            ; //_A8ADEC9C4_1848:;				
            _A8ADEC9C4_1848:
            ; //	asm	nop				
00AE2:      	nop
            ; //_A8ADEC9C4_1849:;				
            _A8ADEC9C4_1849:
            ; //	asm	nop				
00AE3:      	nop
            ; //_A8ADEC9C4_1850:;				
            _A8ADEC9C4_1850:
            ; //	asm	nop				
00AE4:      	nop
            ; //_A8ADEC9C4_1851:;				
            _A8ADEC9C4_1851:
            ; //	asm	nop				
00AE5:      	nop
            ; //_A8ADEC9C4_1852:;				
            _A8ADEC9C4_1852:
            ; //	asm	nop				
00AE6:      	nop
            ; //_A8ADEC9C4_1853:;				
            _A8ADEC9C4_1853:
            ; //	asm	nop				
00AE7:      	nop
            ; //_A8ADEC9C4_1854:;				
            _A8ADEC9C4_1854:
            ; //	asm	nop				
00AE8:      	nop
            ; //_A8ADEC9C4_1855:;				
            _A8ADEC9C4_1855:
            ; //	asm set io[0x09].b14;			
00AE9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1856:;				
            _A8ADEC9C4_1856:
            ; //	asm	nop				
00AEA:      	nop
            ; //_A8ADEC9C4_1857:;				
            _A8ADEC9C4_1857:
            ; //	asm	nop				
00AEB:      	nop
            ; //_A8ADEC9C4_1858:;				
            _A8ADEC9C4_1858:
            ; //	asm	nop				
00AEC:      	nop
            ; //_A8ADEC9C4_1859:;				
            _A8ADEC9C4_1859:
            ; //	asm clr io[0x09].b14;			
00AED:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1860:;				
            _A8ADEC9C4_1860:
            ; //	asm	nop				
00AEE:      	nop
            ; //_A8ADEC9C4_1861:;				
            _A8ADEC9C4_1861:
            ; //	asm	nop				
00AEF:      	nop
            ; //_A8ADEC9C4_1862:;				
            _A8ADEC9C4_1862:
            ; //	asm	nop				
00AF0:      	nop
            ; //_A8ADEC9C4_1863:;				
            _A8ADEC9C4_1863:
            ; //	asm	nop				
00AF1:      	nop
            ; //_A8ADEC9C4_1864:;				
            _A8ADEC9C4_1864:
            ; //	asm	nop				
00AF2:      	nop
            ; //_A8ADEC9C4_1865:;				
            _A8ADEC9C4_1865:
            ; //	asm	nop				
00AF3:      	nop
            ; //_A8ADEC9C4_1866:;				
            _A8ADEC9C4_1866:
            ; //	asm	nop				
00AF4:      	nop
            ; //_A8ADEC9C4_1867:;				
            _A8ADEC9C4_1867:
            ; //	asm	nop				
00AF5:      	nop
            ; //_A8ADEC9C4_1868:;				
            _A8ADEC9C4_1868:
            ; //	asm	nop				
00AF6:      	nop
            ; //_A8ADEC9C4_1869:;				
            _A8ADEC9C4_1869:
            ; //	asm	nop				
00AF7:      	nop
            ; //_A8ADEC9C4_1870:;				
            _A8ADEC9C4_1870:
            ; //	asm	nop				
00AF8:      	nop
            ; //_A8ADEC9C4_1871:;				
            _A8ADEC9C4_1871:
            ; //	asm	nop				
00AF9:      	nop
            ; //_A8ADEC9C4_1872:;				
            _A8ADEC9C4_1872:
            ; //	asm set io[0x09].b14;			
00AFA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1873:;				
            _A8ADEC9C4_1873:
            ; //	asm	nop				
00AFB:      	nop
            ; //_A8ADEC9C4_1874:;				
            _A8ADEC9C4_1874:
            ; //	asm	nop				
00AFC:      	nop
            ; //_A8ADEC9C4_1875:;				
            _A8ADEC9C4_1875:
            ; //	asm	nop				
00AFD:      	nop
            ; //_A8ADEC9C4_1876:;				
            _A8ADEC9C4_1876:
            ; //	asm clr io[0x09].b14;			
00AFE:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1877:;				
            _A8ADEC9C4_1877:
            ; //	asm	nop				
00AFF:      	nop
            ; //_A8ADEC9C4_1878:;				
            _A8ADEC9C4_1878:
            ; //	asm	nop				
00B00:      	nop
            ; //_A8ADEC9C4_1879:;				
            _A8ADEC9C4_1879:
            ; //	asm	nop				
00B01:      	nop
            ; //_A8ADEC9C4_1880:;				
            _A8ADEC9C4_1880:
            ; //	asm	nop				
00B02:      	nop
            ; //_A8ADEC9C4_1881:;				
            _A8ADEC9C4_1881:
            ; //	asm	nop				
00B03:      	nop
            ; //_A8ADEC9C4_1882:;				
            _A8ADEC9C4_1882:
            ; //	asm	nop				
00B04:      	nop
            ; //_A8ADEC9C4_1883:;				
            _A8ADEC9C4_1883:
            ; //	asm	nop				
00B05:      	nop
            ; //_A8ADEC9C4_1884:;				
            _A8ADEC9C4_1884:
            ; //	asm	nop				
00B06:      	nop
            ; //_A8ADEC9C4_1885:;				
            _A8ADEC9C4_1885:
            ; //	asm	nop				
00B07:      	nop
            ; //_A8ADEC9C4_1886:;				
            _A8ADEC9C4_1886:
            ; //	asm	nop				
00B08:      	nop
            ; //_A8ADEC9C4_1887:;				
            _A8ADEC9C4_1887:
            ; //	asm	nop				
00B09:      	nop
            ; //_A8ADEC9C4_1888:;				
            _A8ADEC9C4_1888:
            ; //	asm	nop				
00B0A:      	nop
            ; //_A8ADEC9C4_1889:;				
            _A8ADEC9C4_1889:
            ; //	asm set io[0x09].b14;			
00B0B:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1890:;				
            _A8ADEC9C4_1890:
            ; //	asm	nop				
00B0C:      	nop
            ; //_A8ADEC9C4_1891:;				
            _A8ADEC9C4_1891:
            ; //	asm	nop				
00B0D:      	nop
            ; //_A8ADEC9C4_1892:;				
            _A8ADEC9C4_1892:
            ; //	asm	nop				
00B0E:      	nop
            ; //_A8ADEC9C4_1893:;				
            _A8ADEC9C4_1893:
            ; //	asm clr io[0x09].b14;			
00B0F:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1894:;				
            _A8ADEC9C4_1894:
            ; //	asm	nop				
00B10:      	nop
            ; //_A8ADEC9C4_1895:;				
            _A8ADEC9C4_1895:
            ; //	asm	nop				
00B11:      	nop
            ; //_A8ADEC9C4_1896:;				
            _A8ADEC9C4_1896:
            ; //	asm	nop				
00B12:      	nop
            ; //_A8ADEC9C4_1897:;				
            _A8ADEC9C4_1897:
            ; //	asm	nop				
00B13:      	nop
            ; //_A8ADEC9C4_1898:;				
            _A8ADEC9C4_1898:
            ; //	asm	nop				
00B14:      	nop
            ; //_A8ADEC9C4_1899:;				
            _A8ADEC9C4_1899:
            ; //	asm	nop				
00B15:      	nop
            ; //_A8ADEC9C4_1900:;				
            _A8ADEC9C4_1900:
            ; //	asm	nop				
00B16:      	nop
            ; //_A8ADEC9C4_1901:;				
            _A8ADEC9C4_1901:
            ; //	asm	nop				
00B17:      	nop
            ; //_A8ADEC9C4_1902:;				
            _A8ADEC9C4_1902:
            ; //	asm	nop				
00B18:      	nop
            ; //_A8ADEC9C4_1903:;				
            _A8ADEC9C4_1903:
            ; //	asm	nop				
00B19:      	nop
            ; //_A8ADEC9C4_1904:;				
            _A8ADEC9C4_1904:
            ; //	asm	nop				
00B1A:      	nop
            ; //_A8ADEC9C4_1905:;				
            _A8ADEC9C4_1905:
            ; //	asm	nop				
00B1B:      	nop
            ; //_A8ADEC9C4_1906:;				
            _A8ADEC9C4_1906:
            ; //	goto LD63FD439_92;			
00B1C:      	pch =	LD63FD439_92
00B1D:      	ljmp	LD63FD439_92
            ; //LD63FD439_98:;					
            LD63FD439_98:
            ; //_A8ADEC9C4_1907:;				
            _A8ADEC9C4_1907:
            ; //	asm set io[0x09].b14;			
00B1E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1908:;				
            _A8ADEC9C4_1908:
            ; //	asm	nop				
00B1F:      	nop
            ; //_A8ADEC9C4_1909:;				
            _A8ADEC9C4_1909:
            ; //	asm	nop				
00B20:      	nop
            ; //_A8ADEC9C4_1910:;				
            _A8ADEC9C4_1910:
            ; //	asm	nop				
00B21:      	nop
            ; //_A8ADEC9C4_1911:;				
            _A8ADEC9C4_1911:
            ; //	asm clr io[0x09].b14;			
00B22:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1912:;				
            _A8ADEC9C4_1912:
            ; //	asm	nop				
00B23:      	nop
            ; //_A8ADEC9C4_1913:;				
            _A8ADEC9C4_1913:
            ; //	asm	nop				
00B24:      	nop
            ; //_A8ADEC9C4_1914:;				
            _A8ADEC9C4_1914:
            ; //	asm	nop				
00B25:      	nop
            ; //_A8ADEC9C4_1915:;				
            _A8ADEC9C4_1915:
            ; //	asm	nop				
00B26:      	nop
            ; //_A8ADEC9C4_1916:;				
            _A8ADEC9C4_1916:
            ; //	asm	nop				
00B27:      	nop
            ; //_A8ADEC9C4_1917:;				
            _A8ADEC9C4_1917:
            ; //	asm	nop				
00B28:      	nop
            ; //_A8ADEC9C4_1918:;				
            _A8ADEC9C4_1918:
            ; //	asm	nop				
00B29:      	nop
            ; //_A8ADEC9C4_1919:;				
            _A8ADEC9C4_1919:
            ; //	asm	nop				
00B2A:      	nop
            ; //_A8ADEC9C4_1920:;				
            _A8ADEC9C4_1920:
            ; //	asm	nop				
00B2B:      	nop
            ; //_A8ADEC9C4_1921:;				
            _A8ADEC9C4_1921:
            ; //	asm	nop				
00B2C:      	nop
            ; //_A8ADEC9C4_1922:;				
            _A8ADEC9C4_1922:
            ; //	asm	nop				
00B2D:      	nop
            ; //_A8ADEC9C4_1923:;				
            _A8ADEC9C4_1923:
            ; //	asm	nop				
00B2E:      	nop
            ; //_A8ADEC9C4_1924:;				
            _A8ADEC9C4_1924:
            ; //	asm set io[0x09].b14;			
00B2F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1925:;				
            _A8ADEC9C4_1925:
            ; //	asm	nop				
00B30:      	nop
            ; //_A8ADEC9C4_1926:;				
            _A8ADEC9C4_1926:
            ; //	asm	nop				
00B31:      	nop
            ; //_A8ADEC9C4_1927:;				
            _A8ADEC9C4_1927:
            ; //	asm	nop				
00B32:      	nop
            ; //_A8ADEC9C4_1928:;				
            _A8ADEC9C4_1928:
            ; //	asm clr io[0x09].b14;			
00B33:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1929:;				
            _A8ADEC9C4_1929:
            ; //	asm	nop				
00B34:      	nop
            ; //_A8ADEC9C4_1930:;				
            _A8ADEC9C4_1930:
            ; //	asm	nop				
00B35:      	nop
            ; //_A8ADEC9C4_1931:;				
            _A8ADEC9C4_1931:
            ; //	asm	nop				
00B36:      	nop
            ; //_A8ADEC9C4_1932:;				
            _A8ADEC9C4_1932:
            ; //	asm	nop				
00B37:      	nop
            ; //_A8ADEC9C4_1933:;				
            _A8ADEC9C4_1933:
            ; //	asm	nop				
00B38:      	nop
            ; //_A8ADEC9C4_1934:;				
            _A8ADEC9C4_1934:
            ; //	asm	nop				
00B39:      	nop
            ; //_A8ADEC9C4_1935:;				
            _A8ADEC9C4_1935:
            ; //	asm	nop				
00B3A:      	nop
            ; //_A8ADEC9C4_1936:;				
            _A8ADEC9C4_1936:
            ; //	asm	nop				
00B3B:      	nop
            ; //_A8ADEC9C4_1937:;				
            _A8ADEC9C4_1937:
            ; //	asm	nop				
00B3C:      	nop
            ; //_A8ADEC9C4_1938:;				
            _A8ADEC9C4_1938:
            ; //	asm	nop				
00B3D:      	nop
            ; //_A8ADEC9C4_1939:;				
            _A8ADEC9C4_1939:
            ; //	asm	nop				
00B3E:      	nop
            ; //_A8ADEC9C4_1940:;				
            _A8ADEC9C4_1940:
            ; //	asm	nop				
00B3F:      	nop
            ; //_A8ADEC9C4_1941:;				
            _A8ADEC9C4_1941:
            ; //	asm set io[0x09].b14;			
00B40:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1942:;				
            _A8ADEC9C4_1942:
            ; //	asm	nop				
00B41:      	nop
            ; //_A8ADEC9C4_1943:;				
            _A8ADEC9C4_1943:
            ; //	asm	nop				
00B42:      	nop
            ; //_A8ADEC9C4_1944:;				
            _A8ADEC9C4_1944:
            ; //	asm	nop				
00B43:      	nop
            ; //_A8ADEC9C4_1945:;				
            _A8ADEC9C4_1945:
            ; //	asm clr io[0x09].b14;			
00B44:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1946:;				
            _A8ADEC9C4_1946:
            ; //	asm	nop				
00B45:      	nop
            ; //_A8ADEC9C4_1947:;				
            _A8ADEC9C4_1947:
            ; //	asm	nop				
00B46:      	nop
            ; //_A8ADEC9C4_1948:;				
            _A8ADEC9C4_1948:
            ; //	asm	nop				
00B47:      	nop
            ; //_A8ADEC9C4_1949:;				
            _A8ADEC9C4_1949:
            ; //	asm	nop				
00B48:      	nop
            ; //_A8ADEC9C4_1950:;				
            _A8ADEC9C4_1950:
            ; //	asm	nop				
00B49:      	nop
            ; //_A8ADEC9C4_1951:;				
            _A8ADEC9C4_1951:
            ; //	asm	nop				
00B4A:      	nop
            ; //_A8ADEC9C4_1952:;				
            _A8ADEC9C4_1952:
            ; //	asm	nop				
00B4B:      	nop
            ; //_A8ADEC9C4_1953:;				
            _A8ADEC9C4_1953:
            ; //	asm	nop				
00B4C:      	nop
            ; //_A8ADEC9C4_1954:;				
            _A8ADEC9C4_1954:
            ; //	asm	nop				
00B4D:      	nop
            ; //_A8ADEC9C4_1955:;				
            _A8ADEC9C4_1955:
            ; //	asm	nop				
00B4E:      	nop
            ; //_A8ADEC9C4_1956:;				
            _A8ADEC9C4_1956:
            ; //	asm	nop				
00B4F:      	nop
            ; //_A8ADEC9C4_1957:;				
            _A8ADEC9C4_1957:
            ; //	asm	nop				
00B50:      	nop
            ; //_A8ADEC9C4_1958:;				
            _A8ADEC9C4_1958:
            ; //	asm set io[0x09].b14;			
00B51:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1959:;				
            _A8ADEC9C4_1959:
            ; //	asm	nop				
00B52:      	nop
            ; //_A8ADEC9C4_1960:;				
            _A8ADEC9C4_1960:
            ; //	asm	nop				
00B53:      	nop
            ; //_A8ADEC9C4_1961:;				
            _A8ADEC9C4_1961:
            ; //	asm	nop				
00B54:      	nop
            ; //_A8ADEC9C4_1962:;				
            _A8ADEC9C4_1962:
            ; //	asm clr io[0x09].b14;			
00B55:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1963:;				
            _A8ADEC9C4_1963:
            ; //	asm	nop				
00B56:      	nop
            ; //_A8ADEC9C4_1964:;				
            _A8ADEC9C4_1964:
            ; //	asm	nop				
00B57:      	nop
            ; //_A8ADEC9C4_1965:;				
            _A8ADEC9C4_1965:
            ; //	asm	nop				
00B58:      	nop
            ; //_A8ADEC9C4_1966:;				
            _A8ADEC9C4_1966:
            ; //	asm	nop				
00B59:      	nop
            ; //_A8ADEC9C4_1967:;				
            _A8ADEC9C4_1967:
            ; //	asm	nop				
00B5A:      	nop
            ; //_A8ADEC9C4_1968:;				
            _A8ADEC9C4_1968:
            ; //	asm	nop				
00B5B:      	nop
            ; //_A8ADEC9C4_1969:;				
            _A8ADEC9C4_1969:
            ; //	asm	nop				
00B5C:      	nop
            ; //_A8ADEC9C4_1970:;				
            _A8ADEC9C4_1970:
            ; //	asm	nop				
00B5D:      	nop
            ; //_A8ADEC9C4_1971:;				
            _A8ADEC9C4_1971:
            ; //	asm	nop				
00B5E:      	nop
            ; //_A8ADEC9C4_1972:;				
            _A8ADEC9C4_1972:
            ; //	asm	nop				
00B5F:      	nop
            ; //_A8ADEC9C4_1973:;				
            _A8ADEC9C4_1973:
            ; //	asm	nop				
00B60:      	nop
            ; //_A8ADEC9C4_1974:;				
            _A8ADEC9C4_1974:
            ; //	asm	nop				
00B61:      	nop
            ; //_A8ADEC9C4_1975:;				
            _A8ADEC9C4_1975:
            ; //	asm set io[0x09].b14;			
00B62:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1976:;				
            _A8ADEC9C4_1976:
            ; //	asm	nop				
00B63:      	nop
            ; //_A8ADEC9C4_1977:;				
            _A8ADEC9C4_1977:
            ; //	asm	nop				
00B64:      	nop
            ; //_A8ADEC9C4_1978:;				
            _A8ADEC9C4_1978:
            ; //	asm	nop				
00B65:      	nop
            ; //_A8ADEC9C4_1979:;				
            _A8ADEC9C4_1979:
            ; //	asm clr io[0x09].b14;			
00B66:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1980:;				
            _A8ADEC9C4_1980:
            ; //	asm	nop				
00B67:      	nop
            ; //_A8ADEC9C4_1981:;				
            _A8ADEC9C4_1981:
            ; //	asm	nop				
00B68:      	nop
            ; //_A8ADEC9C4_1982:;				
            _A8ADEC9C4_1982:
            ; //	asm	nop				
00B69:      	nop
            ; //_A8ADEC9C4_1983:;				
            _A8ADEC9C4_1983:
            ; //	asm	nop				
00B6A:      	nop
            ; //_A8ADEC9C4_1984:;				
            _A8ADEC9C4_1984:
            ; //	asm	nop				
00B6B:      	nop
            ; //_A8ADEC9C4_1985:;				
            _A8ADEC9C4_1985:
            ; //	asm	nop				
00B6C:      	nop
            ; //_A8ADEC9C4_1986:;				
            _A8ADEC9C4_1986:
            ; //	asm	nop				
00B6D:      	nop
            ; //_A8ADEC9C4_1987:;				
            _A8ADEC9C4_1987:
            ; //	asm	nop				
00B6E:      	nop
            ; //_A8ADEC9C4_1988:;				
            _A8ADEC9C4_1988:
            ; //	asm	nop				
00B6F:      	nop
            ; //_A8ADEC9C4_1989:;				
            _A8ADEC9C4_1989:
            ; //	asm	nop				
00B70:      	nop
            ; //_A8ADEC9C4_1990:;				
            _A8ADEC9C4_1990:
            ; //	asm	nop				
00B71:      	nop
            ; //_A8ADEC9C4_1991:;				
            _A8ADEC9C4_1991:
            ; //	asm	nop				
00B72:      	nop
            ; //_A8ADEC9C4_1992:;				
            _A8ADEC9C4_1992:
            ; //	asm set io[0x09].b14;			
00B73:      	set io[0x09].b14//
            ; //_A8ADEC9C4_1993:;				
            _A8ADEC9C4_1993:
            ; //	asm	nop				
00B74:      	nop
            ; //_A8ADEC9C4_1994:;				
            _A8ADEC9C4_1994:
            ; //	asm	nop				
00B75:      	nop
            ; //_A8ADEC9C4_1995:;				
            _A8ADEC9C4_1995:
            ; //	asm	nop				
00B76:      	nop
            ; //_A8ADEC9C4_1996:;				
            _A8ADEC9C4_1996:
            ; //	asm clr io[0x09].b14;			
00B77:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_1997:;				
            _A8ADEC9C4_1997:
            ; //	asm	nop				
00B78:      	nop
            ; //_A8ADEC9C4_1998:;				
            _A8ADEC9C4_1998:
            ; //	asm	nop				
00B79:      	nop
            ; //_A8ADEC9C4_1999:;				
            _A8ADEC9C4_1999:
            ; //	asm	nop				
00B7A:      	nop
            ; //_A8ADEC9C4_2000:;				
            _A8ADEC9C4_2000:
            ; //	asm	nop				
00B7B:      	nop
            ; //_A8ADEC9C4_2001:;				
            _A8ADEC9C4_2001:
            ; //	asm	nop				
00B7C:      	nop
            ; //_A8ADEC9C4_2002:;				
            _A8ADEC9C4_2002:
            ; //	asm	nop				
00B7D:      	nop
            ; //_A8ADEC9C4_2003:;				
            _A8ADEC9C4_2003:
            ; //	asm	nop				
00B7E:      	nop
            ; //_A8ADEC9C4_2004:;				
            _A8ADEC9C4_2004:
            ; //	asm	nop				
00B7F:      	nop
            ; //_A8ADEC9C4_2005:;				
            _A8ADEC9C4_2005:
            ; //	asm	nop				
00B80:      	nop
            ; //_A8ADEC9C4_2006:;				
            _A8ADEC9C4_2006:
            ; //	asm	nop				
00B81:      	nop
            ; //_A8ADEC9C4_2007:;				
            _A8ADEC9C4_2007:
            ; //	asm	nop				
00B82:      	nop
            ; //_A8ADEC9C4_2008:;				
            _A8ADEC9C4_2008:
            ; //	asm	nop				
00B83:      	nop
            ; //_A8ADEC9C4_2009:;				
            _A8ADEC9C4_2009:
            ; //	asm set io[0x09].b14;			
00B84:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2010:;				
            _A8ADEC9C4_2010:
            ; //	asm	nop				
00B85:      	nop
            ; //_A8ADEC9C4_2011:;				
            _A8ADEC9C4_2011:
            ; //	asm	nop				
00B86:      	nop
            ; //_A8ADEC9C4_2012:;				
            _A8ADEC9C4_2012:
            ; //	asm	nop				
00B87:      	nop
            ; //_A8ADEC9C4_2013:;				
            _A8ADEC9C4_2013:
            ; //	asm clr io[0x09].b14;			
00B88:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2014:;				
            _A8ADEC9C4_2014:
            ; //	asm	nop				
00B89:      	nop
            ; //_A8ADEC9C4_2015:;				
            _A8ADEC9C4_2015:
            ; //	asm	nop				
00B8A:      	nop
            ; //_A8ADEC9C4_2016:;				
            _A8ADEC9C4_2016:
            ; //	asm	nop				
00B8B:      	nop
            ; //_A8ADEC9C4_2017:;				
            _A8ADEC9C4_2017:
            ; //	asm	nop				
00B8C:      	nop
            ; //_A8ADEC9C4_2018:;				
            _A8ADEC9C4_2018:
            ; //	asm	nop				
00B8D:      	nop
            ; //_A8ADEC9C4_2019:;				
            _A8ADEC9C4_2019:
            ; //	asm	nop				
00B8E:      	nop
            ; //_A8ADEC9C4_2020:;				
            _A8ADEC9C4_2020:
            ; //	asm	nop				
00B8F:      	nop
            ; //_A8ADEC9C4_2021:;				
            _A8ADEC9C4_2021:
            ; //	asm	nop				
00B90:      	nop
            ; //_A8ADEC9C4_2022:;				
            _A8ADEC9C4_2022:
            ; //	asm	nop				
00B91:      	nop
            ; //_A8ADEC9C4_2023:;				
            _A8ADEC9C4_2023:
            ; //	asm	nop				
00B92:      	nop
            ; //_A8ADEC9C4_2024:;				
            _A8ADEC9C4_2024:
            ; //	asm	nop				
00B93:      	nop
            ; //_A8ADEC9C4_2025:;				
            _A8ADEC9C4_2025:
            ; //	asm	nop				
00B94:      	nop
            ; //_A8ADEC9C4_2026:;				
            _A8ADEC9C4_2026:
            ; //	asm set io[0x09].b14;			
00B95:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2027:;				
            _A8ADEC9C4_2027:
            ; //	asm	nop				
00B96:      	nop
            ; //_A8ADEC9C4_2028:;				
            _A8ADEC9C4_2028:
            ; //	asm	nop				
00B97:      	nop
            ; //_A8ADEC9C4_2029:;				
            _A8ADEC9C4_2029:
            ; //	asm	nop				
00B98:      	nop
            ; //_A8ADEC9C4_2030:;				
            _A8ADEC9C4_2030:
            ; //	asm clr io[0x09].b14;			
00B99:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2031:;				
            _A8ADEC9C4_2031:
            ; //	asm	nop				
00B9A:      	nop
            ; //_A8ADEC9C4_2032:;				
            _A8ADEC9C4_2032:
            ; //	asm	nop				
00B9B:      	nop
            ; //_A8ADEC9C4_2033:;				
            _A8ADEC9C4_2033:
            ; //	asm	nop				
00B9C:      	nop
            ; //_A8ADEC9C4_2034:;				
            _A8ADEC9C4_2034:
            ; //	asm	nop				
00B9D:      	nop
            ; //_A8ADEC9C4_2035:;				
            _A8ADEC9C4_2035:
            ; //	asm	nop				
00B9E:      	nop
            ; //_A8ADEC9C4_2036:;				
            _A8ADEC9C4_2036:
            ; //	asm	nop				
00B9F:      	nop
            ; //_A8ADEC9C4_2037:;				
            _A8ADEC9C4_2037:
            ; //	asm	nop				
00BA0:      	nop
            ; //_A8ADEC9C4_2038:;				
            _A8ADEC9C4_2038:
            ; //	asm	nop				
00BA1:      	nop
            ; //_A8ADEC9C4_2039:;				
            _A8ADEC9C4_2039:
            ; //	asm	nop				
00BA2:      	nop
            ; //_A8ADEC9C4_2040:;				
            _A8ADEC9C4_2040:
            ; //	asm	nop				
00BA3:      	nop
            ; //_A8ADEC9C4_2041:;				
            _A8ADEC9C4_2041:
            ; //	asm	nop				
00BA4:      	nop
            ; //_A8ADEC9C4_2042:;				
            _A8ADEC9C4_2042:
            ; //	asm	nop				
00BA5:      	nop
            ; //_A8ADEC9C4_2043:;				
            _A8ADEC9C4_2043:
            ; //	asm set io[0x09].b14;			
00BA6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2044:;				
            _A8ADEC9C4_2044:
            ; //	asm	nop				
00BA7:      	nop
            ; //_A8ADEC9C4_2045:;				
            _A8ADEC9C4_2045:
            ; //	asm	nop				
00BA8:      	nop
            ; //_A8ADEC9C4_2046:;				
            _A8ADEC9C4_2046:
            ; //	asm	nop				
00BA9:      	nop
            ; //_A8ADEC9C4_2047:;				
            _A8ADEC9C4_2047:
            ; //	asm	nop				
00BAA:      	nop
            ; //_A8ADEC9C4_2048:;				
            _A8ADEC9C4_2048:
            ; //	asm	nop				
00BAB:      	nop
            ; //_A8ADEC9C4_2049:;				
            _A8ADEC9C4_2049:
            ; //	asm	nop				
00BAC:      	nop
            ; //_A8ADEC9C4_2050:;				
            _A8ADEC9C4_2050:
            ; //	asm	nop				
00BAD:      	nop
            ; //_A8ADEC9C4_2051:;				
            _A8ADEC9C4_2051:
            ; //	asm	nop				
00BAE:      	nop
            ; //_A8ADEC9C4_2052:;				
            _A8ADEC9C4_2052:
            ; //	asm	nop				
00BAF:      	nop
            ; //_A8ADEC9C4_2053:;				
            _A8ADEC9C4_2053:
            ; //	asm	nop				
00BB0:      	nop
            ; //_A8ADEC9C4_2054:;				
            _A8ADEC9C4_2054:
            ; //	asm	nop				
00BB1:      	nop
            ; //_A8ADEC9C4_2055:;				
            _A8ADEC9C4_2055:
            ; //	asm	nop				
00BB2:      	nop
            ; //_A8ADEC9C4_2056:;				
            _A8ADEC9C4_2056:
            ; //	asm clr io[0x09].b14;			
00BB3:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2057:;				
            _A8ADEC9C4_2057:
            ; //	asm	nop				
00BB4:      	nop
            ; //_A8ADEC9C4_2058:;				
            _A8ADEC9C4_2058:
            ; //	asm	nop				
00BB5:      	nop
            ; //_A8ADEC9C4_2059:;				
            _A8ADEC9C4_2059:
            ; //	asm	nop				
00BB6:      	nop
            ; //_A8ADEC9C4_2060:;				
            _A8ADEC9C4_2060:
            ; //	asm set io[0x09].b14;			
00BB7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2061:;				
            _A8ADEC9C4_2061:
            ; //	asm	nop				
00BB8:      	nop
            ; //_A8ADEC9C4_2062:;				
            _A8ADEC9C4_2062:
            ; //	asm	nop				
00BB9:      	nop
            ; //_A8ADEC9C4_2063:;				
            _A8ADEC9C4_2063:
            ; //	asm	nop				
00BBA:      	nop
            ; //_A8ADEC9C4_2064:;				
            _A8ADEC9C4_2064:
            ; //	asm	nop				
00BBB:      	nop
            ; //_A8ADEC9C4_2065:;				
            _A8ADEC9C4_2065:
            ; //	asm	nop				
00BBC:      	nop
            ; //_A8ADEC9C4_2066:;				
            _A8ADEC9C4_2066:
            ; //	asm	nop				
00BBD:      	nop
            ; //_A8ADEC9C4_2067:;				
            _A8ADEC9C4_2067:
            ; //	asm	nop				
00BBE:      	nop
            ; //_A8ADEC9C4_2068:;				
            _A8ADEC9C4_2068:
            ; //	asm	nop				
00BBF:      	nop
            ; //_A8ADEC9C4_2069:;				
            _A8ADEC9C4_2069:
            ; //	asm	nop				
00BC0:      	nop
            ; //_A8ADEC9C4_2070:;				
            _A8ADEC9C4_2070:
            ; //	asm	nop				
00BC1:      	nop
            ; //_A8ADEC9C4_2071:;				
            _A8ADEC9C4_2071:
            ; //	asm	nop				
00BC2:      	nop
            ; //_A8ADEC9C4_2072:;				
            _A8ADEC9C4_2072:
            ; //	asm	nop				
00BC3:      	nop
            ; //_A8ADEC9C4_2073:;				
            _A8ADEC9C4_2073:
            ; //	asm clr io[0x09].b14;			
00BC4:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2074:;				
            _A8ADEC9C4_2074:
            ; //	asm	nop				
00BC5:      	nop
            ; //_A8ADEC9C4_2075:;				
            _A8ADEC9C4_2075:
            ; //	asm	nop				
00BC6:      	nop
            ; //_A8ADEC9C4_2076:;				
            _A8ADEC9C4_2076:
            ; //	asm	nop				
00BC7:      	nop
            ; //_A8ADEC9C4_2077:;				
            _A8ADEC9C4_2077:
            ; //	asm set io[0x09].b14;			
00BC8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2078:;				
            _A8ADEC9C4_2078:
            ; //	asm	nop				
00BC9:      	nop
            ; //_A8ADEC9C4_2079:;				
            _A8ADEC9C4_2079:
            ; //	asm	nop				
00BCA:      	nop
            ; //_A8ADEC9C4_2080:;				
            _A8ADEC9C4_2080:
            ; //	asm	nop				
00BCB:      	nop
            ; //_A8ADEC9C4_2081:;				
            _A8ADEC9C4_2081:
            ; //	asm	nop				
00BCC:      	nop
            ; //_A8ADEC9C4_2082:;				
            _A8ADEC9C4_2082:
            ; //	asm	nop				
00BCD:      	nop
            ; //_A8ADEC9C4_2083:;				
            _A8ADEC9C4_2083:
            ; //	asm	nop				
00BCE:      	nop
            ; //_A8ADEC9C4_2084:;				
            _A8ADEC9C4_2084:
            ; //	asm	nop				
00BCF:      	nop
            ; //_A8ADEC9C4_2085:;				
            _A8ADEC9C4_2085:
            ; //	asm	nop				
00BD0:      	nop
            ; //_A8ADEC9C4_2086:;				
            _A8ADEC9C4_2086:
            ; //	asm	nop				
00BD1:      	nop
            ; //_A8ADEC9C4_2087:;				
            _A8ADEC9C4_2087:
            ; //	asm	nop				
00BD2:      	nop
            ; //_A8ADEC9C4_2088:;				
            _A8ADEC9C4_2088:
            ; //	asm	nop				
00BD3:      	nop
            ; //_A8ADEC9C4_2089:;				
            _A8ADEC9C4_2089:
            ; //	asm	nop				
00BD4:      	nop
            ; //_A8ADEC9C4_2090:;				
            _A8ADEC9C4_2090:
            ; //	asm clr io[0x09].b14;			
00BD5:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2091:;				
            _A8ADEC9C4_2091:
            ; //	asm	nop				
00BD6:      	nop
            ; //_A8ADEC9C4_2092:;				
            _A8ADEC9C4_2092:
            ; //	asm	nop				
00BD7:      	nop
            ; //_A8ADEC9C4_2093:;				
            _A8ADEC9C4_2093:
            ; //	asm	nop				
00BD8:      	nop
            ; //_A8ADEC9C4_2094:;				
            _A8ADEC9C4_2094:
            ; //	asm set io[0x09].b14;			
00BD9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2095:;				
            _A8ADEC9C4_2095:
            ; //	asm	nop				
00BDA:      	nop
            ; //_A8ADEC9C4_2096:;				
            _A8ADEC9C4_2096:
            ; //	asm	nop				
00BDB:      	nop
            ; //_A8ADEC9C4_2097:;				
            _A8ADEC9C4_2097:
            ; //	asm	nop				
00BDC:      	nop
            ; //_A8ADEC9C4_2098:;				
            _A8ADEC9C4_2098:
            ; //	asm	nop				
00BDD:      	nop
            ; //_A8ADEC9C4_2099:;				
            _A8ADEC9C4_2099:
            ; //	asm	nop				
00BDE:      	nop
            ; //_A8ADEC9C4_2100:;				
            _A8ADEC9C4_2100:
            ; //	asm	nop				
00BDF:      	nop
            ; //_A8ADEC9C4_2101:;				
            _A8ADEC9C4_2101:
            ; //	asm	nop				
00BE0:      	nop
            ; //_A8ADEC9C4_2102:;				
            _A8ADEC9C4_2102:
            ; //	asm	nop				
00BE1:      	nop
            ; //_A8ADEC9C4_2103:;				
            _A8ADEC9C4_2103:
            ; //	asm	nop				
00BE2:      	nop
            ; //_A8ADEC9C4_2104:;				
            _A8ADEC9C4_2104:
            ; //	asm	nop				
00BE3:      	nop
            ; //_A8ADEC9C4_2105:;				
            _A8ADEC9C4_2105:
            ; //	asm	nop				
00BE4:      	nop
            ; //_A8ADEC9C4_2106:;				
            _A8ADEC9C4_2106:
            ; //	asm	nop				
00BE5:      	nop
            ; //_A8ADEC9C4_2107:;				
            _A8ADEC9C4_2107:
            ; //	asm clr io[0x09].b14;			
00BE6:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2108:;				
            _A8ADEC9C4_2108:
            ; //	asm	nop				
00BE7:      	nop
            ; //_A8ADEC9C4_2109:;				
            _A8ADEC9C4_2109:
            ; //	asm	nop				
00BE8:      	nop
            ; //_A8ADEC9C4_2110:;				
            _A8ADEC9C4_2110:
            ; //	asm	nop				
00BE9:      	nop
            ; //_A8ADEC9C4_2111:;				
            _A8ADEC9C4_2111:
            ; //	asm set io[0x09].b14;			
00BEA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2112:;				
            _A8ADEC9C4_2112:
            ; //	asm	nop				
00BEB:      	nop
            ; //_A8ADEC9C4_2113:;				
            _A8ADEC9C4_2113:
            ; //	asm	nop				
00BEC:      	nop
            ; //_A8ADEC9C4_2114:;				
            _A8ADEC9C4_2114:
            ; //	asm	nop				
00BED:      	nop
            ; //_A8ADEC9C4_2115:;				
            _A8ADEC9C4_2115:
            ; //	asm	nop				
00BEE:      	nop
            ; //_A8ADEC9C4_2116:;				
            _A8ADEC9C4_2116:
            ; //	asm	nop				
00BEF:      	nop
            ; //_A8ADEC9C4_2117:;				
            _A8ADEC9C4_2117:
            ; //	asm	nop				
00BF0:      	nop
            ; //_A8ADEC9C4_2118:;				
            _A8ADEC9C4_2118:
            ; //	asm	nop				
00BF1:      	nop
            ; //_A8ADEC9C4_2119:;				
            _A8ADEC9C4_2119:
            ; //	asm	nop				
00BF2:      	nop
            ; //_A8ADEC9C4_2120:;				
            _A8ADEC9C4_2120:
            ; //	asm	nop				
00BF3:      	nop
            ; //_A8ADEC9C4_2121:;				
            _A8ADEC9C4_2121:
            ; //	asm	nop				
00BF4:      	nop
            ; //_A8ADEC9C4_2122:;				
            _A8ADEC9C4_2122:
            ; //	asm	nop				
00BF5:      	nop
            ; //_A8ADEC9C4_2123:;				
            _A8ADEC9C4_2123:
            ; //	asm	nop				
00BF6:      	nop
            ; //_A8ADEC9C4_2124:;				
            _A8ADEC9C4_2124:
            ; //	asm clr io[0x09].b14;			
00BF7:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2125:;				
            _A8ADEC9C4_2125:
            ; //	asm	nop				
00BF8:      	nop
            ; //_A8ADEC9C4_2126:;				
            _A8ADEC9C4_2126:
            ; //	asm	nop				
00BF9:      	nop
            ; //_A8ADEC9C4_2127:;				
            _A8ADEC9C4_2127:
            ; //	asm	nop				
00BFA:      	nop
            ; //_A8ADEC9C4_2128:;				
            _A8ADEC9C4_2128:
            ; //	asm set io[0x09].b14;			
00BFB:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2129:;				
            _A8ADEC9C4_2129:
            ; //	asm	nop				
00BFC:      	nop
            ; //_A8ADEC9C4_2130:;				
            _A8ADEC9C4_2130:
            ; //	asm	nop				
00BFD:      	nop
            ; //_A8ADEC9C4_2131:;				
            _A8ADEC9C4_2131:
            ; //	asm	nop				
00BFE:      	nop
            ; //_A8ADEC9C4_2132:;				
            _A8ADEC9C4_2132:
            ; //	asm	nop				
00BFF:      	nop
            ; //_A8ADEC9C4_2133:;				
            _A8ADEC9C4_2133:
            ; //	asm	nop				
00C00:      	nop
            ; //_A8ADEC9C4_2134:;				
            _A8ADEC9C4_2134:
            ; //	asm	nop				
00C01:      	nop
            ; //_A8ADEC9C4_2135:;				
            _A8ADEC9C4_2135:
            ; //	asm	nop				
00C02:      	nop
            ; //_A8ADEC9C4_2136:;				
            _A8ADEC9C4_2136:
            ; //	asm	nop				
00C03:      	nop
            ; //_A8ADEC9C4_2137:;				
            _A8ADEC9C4_2137:
            ; //	asm	nop				
00C04:      	nop
            ; //_A8ADEC9C4_2138:;				
            _A8ADEC9C4_2138:
            ; //	asm	nop				
00C05:      	nop
            ; //_A8ADEC9C4_2139:;				
            _A8ADEC9C4_2139:
            ; //	asm	nop				
00C06:      	nop
            ; //_A8ADEC9C4_2140:;				
            _A8ADEC9C4_2140:
            ; //	asm	nop				
00C07:      	nop
            ; //_A8ADEC9C4_2141:;				
            _A8ADEC9C4_2141:
            ; //	asm clr io[0x09].b14;			
00C08:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2142:;				
            _A8ADEC9C4_2142:
            ; //	asm	nop				
00C09:      	nop
            ; //_A8ADEC9C4_2143:;				
            _A8ADEC9C4_2143:
            ; //	asm	nop				
00C0A:      	nop
            ; //_A8ADEC9C4_2144:;				
            _A8ADEC9C4_2144:
            ; //	asm	nop				
00C0B:      	nop
            ; //_A8ADEC9C4_2145:;				
            _A8ADEC9C4_2145:
            ; //	asm set io[0x09].b14;			
00C0C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2146:;				
            _A8ADEC9C4_2146:
            ; //	asm	nop				
00C0D:      	nop
            ; //_A8ADEC9C4_2147:;				
            _A8ADEC9C4_2147:
            ; //	asm	nop				
00C0E:      	nop
            ; //_A8ADEC9C4_2148:;				
            _A8ADEC9C4_2148:
            ; //	asm	nop				
00C0F:      	nop
            ; //_A8ADEC9C4_2149:;				
            _A8ADEC9C4_2149:
            ; //	asm	nop				
00C10:      	nop
            ; //_A8ADEC9C4_2150:;				
            _A8ADEC9C4_2150:
            ; //	asm	nop				
00C11:      	nop
            ; //_A8ADEC9C4_2151:;				
            _A8ADEC9C4_2151:
            ; //	asm	nop				
00C12:      	nop
            ; //_A8ADEC9C4_2152:;				
            _A8ADEC9C4_2152:
            ; //	asm	nop				
00C13:      	nop
            ; //_A8ADEC9C4_2153:;				
            _A8ADEC9C4_2153:
            ; //	asm	nop				
00C14:      	nop
            ; //_A8ADEC9C4_2154:;				
            _A8ADEC9C4_2154:
            ; //	asm	nop				
00C15:      	nop
            ; //_A8ADEC9C4_2155:;				
            _A8ADEC9C4_2155:
            ; //	asm	nop				
00C16:      	nop
            ; //_A8ADEC9C4_2156:;				
            _A8ADEC9C4_2156:
            ; //	asm	nop				
00C17:      	nop
            ; //_A8ADEC9C4_2157:;				
            _A8ADEC9C4_2157:
            ; //	asm	nop				
00C18:      	nop
            ; //_A8ADEC9C4_2158:;				
            _A8ADEC9C4_2158:
            ; //	asm clr io[0x09].b14;			
00C19:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2159:;				
            _A8ADEC9C4_2159:
            ; //	asm	nop				
00C1A:      	nop
            ; //_A8ADEC9C4_2160:;				
            _A8ADEC9C4_2160:
            ; //	asm	nop				
00C1B:      	nop
            ; //_A8ADEC9C4_2161:;				
            _A8ADEC9C4_2161:
            ; //	asm	nop				
00C1C:      	nop
            ; //_A8ADEC9C4_2162:;				
            _A8ADEC9C4_2162:
            ; //	asm set io[0x09].b14;			
00C1D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2163:;				
            _A8ADEC9C4_2163:
            ; //	asm	nop				
00C1E:      	nop
            ; //_A8ADEC9C4_2164:;				
            _A8ADEC9C4_2164:
            ; //	asm	nop				
00C1F:      	nop
            ; //_A8ADEC9C4_2165:;				
            _A8ADEC9C4_2165:
            ; //	asm	nop				
00C20:      	nop
            ; //_A8ADEC9C4_2166:;				
            _A8ADEC9C4_2166:
            ; //	asm	nop				
00C21:      	nop
            ; //_A8ADEC9C4_2167:;				
            _A8ADEC9C4_2167:
            ; //	asm	nop				
00C22:      	nop
            ; //_A8ADEC9C4_2168:;				
            _A8ADEC9C4_2168:
            ; //	asm	nop				
00C23:      	nop
            ; //_A8ADEC9C4_2169:;				
            _A8ADEC9C4_2169:
            ; //	asm	nop				
00C24:      	nop
            ; //_A8ADEC9C4_2170:;				
            _A8ADEC9C4_2170:
            ; //	asm	nop				
00C25:      	nop
            ; //_A8ADEC9C4_2171:;				
            _A8ADEC9C4_2171:
            ; //	asm	nop				
00C26:      	nop
            ; //_A8ADEC9C4_2172:;				
            _A8ADEC9C4_2172:
            ; //	asm	nop				
00C27:      	nop
            ; //_A8ADEC9C4_2173:;				
            _A8ADEC9C4_2173:
            ; //	asm	nop				
00C28:      	nop
            ; //_A8ADEC9C4_2174:;				
            _A8ADEC9C4_2174:
            ; //	asm	nop				
00C29:      	nop
            ; //_A8ADEC9C4_2175:;				
            _A8ADEC9C4_2175:
            ; //	asm clr io[0x09].b14;			
00C2A:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2176:;				
            _A8ADEC9C4_2176:
            ; //	asm	nop				
00C2B:      	nop
            ; //_A8ADEC9C4_2177:;				
            _A8ADEC9C4_2177:
            ; //	asm	nop				
00C2C:      	nop
            ; //_A8ADEC9C4_2178:;				
            _A8ADEC9C4_2178:
            ; //	asm	nop				
00C2D:      	nop
            ; //_A8ADEC9C4_2179:;				
            _A8ADEC9C4_2179:
            ; //	asm set io[0x09].b14;			
00C2E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2180:;				
            _A8ADEC9C4_2180:
            ; //	asm	nop				
00C2F:      	nop
            ; //_A8ADEC9C4_2181:;				
            _A8ADEC9C4_2181:
            ; //	asm	nop				
00C30:      	nop
            ; //_A8ADEC9C4_2182:;				
            _A8ADEC9C4_2182:
            ; //	asm	nop				
00C31:      	nop
            ; //_A8ADEC9C4_2183:;				
            _A8ADEC9C4_2183:
            ; //	asm	nop				
00C32:      	nop
            ; //_A8ADEC9C4_2184:;				
            _A8ADEC9C4_2184:
            ; //	asm	nop				
00C33:      	nop
            ; //_A8ADEC9C4_2185:;				
            _A8ADEC9C4_2185:
            ; //	asm	nop				
00C34:      	nop
            ; //_A8ADEC9C4_2186:;				
            _A8ADEC9C4_2186:
            ; //	asm	nop				
00C35:      	nop
            ; //_A8ADEC9C4_2187:;				
            _A8ADEC9C4_2187:
            ; //	asm	nop				
00C36:      	nop
            ; //_A8ADEC9C4_2188:;				
            _A8ADEC9C4_2188:
            ; //	asm	nop				
00C37:      	nop
            ; //_A8ADEC9C4_2189:;				
            _A8ADEC9C4_2189:
            ; //	asm	nop				
00C38:      	nop
            ; //_A8ADEC9C4_2190:;				
            _A8ADEC9C4_2190:
            ; //	asm	nop				
00C39:      	nop
            ; //_A8ADEC9C4_2191:;				
            _A8ADEC9C4_2191:
            ; //	asm	nop				
00C3A:      	nop
            ; //_A8ADEC9C4_2192:;				
            _A8ADEC9C4_2192:
            ; //	asm clr io[0x09].b14;			
00C3B:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2193:;				
            _A8ADEC9C4_2193:
            ; //	asm	nop				
00C3C:      	nop
            ; //_A8ADEC9C4_2194:;				
            _A8ADEC9C4_2194:
            ; //	asm	nop				
00C3D:      	nop
            ; //_A8ADEC9C4_2195:;				
            _A8ADEC9C4_2195:
            ; //	asm	nop				
00C3E:      	nop
            ; //_A8ADEC9C4_2196:;				
            _A8ADEC9C4_2196:
            ; //	asm set io[0x09].b14;			
00C3F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2197:;				
            _A8ADEC9C4_2197:
            ; //	asm	nop				
00C40:      	nop
            ; //_A8ADEC9C4_2198:;				
            _A8ADEC9C4_2198:
            ; //	asm	nop				
00C41:      	nop
            ; //_A8ADEC9C4_2199:;				
            _A8ADEC9C4_2199:
            ; //	asm	nop				
00C42:      	nop
            ; //_A8ADEC9C4_2200:;				
            _A8ADEC9C4_2200:
            ; //	asm	nop				
00C43:      	nop
            ; //_A8ADEC9C4_2201:;				
            _A8ADEC9C4_2201:
            ; //	asm	nop				
00C44:      	nop
            ; //_A8ADEC9C4_2202:;				
            _A8ADEC9C4_2202:
            ; //	asm	nop				
00C45:      	nop
            ; //_A8ADEC9C4_2203:;				
            _A8ADEC9C4_2203:
            ; //	asm	nop				
00C46:      	nop
            ; //_A8ADEC9C4_2204:;				
            _A8ADEC9C4_2204:
            ; //	asm	nop				
00C47:      	nop
            ; //_A8ADEC9C4_2205:;				
            _A8ADEC9C4_2205:
            ; //	asm	nop				
00C48:      	nop
            ; //_A8ADEC9C4_2206:;				
            _A8ADEC9C4_2206:
            ; //	asm	nop				
00C49:      	nop
            ; //_A8ADEC9C4_2207:;				
            _A8ADEC9C4_2207:
            ; //	asm	nop				
00C4A:      	nop
            ; //_A8ADEC9C4_2208:;				
            _A8ADEC9C4_2208:
            ; //	asm	nop				
00C4B:      	nop
            ; //_A8ADEC9C4_2209:;				
            _A8ADEC9C4_2209:
            ; //	asm clr io[0x09].b14;			
00C4C:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2210:;				
            _A8ADEC9C4_2210:
            ; //	asm	nop				
00C4D:      	nop
            ; //_A8ADEC9C4_2211:;				
            _A8ADEC9C4_2211:
            ; //	asm	nop				
00C4E:      	nop
            ; //_A8ADEC9C4_2212:;				
            _A8ADEC9C4_2212:
            ; //	asm	nop				
00C4F:      	nop
            ; //_A8ADEC9C4_2213:;				
            _A8ADEC9C4_2213:
            ; //	asm set io[0x09].b14;			
00C50:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2214:;				
            _A8ADEC9C4_2214:
            ; //	asm	nop				
00C51:      	nop
            ; //_A8ADEC9C4_2215:;				
            _A8ADEC9C4_2215:
            ; //	asm	nop				
00C52:      	nop
            ; //_A8ADEC9C4_2216:;				
            _A8ADEC9C4_2216:
            ; //	asm	nop				
00C53:      	nop
            ; //_A8ADEC9C4_2217:;				
            _A8ADEC9C4_2217:
            ; //	asm	nop				
00C54:      	nop
            ; //_A8ADEC9C4_2218:;				
            _A8ADEC9C4_2218:
            ; //	asm	nop				
00C55:      	nop
            ; //_A8ADEC9C4_2219:;				
            _A8ADEC9C4_2219:
            ; //	asm	nop				
00C56:      	nop
            ; //_A8ADEC9C4_2220:;				
            _A8ADEC9C4_2220:
            ; //	asm	nop				
00C57:      	nop
            ; //_A8ADEC9C4_2221:;				
            _A8ADEC9C4_2221:
            ; //	asm	nop				
00C58:      	nop
            ; //_A8ADEC9C4_2222:;				
            _A8ADEC9C4_2222:
            ; //	asm	nop				
00C59:      	nop
            ; //_A8ADEC9C4_2223:;				
            _A8ADEC9C4_2223:
            ; //	asm	nop				
00C5A:      	nop
            ; //_A8ADEC9C4_2224:;				
            _A8ADEC9C4_2224:
            ; //	asm	nop				
00C5B:      	nop
            ; //_A8ADEC9C4_2225:;				
            _A8ADEC9C4_2225:
            ; //	asm	nop				
00C5C:      	nop
            ; //_A8ADEC9C4_2226:;				
            _A8ADEC9C4_2226:
            ; //	asm clr io[0x09].b14;			
00C5D:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2227:;				
            _A8ADEC9C4_2227:
            ; //	asm	nop				
00C5E:      	nop
            ; //_A8ADEC9C4_2228:;				
            _A8ADEC9C4_2228:
            ; //	asm	nop				
00C5F:      	nop
            ; //_A8ADEC9C4_2229:;				
            _A8ADEC9C4_2229:
            ; //	asm	nop				
00C60:      	nop
            ; //_A8ADEC9C4_2230:;				
            _A8ADEC9C4_2230:
            ; //	asm set io[0x09].b14;			
00C61:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2231:;				
            _A8ADEC9C4_2231:
            ; //	asm	nop				
00C62:      	nop
            ; //_A8ADEC9C4_2232:;				
            _A8ADEC9C4_2232:
            ; //	asm	nop				
00C63:      	nop
            ; //_A8ADEC9C4_2233:;				
            _A8ADEC9C4_2233:
            ; //	asm	nop				
00C64:      	nop
            ; //_A8ADEC9C4_2234:;				
            _A8ADEC9C4_2234:
            ; //	asm	nop				
00C65:      	nop
            ; //_A8ADEC9C4_2235:;				
            _A8ADEC9C4_2235:
            ; //	asm	nop				
00C66:      	nop
            ; //_A8ADEC9C4_2236:;				
            _A8ADEC9C4_2236:
            ; //	asm	nop				
00C67:      	nop
            ; //_A8ADEC9C4_2237:;				
            _A8ADEC9C4_2237:
            ; //	asm	nop				
00C68:      	nop
            ; //_A8ADEC9C4_2238:;				
            _A8ADEC9C4_2238:
            ; //	asm	nop				
00C69:      	nop
            ; //_A8ADEC9C4_2239:;				
            _A8ADEC9C4_2239:
            ; //	asm	nop				
00C6A:      	nop
            ; //_A8ADEC9C4_2240:;				
            _A8ADEC9C4_2240:
            ; //	asm	nop				
00C6B:      	nop
            ; //_A8ADEC9C4_2241:;				
            _A8ADEC9C4_2241:
            ; //	asm	nop				
00C6C:      	nop
            ; //_A8ADEC9C4_2242:;				
            _A8ADEC9C4_2242:
            ; //	asm	nop				
00C6D:      	nop
            ; //_A8ADEC9C4_2243:;				
            _A8ADEC9C4_2243:
            ; //	asm clr io[0x09].b14;			
00C6E:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2244:;				
            _A8ADEC9C4_2244:
            ; //	asm	nop				
00C6F:      	nop
            ; //_A8ADEC9C4_2245:;				
            _A8ADEC9C4_2245:
            ; //	asm	nop				
00C70:      	nop
            ; //_A8ADEC9C4_2246:;				
            _A8ADEC9C4_2246:
            ; //	asm	nop				
00C71:      	nop
            ; //_A8ADEC9C4_2247:;				
            _A8ADEC9C4_2247:
            ; //	asm set io[0x09].b14;			
00C72:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2248:;				
            _A8ADEC9C4_2248:
            ; //	asm	nop				
00C73:      	nop
            ; //_A8ADEC9C4_2249:;				
            _A8ADEC9C4_2249:
            ; //	asm	nop				
00C74:      	nop
            ; //_A8ADEC9C4_2250:;				
            _A8ADEC9C4_2250:
            ; //	asm	nop				
00C75:      	nop
            ; //_A8ADEC9C4_2251:;				
            _A8ADEC9C4_2251:
            ; //	asm	nop				
00C76:      	nop
            ; //_A8ADEC9C4_2252:;				
            _A8ADEC9C4_2252:
            ; //	asm	nop				
00C77:      	nop
            ; //_A8ADEC9C4_2253:;				
            _A8ADEC9C4_2253:
            ; //	asm	nop				
00C78:      	nop
            ; //_A8ADEC9C4_2254:;				
            _A8ADEC9C4_2254:
            ; //	asm	nop				
00C79:      	nop
            ; //_A8ADEC9C4_2255:;				
            _A8ADEC9C4_2255:
            ; //	asm	nop				
00C7A:      	nop
            ; //_A8ADEC9C4_2256:;				
            _A8ADEC9C4_2256:
            ; //	asm	nop				
00C7B:      	nop
            ; //_A8ADEC9C4_2257:;				
            _A8ADEC9C4_2257:
            ; //	asm	nop				
00C7C:      	nop
            ; //_A8ADEC9C4_2258:;				
            _A8ADEC9C4_2258:
            ; //	asm	nop				
00C7D:      	nop
            ; //_A8ADEC9C4_2259:;				
            _A8ADEC9C4_2259:
            ; //	asm	nop				
00C7E:      	nop
            ; //_A8ADEC9C4_2260:;				
            _A8ADEC9C4_2260:
            ; //	asm clr io[0x09].b14;			
00C7F:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2261:;				
            _A8ADEC9C4_2261:
            ; //	asm	nop				
00C80:      	nop
            ; //_A8ADEC9C4_2262:;				
            _A8ADEC9C4_2262:
            ; //	asm	nop				
00C81:      	nop
            ; //_A8ADEC9C4_2263:;				
            _A8ADEC9C4_2263:
            ; //	asm	nop				
00C82:      	nop
            ; //_A8ADEC9C4_2264:;				
            _A8ADEC9C4_2264:
            ; //	asm set io[0x09].b14;			
00C83:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2265:;				
            _A8ADEC9C4_2265:
            ; //	asm	nop				
00C84:      	nop
            ; //_A8ADEC9C4_2266:;				
            _A8ADEC9C4_2266:
            ; //	asm	nop				
00C85:      	nop
            ; //_A8ADEC9C4_2267:;				
            _A8ADEC9C4_2267:
            ; //	asm	nop				
00C86:      	nop
            ; //_A8ADEC9C4_2268:;				
            _A8ADEC9C4_2268:
            ; //	asm	nop				
00C87:      	nop
            ; //_A8ADEC9C4_2269:;				
            _A8ADEC9C4_2269:
            ; //	asm	nop				
00C88:      	nop
            ; //_A8ADEC9C4_2270:;				
            _A8ADEC9C4_2270:
            ; //	asm	nop				
00C89:      	nop
            ; //_A8ADEC9C4_2271:;				
            _A8ADEC9C4_2271:
            ; //	asm	nop				
00C8A:      	nop
            ; //_A8ADEC9C4_2272:;				
            _A8ADEC9C4_2272:
            ; //	asm	nop				
00C8B:      	nop
            ; //_A8ADEC9C4_2273:;				
            _A8ADEC9C4_2273:
            ; //	asm	nop				
00C8C:      	nop
            ; //_A8ADEC9C4_2274:;				
            _A8ADEC9C4_2274:
            ; //	asm	nop				
00C8D:      	nop
            ; //_A8ADEC9C4_2275:;				
            _A8ADEC9C4_2275:
            ; //	asm	nop				
00C8E:      	nop
            ; //_A8ADEC9C4_2276:;				
            _A8ADEC9C4_2276:
            ; //	asm	nop				
00C8F:      	nop
            ; //_A8ADEC9C4_2277:;				
            _A8ADEC9C4_2277:
            ; //	asm clr io[0x09].b14;			
00C90:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2278:;				
            _A8ADEC9C4_2278:
            ; //	asm	nop				
00C91:      	nop
            ; //_A8ADEC9C4_2279:;				
            _A8ADEC9C4_2279:
            ; //	asm	nop				
00C92:      	nop
            ; //_A8ADEC9C4_2280:;				
            _A8ADEC9C4_2280:
            ; //	asm	nop				
00C93:      	nop
            ; //_A8ADEC9C4_2281:;				
            _A8ADEC9C4_2281:
            ; //	asm set io[0x09].b14;			
00C94:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2282:;				
            _A8ADEC9C4_2282:
            ; //	asm	nop				
00C95:      	nop
            ; //_A8ADEC9C4_2283:;				
            _A8ADEC9C4_2283:
            ; //	asm	nop				
00C96:      	nop
            ; //_A8ADEC9C4_2284:;				
            _A8ADEC9C4_2284:
            ; //	asm	nop				
00C97:      	nop
            ; //_A8ADEC9C4_2285:;				
            _A8ADEC9C4_2285:
            ; //	asm	nop				
00C98:      	nop
            ; //_A8ADEC9C4_2286:;				
            _A8ADEC9C4_2286:
            ; //	asm	nop				
00C99:      	nop
            ; //_A8ADEC9C4_2287:;				
            _A8ADEC9C4_2287:
            ; //	asm	nop				
00C9A:      	nop
            ; //_A8ADEC9C4_2288:;				
            _A8ADEC9C4_2288:
            ; //	asm	nop				
00C9B:      	nop
            ; //_A8ADEC9C4_2289:;				
            _A8ADEC9C4_2289:
            ; //	asm	nop				
00C9C:      	nop
            ; //_A8ADEC9C4_2290:;				
            _A8ADEC9C4_2290:
            ; //	asm	nop				
00C9D:      	nop
            ; //_A8ADEC9C4_2291:;				
            _A8ADEC9C4_2291:
            ; //	asm	nop				
00C9E:      	nop
            ; //_A8ADEC9C4_2292:;				
            _A8ADEC9C4_2292:
            ; //	asm	nop				
00C9F:      	nop
            ; //_A8ADEC9C4_2293:;				
            _A8ADEC9C4_2293:
            ; //	asm	nop				
00CA0:      	nop
            ; //_A8ADEC9C4_2294:;				
            _A8ADEC9C4_2294:
            ; //	asm clr io[0x09].b14;			
00CA1:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2295:;				
            _A8ADEC9C4_2295:
            ; //	asm	nop				
00CA2:      	nop
            ; //_A8ADEC9C4_2296:;				
            _A8ADEC9C4_2296:
            ; //	asm	nop				
00CA3:      	nop
            ; //_A8ADEC9C4_2297:;				
            _A8ADEC9C4_2297:
            ; //	asm	nop				
00CA4:      	nop
            ; //_A8ADEC9C4_2298:;				
            _A8ADEC9C4_2298:
            ; //	asm set io[0x09].b14;			
00CA5:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2299:;				
            _A8ADEC9C4_2299:
            ; //	asm	nop				
00CA6:      	nop
            ; //_A8ADEC9C4_2300:;				
            _A8ADEC9C4_2300:
            ; //	asm	nop				
00CA7:      	nop
            ; //_A8ADEC9C4_2301:;				
            _A8ADEC9C4_2301:
            ; //	asm	nop				
00CA8:      	nop
            ; //_A8ADEC9C4_2302:;				
            _A8ADEC9C4_2302:
            ; //	asm	nop				
00CA9:      	nop
            ; //_A8ADEC9C4_2303:;				
            _A8ADEC9C4_2303:
            ; //	asm	nop				
00CAA:      	nop
            ; //_A8ADEC9C4_2304:;				
            _A8ADEC9C4_2304:
            ; //	asm	nop				
00CAB:      	nop
            ; //_A8ADEC9C4_2305:;				
            _A8ADEC9C4_2305:
            ; //	asm	nop				
00CAC:      	nop
            ; //_A8ADEC9C4_2306:;				
            _A8ADEC9C4_2306:
            ; //	asm	nop				
00CAD:      	nop
            ; //_A8ADEC9C4_2307:;				
            _A8ADEC9C4_2307:
            ; //	asm	nop				
00CAE:      	nop
            ; //_A8ADEC9C4_2308:;				
            _A8ADEC9C4_2308:
            ; //	asm	nop				
00CAF:      	nop
            ; //_A8ADEC9C4_2309:;				
            _A8ADEC9C4_2309:
            ; //	asm	nop				
00CB0:      	nop
            ; //_A8ADEC9C4_2310:;				
            _A8ADEC9C4_2310:
            ; //	asm	nop				
00CB1:      	nop
            ; //_A8ADEC9C4_2311:;				
            _A8ADEC9C4_2311:
            ; //	asm clr io[0x09].b14;			
00CB2:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2312:;				
            _A8ADEC9C4_2312:
            ; //	asm	nop				
00CB3:      	nop
            ; //_A8ADEC9C4_2313:;				
            _A8ADEC9C4_2313:
            ; //	asm	nop				
00CB4:      	nop
            ; //_A8ADEC9C4_2314:;				
            _A8ADEC9C4_2314:
            ; //	asm	nop				
00CB5:      	nop
            ; //_A8ADEC9C4_2315:;				
            _A8ADEC9C4_2315:
            ; //	goto LD63FD439_92;			
00CB6:      	pch =	LD63FD439_92
00CB7:      	ljmp	LD63FD439_92
            ; //LD63FD439_99:;					
            LD63FD439_99:
            ; //_A8ADEC9C4_2316:;				
            _A8ADEC9C4_2316:
            ; //	asm set io[0x09].b14;			
00CB8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2317:;				
            _A8ADEC9C4_2317:
            ; //	asm	nop				
00CB9:      	nop
            ; //_A8ADEC9C4_2318:;				
            _A8ADEC9C4_2318:
            ; //	asm	nop				
00CBA:      	nop
            ; //_A8ADEC9C4_2319:;				
            _A8ADEC9C4_2319:
            ; //	asm	nop				
00CBB:      	nop
            ; //_A8ADEC9C4_2320:;				
            _A8ADEC9C4_2320:
            ; //	asm clr io[0x09].b14;			
00CBC:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2321:;				
            _A8ADEC9C4_2321:
            ; //	asm	nop				
00CBD:      	nop
            ; //_A8ADEC9C4_2322:;				
            _A8ADEC9C4_2322:
            ; //	asm	nop				
00CBE:      	nop
            ; //_A8ADEC9C4_2323:;				
            _A8ADEC9C4_2323:
            ; //	asm	nop				
00CBF:      	nop
            ; //_A8ADEC9C4_2324:;				
            _A8ADEC9C4_2324:
            ; //	asm	nop				
00CC0:      	nop
            ; //_A8ADEC9C4_2325:;				
            _A8ADEC9C4_2325:
            ; //	asm	nop				
00CC1:      	nop
            ; //_A8ADEC9C4_2326:;				
            _A8ADEC9C4_2326:
            ; //	asm	nop				
00CC2:      	nop
            ; //_A8ADEC9C4_2327:;				
            _A8ADEC9C4_2327:
            ; //	asm	nop				
00CC3:      	nop
            ; //_A8ADEC9C4_2328:;				
            _A8ADEC9C4_2328:
            ; //	asm	nop				
00CC4:      	nop
            ; //_A8ADEC9C4_2329:;				
            _A8ADEC9C4_2329:
            ; //	asm	nop				
00CC5:      	nop
            ; //_A8ADEC9C4_2330:;				
            _A8ADEC9C4_2330:
            ; //	asm	nop				
00CC6:      	nop
            ; //_A8ADEC9C4_2331:;				
            _A8ADEC9C4_2331:
            ; //	asm	nop				
00CC7:      	nop
            ; //_A8ADEC9C4_2332:;				
            _A8ADEC9C4_2332:
            ; //	asm	nop				
00CC8:      	nop
            ; //_A8ADEC9C4_2333:;				
            _A8ADEC9C4_2333:
            ; //	asm set io[0x09].b14;			
00CC9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2334:;				
            _A8ADEC9C4_2334:
            ; //	asm	nop				
00CCA:      	nop
            ; //_A8ADEC9C4_2335:;				
            _A8ADEC9C4_2335:
            ; //	asm	nop				
00CCB:      	nop
            ; //_A8ADEC9C4_2336:;				
            _A8ADEC9C4_2336:
            ; //	asm	nop				
00CCC:      	nop
            ; //_A8ADEC9C4_2337:;				
            _A8ADEC9C4_2337:
            ; //	asm clr io[0x09].b14;			
00CCD:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2338:;				
            _A8ADEC9C4_2338:
            ; //	asm	nop				
00CCE:      	nop
            ; //_A8ADEC9C4_2339:;				
            _A8ADEC9C4_2339:
            ; //	asm	nop				
00CCF:      	nop
            ; //_A8ADEC9C4_2340:;				
            _A8ADEC9C4_2340:
            ; //	asm	nop				
00CD0:      	nop
            ; //_A8ADEC9C4_2341:;				
            _A8ADEC9C4_2341:
            ; //	asm	nop				
00CD1:      	nop
            ; //_A8ADEC9C4_2342:;				
            _A8ADEC9C4_2342:
            ; //	asm	nop				
00CD2:      	nop
            ; //_A8ADEC9C4_2343:;				
            _A8ADEC9C4_2343:
            ; //	asm	nop				
00CD3:      	nop
            ; //_A8ADEC9C4_2344:;				
            _A8ADEC9C4_2344:
            ; //	asm	nop				
00CD4:      	nop
            ; //_A8ADEC9C4_2345:;				
            _A8ADEC9C4_2345:
            ; //	asm	nop				
00CD5:      	nop
            ; //_A8ADEC9C4_2346:;				
            _A8ADEC9C4_2346:
            ; //	asm	nop				
00CD6:      	nop
            ; //_A8ADEC9C4_2347:;				
            _A8ADEC9C4_2347:
            ; //	asm	nop				
00CD7:      	nop
            ; //_A8ADEC9C4_2348:;				
            _A8ADEC9C4_2348:
            ; //	asm	nop				
00CD8:      	nop
            ; //_A8ADEC9C4_2349:;				
            _A8ADEC9C4_2349:
            ; //	asm	nop				
00CD9:      	nop
            ; //_A8ADEC9C4_2350:;				
            _A8ADEC9C4_2350:
            ; //	asm set io[0x09].b14;			
00CDA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2351:;				
            _A8ADEC9C4_2351:
            ; //	asm	nop				
00CDB:      	nop
            ; //_A8ADEC9C4_2352:;				
            _A8ADEC9C4_2352:
            ; //	asm	nop				
00CDC:      	nop
            ; //_A8ADEC9C4_2353:;				
            _A8ADEC9C4_2353:
            ; //	asm	nop				
00CDD:      	nop
            ; //_A8ADEC9C4_2354:;				
            _A8ADEC9C4_2354:
            ; //	asm clr io[0x09].b14;			
00CDE:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2355:;				
            _A8ADEC9C4_2355:
            ; //	asm	nop				
00CDF:      	nop
            ; //_A8ADEC9C4_2356:;				
            _A8ADEC9C4_2356:
            ; //	asm	nop				
00CE0:      	nop
            ; //_A8ADEC9C4_2357:;				
            _A8ADEC9C4_2357:
            ; //	asm	nop				
00CE1:      	nop
            ; //_A8ADEC9C4_2358:;				
            _A8ADEC9C4_2358:
            ; //	asm	nop				
00CE2:      	nop
            ; //_A8ADEC9C4_2359:;				
            _A8ADEC9C4_2359:
            ; //	asm	nop				
00CE3:      	nop
            ; //_A8ADEC9C4_2360:;				
            _A8ADEC9C4_2360:
            ; //	asm	nop				
00CE4:      	nop
            ; //_A8ADEC9C4_2361:;				
            _A8ADEC9C4_2361:
            ; //	asm	nop				
00CE5:      	nop
            ; //_A8ADEC9C4_2362:;				
            _A8ADEC9C4_2362:
            ; //	asm	nop				
00CE6:      	nop
            ; //_A8ADEC9C4_2363:;				
            _A8ADEC9C4_2363:
            ; //	asm	nop				
00CE7:      	nop
            ; //_A8ADEC9C4_2364:;				
            _A8ADEC9C4_2364:
            ; //	asm	nop				
00CE8:      	nop
            ; //_A8ADEC9C4_2365:;				
            _A8ADEC9C4_2365:
            ; //	asm	nop				
00CE9:      	nop
            ; //_A8ADEC9C4_2366:;				
            _A8ADEC9C4_2366:
            ; //	asm	nop				
00CEA:      	nop
            ; //_A8ADEC9C4_2367:;				
            _A8ADEC9C4_2367:
            ; //	asm set io[0x09].b14;			
00CEB:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2368:;				
            _A8ADEC9C4_2368:
            ; //	asm	nop				
00CEC:      	nop
            ; //_A8ADEC9C4_2369:;				
            _A8ADEC9C4_2369:
            ; //	asm	nop				
00CED:      	nop
            ; //_A8ADEC9C4_2370:;				
            _A8ADEC9C4_2370:
            ; //	asm	nop				
00CEE:      	nop
            ; //_A8ADEC9C4_2371:;				
            _A8ADEC9C4_2371:
            ; //	asm clr io[0x09].b14;			
00CEF:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2372:;				
            _A8ADEC9C4_2372:
            ; //	asm	nop				
00CF0:      	nop
            ; //_A8ADEC9C4_2373:;				
            _A8ADEC9C4_2373:
            ; //	asm	nop				
00CF1:      	nop
            ; //_A8ADEC9C4_2374:;				
            _A8ADEC9C4_2374:
            ; //	asm	nop				
00CF2:      	nop
            ; //_A8ADEC9C4_2375:;				
            _A8ADEC9C4_2375:
            ; //	asm	nop				
00CF3:      	nop
            ; //_A8ADEC9C4_2376:;				
            _A8ADEC9C4_2376:
            ; //	asm	nop				
00CF4:      	nop
            ; //_A8ADEC9C4_2377:;				
            _A8ADEC9C4_2377:
            ; //	asm	nop				
00CF5:      	nop
            ; //_A8ADEC9C4_2378:;				
            _A8ADEC9C4_2378:
            ; //	asm	nop				
00CF6:      	nop
            ; //_A8ADEC9C4_2379:;				
            _A8ADEC9C4_2379:
            ; //	asm	nop				
00CF7:      	nop
            ; //_A8ADEC9C4_2380:;				
            _A8ADEC9C4_2380:
            ; //	asm	nop				
00CF8:      	nop
            ; //_A8ADEC9C4_2381:;				
            _A8ADEC9C4_2381:
            ; //	asm	nop				
00CF9:      	nop
            ; //_A8ADEC9C4_2382:;				
            _A8ADEC9C4_2382:
            ; //	asm	nop				
00CFA:      	nop
            ; //_A8ADEC9C4_2383:;				
            _A8ADEC9C4_2383:
            ; //	asm	nop				
00CFB:      	nop
            ; //_A8ADEC9C4_2384:;				
            _A8ADEC9C4_2384:
            ; //	asm set io[0x09].b14;			
00CFC:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2385:;				
            _A8ADEC9C4_2385:
            ; //	asm	nop				
00CFD:      	nop
            ; //_A8ADEC9C4_2386:;				
            _A8ADEC9C4_2386:
            ; //	asm	nop				
00CFE:      	nop
            ; //_A8ADEC9C4_2387:;				
            _A8ADEC9C4_2387:
            ; //	asm	nop				
00CFF:      	nop
            ; //_A8ADEC9C4_2388:;				
            _A8ADEC9C4_2388:
            ; //	asm clr io[0x09].b14;			
00D00:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2389:;				
            _A8ADEC9C4_2389:
            ; //	asm	nop				
00D01:      	nop
            ; //_A8ADEC9C4_2390:;				
            _A8ADEC9C4_2390:
            ; //	asm	nop				
00D02:      	nop
            ; //_A8ADEC9C4_2391:;				
            _A8ADEC9C4_2391:
            ; //	asm	nop				
00D03:      	nop
            ; //_A8ADEC9C4_2392:;				
            _A8ADEC9C4_2392:
            ; //	asm	nop				
00D04:      	nop
            ; //_A8ADEC9C4_2393:;				
            _A8ADEC9C4_2393:
            ; //	asm	nop				
00D05:      	nop
            ; //_A8ADEC9C4_2394:;				
            _A8ADEC9C4_2394:
            ; //	asm	nop				
00D06:      	nop
            ; //_A8ADEC9C4_2395:;				
            _A8ADEC9C4_2395:
            ; //	asm	nop				
00D07:      	nop
            ; //_A8ADEC9C4_2396:;				
            _A8ADEC9C4_2396:
            ; //	asm	nop				
00D08:      	nop
            ; //_A8ADEC9C4_2397:;				
            _A8ADEC9C4_2397:
            ; //	asm	nop				
00D09:      	nop
            ; //_A8ADEC9C4_2398:;				
            _A8ADEC9C4_2398:
            ; //	asm	nop				
00D0A:      	nop
            ; //_A8ADEC9C4_2399:;				
            _A8ADEC9C4_2399:
            ; //	asm	nop				
00D0B:      	nop
            ; //_A8ADEC9C4_2400:;				
            _A8ADEC9C4_2400:
            ; //	asm	nop				
00D0C:      	nop
            ; //_A8ADEC9C4_2401:;				
            _A8ADEC9C4_2401:
            ; //	asm set io[0x09].b14;			
00D0D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2402:;				
            _A8ADEC9C4_2402:
            ; //	asm	nop				
00D0E:      	nop
            ; //_A8ADEC9C4_2403:;				
            _A8ADEC9C4_2403:
            ; //	asm	nop				
00D0F:      	nop
            ; //_A8ADEC9C4_2404:;				
            _A8ADEC9C4_2404:
            ; //	asm	nop				
00D10:      	nop
            ; //_A8ADEC9C4_2405:;				
            _A8ADEC9C4_2405:
            ; //	asm clr io[0x09].b14;			
00D11:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2406:;				
            _A8ADEC9C4_2406:
            ; //	asm	nop				
00D12:      	nop
            ; //_A8ADEC9C4_2407:;				
            _A8ADEC9C4_2407:
            ; //	asm	nop				
00D13:      	nop
            ; //_A8ADEC9C4_2408:;				
            _A8ADEC9C4_2408:
            ; //	asm	nop				
00D14:      	nop
            ; //_A8ADEC9C4_2409:;				
            _A8ADEC9C4_2409:
            ; //	asm	nop				
00D15:      	nop
            ; //_A8ADEC9C4_2410:;				
            _A8ADEC9C4_2410:
            ; //	asm	nop				
00D16:      	nop
            ; //_A8ADEC9C4_2411:;				
            _A8ADEC9C4_2411:
            ; //	asm	nop				
00D17:      	nop
            ; //_A8ADEC9C4_2412:;				
            _A8ADEC9C4_2412:
            ; //	asm	nop				
00D18:      	nop
            ; //_A8ADEC9C4_2413:;				
            _A8ADEC9C4_2413:
            ; //	asm	nop				
00D19:      	nop
            ; //_A8ADEC9C4_2414:;				
            _A8ADEC9C4_2414:
            ; //	asm	nop				
00D1A:      	nop
            ; //_A8ADEC9C4_2415:;				
            _A8ADEC9C4_2415:
            ; //	asm	nop				
00D1B:      	nop
            ; //_A8ADEC9C4_2416:;				
            _A8ADEC9C4_2416:
            ; //	asm	nop				
00D1C:      	nop
            ; //_A8ADEC9C4_2417:;				
            _A8ADEC9C4_2417:
            ; //	asm	nop				
00D1D:      	nop
            ; //_A8ADEC9C4_2418:;				
            _A8ADEC9C4_2418:
            ; //	asm set io[0x09].b14;			
00D1E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2419:;				
            _A8ADEC9C4_2419:
            ; //	asm	nop				
00D1F:      	nop
            ; //_A8ADEC9C4_2420:;				
            _A8ADEC9C4_2420:
            ; //	asm	nop				
00D20:      	nop
            ; //_A8ADEC9C4_2421:;				
            _A8ADEC9C4_2421:
            ; //	asm	nop				
00D21:      	nop
            ; //_A8ADEC9C4_2422:;				
            _A8ADEC9C4_2422:
            ; //	asm clr io[0x09].b14;			
00D22:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2423:;				
            _A8ADEC9C4_2423:
            ; //	asm	nop				
00D23:      	nop
            ; //_A8ADEC9C4_2424:;				
            _A8ADEC9C4_2424:
            ; //	asm	nop				
00D24:      	nop
            ; //_A8ADEC9C4_2425:;				
            _A8ADEC9C4_2425:
            ; //	asm	nop				
00D25:      	nop
            ; //_A8ADEC9C4_2426:;				
            _A8ADEC9C4_2426:
            ; //	asm	nop				
00D26:      	nop
            ; //_A8ADEC9C4_2427:;				
            _A8ADEC9C4_2427:
            ; //	asm	nop				
00D27:      	nop
            ; //_A8ADEC9C4_2428:;				
            _A8ADEC9C4_2428:
            ; //	asm	nop				
00D28:      	nop
            ; //_A8ADEC9C4_2429:;				
            _A8ADEC9C4_2429:
            ; //	asm	nop				
00D29:      	nop
            ; //_A8ADEC9C4_2430:;				
            _A8ADEC9C4_2430:
            ; //	asm	nop				
00D2A:      	nop
            ; //_A8ADEC9C4_2431:;				
            _A8ADEC9C4_2431:
            ; //	asm	nop				
00D2B:      	nop
            ; //_A8ADEC9C4_2432:;				
            _A8ADEC9C4_2432:
            ; //	asm	nop				
00D2C:      	nop
            ; //_A8ADEC9C4_2433:;				
            _A8ADEC9C4_2433:
            ; //	asm	nop				
00D2D:      	nop
            ; //_A8ADEC9C4_2434:;				
            _A8ADEC9C4_2434:
            ; //	asm	nop				
00D2E:      	nop
            ; //_A8ADEC9C4_2435:;				
            _A8ADEC9C4_2435:
            ; //	asm set io[0x09].b14;			
00D2F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2436:;				
            _A8ADEC9C4_2436:
            ; //	asm	nop				
00D30:      	nop
            ; //_A8ADEC9C4_2437:;				
            _A8ADEC9C4_2437:
            ; //	asm	nop				
00D31:      	nop
            ; //_A8ADEC9C4_2438:;				
            _A8ADEC9C4_2438:
            ; //	asm	nop				
00D32:      	nop
            ; //_A8ADEC9C4_2439:;				
            _A8ADEC9C4_2439:
            ; //	asm clr io[0x09].b14;			
00D33:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2440:;				
            _A8ADEC9C4_2440:
            ; //	asm	nop				
00D34:      	nop
            ; //_A8ADEC9C4_2441:;				
            _A8ADEC9C4_2441:
            ; //	asm	nop				
00D35:      	nop
            ; //_A8ADEC9C4_2442:;				
            _A8ADEC9C4_2442:
            ; //	asm	nop				
00D36:      	nop
            ; //_A8ADEC9C4_2443:;				
            _A8ADEC9C4_2443:
            ; //	asm	nop				
00D37:      	nop
            ; //_A8ADEC9C4_2444:;				
            _A8ADEC9C4_2444:
            ; //	asm	nop				
00D38:      	nop
            ; //_A8ADEC9C4_2445:;				
            _A8ADEC9C4_2445:
            ; //	asm	nop				
00D39:      	nop
            ; //_A8ADEC9C4_2446:;				
            _A8ADEC9C4_2446:
            ; //	asm	nop				
00D3A:      	nop
            ; //_A8ADEC9C4_2447:;				
            _A8ADEC9C4_2447:
            ; //	asm	nop				
00D3B:      	nop
            ; //_A8ADEC9C4_2448:;				
            _A8ADEC9C4_2448:
            ; //	asm	nop				
00D3C:      	nop
            ; //_A8ADEC9C4_2449:;				
            _A8ADEC9C4_2449:
            ; //	asm	nop				
00D3D:      	nop
            ; //_A8ADEC9C4_2450:;				
            _A8ADEC9C4_2450:
            ; //	asm	nop				
00D3E:      	nop
            ; //_A8ADEC9C4_2451:;				
            _A8ADEC9C4_2451:
            ; //	asm	nop				
00D3F:      	nop
            ; //_A8ADEC9C4_2452:;				
            _A8ADEC9C4_2452:
            ; //	asm set io[0x09].b14;			
00D40:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2453:;				
            _A8ADEC9C4_2453:
            ; //	asm	nop				
00D41:      	nop
            ; //_A8ADEC9C4_2454:;				
            _A8ADEC9C4_2454:
            ; //	asm	nop				
00D42:      	nop
            ; //_A8ADEC9C4_2455:;				
            _A8ADEC9C4_2455:
            ; //	asm	nop				
00D43:      	nop
            ; //_A8ADEC9C4_2456:;				
            _A8ADEC9C4_2456:
            ; //	asm clr io[0x09].b14;			
00D44:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2457:;				
            _A8ADEC9C4_2457:
            ; //	asm	nop				
00D45:      	nop
            ; //_A8ADEC9C4_2458:;				
            _A8ADEC9C4_2458:
            ; //	asm	nop				
00D46:      	nop
            ; //_A8ADEC9C4_2459:;				
            _A8ADEC9C4_2459:
            ; //	asm	nop				
00D47:      	nop
            ; //_A8ADEC9C4_2460:;				
            _A8ADEC9C4_2460:
            ; //	asm	nop				
00D48:      	nop
            ; //_A8ADEC9C4_2461:;				
            _A8ADEC9C4_2461:
            ; //	asm	nop				
00D49:      	nop
            ; //_A8ADEC9C4_2462:;				
            _A8ADEC9C4_2462:
            ; //	asm	nop				
00D4A:      	nop
            ; //_A8ADEC9C4_2463:;				
            _A8ADEC9C4_2463:
            ; //	asm	nop				
00D4B:      	nop
            ; //_A8ADEC9C4_2464:;				
            _A8ADEC9C4_2464:
            ; //	asm	nop				
00D4C:      	nop
            ; //_A8ADEC9C4_2465:;				
            _A8ADEC9C4_2465:
            ; //	asm	nop				
00D4D:      	nop
            ; //_A8ADEC9C4_2466:;				
            _A8ADEC9C4_2466:
            ; //	asm	nop				
00D4E:      	nop
            ; //_A8ADEC9C4_2467:;				
            _A8ADEC9C4_2467:
            ; //	asm	nop				
00D4F:      	nop
            ; //_A8ADEC9C4_2468:;				
            _A8ADEC9C4_2468:
            ; //	asm	nop				
00D50:      	nop
            ; //_A8ADEC9C4_2469:;				
            _A8ADEC9C4_2469:
            ; //	asm set io[0x09].b14;			
00D51:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2470:;				
            _A8ADEC9C4_2470:
            ; //	asm	nop				
00D52:      	nop
            ; //_A8ADEC9C4_2471:;				
            _A8ADEC9C4_2471:
            ; //	asm	nop				
00D53:      	nop
            ; //_A8ADEC9C4_2472:;				
            _A8ADEC9C4_2472:
            ; //	asm	nop				
00D54:      	nop
            ; //_A8ADEC9C4_2473:;				
            _A8ADEC9C4_2473:
            ; //	asm clr io[0x09].b14;			
00D55:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2474:;				
            _A8ADEC9C4_2474:
            ; //	asm	nop				
00D56:      	nop
            ; //_A8ADEC9C4_2475:;				
            _A8ADEC9C4_2475:
            ; //	asm	nop				
00D57:      	nop
            ; //_A8ADEC9C4_2476:;				
            _A8ADEC9C4_2476:
            ; //	asm	nop				
00D58:      	nop
            ; //_A8ADEC9C4_2477:;				
            _A8ADEC9C4_2477:
            ; //	asm	nop				
00D59:      	nop
            ; //_A8ADEC9C4_2478:;				
            _A8ADEC9C4_2478:
            ; //	asm	nop				
00D5A:      	nop
            ; //_A8ADEC9C4_2479:;				
            _A8ADEC9C4_2479:
            ; //	asm	nop				
00D5B:      	nop
            ; //_A8ADEC9C4_2480:;				
            _A8ADEC9C4_2480:
            ; //	asm	nop				
00D5C:      	nop
            ; //_A8ADEC9C4_2481:;				
            _A8ADEC9C4_2481:
            ; //	asm	nop				
00D5D:      	nop
            ; //_A8ADEC9C4_2482:;				
            _A8ADEC9C4_2482:
            ; //	asm	nop				
00D5E:      	nop
            ; //_A8ADEC9C4_2483:;				
            _A8ADEC9C4_2483:
            ; //	asm	nop				
00D5F:      	nop
            ; //_A8ADEC9C4_2484:;				
            _A8ADEC9C4_2484:
            ; //	asm	nop				
00D60:      	nop
            ; //_A8ADEC9C4_2485:;				
            _A8ADEC9C4_2485:
            ; //	asm	nop				
00D61:      	nop
            ; //_A8ADEC9C4_2486:;				
            _A8ADEC9C4_2486:
            ; //	asm set io[0x09].b14;			
00D62:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2487:;				
            _A8ADEC9C4_2487:
            ; //	asm	nop				
00D63:      	nop
            ; //_A8ADEC9C4_2488:;				
            _A8ADEC9C4_2488:
            ; //	asm	nop				
00D64:      	nop
            ; //_A8ADEC9C4_2489:;				
            _A8ADEC9C4_2489:
            ; //	asm	nop				
00D65:      	nop
            ; //_A8ADEC9C4_2490:;				
            _A8ADEC9C4_2490:
            ; //	asm clr io[0x09].b14;			
00D66:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2491:;				
            _A8ADEC9C4_2491:
            ; //	asm	nop				
00D67:      	nop
            ; //_A8ADEC9C4_2492:;				
            _A8ADEC9C4_2492:
            ; //	asm	nop				
00D68:      	nop
            ; //_A8ADEC9C4_2493:;				
            _A8ADEC9C4_2493:
            ; //	asm	nop				
00D69:      	nop
            ; //_A8ADEC9C4_2494:;				
            _A8ADEC9C4_2494:
            ; //	asm	nop				
00D6A:      	nop
            ; //_A8ADEC9C4_2495:;				
            _A8ADEC9C4_2495:
            ; //	asm	nop				
00D6B:      	nop
            ; //_A8ADEC9C4_2496:;				
            _A8ADEC9C4_2496:
            ; //	asm	nop				
00D6C:      	nop
            ; //_A8ADEC9C4_2497:;				
            _A8ADEC9C4_2497:
            ; //	asm	nop				
00D6D:      	nop
            ; //_A8ADEC9C4_2498:;				
            _A8ADEC9C4_2498:
            ; //	asm	nop				
00D6E:      	nop
            ; //_A8ADEC9C4_2499:;				
            _A8ADEC9C4_2499:
            ; //	asm	nop				
00D6F:      	nop
            ; //_A8ADEC9C4_2500:;				
            _A8ADEC9C4_2500:
            ; //	asm	nop				
00D70:      	nop
            ; //_A8ADEC9C4_2501:;				
            _A8ADEC9C4_2501:
            ; //	asm	nop				
00D71:      	nop
            ; //_A8ADEC9C4_2502:;				
            _A8ADEC9C4_2502:
            ; //	asm	nop				
00D72:      	nop
            ; //_A8ADEC9C4_2503:;				
            _A8ADEC9C4_2503:
            ; //	asm set io[0x09].b14;			
00D73:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2504:;				
            _A8ADEC9C4_2504:
            ; //	asm	nop				
00D74:      	nop
            ; //_A8ADEC9C4_2505:;				
            _A8ADEC9C4_2505:
            ; //	asm	nop				
00D75:      	nop
            ; //_A8ADEC9C4_2506:;				
            _A8ADEC9C4_2506:
            ; //	asm	nop				
00D76:      	nop
            ; //_A8ADEC9C4_2507:;				
            _A8ADEC9C4_2507:
            ; //	asm clr io[0x09].b14;			
00D77:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2508:;				
            _A8ADEC9C4_2508:
            ; //	asm	nop				
00D78:      	nop
            ; //_A8ADEC9C4_2509:;				
            _A8ADEC9C4_2509:
            ; //	asm	nop				
00D79:      	nop
            ; //_A8ADEC9C4_2510:;				
            _A8ADEC9C4_2510:
            ; //	asm	nop				
00D7A:      	nop
            ; //_A8ADEC9C4_2511:;				
            _A8ADEC9C4_2511:
            ; //	asm	nop				
00D7B:      	nop
            ; //_A8ADEC9C4_2512:;				
            _A8ADEC9C4_2512:
            ; //	asm	nop				
00D7C:      	nop
            ; //_A8ADEC9C4_2513:;				
            _A8ADEC9C4_2513:
            ; //	asm	nop				
00D7D:      	nop
            ; //_A8ADEC9C4_2514:;				
            _A8ADEC9C4_2514:
            ; //	asm	nop				
00D7E:      	nop
            ; //_A8ADEC9C4_2515:;				
            _A8ADEC9C4_2515:
            ; //	asm	nop				
00D7F:      	nop
            ; //_A8ADEC9C4_2516:;				
            _A8ADEC9C4_2516:
            ; //	asm	nop				
00D80:      	nop
            ; //_A8ADEC9C4_2517:;				
            _A8ADEC9C4_2517:
            ; //	asm	nop				
00D81:      	nop
            ; //_A8ADEC9C4_2518:;				
            _A8ADEC9C4_2518:
            ; //	asm	nop				
00D82:      	nop
            ; //_A8ADEC9C4_2519:;				
            _A8ADEC9C4_2519:
            ; //	asm	nop				
00D83:      	nop
            ; //_A8ADEC9C4_2520:;				
            _A8ADEC9C4_2520:
            ; //	asm set io[0x09].b14;			
00D84:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2521:;				
            _A8ADEC9C4_2521:
            ; //	asm	nop				
00D85:      	nop
            ; //_A8ADEC9C4_2522:;				
            _A8ADEC9C4_2522:
            ; //	asm	nop				
00D86:      	nop
            ; //_A8ADEC9C4_2523:;				
            _A8ADEC9C4_2523:
            ; //	asm	nop				
00D87:      	nop
            ; //_A8ADEC9C4_2524:;				
            _A8ADEC9C4_2524:
            ; //	asm clr io[0x09].b14;			
00D88:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2525:;				
            _A8ADEC9C4_2525:
            ; //	asm	nop				
00D89:      	nop
            ; //_A8ADEC9C4_2526:;				
            _A8ADEC9C4_2526:
            ; //	asm	nop				
00D8A:      	nop
            ; //_A8ADEC9C4_2527:;				
            _A8ADEC9C4_2527:
            ; //	asm	nop				
00D8B:      	nop
            ; //_A8ADEC9C4_2528:;				
            _A8ADEC9C4_2528:
            ; //	asm	nop				
00D8C:      	nop
            ; //_A8ADEC9C4_2529:;				
            _A8ADEC9C4_2529:
            ; //	asm	nop				
00D8D:      	nop
            ; //_A8ADEC9C4_2530:;				
            _A8ADEC9C4_2530:
            ; //	asm	nop				
00D8E:      	nop
            ; //_A8ADEC9C4_2531:;				
            _A8ADEC9C4_2531:
            ; //	asm	nop				
00D8F:      	nop
            ; //_A8ADEC9C4_2532:;				
            _A8ADEC9C4_2532:
            ; //	asm	nop				
00D90:      	nop
            ; //_A8ADEC9C4_2533:;				
            _A8ADEC9C4_2533:
            ; //	asm	nop				
00D91:      	nop
            ; //_A8ADEC9C4_2534:;				
            _A8ADEC9C4_2534:
            ; //	asm	nop				
00D92:      	nop
            ; //_A8ADEC9C4_2535:;				
            _A8ADEC9C4_2535:
            ; //	asm	nop				
00D93:      	nop
            ; //_A8ADEC9C4_2536:;				
            _A8ADEC9C4_2536:
            ; //	asm	nop				
00D94:      	nop
            ; //_A8ADEC9C4_2537:;				
            _A8ADEC9C4_2537:
            ; //	asm set io[0x09].b14;			
00D95:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2538:;				
            _A8ADEC9C4_2538:
            ; //	asm	nop				
00D96:      	nop
            ; //_A8ADEC9C4_2539:;				
            _A8ADEC9C4_2539:
            ; //	asm	nop				
00D97:      	nop
            ; //_A8ADEC9C4_2540:;				
            _A8ADEC9C4_2540:
            ; //	asm	nop				
00D98:      	nop
            ; //_A8ADEC9C4_2541:;				
            _A8ADEC9C4_2541:
            ; //	asm clr io[0x09].b14;			
00D99:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2542:;				
            _A8ADEC9C4_2542:
            ; //	asm	nop				
00D9A:      	nop
            ; //_A8ADEC9C4_2543:;				
            _A8ADEC9C4_2543:
            ; //	asm	nop				
00D9B:      	nop
            ; //_A8ADEC9C4_2544:;				
            _A8ADEC9C4_2544:
            ; //	asm	nop				
00D9C:      	nop
            ; //_A8ADEC9C4_2545:;				
            _A8ADEC9C4_2545:
            ; //	asm	nop				
00D9D:      	nop
            ; //_A8ADEC9C4_2546:;				
            _A8ADEC9C4_2546:
            ; //	asm	nop				
00D9E:      	nop
            ; //_A8ADEC9C4_2547:;				
            _A8ADEC9C4_2547:
            ; //	asm	nop				
00D9F:      	nop
            ; //_A8ADEC9C4_2548:;				
            _A8ADEC9C4_2548:
            ; //	asm	nop				
00DA0:      	nop
            ; //_A8ADEC9C4_2549:;				
            _A8ADEC9C4_2549:
            ; //	asm	nop				
00DA1:      	nop
            ; //_A8ADEC9C4_2550:;				
            _A8ADEC9C4_2550:
            ; //	asm	nop				
00DA2:      	nop
            ; //_A8ADEC9C4_2551:;				
            _A8ADEC9C4_2551:
            ; //	asm	nop				
00DA3:      	nop
            ; //_A8ADEC9C4_2552:;				
            _A8ADEC9C4_2552:
            ; //	asm	nop				
00DA4:      	nop
            ; //_A8ADEC9C4_2553:;				
            _A8ADEC9C4_2553:
            ; //	asm	nop				
00DA5:      	nop
            ; //_A8ADEC9C4_2554:;				
            _A8ADEC9C4_2554:
            ; //	asm set io[0x09].b14;			
00DA6:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2555:;				
            _A8ADEC9C4_2555:
            ; //	asm	nop				
00DA7:      	nop
            ; //_A8ADEC9C4_2556:;				
            _A8ADEC9C4_2556:
            ; //	asm	nop				
00DA8:      	nop
            ; //_A8ADEC9C4_2557:;				
            _A8ADEC9C4_2557:
            ; //	asm	nop				
00DA9:      	nop
            ; //_A8ADEC9C4_2558:;				
            _A8ADEC9C4_2558:
            ; //	asm clr io[0x09].b14;			
00DAA:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2559:;				
            _A8ADEC9C4_2559:
            ; //	asm	nop				
00DAB:      	nop
            ; //_A8ADEC9C4_2560:;				
            _A8ADEC9C4_2560:
            ; //	asm	nop				
00DAC:      	nop
            ; //_A8ADEC9C4_2561:;				
            _A8ADEC9C4_2561:
            ; //	asm	nop				
00DAD:      	nop
            ; //_A8ADEC9C4_2562:;				
            _A8ADEC9C4_2562:
            ; //	asm	nop				
00DAE:      	nop
            ; //_A8ADEC9C4_2563:;				
            _A8ADEC9C4_2563:
            ; //	asm	nop				
00DAF:      	nop
            ; //_A8ADEC9C4_2564:;				
            _A8ADEC9C4_2564:
            ; //	asm	nop				
00DB0:      	nop
            ; //_A8ADEC9C4_2565:;				
            _A8ADEC9C4_2565:
            ; //	asm	nop				
00DB1:      	nop
            ; //_A8ADEC9C4_2566:;				
            _A8ADEC9C4_2566:
            ; //	asm	nop				
00DB2:      	nop
            ; //_A8ADEC9C4_2567:;				
            _A8ADEC9C4_2567:
            ; //	asm	nop				
00DB3:      	nop
            ; //_A8ADEC9C4_2568:;				
            _A8ADEC9C4_2568:
            ; //	asm	nop				
00DB4:      	nop
            ; //_A8ADEC9C4_2569:;				
            _A8ADEC9C4_2569:
            ; //	asm	nop				
00DB5:      	nop
            ; //_A8ADEC9C4_2570:;				
            _A8ADEC9C4_2570:
            ; //	asm	nop				
00DB6:      	nop
            ; //_A8ADEC9C4_2571:;				
            _A8ADEC9C4_2571:
            ; //	asm set io[0x09].b14;			
00DB7:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2572:;				
            _A8ADEC9C4_2572:
            ; //	asm	nop				
00DB8:      	nop
            ; //_A8ADEC9C4_2573:;				
            _A8ADEC9C4_2573:
            ; //	asm	nop				
00DB9:      	nop
            ; //_A8ADEC9C4_2574:;				
            _A8ADEC9C4_2574:
            ; //	asm	nop				
00DBA:      	nop
            ; //_A8ADEC9C4_2575:;				
            _A8ADEC9C4_2575:
            ; //	asm clr io[0x09].b14;			
00DBB:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2576:;				
            _A8ADEC9C4_2576:
            ; //	asm	nop				
00DBC:      	nop
            ; //_A8ADEC9C4_2577:;				
            _A8ADEC9C4_2577:
            ; //	asm	nop				
00DBD:      	nop
            ; //_A8ADEC9C4_2578:;				
            _A8ADEC9C4_2578:
            ; //	asm	nop				
00DBE:      	nop
            ; //_A8ADEC9C4_2579:;				
            _A8ADEC9C4_2579:
            ; //	asm	nop				
00DBF:      	nop
            ; //_A8ADEC9C4_2580:;				
            _A8ADEC9C4_2580:
            ; //	asm	nop				
00DC0:      	nop
            ; //_A8ADEC9C4_2581:;				
            _A8ADEC9C4_2581:
            ; //	asm	nop				
00DC1:      	nop
            ; //_A8ADEC9C4_2582:;				
            _A8ADEC9C4_2582:
            ; //	asm	nop				
00DC2:      	nop
            ; //_A8ADEC9C4_2583:;				
            _A8ADEC9C4_2583:
            ; //	asm	nop				
00DC3:      	nop
            ; //_A8ADEC9C4_2584:;				
            _A8ADEC9C4_2584:
            ; //	asm	nop				
00DC4:      	nop
            ; //_A8ADEC9C4_2585:;				
            _A8ADEC9C4_2585:
            ; //	asm	nop				
00DC5:      	nop
            ; //_A8ADEC9C4_2586:;				
            _A8ADEC9C4_2586:
            ; //	asm	nop				
00DC6:      	nop
            ; //_A8ADEC9C4_2587:;				
            _A8ADEC9C4_2587:
            ; //	asm	nop				
00DC7:      	nop
            ; //_A8ADEC9C4_2588:;				
            _A8ADEC9C4_2588:
            ; //	asm set io[0x09].b14;			
00DC8:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2589:;				
            _A8ADEC9C4_2589:
            ; //	asm	nop				
00DC9:      	nop
            ; //_A8ADEC9C4_2590:;				
            _A8ADEC9C4_2590:
            ; //	asm	nop				
00DCA:      	nop
            ; //_A8ADEC9C4_2591:;				
            _A8ADEC9C4_2591:
            ; //	asm	nop				
00DCB:      	nop
            ; //_A8ADEC9C4_2592:;				
            _A8ADEC9C4_2592:
            ; //	asm	nop				
00DCC:      	nop
            ; //_A8ADEC9C4_2593:;				
            _A8ADEC9C4_2593:
            ; //	asm	nop				
00DCD:      	nop
            ; //_A8ADEC9C4_2594:;				
            _A8ADEC9C4_2594:
            ; //	asm	nop				
00DCE:      	nop
            ; //_A8ADEC9C4_2595:;				
            _A8ADEC9C4_2595:
            ; //	asm	nop				
00DCF:      	nop
            ; //_A8ADEC9C4_2596:;				
            _A8ADEC9C4_2596:
            ; //	asm	nop				
00DD0:      	nop
            ; //_A8ADEC9C4_2597:;				
            _A8ADEC9C4_2597:
            ; //	asm	nop				
00DD1:      	nop
            ; //_A8ADEC9C4_2598:;				
            _A8ADEC9C4_2598:
            ; //	asm	nop				
00DD2:      	nop
            ; //_A8ADEC9C4_2599:;				
            _A8ADEC9C4_2599:
            ; //	asm	nop				
00DD3:      	nop
            ; //_A8ADEC9C4_2600:;				
            _A8ADEC9C4_2600:
            ; //	asm	nop				
00DD4:      	nop
            ; //_A8ADEC9C4_2601:;				
            _A8ADEC9C4_2601:
            ; //	asm clr io[0x09].b14;			
00DD5:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2602:;				
            _A8ADEC9C4_2602:
            ; //	asm	nop				
00DD6:      	nop
            ; //_A8ADEC9C4_2603:;				
            _A8ADEC9C4_2603:
            ; //	asm	nop				
00DD7:      	nop
            ; //_A8ADEC9C4_2604:;				
            _A8ADEC9C4_2604:
            ; //	asm	nop				
00DD8:      	nop
            ; //_A8ADEC9C4_2605:;				
            _A8ADEC9C4_2605:
            ; //	asm set io[0x09].b14;			
00DD9:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2606:;				
            _A8ADEC9C4_2606:
            ; //	asm	nop				
00DDA:      	nop
            ; //_A8ADEC9C4_2607:;				
            _A8ADEC9C4_2607:
            ; //	asm	nop				
00DDB:      	nop
            ; //_A8ADEC9C4_2608:;				
            _A8ADEC9C4_2608:
            ; //	asm	nop				
00DDC:      	nop
            ; //_A8ADEC9C4_2609:;				
            _A8ADEC9C4_2609:
            ; //	asm	nop				
00DDD:      	nop
            ; //_A8ADEC9C4_2610:;				
            _A8ADEC9C4_2610:
            ; //	asm	nop				
00DDE:      	nop
            ; //_A8ADEC9C4_2611:;				
            _A8ADEC9C4_2611:
            ; //	asm	nop				
00DDF:      	nop
            ; //_A8ADEC9C4_2612:;				
            _A8ADEC9C4_2612:
            ; //	asm	nop				
00DE0:      	nop
            ; //_A8ADEC9C4_2613:;				
            _A8ADEC9C4_2613:
            ; //	asm	nop				
00DE1:      	nop
            ; //_A8ADEC9C4_2614:;				
            _A8ADEC9C4_2614:
            ; //	asm	nop				
00DE2:      	nop
            ; //_A8ADEC9C4_2615:;				
            _A8ADEC9C4_2615:
            ; //	asm	nop				
00DE3:      	nop
            ; //_A8ADEC9C4_2616:;				
            _A8ADEC9C4_2616:
            ; //	asm	nop				
00DE4:      	nop
            ; //_A8ADEC9C4_2617:;				
            _A8ADEC9C4_2617:
            ; //	asm	nop				
00DE5:      	nop
            ; //_A8ADEC9C4_2618:;				
            _A8ADEC9C4_2618:
            ; //	asm clr io[0x09].b14;			
00DE6:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2619:;				
            _A8ADEC9C4_2619:
            ; //	asm	nop				
00DE7:      	nop
            ; //_A8ADEC9C4_2620:;				
            _A8ADEC9C4_2620:
            ; //	asm	nop				
00DE8:      	nop
            ; //_A8ADEC9C4_2621:;				
            _A8ADEC9C4_2621:
            ; //	asm	nop				
00DE9:      	nop
            ; //_A8ADEC9C4_2622:;				
            _A8ADEC9C4_2622:
            ; //	asm set io[0x09].b14;			
00DEA:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2623:;				
            _A8ADEC9C4_2623:
            ; //	asm	nop				
00DEB:      	nop
            ; //_A8ADEC9C4_2624:;				
            _A8ADEC9C4_2624:
            ; //	asm	nop				
00DEC:      	nop
            ; //_A8ADEC9C4_2625:;				
            _A8ADEC9C4_2625:
            ; //	asm	nop				
00DED:      	nop
            ; //_A8ADEC9C4_2626:;				
            _A8ADEC9C4_2626:
            ; //	asm	nop				
00DEE:      	nop
            ; //_A8ADEC9C4_2627:;				
            _A8ADEC9C4_2627:
            ; //	asm	nop				
00DEF:      	nop
            ; //_A8ADEC9C4_2628:;				
            _A8ADEC9C4_2628:
            ; //	asm	nop				
00DF0:      	nop
            ; //_A8ADEC9C4_2629:;				
            _A8ADEC9C4_2629:
            ; //	asm	nop				
00DF1:      	nop
            ; //_A8ADEC9C4_2630:;				
            _A8ADEC9C4_2630:
            ; //	asm	nop				
00DF2:      	nop
            ; //_A8ADEC9C4_2631:;				
            _A8ADEC9C4_2631:
            ; //	asm	nop				
00DF3:      	nop
            ; //_A8ADEC9C4_2632:;				
            _A8ADEC9C4_2632:
            ; //	asm	nop				
00DF4:      	nop
            ; //_A8ADEC9C4_2633:;				
            _A8ADEC9C4_2633:
            ; //	asm	nop				
00DF5:      	nop
            ; //_A8ADEC9C4_2634:;				
            _A8ADEC9C4_2634:
            ; //	asm	nop				
00DF6:      	nop
            ; //_A8ADEC9C4_2635:;				
            _A8ADEC9C4_2635:
            ; //	asm clr io[0x09].b14;			
00DF7:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2636:;				
            _A8ADEC9C4_2636:
            ; //	asm	nop				
00DF8:      	nop
            ; //_A8ADEC9C4_2637:;				
            _A8ADEC9C4_2637:
            ; //	asm	nop				
00DF9:      	nop
            ; //_A8ADEC9C4_2638:;				
            _A8ADEC9C4_2638:
            ; //	asm	nop				
00DFA:      	nop
            ; //_A8ADEC9C4_2639:;				
            _A8ADEC9C4_2639:
            ; //	asm set io[0x09].b14;			
00DFB:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2640:;				
            _A8ADEC9C4_2640:
            ; //	asm	nop				
00DFC:      	nop
            ; //_A8ADEC9C4_2641:;				
            _A8ADEC9C4_2641:
            ; //	asm	nop				
00DFD:      	nop
            ; //_A8ADEC9C4_2642:;				
            _A8ADEC9C4_2642:
            ; //	asm	nop				
00DFE:      	nop
            ; //_A8ADEC9C4_2643:;				
            _A8ADEC9C4_2643:
            ; //	asm	nop				
00DFF:      	nop
            ; //_A8ADEC9C4_2644:;				
            _A8ADEC9C4_2644:
            ; //	asm	nop				
00E00:      	nop
            ; //_A8ADEC9C4_2645:;				
            _A8ADEC9C4_2645:
            ; //	asm	nop				
00E01:      	nop
            ; //_A8ADEC9C4_2646:;				
            _A8ADEC9C4_2646:
            ; //	asm	nop				
00E02:      	nop
            ; //_A8ADEC9C4_2647:;				
            _A8ADEC9C4_2647:
            ; //	asm	nop				
00E03:      	nop
            ; //_A8ADEC9C4_2648:;				
            _A8ADEC9C4_2648:
            ; //	asm	nop				
00E04:      	nop
            ; //_A8ADEC9C4_2649:;				
            _A8ADEC9C4_2649:
            ; //	asm	nop				
00E05:      	nop
            ; //_A8ADEC9C4_2650:;				
            _A8ADEC9C4_2650:
            ; //	asm	nop				
00E06:      	nop
            ; //_A8ADEC9C4_2651:;				
            _A8ADEC9C4_2651:
            ; //	asm	nop				
00E07:      	nop
            ; //_A8ADEC9C4_2652:;				
            _A8ADEC9C4_2652:
            ; //	asm clr io[0x09].b14;			
00E08:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2653:;				
            _A8ADEC9C4_2653:
            ; //	asm	nop				
00E09:      	nop
            ; //_A8ADEC9C4_2654:;				
            _A8ADEC9C4_2654:
            ; //	asm	nop				
00E0A:      	nop
            ; //_A8ADEC9C4_2655:;				
            _A8ADEC9C4_2655:
            ; //	asm	nop				
00E0B:      	nop
            ; //_A8ADEC9C4_2656:;				
            _A8ADEC9C4_2656:
            ; //	asm set io[0x09].b14;			
00E0C:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2657:;				
            _A8ADEC9C4_2657:
            ; //	asm	nop				
00E0D:      	nop
            ; //_A8ADEC9C4_2658:;				
            _A8ADEC9C4_2658:
            ; //	asm	nop				
00E0E:      	nop
            ; //_A8ADEC9C4_2659:;				
            _A8ADEC9C4_2659:
            ; //	asm	nop				
00E0F:      	nop
            ; //_A8ADEC9C4_2660:;				
            _A8ADEC9C4_2660:
            ; //	asm	nop				
00E10:      	nop
            ; //_A8ADEC9C4_2661:;				
            _A8ADEC9C4_2661:
            ; //	asm	nop				
00E11:      	nop
            ; //_A8ADEC9C4_2662:;				
            _A8ADEC9C4_2662:
            ; //	asm	nop				
00E12:      	nop
            ; //_A8ADEC9C4_2663:;				
            _A8ADEC9C4_2663:
            ; //	asm	nop				
00E13:      	nop
            ; //_A8ADEC9C4_2664:;				
            _A8ADEC9C4_2664:
            ; //	asm	nop				
00E14:      	nop
            ; //_A8ADEC9C4_2665:;				
            _A8ADEC9C4_2665:
            ; //	asm	nop				
00E15:      	nop
            ; //_A8ADEC9C4_2666:;				
            _A8ADEC9C4_2666:
            ; //	asm	nop				
00E16:      	nop
            ; //_A8ADEC9C4_2667:;				
            _A8ADEC9C4_2667:
            ; //	asm	nop				
00E17:      	nop
            ; //_A8ADEC9C4_2668:;				
            _A8ADEC9C4_2668:
            ; //	asm	nop				
00E18:      	nop
            ; //_A8ADEC9C4_2669:;				
            _A8ADEC9C4_2669:
            ; //	asm clr io[0x09].b14;			
00E19:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2670:;				
            _A8ADEC9C4_2670:
            ; //	asm	nop				
00E1A:      	nop
            ; //_A8ADEC9C4_2671:;				
            _A8ADEC9C4_2671:
            ; //	asm	nop				
00E1B:      	nop
            ; //_A8ADEC9C4_2672:;				
            _A8ADEC9C4_2672:
            ; //	asm	nop				
00E1C:      	nop
            ; //_A8ADEC9C4_2673:;				
            _A8ADEC9C4_2673:
            ; //	asm set io[0x09].b14;			
00E1D:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2674:;				
            _A8ADEC9C4_2674:
            ; //	asm	nop				
00E1E:      	nop
            ; //_A8ADEC9C4_2675:;				
            _A8ADEC9C4_2675:
            ; //	asm	nop				
00E1F:      	nop
            ; //_A8ADEC9C4_2676:;				
            _A8ADEC9C4_2676:
            ; //	asm	nop				
00E20:      	nop
            ; //_A8ADEC9C4_2677:;				
            _A8ADEC9C4_2677:
            ; //	asm	nop				
00E21:      	nop
            ; //_A8ADEC9C4_2678:;				
            _A8ADEC9C4_2678:
            ; //	asm	nop				
00E22:      	nop
            ; //_A8ADEC9C4_2679:;				
            _A8ADEC9C4_2679:
            ; //	asm	nop				
00E23:      	nop
            ; //_A8ADEC9C4_2680:;				
            _A8ADEC9C4_2680:
            ; //	asm	nop				
00E24:      	nop
            ; //_A8ADEC9C4_2681:;				
            _A8ADEC9C4_2681:
            ; //	asm	nop				
00E25:      	nop
            ; //_A8ADEC9C4_2682:;				
            _A8ADEC9C4_2682:
            ; //	asm	nop				
00E26:      	nop
            ; //_A8ADEC9C4_2683:;				
            _A8ADEC9C4_2683:
            ; //	asm	nop				
00E27:      	nop
            ; //_A8ADEC9C4_2684:;				
            _A8ADEC9C4_2684:
            ; //	asm	nop				
00E28:      	nop
            ; //_A8ADEC9C4_2685:;				
            _A8ADEC9C4_2685:
            ; //	asm	nop				
00E29:      	nop
            ; //_A8ADEC9C4_2686:;				
            _A8ADEC9C4_2686:
            ; //	asm clr io[0x09].b14;			
00E2A:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2687:;				
            _A8ADEC9C4_2687:
            ; //	asm	nop				
00E2B:      	nop
            ; //_A8ADEC9C4_2688:;				
            _A8ADEC9C4_2688:
            ; //	asm	nop				
00E2C:      	nop
            ; //_A8ADEC9C4_2689:;				
            _A8ADEC9C4_2689:
            ; //	asm	nop				
00E2D:      	nop
            ; //_A8ADEC9C4_2690:;				
            _A8ADEC9C4_2690:
            ; //	asm set io[0x09].b14;			
00E2E:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2691:;				
            _A8ADEC9C4_2691:
            ; //	asm	nop				
00E2F:      	nop
            ; //_A8ADEC9C4_2692:;				
            _A8ADEC9C4_2692:
            ; //	asm	nop				
00E30:      	nop
            ; //_A8ADEC9C4_2693:;				
            _A8ADEC9C4_2693:
            ; //	asm	nop				
00E31:      	nop
            ; //_A8ADEC9C4_2694:;				
            _A8ADEC9C4_2694:
            ; //	asm	nop				
00E32:      	nop
            ; //_A8ADEC9C4_2695:;				
            _A8ADEC9C4_2695:
            ; //	asm	nop				
00E33:      	nop
            ; //_A8ADEC9C4_2696:;				
            _A8ADEC9C4_2696:
            ; //	asm	nop				
00E34:      	nop
            ; //_A8ADEC9C4_2697:;				
            _A8ADEC9C4_2697:
            ; //	asm	nop				
00E35:      	nop
            ; //_A8ADEC9C4_2698:;				
            _A8ADEC9C4_2698:
            ; //	asm	nop				
00E36:      	nop
            ; //_A8ADEC9C4_2699:;				
            _A8ADEC9C4_2699:
            ; //	asm	nop				
00E37:      	nop
            ; //_A8ADEC9C4_2700:;				
            _A8ADEC9C4_2700:
            ; //	asm	nop				
00E38:      	nop
            ; //_A8ADEC9C4_2701:;				
            _A8ADEC9C4_2701:
            ; //	asm	nop				
00E39:      	nop
            ; //_A8ADEC9C4_2702:;				
            _A8ADEC9C4_2702:
            ; //	asm	nop				
00E3A:      	nop
            ; //_A8ADEC9C4_2703:;				
            _A8ADEC9C4_2703:
            ; //	asm clr io[0x09].b14;			
00E3B:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2704:;				
            _A8ADEC9C4_2704:
            ; //	asm	nop				
00E3C:      	nop
            ; //_A8ADEC9C4_2705:;				
            _A8ADEC9C4_2705:
            ; //	asm	nop				
00E3D:      	nop
            ; //_A8ADEC9C4_2706:;				
            _A8ADEC9C4_2706:
            ; //	asm	nop				
00E3E:      	nop
            ; //_A8ADEC9C4_2707:;				
            _A8ADEC9C4_2707:
            ; //	asm set io[0x09].b14;			
00E3F:      	set io[0x09].b14//
            ; //_A8ADEC9C4_2708:;				
            _A8ADEC9C4_2708:
            ; //	asm	nop				
00E40:      	nop
            ; //_A8ADEC9C4_2709:;				
            _A8ADEC9C4_2709:
            ; //	asm	nop				
00E41:      	nop
            ; //_A8ADEC9C4_2710:;				
            _A8ADEC9C4_2710:
            ; //	asm	nop				
00E42:      	nop
            ; //_A8ADEC9C4_2711:;				
            _A8ADEC9C4_2711:
            ; //	asm	nop				
00E43:      	nop
            ; //_A8ADEC9C4_2712:;				
            _A8ADEC9C4_2712:
            ; //	asm	nop				
00E44:      	nop
            ; //_A8ADEC9C4_2713:;				
            _A8ADEC9C4_2713:
            ; //	asm	nop				
00E45:      	nop
            ; //_A8ADEC9C4_2714:;				
            _A8ADEC9C4_2714:
            ; //	asm	nop				
00E46:      	nop
            ; //_A8ADEC9C4_2715:;				
            _A8ADEC9C4_2715:
            ; //	asm	nop				
00E47:      	nop
            ; //_A8ADEC9C4_2716:;				
            _A8ADEC9C4_2716:
            ; //	asm	nop				
00E48:      	nop
            ; //_A8ADEC9C4_2717:;				
            _A8ADEC9C4_2717:
            ; //	asm	nop				
00E49:      	nop
            ; //_A8ADEC9C4_2718:;				
            _A8ADEC9C4_2718:
            ; //	asm	nop				
00E4A:      	nop
            ; //_A8ADEC9C4_2719:;				
            _A8ADEC9C4_2719:
            ; //	asm	nop				
00E4B:      	nop
            ; //_A8ADEC9C4_2720:;				
            _A8ADEC9C4_2720:
            ; //	asm clr io[0x09].b14;			
00E4C:      	clr io[0x09].b14//
            ; //_A8ADEC9C4_2721:;				
            _A8ADEC9C4_2721:
            ; //	asm	nop				
00E4D:      	nop
            ; //_A8ADEC9C4_2722:;				
            _A8ADEC9C4_2722:
            ; //	asm	nop				
00E4E:      	nop
            ; //_A8ADEC9C4_2723:;				
            _A8ADEC9C4_2723:
            ; //	asm	nop				
00E4F:      	nop
            ; //_A8ADEC9C4_2724:;				
            _A8ADEC9C4_2724:
            ; //	goto LD63FD439_92;			
00E50:      	pch =	LD63FD439_92
00E51:      	ljmp	LD63FD439_92
            ; //LD63FD439_100:;					
            LD63FD439_100:
            ; //_A8ADEC9C4_2725:;				
            _A8ADEC9C4_2725:
            ; //	goto LD63FD439_92;			
00E52:      	pch =	LD63FD439_92
00E53:      	ljmp	LD63FD439_92
            ; //	goto LD63FD439_92;			
00E54:      	pch =	LD63FD439_92
00E55:      	ljmp	LD63FD439_92
            ; //LD63FD439_93:;					
            LD63FD439_93:
            ; //	sCX	= sAX;				
00E56:      	AR	= AX
00E57:      	CX	= AR
            ; //	sAX	= 0x0000;			
00E58:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00E59:      	pch	= sfx_CMP_AX_CX_JE
00E5A:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_101;	
00E5B:      	if NZ	jmp LD63FD439_101
            ; //	goto LD63FD439_94;			
00E5C:      	pch =	LD63FD439_94
00E5D:      	ljmp	LD63FD439_94
            ; //LD63FD439_101:;					
            LD63FD439_101:
            ; //	sAX	= 0x0001;			
00E5E:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00E5F:      	pch	= sfx_CMP_AX_CX_JE
00E60:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_102;	
00E61:      	if NZ	jmp LD63FD439_102
            ; //	goto LD63FD439_95;			
00E62:      	pch =	LD63FD439_95
00E63:      	ljmp	LD63FD439_95
            ; //LD63FD439_102:;					
            LD63FD439_102:
            ; //	sAX	= 0x0003;			
00E64:      	AX	= 0x03
            ; //	sfx_CMP_AX_CX_JE();			
00E65:      	pch	= sfx_CMP_AX_CX_JE
00E66:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_103;	
00E67:      	if NZ	jmp LD63FD439_103
            ; //	goto LD63FD439_96;			
00E68:      	pch =	LD63FD439_96
00E69:      	ljmp	LD63FD439_96
            ; //LD63FD439_103:;					
            LD63FD439_103:
            ; //	sAX	= 0x0002;			
00E6A:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
00E6B:      	pch	= sfx_CMP_AX_CX_JE
00E6C:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_104;	
00E6D:      	if NZ	jmp LD63FD439_104
            ; //	goto LD63FD439_97;			
00E6E:      	pch =	LD63FD439_97
00E6F:      	ljmp	LD63FD439_97
            ; //LD63FD439_104:;					
            LD63FD439_104:
            ; //	sAX	= 0x0005;			
00E70:      	AX	= 0x05
            ; //	sfx_CMP_AX_CX_JE();			
00E71:      	pch	= sfx_CMP_AX_CX_JE
00E72:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_105;	
00E73:      	if NZ	jmp LD63FD439_105
            ; //	goto LD63FD439_98;			
00E74:      	pch =	LD63FD439_98
00E75:      	ljmp	LD63FD439_98
            ; //LD63FD439_105:;					
            LD63FD439_105:
            ; //	sAX	= 0x0004;			
00E76:      	AX	= 0x04
            ; //	sfx_CMP_AX_CX_JE();			
00E77:      	pch	= sfx_CMP_AX_CX_JE
00E78:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_106;	
00E79:      	if NZ	jmp LD63FD439_106
            ; //	goto LD63FD439_99;			
00E7A:      	pch =	LD63FD439_99
00E7B:      	ljmp	LD63FD439_99
            ; //LD63FD439_106:;					
            LD63FD439_106:
            ; //	goto	LD63FD439_100;			
00E7C:      	pch =	LD63FD439_100
00E7D:      	ljmp	LD63FD439_100
            ; //LD63FD439_92:;					
            LD63FD439_92:
            ; //	goto LD63FD439_90;			
00E7E:      	pch =	LD63FD439_90
00E7F:      	ljmp	LD63FD439_90
            ; //LD63FD439_89:;					
            LD63FD439_89:
            ; //_A8ADEC9C4_2726:;				
            _A8ADEC9C4_2726:
            ; //_A8ADEC9C4_2727:;				
            _A8ADEC9C4_2727:
            ; //	asm clr io[0x09].b14;			
00E80:      	clr io[0x09].b14//
            ; //LD63FD439_86:;					
            LD63FD439_86:
            ; //_A8ADEC9C4_2728:;				
            _A8ADEC9C4_2728:
            ; //	return;					
00E81:      	AR	= 1
00E82:      	BP	+= AR
00E83:      	pop	AR
00E84:      	rm[BP_SAVE]	= AR
00E85:      	rets
            ; //_WS_TRSF_color_setE1CC300C_end:;		
            _WS_TRSF_color_setE1CC300C_end:
            ; //_A8ADEC9C4_2729:;				
            _A8ADEC9C4_2729:
            ; //}
            ; //
            ; //void _WS_RefreshAD7B99B1()			
            _WS_RefreshAD7B99B1:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00E86:      	AR	= rm[BP_SAVE]
00E87:      	push	AR
00E88:      	AR	= BP
00E89:      	rm[BP_SAVE]	= AR
00E8A:      	AR	 = -1
00E8B:      	BP	+= AR
            ; //_A8ADEC9C4_2730:;				
            _A8ADEC9C4_2730:
            ; //_A8ADEC9C4_2731:;				
            _A8ADEC9C4_2731:
            ; //	_i_1_2+0	= 0x00;			
00E8C:      	I1	= rm[BP_SAVE]
00E8D:      	AR	= 0x00
00E8E:      	rm[I1]	= AR
            ; //LD63FD439_108:;					
            LD63FD439_108:
            ; //	sSI	= (int)&_i_1_2;			
00E8F:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E90:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00E91:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00E92:      	pch	= sfx_CMP_AX_CX_JBE
00E93:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_112;	
00E94:      	if ZR	jmp LD63FD439_112
            ; //	goto	LD63FD439_110;			
00E95:      	pch =	LD63FD439_110
00E96:      	ljmp	LD63FD439_110
            ; //LD63FD439_112:;					
            LD63FD439_112:
            ; //	goto LD63FD439_109;			
00E97:      	pch =	LD63FD439_109
00E98:      	ljmp	LD63FD439_109
            ; //LD63FD439_111:;					
            LD63FD439_111:
            ; //	sSI	= (int)&_i_1_2;			
00E99:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E9A:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00E9B:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00E9C:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00E9D:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00E9E:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_108;			
00E9F:      	pch =	LD63FD439_108
00EA0:      	ljmp	LD63FD439_108
            ; //LD63FD439_109:;					
            LD63FD439_109:
            ; //	
            ; //_A8ADEC9C4_2732:;				
            _A8ADEC9C4_2732:
            ; //_A8ADEC9C4_2733:;				
            _A8ADEC9C4_2733:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00EA1:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00EA2:      	push	AX
            ; //	sSI	= (int)&_i_1_2;			
00EA3:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00EA4:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
00EA5:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
00EA6:      	pch	= sfx_IMUL_AX_CX
00EA7:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00EA8:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00EA9:      	AR	= CX
00EAA:      	AX	+= AR
            ; //	sSI	= sAX;				
00EAB:      	AR	= AX
00EAC:      	I1	= AR
            ; //	sAX	= *(__int16*)sSI++;		
00EAD:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00EAE:      	DX	= rm[I1--]
            ; //	PUSH(sAX);				
00EAF:      	push	AX
            ; //	_WS_Send24bits851C5C55(STACK[sSP + 0]);	
00EB0:      	pch	= _WS_Send24bits851C5C55
00EB1:      	lcall	_WS_Send24bits851C5C55
            ; //	RESTORESP(1);				
00EB2:      	pop	AR
            ; //	goto LD63FD439_111;			
00EB3:      	pch =	LD63FD439_111
00EB4:      	ljmp	LD63FD439_111
            ; //LD63FD439_110:;					
            LD63FD439_110:
            ; //_A8ADEC9C4_2734:;				
            _A8ADEC9C4_2734:
            ; //_A8ADEC9C4_2735:;				
            _A8ADEC9C4_2735:
            ; //	asm clr io[0x09].b14;			
00EB5:      	clr io[0x09].b14//
            ; //LD63FD439_107:;					
            LD63FD439_107:
            ; //_A8ADEC9C4_2736:;				
            _A8ADEC9C4_2736:
            ; //	return;					
00EB6:      	AR	= 1
00EB7:      	BP	+= AR
00EB8:      	pop	AR
00EB9:      	rm[BP_SAVE]	= AR
00EBA:      	rets
            ; //_WS_RefreshAD7B99B1_end:;			
            _WS_RefreshAD7B99B1_end:
            ; //_A8ADEC9C4_2737:;				
            _A8ADEC9C4_2737:
            ; //}
            ; //
            ; //void _WS_Key_RGBC5B96B6D()			
            _WS_Key_RGBC5B96B6D:
            ; //{
            ; //_A8ADEC9C4_2738:;				
            _A8ADEC9C4_2738:
            ; //	
            ; //_A8ADEC9C4_2739:;				
            _A8ADEC9C4_2739:
            ; //	asm I1 = LD63FD439_114+0;		
00EBB:      	I1 = LD63FD439_114+0//
            ; //	sAX	= *(__int16*)sSI;		
00EBC:      	AX	= rm[I1]
            ; //	goto LD63FD439_116;			
00EBD:      	pch =	LD63FD439_116
00EBE:      	ljmp	LD63FD439_116
            ; //LD63FD439_117:;					
            LD63FD439_117:
            ; //_A8ADEC9C4_2740:;				
            _A8ADEC9C4_2740:
            ; //_A8ADEC9C4_2741:;				
            _A8ADEC9C4_2741:
            ; //	sAX	= 0x0000;			
00EBF:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EC0:      	push	AX
            ; //	sAX	= 0x0003;			
00EC1:      	AX	= 0x03
            ; //	PUSH(sAX);				
00EC2:      	push	AX
            ; //	sAX	= 0x0000;			
00EC3:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EC4:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00EC5:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00EC6:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00EC7:      	AR	= 3
00EC8:      	BP	+= AR
            ; //_A8ADEC9C4_2742:;				
            _A8ADEC9C4_2742:
            ; //_A8ADEC9C4_2743:;				
            _A8ADEC9C4_2743:
            ; //	_WS_RefreshAD7B99B1();			
00EC9:      	pch	= _WS_RefreshAD7B99B1
00ECA:      	lcall	_WS_RefreshAD7B99B1
            ; //_A8ADEC9C4_2744:;				
            _A8ADEC9C4_2744:
            ; //_A8ADEC9C4_2745:;				
            _A8ADEC9C4_2745:
            ; //	sAX	= 0x0000;			
00ECB:      	AX	= 0x00
            ; //	PUSH(sAX);				
00ECC:      	push	AX
            ; //	sAX	= 0x0003;			
00ECD:      	AX	= 0x03
            ; //	PUSH(sAX);				
00ECE:      	push	AX
            ; //	sAX	= 0x0000;			
00ECF:      	AX	= 0x00
            ; //	PUSH(sAX);				
00ED0:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00ED1:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00ED2:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00ED3:      	AR	= 3
00ED4:      	BP	+= AR
            ; //_A8ADEC9C4_2746:;				
            _A8ADEC9C4_2746:
            ; //_A8ADEC9C4_2747:;				
            _A8ADEC9C4_2747:
            ; //	_WS_RefreshAD7B99B1();			
00ED5:      	pch	= _WS_RefreshAD7B99B1
00ED6:      	lcall	_WS_RefreshAD7B99B1
            ; //_A8ADEC9C4_2748:;				
            _A8ADEC9C4_2748:
            ; //	goto LD63FD439_115;			
00ED7:      	pch =	LD63FD439_115
00ED8:      	ljmp	LD63FD439_115
            ; //LD63FD439_118:;					
            LD63FD439_118:
            ; //_A8ADEC9C4_2749:;				
            _A8ADEC9C4_2749:
            ; //_A8ADEC9C4_2750:;				
            _A8ADEC9C4_2750:
            ; //	sAX	= 0x0000;			
00ED9:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EDA:      	push	AX
            ; //	sAX	= 0x0003;			
00EDB:      	AX	= 0x03
            ; //	PUSH(sAX);				
00EDC:      	push	AX
            ; //	sAX	= 0x0000;			
00EDD:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EDE:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00EDF:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00EE0:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00EE1:      	AR	= 3
00EE2:      	BP	+= AR
            ; //_A8ADEC9C4_2751:;				
            _A8ADEC9C4_2751:
            ; //_A8ADEC9C4_2752:;				
            _A8ADEC9C4_2752:
            ; //	_WS_RefreshAD7B99B1();			
00EE3:      	pch	= _WS_RefreshAD7B99B1
00EE4:      	lcall	_WS_RefreshAD7B99B1
            ; //_A8ADEC9C4_2753:;				
            _A8ADEC9C4_2753:
            ; //_A8ADEC9C4_2754:;				
            _A8ADEC9C4_2754:
            ; //	sAX	= 0x001F;			
00EE5:      	AX	= 0x1F
            ; //	PUSH(sAX);				
00EE6:      	push	AX
            ; //	sAX	= 0x0006;			
00EE7:      	AX	= 0x06
            ; //	PUSH(sAX);				
00EE8:      	push	AX
            ; //	sAX	= 0x0004;			
00EE9:      	AX	= 0x04
            ; //	PUSH(sAX);				
00EEA:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00EEB:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00EEC:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00EED:      	AR	= 3
00EEE:      	BP	+= AR
            ; //_A8ADEC9C4_2755:;				
            _A8ADEC9C4_2755:
            ; //_A8ADEC9C4_2756:;				
            _A8ADEC9C4_2756:
            ; //	_WS_RefreshAD7B99B1();			
00EEF:      	pch	= _WS_RefreshAD7B99B1
00EF0:      	lcall	_WS_RefreshAD7B99B1
            ; //_A8ADEC9C4_2757:;				
            _A8ADEC9C4_2757:
            ; //	goto LD63FD439_115;			
00EF1:      	pch =	LD63FD439_115
00EF2:      	ljmp	LD63FD439_115
            ; //LD63FD439_119:;					
            LD63FD439_119:
            ; //_A8ADEC9C4_2758:;				
            _A8ADEC9C4_2758:
            ; //_A8ADEC9C4_2759:;				
            _A8ADEC9C4_2759:
            ; //	sAX	= 0x0000;			
00EF3:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EF4:      	push	AX
            ; //	sAX	= 0x0003;			
00EF5:      	AX	= 0x03
            ; //	PUSH(sAX);				
00EF6:      	push	AX
            ; //	sAX	= 0x0000;			
00EF7:      	AX	= 0x00
            ; //	PUSH(sAX);				
00EF8:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00EF9:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00EFA:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00EFB:      	AR	= 3
00EFC:      	BP	+= AR
            ; //_A8ADEC9C4_2760:;				
            _A8ADEC9C4_2760:
            ; //_A8ADEC9C4_2761:;				
            _A8ADEC9C4_2761:
            ; //	_WS_RefreshAD7B99B1();			
00EFD:      	pch	= _WS_RefreshAD7B99B1
00EFE:      	lcall	_WS_RefreshAD7B99B1
            ; //_A8ADEC9C4_2762:;				
            _A8ADEC9C4_2762:
            ; //_A8ADEC9C4_2763:;				
            _A8ADEC9C4_2763:
            ; //	sAX	= 0xFF00;			
00EFF:      	AX	= 0xFF00
            ; //	PUSH(sAX);				
00F01:      	push	AX
            ; //	sAX	= 0x000A;			
00F02:      	AX	= 0x0A
            ; //	PUSH(sAX);				
00F03:      	push	AX
            ; //	sAX	= 0x0007;			
00F04:      	AX	= 0x07
            ; //	PUSH(sAX);				
00F05:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00F06:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00F07:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00F08:      	AR	= 3
00F09:      	BP	+= AR
            ; //_A8ADEC9C4_2764:;				
            _A8ADEC9C4_2764:
            ; //_A8ADEC9C4_2765:;				
            _A8ADEC9C4_2765:
            ; //	_WS_RefreshAD7B99B1();			
00F0A:      	pch	= _WS_RefreshAD7B99B1
00F0B:      	lcall	_WS_RefreshAD7B99B1
            ; //_A8ADEC9C4_2766:;				
            _A8ADEC9C4_2766:
            ; //	goto LD63FD439_115;			
00F0C:      	pch =	LD63FD439_115
00F0D:      	ljmp	LD63FD439_115
            ; //	goto LD63FD439_115;			
00F0E:      	pch =	LD63FD439_115
00F0F:      	ljmp	LD63FD439_115
            ; //LD63FD439_116:;					
            LD63FD439_116:
            ; //	sCX	= sAX;				
00F10:      	AR	= AX
00F11:      	CX	= AR
            ; //	sAX	= 0x0000;			
00F12:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_U_JE();			
00F13:      	pch	= sfx_CMP_AX_CX_U_JE
00F14:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_120;	
00F15:      	if NZ	jmp LD63FD439_120
            ; //	goto LD63FD439_117;			
00F16:      	pch =	LD63FD439_117
00F17:      	ljmp	LD63FD439_117
            ; //LD63FD439_120:;					
            LD63FD439_120:
            ; //	sAX	= 0x0001;			
00F18:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_U_JE();			
00F19:      	pch	= sfx_CMP_AX_CX_U_JE
00F1A:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_121;	
00F1B:      	if NZ	jmp LD63FD439_121
            ; //	goto LD63FD439_118;			
00F1C:      	pch =	LD63FD439_118
00F1D:      	ljmp	LD63FD439_118
            ; //LD63FD439_121:;					
            LD63FD439_121:
            ; //	sAX	= 0x0002;			
00F1E:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_U_JE();			
00F1F:      	pch	= sfx_CMP_AX_CX_U_JE
00F20:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_122;	
00F21:      	if NZ	jmp LD63FD439_122
            ; //	goto LD63FD439_119;			
00F22:      	pch =	LD63FD439_119
00F23:      	ljmp	LD63FD439_119
            ; //LD63FD439_122:;					
            LD63FD439_122:
            ; //	goto	LD63FD439_115;			
00F24:      	pch =	LD63FD439_115
00F25:      	ljmp	LD63FD439_115
            ; //LD63FD439_115:;					
            LD63FD439_115:
            ; //_A8ADEC9C4_2767:;				
            _A8ADEC9C4_2767:
            ; //	asm I1 = LD63FD439_114+0;		
00F26:      	I1 = LD63FD439_114+0//
            ; //	sAX	= *(__int16*)sSI;		
00F27:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_114;		
00F28:      	I1	= LD63FD439_114
            ; //	PUSH(sAX);				
00F29:      	push	AX
            ; //	sAX	= 0x0001;			
00F2A:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
00F2B:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
00F2C:      	AR	= AX
00F2D:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
00F2E:      	rm[I1]	= CX
            ; //	sAX	= POP();			
00F2F:      	pop	AX
            ; //_A8ADEC9C4_2768:;				
            _A8ADEC9C4_2768:
            ; //	asm I1 = LD63FD439_114+0;		
00F30:      	I1 = LD63FD439_114+0//
            ; //	sAX	= *(__int16*)sSI;		
00F31:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
00F32:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JA();			
00F33:      	pch	= sfx_CMP_AX_CX_JA
00F34:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_124;	
00F35:      	if ZR	jmp LD63FD439_124
            ; //	goto	LD63FD439_123;			
00F36:      	pch =	LD63FD439_123
00F37:      	ljmp	LD63FD439_123
            ; //LD63FD439_124:;					
            LD63FD439_124:
            ; //_A8ADEC9C4_2769:;				
            _A8ADEC9C4_2769:
            ; //	LD63FD439_114+0	= 0x00;			
00F38:      	AR	= 0x00
00F39:      	rm[LD63FD439_114+0]	= AR
            ; //LD63FD439_123:;					
            LD63FD439_123:
            ; //_A8ADEC9C4_2770:;				
            _A8ADEC9C4_2770:
            ; //_A8ADEC9C4_2771:;				
            _A8ADEC9C4_2771:
            ; //_A8ADEC9C4_2772:;				
            _A8ADEC9C4_2772:
            ; //	sAX	= 0x0032;			
00F3A:      	AX	= 0x32
            ; //	PUSH(sAX);				
00F3B:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
00F3C:      	pch	= _delay6F9F34ED
00F3D:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
00F3E:      	pop	AR
            ; //LD63FD439_113:;					
            LD63FD439_113:
            ; //_A8ADEC9C4_2773:;				
            _A8ADEC9C4_2773:
            ; //	return;					
00F3F:      	rets
            ; //_WS_Key_RGBC5B96B6D_end:;			
            _WS_Key_RGBC5B96B6D_end:
            ; //_A8ADEC9C4_2774:;				
            _A8ADEC9C4_2774:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_WS2811_02F950F9_s(void)	
            ginit_code_WS2811_02F950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+0;
00F40:      	P1 = #ginit_seg_WS2811_02F950F9_s+0//
            ; //	asm I1 = LD63FD439_57;			
00F43:      	I1 = LD63FD439_57//
            ; //	sCX = 1;				
00F44:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00F45:      	pch	= sfx_GLOBALINIT
00F46:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+1;
00F47:      	P1 = #ginit_seg_WS2811_02F950F9_s+1//
            ; //	asm I1 = LD63FD439_114;			
00F4A:      	I1 = LD63FD439_114//
            ; //	sCX = 1;				
00F4B:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00F4C:      	pch	= sfx_GLOBALINIT
00F4D:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00F4E:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_WS2811_02F950F9_s[2] = {	
            ginit_seg_WS2811_02F950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
00F4F:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00F50:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> Start=========================
            
            
            ; ~~ IO for DSP
            
            
            ; ~~ --------------------------
            ; void ClrWatchDog(void)
            ;~ ClrWatchDog:
            	;~ io[0x1D]=	AR
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void dsi(void)
            ;~ dsi:
            	;~ clr		io[STATUS].b7
            	;~ nop
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void eni(void)
            ;~ eni:
            	;~ set		io[STATUS].b7
            	;~ rets
            
            
            ; ~~ --------------------------
            ; int get_SATV(long value)
            get_SATV:
00F51:      	AR=		BP
00F52:      	AR=		AR + 1		; ~~ value
00F53:      	I1=		AR
00F54:      	AR=		SATV
00F55:      	AR=		rm[I1++]
00F56:      	SATV=		AR
00F57:      	AR=		rm[I1++]
00F58:      	SATV=		AR
00F59:      	AR=		SATV
00F5A:      	AX=		AR
00F5B:      	rets
            
            #ifdef _MSPEECHDSP_
            
            set_ADPHD:
            get_ADPHD:
            set_ADPDAT:
            get_ADPDAT:
            	AX=		0
            	rets
            
            #else
            
            
            ; ~~ --------------------------
            ; void set_ADPHD(int value)
            set_ADPHD:
00F5C:      	AR=		BP
00F5D:      	AR=		AR + 1		; ~~ value
00F5E:      	I1=		AR
00F5F:      	ADPHD=		rm[I1]
00F60:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPHD(void)
            get_ADPHD:
00F61:      	AR=		ADPHD
00F62:      	AX=		AR
00F63:      	rets
            
            
            ; ~~ --------------------------
            ; void set_ADPDAT(int value)
            set_ADPDAT:
00F64:      	AR=		BP
00F65:      	AR=		AR + 1		; ~~ value
00F66:      	I1=		AR
00F67:      	ADPDAT=		rm[I1]
00F68:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPDAT(void)
            get_ADPDAT:
00F69:      	AR=		ADPDAT
00F6A:      	AX=		AR
00F6B:      	rets
            
            #endif
            
            
            
            ; ~~ --------------------------
            ; int get_ADPPCM(void)
            get_FLTI:
            get_ADPPCM:
00F6C:      	AR=		ADPPCM
00F6D:      	AX=		AR
00F6E:      	rets
            
            
            ; ~~ --------------------------
            ; int get_CBL(void)
            get_CBL:
00F6F:      	AR=		CBL
00F70:      	AX=		AR
00F71:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTO(void)
            get_FLTO:
00F72:      	AR=		FLTO
00F73:      	AX=		AR
00F74:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTA(void)
            get_FLTA:
00F75:      	AR=		FLTA
00F76:      	AX=		AR
00F77:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTP(void)
            get_FLTP:
00F78:      	AR=		FLTP
00F79:      	AX=		AR
00F7A:      	rets
            
            ; ///////////////////////////////////////////////////////////////////////////
            ; ///////////////////////////////////////////////////////////////////////////
            
            ; ~~ --------------------------
            ; void set_UART(void)
            set_UART:
00F7B:      	set		io[STATUS].b5
00F7C:      	rets
            
            ; ~~ --------------------------
            ; void clr_UART(void)
            clr_UART:
00F7D:      	clr		io[STATUS].b5
00F7E:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIM(void)
            set_SPIM:
00F7F:      	set		io[STATUS].b8
00F80:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIM(void)
            clr_SPIM:
00F81:      	clr		io[STATUS].b8
00F82:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIS(void)
            set_SPIS:
00F83:      	set		io[STATUS].b9
00F84:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIS(void)
            clr_SPIS:
00F85:      	clr		io[STATUS].b9
00F86:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_IntPrWR:
00F87:      	set		io[STATUS].b11
00F88:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_IntPrWR:
00F89:      	clr		io[STATUS].b11
00F8A:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_SD:
00F8B:      	set		io[STATUS].b12
00F8C:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_SD:
00F8D:      	clr		io[STATUS].b12
00F8E:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVWR(void)
            set_IntVWR:
00F8F:      	set		io[STATUS].b13
00F90:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntVWR(void)
            clr_IntVWR:
00F91:      	clr		io[STATUS].b13
00F92:      	rets
            
            ; ~~ --------------------------
            ; void set_INTENA(int value)
            set_INTENA:
00F93:      	AR=		BP
00F94:      	AR=		AR + 1		; ~~ value
00F95:      	I1=		AR
00F96:      	AR=		rm[I1]
00F97:      	io[INTENA]=	AR
00F98:      	rets
            
            ; ~~ --------------------------
            ; int get_INTENA(int value)
            get_INTENA:
00F99:      	AR=		io[INTENA]
00F9A:      	AX=		AR
00F9B:      	rets
            
            ; ~~ --------------------------
            ; void set_INTREQ(int value)
            set_INTREQ:
00F9C:      	AR=		BP
00F9D:      	AR=		AR + 1		; ~~ value
00F9E:      	I1=		AR
00F9F:      	AR=		rm[I1]
00FA0:      	io[INTREQ]	=AR
00FA1:      	rets
            
            ; ~~ --------------------------
            ; int get_INTREQ(int value)
            get_INTREQ:
00FA2:      	AR=		io[INTREQ]
00FA3:      	AX=		AR
00FA4:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVect(int value)
            set_IntVect:
00FA5:      	AR=		BP
00FA6:      	AR=		AR + 1		; ~~ value
00FA7:      	I1=		AR
00FA8:      	AR=		rm[I1]
00FA9:      	io[IntVect]	=AR
00FAA:      	rets
            
            ; ~~ --------------------------
            ; int get_IntVect(int value)
            get_IntVect:
00FAB:      	AR=		io[IntVect]
00FAC:      	AX=		AR
00FAD:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PA(int value)
            get_IOC_PA:
00FAE:      	AR=		io[IOC_PA]
00FAF:      	AX=		AR
00FB0:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PB(int value)
            get_IOC_PB:
00FB1:      	AR=		io[IOC_PB]
00FB2:      	AX=		AR
00FB3:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PC(int value)
            get_IOC_PC:
00FB4:      	AR=		io[IOC_PC]
00FB5:      	AX=		AR
00FB6:      	rets
            
            ; ~~ --------------------------
            ; int get_PortA(int value)
            get_PortA:
00FB7:      	AR=		io[PortA]
00FB8:      	AX=		AR
00FB9:      	rets
            
            ; ~~ --------------------------
            ; int get_PortB(int value)
            get_PortB:
00FBA:      	AR=		io[PortB]
00FBB:      	AX=		AR
00FBC:      	rets
            
            
            ; ~~ --------------------------
            ; int get_PortC(int value)
            get_PortC:
00FBD:      	AR=		io[PortC]
00FBE:      	AX=		AR
00FBF:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_CTL(int value)
            set_SPI_CTL:
00FC0:      	AR=		BP
00FC1:      	AR=		AR + 1		; ~~ value
00FC2:      	I1=		AR
00FC3:      	AR=		rm[I1]
00FC4:      	io[SPI_CTL]=	AR
00FC5:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_CTL(int value)
            get_SPI_CTL:
00FC6:      	AR=		io[SPI_CTL]
00FC7:      	AX=		AR
00FC8:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_DAT(int value)
            set_SPI_DAT:
00FC9:      	AR=		BP
00FCA:      	AR=		AR + 1		; ~~ value
00FCB:      	I1=		AR
00FCC:      	AR=		rm[I1]
00FCD:      	io[SPI_DAT]=	AR
00FCE:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_DAT(int value)
            get_SPI_DAT:
00FCF:      	AR=		io[SPI_DAT]
00FD0:      	AX=		AR
00FD1:      	rets
            
            
            ; ~~ --------------------------
            ; void set_MISC(int value)
            set_MISC:
00FD2:      	AR=		BP
00FD3:      	AR=		AR + 1		; ~~ value
00FD4:      	I1=		AR
00FD5:      	AR=		rm[I1]
            	;~ io[0x1C]	=AR
00FD6:      	rets
            
            ; ~~ --------------------------
            ; int get_MISC(int value)
            get_MISC:
00FD7:      	AR=		io[MISC]
00FD8:      	AX=		AR
00FD9:      	rets
            
            ; ~~ --------------------------
            ; int get_Real_T(int value)
            get_Real_T:
            	;~ AR=		io[0x1D]
00FDA:      	AX=		AR
00FDB:      	rets
            
            
            ; ~~ --------------------------
            ; int get_MACOP(void)
            get_MACOP:
00FDC:      	AR=		MACOP
00FDD:      	AX=		AR
00FDE:      	rets
            
            
            ; ~~ --------------------------
            ; void set_INTMASK(int value)
            ; set_INTMASK:
            	; AR=			BP
            	; AR=			AR + 1		; ~~ value
            	; I1=			AR
            	; AR=			rm[I1]
            	; io[INTMASK]=AR
            	; rets
            
            ; ~~ --------------------------
            ; int get_INTMASK(int value)
            ; get_INTMASK:
            	; AR=			io[INTMASK]
            	; AX=			AR
            	; rets
            
            ; ~~ --------------------------
            ; int vXCHG(int value)
            vXCHG:
00FDF:      	AR=		BP
00FE0:      	AR=		AR + 1
00FE1:      	I1=		AR
00FE2:      	AR=		rm[I1]
00FE3:      	xchg		AR
00FE4:      	AX=		AR
00FE5:      	rets
            
            ; ~~ --------------------------
            ; void cpuHalt(void)
            cpuHalt:
00FE6:      	halt
            
            
            #ifdef _MFDSP_
            
            ; ~~ --------------------------
            ; void setSystemSpeed(int value)
            set_SystemSpeed:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPEED]=	AR
            	rets
            
            
            ; ~~ --------------------------
            ; void set_SD_CTL(int value)
            set_SD_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_CTL(int value)
            get_SD_CTL:
            	AR=		io[SD_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_DAT(int value)
            set_SD_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_DAT(void)
            get_SD_DAT:
            	AR=		io[SD_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_RSP(int value)
            set_SD_RSP:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_RSP]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_RSP(int value)
            get_SD_RSP:
            	AR=		io[SD_RSP]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_CTL(int value)
            set_UART_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_CTL(int value)
            get_UART_CTL:
            	AR=		io[UART_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_DAT(int value)
            set_UART_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_DAT(int value)
            get_UART_DAT:
            	AR=		io[UART_DAT]
            	AX=		AR
            	rets
            
            
            ; By Tsao	20161103
            
            ; ~~ --------------------------
            ; void set_ADH_CFG0(int value)
            set_ADH_CFG0:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG0]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG0(void)
            get_ADH_CFG0:
            	AR=		io[ADH_CFG0]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_ADH_CFG1(int value)
            set_ADH_CFG1:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG1]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG1(void)
            get_ADH_CFG1:
            	AR=		io[ADH_CFG1]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_DO(void)
            get_ADH_DO:
            	AR=		io[ADH_DO]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_CTL(int value)
            set_SPIS_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_CTL(int value)
            get_SPIS_CTL:
            	AR=		io[SPIS_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_DAT(int value)
            set_SPIS_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_DAT(int value)
            get_SPIS_DAT:
            	AR=		io[SPIS_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_GreenMode(int value)
            set_GreenMode:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[GREEN]=	AR
            	rets
            
            ; ~~ --------------------------
            ; void cpuStall(int value)
            cpuStall:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SLEEP]=	AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_CTL:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_CTL]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_CTL:
            	AR=		io[SPI_DMA_CTL]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_RADR:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_RADR]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_RADR:
            	AR=		io[SPI_DMA_RADR]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_DMANUM:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[0x55]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_DMANUM:
            	AR=		io[SPI_DMA_DMANUM]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            #endif
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_I0:
00FE7:      	AX=		rm[I0]
00FE8:      	rets
            
            read_I0P:
00FE9:      	AX=		rm[I0++]
00FEA:      	rets
            
            read_I0P2:
00FEB:      	AX=		rm[I0++2]
00FEC:      	rets
            
            read_I0M:
00FED:      	AX=		rm[I0--]
00FEE:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_I0:
00FEF:      	AR=		I0
00FF0:      	AX=		AR
00FF1:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_P0:
00FF2:      	AX=		pm[P0]
00FF3:      	rets
            
            read_P0P:
00FF4:      	AX=		pm[P0++]
00FF5:      	rets
            
            read_P0M:
00FF6:      	AX=		pm[P0--]
00FF7:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_P0:
00FF8:      	AR=		P0
00FF9:      	AX=		AR
00FFA:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            FA:
00FFB:      	AX=		1
00FFC:      	if FA jmp	@fa_label_1504
00FFD:      	AX=		0
            @fa_label_1504:
00FFE:      	rets
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> Start=========================
            _lptr_read:
00FFF:      	AR=		DX
01000:      	test		AR.b11
01001:      	if ZR jmp	@_lptr_read_label_1510
            
01002:      	P1.hh=		AR
01003:      	AR=		AX
01004:      	P1=		AR
01005:      	AX=		pm[P1]
01006:      	P1.hh=		0
01007:      	rets
            
            @_lptr_read_label_1510:
            
01008:      	AR=		AX
01009:      	I1=		AR
0100A:      	AX=		rm[I1]
0100B:      	rets
            
            
            _lptr_read32:
0100C:      	AR=		DX
0100D:      	test		AR.b11
0100E:      	if ZR jmp	@_lptr_read_label_1510_32
            
0100F:      	P1.hh=		AR
01010:      	AR=		AX
01011:      	P1=		AR
01012:      	AX=		pm[P1++]
01013:      	DX=		pm[P1]
01014:      	P1.hh=		0
01015:      	rets
            
            @_lptr_read_label_1510_32:
            
01016:      	AR=		AX
01017:      	I1=		AR
01018:      	AX=		rm[I1++]
01019:      	DX=		rm[I1]
0101A:      	rets
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> Start=========================
            
            
            _ClearTickCount5DDE4003:
            #ifdef _MFDSP_
            	set		io[MISC].b8
            #else
0101B:      	set		io[MISC].b7
            #endif
0101C:      	set		io[MISC].b15
            	
0101D:      	io[REAL_T]=	AR
0101E:      	AR=		io[REAL_T]
0101F:      	AR=		io[REAL_T]
01020:      	io[REAL_T]=	AR
01021:      	rets
            
            ; -----------------------------------------------
            
            _GetTickCount18DC070C:
01022:      	AX=		0xFFF0
            @gettickcount_loop_1000:
01024:      	io[ClrWDT]=	AR
01025:      	AR=		io[REAL_T]
01026:      	AR=		AR & AX
01027:      	SF=		AR - AX
01028:      	if ZR jmp	@gettickcount_loop_1000
01029:      	AX=		AR
0102A:      	AR=		io[REAL_T]
0102B:      	DX=		AR
0102C:      	rets
            
            	
            ; -----------------------------------------------
            ; void delay(int ms)
            ;
            ; in:
            ;     BP + 1 - int ms
            ;
            ; -----------------------------------------------
            _delay6F9F34ED:
            ; {
0102D:      	AR=		BP
0102E:      	AR=		AR + 1		; ~~ port
0102F:      	I1=		AR
            
            	; unsigned long tick;
            	; unsigned long msr;
            
            	; ~~ 1ms = 32768 ticks
            
            	; msr = (unsigned long)ms << 15;
01030:      		R0=		0
01031:      		R1=		rm[I1]
01032:      		clr		C
01033:      		src		R1, 1
01034:      		src		R0, 1
            	
            	; tick = GetTickCount();
01035:      		call		_GetTickCount18DC070C
01036:      		AR=		AX
01037:      		CX=		AR
01038:      		AR=		DX
01039:      		BX=		AR
            	
            	; while((GetTickCount() - tick) < msr);
            	@delay_loop_1024:
0103A:      		call		_GetTickCount18DC070C
0103B:      		AR=		CX
0103C:      		AX=		AX - AR
0103D:      		AR=		BX
0103E:      		DX=		DX - AR + C - 1
0103F:      		AR=		R0
01040:      		AX=		AX - AR
01041:      		AR=		R1
01042:      		DX=		DX - AR + C - 1
01043:      		AR=		0
01044:      		AR=		AR - 0 + C - 1
01045:      		if AN jmp	@delay_loop_1024
            
01046:      	rets
            ; }
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> Start=========================
            ; .\lib\libsubb3\sub3_cshell.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3_cshell_257767F9_s(void)
            ginit_code_sub3_cshell_257767F9_s:
            ; //{
            ; //	return;					
01047:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //	nop
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> End=========================
            
            ;
            #LINKOBJ ".\LIB\LIBSUBB3\SBB3_CH0DECV05.OBJ"
            ;
            
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> Start=========================
            
            
            #ifdef _MSPEECHDSP_
            
            Subb3_Init:
            	PCH=            SDSP_Sbb3_Ch0InitV05
            	lcall           SDSP_Sbb3_Ch0InitV05
            	rets
            
            Subb3_Dec:
            	PCH=		SDSP_Sbb3_Ch0decV05
            	lcall		SDSP_Sbb3_Ch0decV05
                    AX=		0
                    if NZ jmp	@sdsp_sbb2_ch0dec_a
                    AX=		1
            @sdsp_sbb2_ch0dec_a:
            	rets
            	
            #else
            
            Subb3_Init:
03390:      	PCH=            Sbb3_Ch0InitV05
03391:      	lcall           Sbb3_Ch0InitV05
03392:      	rets
            
            Subb3_Dec:
03393:      	PCH=		Sbb3_Ch0decV05
03394:      	lcall		Sbb3_Ch0decV05
03395:              AX=		0
03396:              if NZ jmp	@sdsp_sbb2_ch0dec_a
03397:              AX=		1
            @sdsp_sbb2_ch0dec_a:
03398:      	rets
            	
            #endif
            
            
            
            	
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> End=========================
            
            ;=========================Include <DEPS\B7AD0F15_GINIT.S.CODE.ASM> Start=========================
            ; B7AD0F15_ginit.s.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code(void)			
            ginit_code:
            ; //{
            ; //	ginit_code_SUNB3_593950F9_s();		
03399:      	pch	= ginit_code_SUNB3_593950F9_s
0339A:      	lcall	ginit_code_SUNB3_593950F9_s
            ; //	ginit_code_global_6037E6D5_s();		
0339B:      	pch	= ginit_code_global_6037E6D5_s
0339C:      	lcall	ginit_code_global_6037E6D5_s
            ; //	ginit_code_sub3play_8ED4FA41_s();	
0339D:      	pch	= ginit_code_sub3play_8ED4FA41_s
0339E:      	lcall	ginit_code_sub3play_8ED4FA41_s
            ; //	ginit_code_WS2811_02F950F9_s();		
0339F:      	pch	= ginit_code_WS2811_02F950F9_s
033A0:      	lcall	ginit_code_WS2811_02F950F9_s
            ; //	ginit_code_sub3_cshell_257767F9_s();	
033A1:      	pch	= ginit_code_sub3_cshell_257767F9_s
033A2:      	lcall	ginit_code_sub3_cshell_257767F9_s
            ; //	return;					
033A3:      	rets
            ; //}
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\B7AD0F15_GINIT.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> Start=========================
            
            
            ; ~~ CRT0 support functions
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GLOBALINIT(void)
            ; void sfx_LOCALINIT(void)
            ;
            ; in:
            ;     I1	- pointer to SRAM initial value
            ;     P1	- pointer to PROM initial data
            ;     CX	- total count (word)
            ;
            ; out:
            ;     none
            ;
            ; --------------------------------------------
            sfx_GLOBALINIT:
            sfx_LOCALINIT:
033A4:      	P1.hh=		0
033A5:      	jmp		@glinit_label_1409
            @glinit_loop_1409:
033A6:      	AR=		pm[P1++]
033A7:      	rm[I1++]=	AR
            @glinit_label_1409:
033A8:      	loop		@glinit_loop_1409
033A9:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MUL_AX_CX(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MUL_AX_CX:
            
033AA:      	AR=		AX
033AB:      	MX=		AR
033AC:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033AD:      	MACOP=		3
033AE:      	MR=		MX * AR
            #endif
            
033AF:      	AR=		MR0
033B0:      	AX=		AR
033B1:      	AR=		MR1
033B2:      	DX=		AR
033B3:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMUL_AX_CX(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMUL_AX_CX:
            
033B4:      	AR=		AX
033B5:      	MX=		AR
033B6:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
033B7:      	MACOP=		0
033B8:      	MR=		MX * AR
            #endif
            
033B9:      	AR=		MR0
033BA:      	AX=		AR
033BB:      	AR=		MR1
033BC:      	DX=		AR
033BD:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMULLONG(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMULLONG:
033BE:      	AR=		rm[BP_SAVE]
033BF:      	push		AR
033C0:      	AR=		BP
033C1:      	rm[BP_SAVE]=	AR
033C2:      	AR=		AR - 3
033C3:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
033C4:      	AR=		CX
033C5:      	MX=		AR
033C6:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033C7:      	MACOP=		3		; unsigned
033C8:      	MR=		MX * AR
            #endif
            
033C9:      	I1=		rm[BP_SAVE]
033CA:      	AR=		2
033CB:      	I1=		I1 - AR
033CC:      	rm[I1++]=	MR0
033CD:      	rm[I1++]=	MR1
033CE:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
033CF:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUS
            #else
033D0:      	MACOP=		1		; mx:unsigned / my:signed
033D1:      	MR=		MX * AR
            #endif
            
033D2:      	AR=		rm[I1]
033D3:      	AR=		AR + MR0
033D4:      	rm[I1++]=	AR
033D5:      	AR=		rm[I1]
033D6:      	AR=		AR + MR1 + C
033D7:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
033D8:      	AR=		BX
033D9:      	MX=		AR
033DA:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULSU
            #else
033DB:      	MACOP=		2		; mx:signed / my:unsigned
033DC:      	MR=		MX * AR
            #endif
            
033DD:      	AR=		rm[I1]
033DE:      	AR=		AR + MR0
033DF:      	rm[I1++]=	AR
033E0:      	AR=		rm[I1]
033E1:      	AR=		AR + MR1 + C
033E2:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
033E3:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
033E4:      	MACOP=		0		; mx:signed / my:signed
033E5:      	MR=		MX * AR
            #endif
            
033E6:      	AR=		rm[I1]
033E7:      	AR=		AR + MR0
033E8:      	rm[I1]=		AR
            
033E9:      	I1=		rm[BP_SAVE]
033EA:      	CX=		rm[I1--]
033EB:      	DX=		rm[I1--]
033EC:      	AX=		rm[I1]
            
033ED:      	AR=		3
033EE:      	BP=		BP + AR
033EF:      	pop		AR
033F0:      	rm[BP_SAVE]=	AR
            
033F1:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MULLONG(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MULLONG:
033F2:      	AR=		rm[BP_SAVE]
033F3:      	push		AR
033F4:      	AR=		BP
033F5:      	rm[BP_SAVE]=	AR
033F6:      	AR=		AR - 3
033F7:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
033F8:      	AR=		CX
033F9:      	MX=		AR
033FA:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033FB:      	MACOP=		3		; unsigned
033FC:      	MR=		MX * AR
            #endif
            
033FD:      	I1=		rm[BP_SAVE]
033FE:      	AR=		2
033FF:      	I1=		I1 - AR
03400:      	rm[I1++]=	MR0
03401:      	rm[I1++]=	MR1
03402:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
03403:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03404:      	MR=		MX * AR
            #endif
            
03405:      	AR=		rm[I1]
03406:      	AR=		AR + MR0
03407:      	rm[I1++]=	AR
03408:      	AR=		rm[I1]
03409:      	AR=		AR + MR1 + C
0340A:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
0340B:      	AR=		BX
0340C:      	MX=		AR
0340D:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0340E:      	MR=		MX * AR
            #endif
            
0340F:      	AR=		rm[I1]
03410:      	AR=		AR + MR0
03411:      	rm[I1++]=	AR
03412:      	AR=		rm[I1]
03413:      	AR=		AR + MR1 + C
03414:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
03415:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03416:      	MR=		MX * AR
            #endif
            
03417:      	AR=		rm[I1]
03418:      	AR=		AR + MR0
03419:      	rm[I1]=		AR
            
0341A:      	I1=		rm[BP_SAVE]
0341B:      	CX=		rm[I1--]
0341C:      	DX=		rm[I1--]
0341D:      	AX=		rm[I1]
            
0341E:      	AR=		3
0341F:      	BP=		BP + AR
03420:      	pop		AR
03421:      	rm[BP_SAVE]=	AR
            
03422:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIV_AX_CX(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIV_AX_CX:
            	; unsigned int reste = 0;
03423:      		DX=		0
            	; unsigned char count = 16;
03424:      		R0=		16
            	; BOOL c;
            
            	; do
            	@divword_loop_1824:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
03425:      			slz		AX, 1
            		; reste <<= 1;
03426:      			slc		DX, 1
            
            		; if (c)
            		; {
            			; reste |= 1;
            		; }
            		@divword_label_1822:
            
            		; if (reste >= y)
03427:      			AR=		DX
03428:      			AR-=		CX
03429:      			AR=		0
0342A:      			AR=		AR - 0 + C - 1
0342B:      			if AN jmp	@divword_label_1823
            		; {
            			; reste -= y;
0342C:      				AR=		CX
0342D:      				DX=		DX - AR
            			; ~~ x <- (result = 1)
            			; x |= 1;
0342E:      				set		AX.b0
            		; }
            		@divword_label_1823:
            
0342F:      		R0--
03430:      		if NZ jmp	@divword_loop_1824
            	; }while (--count);
            
            	; return x;
03431:      		rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIV_AX_CX(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIV_AX_CX:
            
            	; register int r;
            
            	; r = sfx_DIV_AX_CX((x < 0 ? -x : x), (y < 0 ? -y : y));
03432:      		R1=		0
03433:      		AR=		0
03434:      		test		AX.b15
03435:      		if ZR jmp	@divsword_label_1833
03436:      			AX=		AR - AX
03437:      			set		R1.b0
            		@divsword_label_1833:
03438:      		test		CX.b15
03439:      		if ZR jmp	@divsword_label_1834
0343A:      			CX=		AR - CX
0343B:      			set		R1.b1
            		@divsword_label_1834:
0343C:      		call		sfx_DIV_AX_CX
            
            	; if ((x < 0) ^ (y < 0))
0343D:      		AR=		R1
0343E:      		slz		AR, 1
0343F:      		AR^=		R1
03440:      		test		AR.b1
03441:      		if ZR jmp	@divsword_label_1835
            	; {
            		; return (0 - r);
03442:      			AR=		0
03443:      			AX=		AR - AX
03444:      			DX=		AR - DX
            
            	; }
            	@divsword_label_1835:
            
            	; return r;
03445:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIVLONG(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIVLONG:
            	; unsigned long reste = 0L;
03446:      		R0=		0	; L
03447:      		R1=		0	; H
            	; unsigned char count = 32;
03448:      		R2=		32
            	; BOOL c;
            
            	; do
            	@divulong_loop_1723:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
03449:      			slz		AX, 1
0344A:      			slc		DX, 1
            		; reste <<= 1;
0344B:      			slc		R0, 1
0344C:      			slc		R1, 1
            
            		; if (c)
            		; {
            			; reste |= 1L;
            		; }
            		@divulong_label_1726:
            
            		; if (reste >= y)
0344D:      			AR=		R0
0344E:      			AR-=		CX
0344F:      			AR=		R1
03450:      			AR=		AR - BX + C - 1
03451:      			if AN jmp	@divulong_label_1734
            		; {
            			; reste -= y;
03452:      				AR=		CX
03453:      				R0=		R0 - AR
03454:      				AR=		BX
03455:      				R1=		R1 - AR + C - 1
            			; ~~ x <- (result = 1)
            			; x |= 1L;
03456:      				set		AX.b0
            		; }
            		@divulong_label_1734:
            
03457:      		R2--
03458:      		if NZ jmp	@divulong_loop_1723
            	; }while (--count);
            
            	; return x;
03459:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIVLONG(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     BX:DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIVLONG:
            	; long r;
            
            	; r = divulong((x < 0 ? -x : x), (y < 0 ? -y : y));
0345A:      		R3=		0
0345B:      		AR=		0
0345C:      		test		DX.b15
0345D:      		if ZR jmp	@divslong_label_1759
0345E:      			AX=		AR - AX
0345F:      			DX=		AR - DX + C - 1
03460:      			set		R3.b0
            		@divslong_label_1759:
03461:      		test		BX.b15
03462:      		if ZR jmp	@divslong_label_1800
03463:      			CX=		AR - CX
03464:      			BX=		AR - BX + C - 1
03465:      			set		R3.b1
            		@divslong_label_1800:
03466:      		call		sfx_DIVLONG
            
            	; if ((x < 0) ^ (y < 0))
03467:      		AR=		R3
03468:      		slz		AR, 1
03469:      		AR^=		R3
0346A:      		test		AR.b1
0346B:      		if ZR jmp	@divslong_label_1807
            	; {
            		; return -r;
0346C:      			AR=		0
0346D:      			AX=		AR - AX
0346E:      			DX=		AR - DX + C - 1
0346F:      			R0=		AR - R0
03470:      			R1=		AR - R1 + C - 1
            
            	; }
            	@divslong_label_1807:
            
            	; return r;
03471:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MOD_AX_CX(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_MOD_AX_CX:
03472:      	call		sfx_DIV_AX_CX
03473:      	AR=		DX
03474:      	AX=		AR
03475:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMOD_AX_CX(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMOD_AX_CX:
03476:      	call		sfx_IDIV_AX_CX
03477:      	AR=		DX
03478:      	AX=		AR
03479:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MODLONG(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_MODLONG:
0347A:      	call		sfx_DIVLONG
0347B:      	AR=		R0
0347C:      	AX=		AR
0347D:      	AR=		R1
0347E:      	DX=		AR
0347F:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMODLONG(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMODLONG:
03480:      	call		sfx_IDIVLONG
03481:      	AR=		R0
03482:      	AX=		AR
03483:      	AR=		R1
03484:      	DX=		AR
03485:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG:
            	; AR=		CX
            	; AX=		AX + AR
            	; AR=		BX
            	; DX=		DX + AR + C
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG_BXCX_DXAX(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG_BXCX_DXAX:
            	; AR=		AX
            	; CX=		CX + AR
            	; AR=		DX
            	; BX=		BX + AR + C
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBLONG(void)
            ;
            ; note:
            ;     signed sub
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SUBLONG:
            	; AR=		CX
            	; AX=		AX - AR
            	; AR=		BX
            	; DX=		DX - AR + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDDIOFS(void)
            ;
            ; note:
            ;     add P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDDIOFS:
03486:      	AR=		AX
03487:      	P1=		P1 + AR
03488:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDSIOFS(void)
            ;
            ; note:
            ;     add I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDSIOFS:
03489:      	AR=		AX
0348A:      	I1=		I1 + AR
0348B:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDAXOFS(void)
            ;
            ; note:
            ;     add AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_ADDAXOFS:
0348C:      	AR=		CX
0348D:      	AX=		AX + AR
0348E:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBDIOFS(void)
            ;
            ; note:
            ;     sub P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBDIOFS:
0348F:      	AR=		AX
03490:      	P1=		P1 - AR
03491:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBSIOFS(void)
            ;
            ; note:
            ;     sub I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBSIOFS:
03492:      	AR=		AX
03493:      	I1=		I1 - AR
03494:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBAXOFS(void)
            ;
            ; note:
            ;     sub AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_SUBAXOFS:
03495:      	AR=		CX
03496:      	AX=		AX + AR
03497:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_DXAX(void)
            ;
            ; note:
            ;     load long data from PROM to DX:AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG:
            ; sfx_GETDILONG_DXAX:
            	; AX=		pm[P1++]
            	; DX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_BXCX(void)
            ;
            ; note:
            ;     load long data from PROM to BX:CX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG_BXCX:
            	; CX=		pm[P1++]
            	; BX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_DXAX(void)
            ; void sfx_GETSILONG_DXAX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to DX:AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG:
            ; sfx_GETSILONG_D:
            ; sfx_GETSILONG_DXAX:
            ; sfx_GETSILONG_DXAX_D:
            	; AX=		rm[I1++]
            	; DX=		rm[I1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_BXCX(void)
            ; void sfx_GETSILONG_BXCX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to BX:CX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG_BXCX:
            ; sfx_GETSILONG_BXCX_D:
            	; CX=		rm[I1++]
            	; BX=		rm[I1--]
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ANDLONG(void)
            ;
            ; note:
            ;     AND two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ANDLONG:
            	; AR=		CX
            	; AX=		AX & AR
            	; AR=		BX
            	; DX=		DX & AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ORLONG(void)
            ;
            ; note:
            ;     OR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ORLONG:
            	; AR=		CX
            	; AX=		AX | AR
            	; AR=		BX
            	; DX=		DX | AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XORLONG(void)
            ;
            ; note:
            ;     XOR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_XORLONG:
            	; AR=		CX
            	; AX=		AX ^ AR
            	; AR=		BX
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHL_AX_CX(void)
            ;
            ; note:
            ;     left shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHL_AX_CX:
            	; jmp		@shlac_label_1653
            ; @shlac_loop_1653:
            	; slz		AX, 1
            ; @shlac_label_1653:
            	; loop		@shlac_loop_1653
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SHLLONG(void)
            ;
            ; note:
            ;     left shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHLLONG:
            	; jmp		@shllong_label_1653
            ; @shllong_loop_1653:
            	; slz		AX, 1
            	; slc		DX, 1
            ; @shllong_label_1653:
            	; loop		@shllong_loop_1653
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX_CX(void)
            ;
            ; note:
            ;     unsigned right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX_CX:
            	; jmp		@shrac_label_1657
            ; @shrac_loop_1657:
            	; clr		C
            	; src		AX, 1
            ; @shrac_label_1657:
            	; loop		@shrac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX_CX(void)
            ;
            ; note:
            ;     signed right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX_CX:
            	; jmp		@sarac_label_1657
            ; @sarac_loop_1657:
            	; sra		AX, 1
            ; @sarac_label_1657:
            	; loop		@sarac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SARLONG(void)
            ;
            ; note:
            ;     signed right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SARLONG:
            	; jmp		@sarlong_label_1657
            ; @sarlong_loop_1657:
            	; sra		DX, 1
            	; src		AX, 1
            ; @sarlong_label_1657:
            	; loop		@sarlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHRLONG(void)
            ;
            ; note:
            ;     unsigned right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- ulong data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHRLONG:
            	; jmp		@shrlong_label_1657
            ; @shrlong_loop_1657:
            	; clr		C
            	; src		DX, 1
            	; src		AX, 1
            ; @shrlong_label_1657:
            	; loop		@shrlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX(void)
            ;
            ; note:
            ;     unsigned right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX:
            	; clr		C
            	; src		AX, 1
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX(void)
            ;
            ; note:
            ;     signed right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX:
            	; sra		AX, 1
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG(void)
            ; void sfx_STORSILONG_D(void)		; for function's parameter
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG:
            ; sfx_STORSILONG_D:
            	; rm[I1++]=	AX
            	; rm[I1--]=	DX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG_BXCX(void)
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG_BXCX:
            	; rm[I1++]=	CX
            	; rm[I1--]=	BX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG:
03498:      	pm[P1++]=	AX
03499:      	pm[P1--]=	DX
0349A:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG_BXCX:
0349B:      	pm[P1++]=	CX
0349C:      	pm[P1--]=	BX
0349D:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CX to BX
            ;
            ; in:
            ;     CX	- signed short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_CX:
            ; sfx_INT2ULONG_CX:
            	; BX=		0
            	; test		CX.b15
            	; if ZR jmp	@i2lcx_label_1756
            	; BX=		-1
            ; @i2lcx_label_1756:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_CX(void)
            ;
            ; note:
            ;     convert short unsigned value CX to long (BX:CX)
            ;
            ; in:
            ;     CX	- unsigned short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_CX:
            ; sfx_UINT2ULONG_CX:
            	; BX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CL to BX:CH
            ;
            ; in:
            ;     CX	- signed char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_CX:
0349E:      	BX=		0
0349F:      	CX.h=		0
034A0:      	test		CX.b7
034A1:      	if ZR jmp	@c2lcx_label_1800
034A2:      	CX.h=		0xFF
034A3:      	BX=		-1
            @c2lcx_label_1800:
034A4:      	rets
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_CX(void)
            ;
            ; note:
            ;     convert unsigned char value CL to long (BX:CX)
            ;
            ; in:
            ;     CL	- unsigned char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_CX:
            	; CX.h=		0
            	; BX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AX to DX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_AX:
            ; sfx_INT2ULONG_AX:
            	; DX=		0
            	; test		AX.b15
            	; if ZR jmp	@i2lax_label_1756
            	; DX=		-1
            ; @i2lax_label_1756:
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_AX(void)
            ;
            ; note:
            ;     convert short unsigned value AX to long (DX:AX)
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_AX:
            ; sfx_UINT2ULONG_AX:
            	; DX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AL to DX:AH
            ;
            ; in:
            ;     AX	- signed char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_AX:
034A5:      	DX=		0
034A6:      	AX.h=		0
034A7:      	test		AX.b7
034A8:      	if ZR jmp	@c2lax_label_1800
034A9:      	AX.h=		0xFF
034AA:      	DX=		-1
            @c2lax_label_1800:
034AB:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_AX(void)
            ;
            ; note:
            ;     convert unsigned char value AL to long (DX:AX)
            ;
            ; in:
            ;     AL	- unsigned char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_AX:
            	; AX.h=		0
            	; DX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CALL_BY_AX(void)
            ;
            ; note:
            ;     call sub routine in AX (address)
            ;
            ; in:
            ;     AX	- sub routine address
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_CALL_BY_AX:
            	; AR=		AX
            	; P1=		AR
            	; P1.hh=		0
            	; fjmp		pm[P1]
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHG_AX_CX(void)
            ;
            ; note:
            ;     exchange AX CX value
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; result:
            ;     AX <-> CX
            ;
            ; --------------------------------------------
            ; sfx_XCHG_AX_CX:
            	; push		AX
            	; push		CX
            	; pop		AX
            	; pop		CX
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHGLONG(void)
            ;
            ; note:
            ;     exchange DX:AX BX:CX value
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; result:
            ;     DX:AX <-> BX:CX
            ;
            ; --------------------------------------------
            sfx_XCHGLONG:
034AC:      	push		AX
034AD:      	push		CX
034AE:      	pop		AX
034AF:      	pop		CX
034B0:      	push		DX
034B1:      	push		BX
034B2:      	pop		DX
034B3:      	pop		BX
034B4:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEG_AX(void)
            ;
            ; note:
            ;     negative AX
            ;
            ; in:
            ;     AX	- operator 1
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEG_AX:
            	; AR=		0
            	; AX=		AR - AX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEGLONG(void)
            ;
            ; note:
            ;     negative DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEGLONG:
            	; AR=		0
            	; AX=		AR - AX
            	; DX=		AR - DX + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOT_AX(void)
            ;
            ; note:
            ;     not AX
            ;
            ; in:
            ;     AX	- operator
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOT_AX:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOTLONG(void)
            ;
            ; note:
            ;     not DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOTLONG:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOT_AX(void)
            ;
            ; note:
            ;     logical NOT
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_LOGNOT_AX:
            	;; x86 code
            	;;   neg AX
            	;;   sbb AX,AX
            	;;   inc AX
            	; AR=		0
            	; AR=		AR - AX
            	; AX=		AR
            	; AX=		AR - AX + C - 1
            	; AX++
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOTLONG(void)
            ;
            ; note:
            ;     logical NOT (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            sfx_LOGNOTLONG:
            	; x86 code
            	;   neg AX
            	;   sbb AX,AX
            	;   inc AX
034B5:      	AR=		DX
034B6:      	DX=		0
034B7:      	AR=		AR | AX
034B8:      	AX=		1
034B9:      	if ZR jmp	@longnotl_label_1120
034BA:      	AX=		0
            @longnotl_label_1120:
034BB:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOL_AX(void)
            ;
            ; note:
            ;     logical BOOL
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOL_AX:
            	;; x86 code
            	;;   neg ax
            	;;   sbb ax,ax
            	;;   neg ax
            	; AR=		AX
            	; AX=		0
            	; if ZR jmp	@boolax_label_1758
            	; AX=		1
            ; @boolax_label_1758:
            	; rets
            	
            	; AR=		-1
            	; AR=		AR + AX
            	; AX=		0
            	; AX += C
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOLLONG(void)
            ;
            ; note:
            ;     logical BOOL (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOLLONG:
            	; AR=		DX
            	; DX=		0
            	; AR=		AR | AX
            	; AX=		0
            	; if ZR jmp	@boollong_label_1801
            	; AX=		1
            ; @boollong_label_1801:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INITSISTOR(void)
            ;
            ; note:
            ;     for used in global/local variable initial
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     I1 + 1
            ;
            ; --------------------------------------------
            ; sfx_INITSISTOR:
            	; rm[I1++]=	AX
            	; rets
            
            ; --------------------------------------------
            
            ; sfx_INITSISTORLONG:
            	; rm[I1++]=	AX
            	; rm[I1++]=	DX
            	; rets
            
            
            ; ~~ condition assistant functions ~~
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; JNE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            sfx_CMP_AX_CX_U_JNE:
034BC:      	DX=		0
034BD:      	BX=		0
            sfx_CMPLONG_JNE:
034BE:      	AR=		CX
034BF:      	AX=		AX - AR
034C0:      	AR=		BX
034C1:      	AR=		DX - AR + C - 1
034C2:      	AR=		AR | AX
034C3:      	if EQ jmp	@sfx_cl_jne_f
034C4:      	set		Z		; true
034C5:      	rets
            @sfx_cl_jne_f:
034C6:      	clr		Z		; false
034C7:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JNE:
034C8:      	DX=		0
034C9:      	BX=		0
            sfx_CMPLONG_BCDA_JNE:
034CA:      	AR=		AX
034CB:      	CX=		CX - AR
034CC:      	AR=		DX
034CD:      	AR=		BX - AR + C - 1
034CE:      	AR=		AR | CX
034CF:      	if EQ jmp	@sfx_clbcda_jne_f
034D0:      	set		Z		; true
034D1:      	rets
            @sfx_clbcda_jne_f:
034D2:      	clr		Z		; false
034D3:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JNE:
034D4:      	AR=		CX
034D5:      	SF=		AX - AR
034D6:      	if EQ jmp	@sfx_ac_jne_f
034D7:      	set		Z
034D8:      	rets
            @sfx_ac_jne_f:
034D9:      	clr		Z
034DA:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JNE:
034DB:      	AR=		AX
034DC:      	SF=		CX - AR
034DD:      	if EQ jmp	@sfx_ca_jne_f
034DE:      	set		Z
034DF:      	rets
            @sfx_ca_jne_f:
034E0:      	clr		Z
034E1:      	rets
            
            
            
            ; JE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            
            
            sfx_CMP_AX_CX_U_JE:
034E2:      	DX=		0
034E3:      	BX=		0
            sfx_CMPLONG_JE:
034E4:      	AR=		CX
034E5:      	AX=		AX - AR
034E6:      	AR=		BX
034E7:      	AR=		DX - AR + C - 1
034E8:      	AR=		AR | AX
034E9:      	if NE jmp	@sfx_cl_jz_f
034EA:      	set		Z		; true
034EB:      	rets
            @sfx_cl_jz_f:
034EC:      	clr		Z		; false
034ED:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JE:
034EE:      	DX=		0
034EF:      	BX=		0
            sfx_CMPLONG_BCDA_JE:
034F0:      	AR=		AX
034F1:      	CX=		CX - AR
034F2:      	AR=		DX
034F3:      	AR=		BX - AR + C - 1
034F4:      	AR=		AR | CX
034F5:      	if NE jmp	@sfx_clbcda_jz_f
034F6:      	set		Z		; true
034F7:      	rets
            @sfx_clbcda_jz_f:
034F8:      	clr		Z		; false
034F9:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JE:
034FA:      	AR=		CX
034FB:      	SF=		AX - AR
034FC:      	if NE jmp	@sfx_ac_je_f
034FD:      	set		Z
034FE:      	rets
            @sfx_ac_je_f:
034FF:      	clr		Z
03500:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JE:
03501:      	AR=		AX
03502:      	SF=		CX - AR
03503:      	if NE jmp	@sfx_ca_je_f
03504:      	set		Z
03505:      	rets
            @sfx_ca_je_f:
03506:      	clr		Z
03507:      	rets
            
            
            
            ; JG group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; A - above (unsigned)
            ; G - greater (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JA:
            sfx_CMP_AX_CX_JA:
03508:      	DX=		0
03509:      	BX=		0
            sfx_CMPLONG_JG:
0350A:      	AR=		CX
0350B:      	AX=		AX - AR
0350C:      	AR=		BX
0350D:      	AR=		DX - AR + C - 1
0350E:      	if AN jmp	@sfx_cl_jg_f
            
            	; exclude EQU condition
0350F:      	AR=		AR | AX
03510:      	if ZR jmp	@sfx_cl_jg_f
            
03511:      	set		Z		; true
03512:      	rets
            @sfx_cl_jg_f:
03513:      	clr		Z		; false
03514:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JA:
03515:      	AR=		CX
03516:      	AX=		AX - AR
03517:      	AR=		BX
03518:      	DX=		DX - AR + C - 1
03519:      	AR=		0
0351A:      	AR=		AR - 0 + C - 1
0351B:      	if AN jmp	@sfx_cl_jg_f
            
0351C:      	AR=		AR | DX		; exclude EQU condition
0351D:      	AR=		AR | AX
0351E:      	if ZR jmp	@sfx_cl_jg_f
            
0351F:      	set		Z		; true
03520:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JA:
            sfx_CMP_CX_AX_JA:
03521:      	DX=		0
03522:      	BX=		0
            sfx_CMPLONG_BCDA_JG:
03523:      	AR=		AX
03524:      	CX=		CX - AR
03525:      	AR=		DX
03526:      	AR=		BX - AR + C - 1
03527:      	if AN jmp	@sfx_clbcda_jg_f
            
03528:      	AR=		AR | CX		; exclude EQU condition
03529:      	if ZR jmp	@sfx_clbcda_jg_f
            
0352A:      	set		Z		; true
0352B:      	rets
            @sfx_clbcda_jg_f:
0352C:      	clr		Z		; false
0352D:      	rets
            
            ; ~~---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JA:
0352E:      	AR=		AX
0352F:      	CX=		CX - AR
03530:      	AR=		DX
03531:      	BX=		BX - AR + C - 1
03532:      	AR=		0
03533:      	AR=		AR - 0 + C - 1
03534:      	if AN jmp	@sfx_clbcda_jg_f
            
03535:      	AR=		AR | BX		; exclude EQU condition
03536:      	AR=		AR | CX
03537:      	if ZR jmp	@sfx_clbcda_jg_f
            
03538:      	set		Z		; true
03539:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JG:
0353A:      	AR=		CX
0353B:      	SF=		AX - AR
0353C:      	if LE jmp	@sfx_cmp_ac_jg_f
0353D:      	set		Z
0353E:      	rets
            @sfx_cmp_ac_jg_f:
0353F:      	clr		Z
03540:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JG:
03541:      	AR=		AX
03542:      	SF=		CX - AR
03543:      	if LE jmp	@sfx_cmp_ca_jg_f
03544:      	set		Z
03545:      	rets
            @sfx_cmp_ca_jg_f:
03546:      	clr		Z
03547:      	rets
            
            
            ; JGE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JAE:
            sfx_CMP_AX_CX_JAE:
03548:      	DX=		0
03549:      	BX=		0
            sfx_CMPLONG_JGE:
0354A:      	AR=		CX
0354B:      	AX=		AX - AR
0354C:      	AR=		BX
0354D:      	DX=		DX - AR + C - 1
0354E:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
            
0354F:      	set		Z		; true
03550:      	rets
            @sfx_cl_jge_f:
03551:      	clr		Z		; false
03552:      	rets
            
            ; ~~-----------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JAE:
03553:      	AR=		CX
03554:      	AX=		AX - AR
03555:      	AR=		BX
03556:      	DX=		DX - AR + C - 1
03557:      	AR=		0
03558:      	AR=		AR - 0 + C - 1
03559:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
0355A:      	set		Z		; true
0355B:      	rets
            
            ; ---------
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JAE:
            sfx_CMP_CX_AX_JAE:
0355C:      	DX=		0
0355D:      	BX=		0
            sfx_CMPLONG_BCDA_JGE:
0355E:      	AR=		AX
0355F:      	CX=		CX - AR
03560:      	AR=		DX
03561:      	BX=		BX - AR + C - 1
03562:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
            
03563:      	set		Z		; true
03564:      	rets
            @sfx_clbcda_jge_f:
03565:      	clr		Z		; false
03566:      	rets
            
            ; ---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JAE:
03567:      	AR=		AX
03568:      	CX=		CX - AR
03569:      	AR=		DX
0356A:      	BX=		BX - AR + C - 1
0356B:      	AR=		0
0356C:      	AR=		AR - 0 + C - 1
0356D:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
0356E:      	set		Z		; true
0356F:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JGE:
03570:      	AR=		CX
03571:      	SF=		AX - AR
03572:      	if AN jmp	@sfx_cmp_ac_jge_f
03573:      	set		Z
03574:      	rets
            @sfx_cmp_ac_jge_f:
03575:      	clr		Z
03576:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JGE:
03577:      	AR=		AX
03578:      	SF=		CX - AR
03579:      	if AN jmp	@sfx_cmp_ca_jge_f
0357A:      	set		Z
0357B:      	rets
            @sfx_cmp_ca_jge_f:
0357C:      	clr		Z
0357D:      	rets
            
            
            ; JL group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; B - below (unsigned)
            ; L - less (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JB:
            sfx_CMP_AX_CX_JB:
0357E:      	DX=		0
0357F:      	BX=		0
            sfx_CMPLONG_JL:
03580:      	AR=		CX
03581:      	AX=		AX - AR
03582:      	AR=		BX
03583:      	AR=		DX - AR + C - 1
03584:      	if AN jmp	@sfx_cl_jl_chk
            
            @sfx_cl_jl_f:
03585:      	clr		Z		; false
03586:      	rets
            
            @sfx_cl_jl_chk:
03587:      	AR=		AR | AX		; exclude EQU condition
03588:      	if ZR jmp	@sfx_cl_jl_f
03589:      	set		Z
0358A:      	rets
            
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JB:
0358B:      	AR=		CX
0358C:      	AX=		AX - AR
0358D:      	AR=		BX
0358E:      	DX=		DX - AR + C - 1
0358F:      	AR=		0
03590:      	AR=		AR - 0 + C - 1
03591:      	if AN jmp	@sfx_cl_jb_chk
            
            @sfx_cl_jb_f:
03592:      	clr		Z		; false
03593:      	rets
            
            @sfx_cl_jb_chk:
03594:      	AR=		AR | DX
03595:      	AR=		AR | AX		; exclude EQU condition
03596:      	if ZR jmp	@sfx_cl_jb_f
03597:      	set		Z
03598:      	rets
            
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JB:
            sfx_CMP_CX_AX_JB:
03599:      	DX=		0
0359A:      	BX=		0
            sfx_CMPLONG_BCDA_JL:
0359B:      	AR=		AX
0359C:      	CX=		CX - AR
0359D:      	AR=		DX
0359E:      	AR=		BX - AR + C - 1
0359F:      	if AN jmp	@sfx_clbcda_jl_chk
            
            @sfx_clbcda_jl_f:
035A0:      	clr		Z		; false
035A1:      	rets
            
            @sfx_clbcda_jl_chk:
035A2:      	AR=		AR | CX		; exclude EQU condition
035A3:      	if ZR jmp	@sfx_clbcda_jl_f
035A4:      	set		Z		; true
035A5:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JB:
035A6:      	AR=		AX
035A7:      	CX=		CX - AR
035A8:      	AR=		DX
035A9:      	BX=		BX - AR + C - 1
035AA:      	AR=		0
035AB:      	AR=		AR - 0 + C - 1
035AC:      	if AN jmp	@sfx_clbcda_jb_chk
            
            @sfx_clbcda_jb_f:
035AD:      	clr		Z		; false
035AE:      	rets
            
            @sfx_clbcda_jb_chk:
035AF:      	AR=		AR | CX
035B0:      	AR=		AR | BX
035B1:      	if ZR jmp	@sfx_clbcda_jb_f
035B2:      	set		Z		; true
035B3:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JL:
035B4:      	AR=		CX
035B5:      	SF=		AX - AR
035B6:      	if GE jmp	@sfx_cmp_ac_jl_f
035B7:      	set		Z
035B8:      	rets
            @sfx_cmp_ac_jl_f:
035B9:      	clr		Z
035BA:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JL:
035BB:      	AR=		AX
035BC:      	SF=		CX - AR
035BD:      	if GE jmp	@sfx_cmp_ca_jl_f
035BE:      	set		Z
035BF:      	rets
            @sfx_cmp_ca_jl_f:
035C0:      	clr		Z
035C1:      	rets
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JBE:
            sfx_CMP_AX_CX_JBE:
035C2:      	DX=		0
035C3:      	BX=		0
            sfx_CMPLONG_JLE:
035C4:      	AR=		CX
035C5:      	AX=		AX - AR
035C6:      	AR=		BX
035C7:      	AR=		DX - AR + C - 1
035C8:      	if AN jmp	@sfx_cl_jle_t
            
035C9:      	AR=		AR | AX		; include EQU condition
035CA:      	if ZR jmp	@sfx_cl_jle_t
            
035CB:      	clr		Z		; false
035CC:      	rets
            @sfx_cl_jle_t:
035CD:      	set		Z		; true
035CE:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JBE:
035CF:      	AR=		CX
035D0:      	AX=		AX - AR
035D1:      	AR=		BX
035D2:      	DX=		DX - AR + C - 1
035D3:      	AR=		0
035D4:      	AR=		AR - 0 + C - 1
035D5:      	if AN jmp	@sfx_cl_jle_t
            
035D6:      	AR=		AR | DX
035D7:      	AR=		AR | AX
035D8:      	if ZR jmp	@sfx_cl_jle_t
            
035D9:      	clr		Z		; false
035DA:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JBE:
            sfx_CMP_CX_AX_JBE:
035DB:      	DX=		0
035DC:      	BX=		0
            sfx_CMPLONG_BCDA_JLE:
035DD:      	AR=		AX
035DE:      	CX=		CX - AR
035DF:      	AR=		DX
035E0:      	AR=		BX - AR + C - 1
035E1:      	if AN jmp	@sfx_clbcda_jle_t
            
035E2:      	AR=		AR | CX		; include EQU condition
035E3:      	if ZR jmp	@sfx_clbcda_jle_t
            
035E4:      	clr		Z		; false
035E5:      	rets
            @sfx_clbcda_jle_t:
035E6:      	set		Z		; true
035E7:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JBE:
035E8:      	AR=		AX
035E9:      	CX=		CX - AR
035EA:      	AR=		DX
035EB:      	BX=		BX - AR + C - 1
035EC:      	AR=		0
035ED:      	AR=		AR - 0 + C - 1
035EE:      	if AN jmp	@sfx_clbcda_jle_t
            
035EF:      	AR=		AR | BX
035F0:      	AR=		AR | CX
035F1:      	if ZR jmp	@sfx_clbcda_jle_t
            
035F2:      	clr		Z		; false
035F3:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JLE:
035F4:      	AR=		CX
035F5:      	SF=		AX - AR
035F6:      	if LE jmp	@sfx_cmp_ac_jl_t
035F7:      	clr		Z
035F8:      	rets
            @sfx_cmp_ac_jl_t:
035F9:      	set		Z
035FA:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JLE:
035FB:      	AR=		AX
035FC:      	SF=		CX - AR
035FD:      	if LE jmp	@sfx_cmp_ca_jl_t
035FE:      	clr		Z
035FF:      	rets
            @sfx_cmp_ca_jl_t:
03600:      	set		Z
03601:      	rets
            
            
            ; ~!~ bit-field support
            
            @sfx_ortable_0:
03602:      	DW 0xFFFE
            @sfx_ortable_1:
03603:      	DW 0xFFFC
            @sfx_ortable_2:
03604:      	DW 0xFFF8
            @sfx_ortable_3:
03605:      	DW 0xFFF0
            @sfx_ortable_4:
03606:      	DW 0xFFE0
            @sfx_ortable_5:
03607:      	DW 0xFFC0
            @sfx_ortable_6:
03608:      	DW 0xFF80
            @sfx_ortable_7:
03609:      	DW 0xFF00
            @sfx_ortable_8:
0360A:      	DW 0xFE00
            @sfx_ortable_9:
0360B:      	DW 0xFC00
            @sfx_ortable_10:
0360C:      	DW 0xF800
            @sfx_ortable_11:
0360D:      	DW 0xF000
            @sfx_ortable_12:
0360E:      	DW 0xE000
            @sfx_ortable_13:
0360F:      	DW 0xC000
            @sfx_ortable_14:
03610:      	DW 0x8000
            
            ; ~!~
            
            @sfx_orhigh:
03611:      	AR=		pm[P1]
03612:      	DX=		DX | AR
03613:      	rets
            
            @sfx_orhigh_dx:
03614:      	DX=		-1
            @sfx_orlow:
03615:      	AR=		pm[P1]
03616:      	AX=		AX | AR
            @sfx_sextw_rets:
03617:      	rets
            
            ; ~!~ signed short
            
            sfx_SignExtW0:
03618:      	P1=		#@sfx_ortable_0
0361B:      	test		AX.b0
0361C:      	if ZR jmp	@sfx_sextw_rets
0361D:      	jmp		@sfx_orlow
            
            sfx_SignExtW1:
0361E:      	P1=		#@sfx_ortable_1
03621:      	test		AX.b1
03622:      	if ZR jmp	@sfx_sextw_rets
03623:      	jmp		@sfx_orlow
            
            sfx_SignExtW2:
03624:      	P1=		#@sfx_ortable_2
03627:      	test		AX.b2
03628:      	if ZR jmp	@sfx_sextw_rets
03629:      	jmp		@sfx_orlow
            
            sfx_SignExtW3:
0362A:      	P1=		#@sfx_ortable_3
0362D:      	test		AX.b3
0362E:      	if ZR jmp	@sfx_sextw_rets
0362F:      	jmp		@sfx_orlow
            
            sfx_SignExtW4:
03630:      	P1=		#@sfx_ortable_4
03633:      	test		AX.b4
03634:      	if ZR jmp	@sfx_sextw_rets
03635:      	jmp		@sfx_orlow
            
            sfx_SignExtW5:
03636:      	P1=		#@sfx_ortable_5
03639:      	test		AX.b5
0363A:      	if ZR jmp	@sfx_sextw_rets
0363B:      	jmp		@sfx_orlow
            
            sfx_SignExtW6:
0363C:      	P1=		#@sfx_ortable_6
0363F:      	test		AX.b6
03640:      	if ZR jmp	@sfx_sextw_rets
03641:      	jmp		@sfx_orlow
            
            sfx_SignExtW7:
03642:      	P1=		#@sfx_ortable_7
03645:      	test		AX.b7
03646:      	if ZR jmp	@sfx_sextw_rets
03647:      	jmp		@sfx_orlow
            
            sfx_SignExtW8:
03648:      	P1=		#@sfx_ortable_8
0364B:      	test		AX.b8
0364C:      	if ZR jmp	@sfx_sextw_rets
0364D:      	jmp		@sfx_orlow
            
            sfx_SignExtW9:
0364E:      	P1=		#@sfx_ortable_9
03651:      	test		AX.b9
03652:      	if ZR jmp	@sfx_sextw_rets
03653:      	jmp		@sfx_orlow
            
            sfx_SignExtW10:
03654:      	P1=		#@sfx_ortable_10
03657:      	test		AX.b10
03658:      	if ZR jmp	@sfx_sextw_rets
03659:      	jmp		@sfx_orlow
            
            sfx_SignExtW11:
0365A:      	P1=		#@sfx_ortable_11
0365D:      	test		AX.b11
0365E:      	if ZR jmp	@sfx_sextw_rets
0365F:      	jmp		@sfx_orlow
            
            sfx_SignExtW12:
03660:      	P1=		#@sfx_ortable_12
03663:      	test		AX.b12
03664:      	if ZR jmp	@sfx_sextw_rets
03665:      	jmp		@sfx_orlow
            
            sfx_SignExtW13:
03666:      	P1=		#@sfx_ortable_13
03669:      	test		AX.b13
0366A:      	if ZR jmp	@sfx_sextw_rets
0366B:      	jmp		@sfx_orlow
            
            sfx_SignExtW14:
0366C:      	P1=		#@sfx_ortable_14
0366F:      	test		AX.b14
03670:      	if ZR jmp	@sfx_sextw_rets
03671:      	jmp		@sfx_orlow
            
            ; ~!~ signed long
            
            sfx_SignExtL0:
03672:      	P1=		#@sfx_ortable_0
03675:      	test		AX.b0
03676:      	if ZR jmp	@sfx_sextw_rets
03677:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL1:
03678:      	P1=		#@sfx_ortable_1
0367B:      	test		AX.b1
0367C:      	if ZR jmp	@sfx_sextw_rets
0367D:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL2:
0367E:      	P1=		#@sfx_ortable_2
03681:      	test		AX.b2
03682:      	if ZR jmp	@sfx_sextw_rets
03683:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL3:
03684:      	P1=		#@sfx_ortable_3
03687:      	test		AX.b3
03688:      	if ZR jmp	@sfx_sextw_rets
03689:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL4:
0368A:      	P1=		#@sfx_ortable_4
0368D:      	test		AX.b4
0368E:      	if ZR jmp	@sfx_sextw_rets
0368F:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL5:
03690:      	P1=		#@sfx_ortable_5
03693:      	test		AX.b5
03694:      	if ZR jmp	@sfx_sextw_rets
03695:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL6:
03696:      	P1=		#@sfx_ortable_6
03699:      	test		AX.b6
0369A:      	if ZR jmp	@sfx_sextw_rets
0369B:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL7:
0369C:      	P1=		#@sfx_ortable_7
0369F:      	test		AX.b7
036A0:      	if ZR jmp	@sfx_sextw_rets
036A1:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL8:
036A2:      	P1=		#@sfx_ortable_8
036A5:      	test		AX.b8
036A6:      	if ZR jmp	@sfx_sextw_rets
036A7:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL9:
036A8:      	P1=		#@sfx_ortable_9
036AB:      	test		AX.b9
036AC:      	if ZR jmp	@sfx_sextw_rets
036AD:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL10:
036AE:      	P1=		#@sfx_ortable_10
036B1:      	test		AX.b10
036B2:      	if ZR jmp	@sfx_sextw_rets
036B3:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL11:
036B4:      	P1=		#@sfx_ortable_11
036B7:      	test		AX.b11
036B8:      	if ZR jmp	@sfx_sextw_rets
036B9:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL12:
036BA:      	P1=		#@sfx_ortable_12
036BD:      	test		AX.b12
036BE:      	if ZR jmp	@sfx_sextw_rets
036BF:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL13:
036C0:      	P1=		#@sfx_ortable_13
036C3:      	test		AX.b13
036C4:      	if ZR jmp	@sfx_sextw_rets
036C5:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL14:
036C6:      	P1=		#@sfx_ortable_14
036C9:      	test		AX.b14
036CA:      	if ZR jmp	@sfx_sextw_rets
036CB:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL15:
036CC:      	test		AX.b15
036CD:      	if ZR jmp	@sfx_sextw_rets
036CE:      	DX=		-1
036CF:      	rets
            
            sfx_SignExtL16:
036D0:      	P1=		#@sfx_ortable_0
036D3:      	test		DX.b0
036D4:      	if ZR jmp	@sfx_sextw_rets
036D5:      	jmp		@sfx_orhigh
            
            sfx_SignExtL17:
036D6:      	P1=		#@sfx_ortable_1
036D9:      	test		DX.b1
036DA:      	if ZR jmp	@sfx_sextw_rets
036DB:      	jmp		@sfx_orhigh
            
            sfx_SignExtL18:
036DC:      	P1=		#@sfx_ortable_2
036DF:      	test		DX.b2
036E0:      	if ZR jmp	@sfx_sextw_rets
036E1:      	jmp		@sfx_orhigh
            
            sfx_SignExtL19:
036E2:      	P1=		#@sfx_ortable_3
036E5:      	test		DX.b3
036E6:      	if ZR jmp	@sfx_sextw_rets
036E7:      	jmp		@sfx_orhigh
            
            sfx_SignExtL20:
036E8:      	P1=		#@sfx_ortable_4
036EB:      	test		DX.b4
036EC:      	if ZR jmp	@sfx_sextw_rets
036ED:      	jmp		@sfx_orhigh
            
            sfx_SignExtL21:
036EE:      	P1=		#@sfx_ortable_5
036F1:      	test		DX.b5
036F2:      	if ZR jmp	@sfx_sextw_rets
036F3:      	jmp		@sfx_orhigh
            
            sfx_SignExtL22:
036F4:      	P1=		#@sfx_ortable_6
036F7:      	test		DX.b6
036F8:      	if ZR jmp	@sfx_sextw_rets
036F9:      	jmp		@sfx_orhigh
            
            sfx_SignExtL23:
036FA:      	P1=		#@sfx_ortable_7
036FD:      	test		DX.b7
036FE:      	if ZR jmp	@sfx_sextw_rets
036FF:      	jmp		@sfx_orhigh
            
            sfx_SignExtL24:
03700:      	P1=		#@sfx_ortable_8
03703:      	test		DX.b8
03704:      	if ZR jmp	@sfx_sextw_rets
03705:      	jmp		@sfx_orhigh
            
            sfx_SignExtL25:
03706:      	P1=		#@sfx_ortable_9
03709:      	test		DX.b9
0370A:      	if ZR jmp	@sfx_sextw_rets
0370B:      	jmp		@sfx_orhigh
            
            sfx_SignExtL26:
0370C:      	P1=		#@sfx_ortable_10
0370F:      	test		DX.b10
03710:      	if ZR jmp	@sfx_sextw_rets
03711:      	jmp		@sfx_orhigh
            
            sfx_SignExtL27:
03712:      	P1=		#@sfx_ortable_11
03715:      	test		DX.b11
03716:      	if ZR jmp	@sfx_sextw_rets
03717:      	jmp		@sfx_orhigh
            
            sfx_SignExtL28:
03718:      	P1=		#@sfx_ortable_12
0371B:      	test		DX.b12
0371C:      	if ZR jmp	@sfx_sextw_rets
0371D:      	jmp		@sfx_orhigh
            
            sfx_SignExtL29:
0371E:      	P1=		#@sfx_ortable_13
03721:      	test		DX.b13
03722:      	if ZR jmp	@sfx_sextw_rets
03723:      	jmp		@sfx_orhigh
            
            sfx_SignExtL30:
03724:      	P1=		#@sfx_ortable_14
03727:      	test		DX.b14
03728:      	if ZR jmp	@sfx_sextw_rets
03729:      	jmp		@sfx_orhigh
            
            
            ; ~.~--------------------
            ; I1, AX
            
            sfx_REPMOV_SS:
            @sfx_repmov_ss_loop_1804:
0372A:      	push		I1
0372B:      	AR=		AX
0372C:      	I1=		AR
0372D:      	AR=		rm[I1]
0372E:      	pop		I1
0372F:      	rm[I1++]=	AR
03730:      	AX++
03731:      	loop		@sfx_repmov_ss_loop_1804
03732:      	rets
            
            ; ~~
            
            sfx_REPMOV_SR:
03733:      	AR=		AX
03734:      	P1=		AR
            @sfx_repmov_sr_loop_1804:
03735:      	rm[I1++]=	pm[P1++]
03736:      	loop		@sfx_repmov_sr_loop_1804
03737:      	rets
            
            
            ; ~~
            
            sfx_REPMOV_RS:
03738:      	AR=		AX
03739:      	I1=		AR
            @sfx_repmov_rs_loop_1804:
0373A:      	AR=		rm[I1++]
0373B:      	pm[P1++]=	AR
0373C:      	loop		@sfx_repmov_rs_loop_1804
0373D:      	rets
            
            ; ~~
            
            sfx_REPMOV_RR:
            @sfx_repmov_rr_loop_1804:
0373E:      	push		P1
0373F:      	AR=		AX
03740:      	P1=		AR
03741:      	AR=		pm[P1]
03742:      	pop		P1
03743:      	pm[P1++]=	AR
03744:      	AX++
03745:      	loop		@sfx_repmov_rr_loop_1804
03746:      	rets
            
            ; ~~
            
            ; sfx_CHECKZERO:
            	; AR=		AX
            	; rets
            
            ; ~~
            
            ; sfx_CHECKZEROLONG:
            	; AR=		AX
            	; AR=		AR | DX
            	; rets
            
            ; ~~
            
            
            #ifdef PRAM_BANK
            
            ;  ~~ simple link list for PRAM allocate
            
            ;  +---------+---------+
            ;  | field 0 | field 1 |
            ;  +---------+---------+
            ;  |   PROM  |  next   |
            ;  +---------+---------+
            
            sfx_DynFastCallInit:
            ; {
            	P1.hh=		PRAM_BANK
            	P1=		PRAM_OFFSET
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	rets
            ; }
            
            
            ; ~~ for C / ASM progam compatible used
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            ; bool sfx_DynFindPrg(PRGADR)
            ;
            ; in:
            ;    P1		- function start address
            ;
            ; out:
            ;     Z		- found, P0 = program entry address at PRAM
            ;     NZ	- not found, P0 = free space (list) start at PRAM
            ; ----------------------------------------------------------------
            
            sfx_DynFindPrg:
            ; {
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfp_loop_1320:
            	AR=		pm[P0++]	; program address
            	if ZR jmp	@sfxdfp_label_1321
            	SF=		AR - P1
            	if NE jmp	@sfxdfp_label_1323
            	
            	P0++
            	set		Z
            	rets
            
            @sfxdfp_label_1323:
            	AR=		pm[P0]		; next
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfp_label_1655
            	P0=		AR
            	jmp		@sfxdfp_loop_1320
            
            @sfxdfp_label_1321:
            	P0--				; list
            	clr		Z
            	rets
            	
            @sfxdfp_label_1655:
            ; ~~ list broken...
            	P0=		PRAM_OFFSET
            	clr		Z
            	rets
            ; }
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free link start
            ; AX = function end address
            
            
            sfx_DynBooking:
            ; {
            	; check if PRG to big to fit in PRAM
            
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	; ~~ can not cache PRG (total PRAM_SIZE) ??
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdb_label_1345
            
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdb_label_1349
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdb_label_1349:
            	; create link list
            
            	AR=		P1
            	pm[P0++]=	AR		; PRG
            	AR=		P0
            	AR=		AR - 3		; remove 1 list and 1 next
            	CX=		CX + AR
            	pm[P0++]=	CX		; next
            
            	push		P1
            	P1=		#@sfxdfc_label_1840
            	AR=		pm[P1]		; inst -> P1.hh = 0
            	pm[P0++]=	AR
            	AR=		CX
            	P1=		AR
            	P1.hh=		PRAM_BANK
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	pop		P1
            	
            	set		Z
            	rets
            
            @sfxdb_label_1345:
            	P0.hh=		0
            	clr		Z
            	rets
            ; }
            
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free PRG entry
            ; AX = function end address
            
            sfx_DynCache:
            	push		P0
            	AR=		AX
            	AR=		AR - P1
            	CX=		AR
            	jmp		@sfxdynch_label_1650
            @sfxdynch_loop_1650:
            	AR=		pm[P1++]
            	pm[P0++]=	AR
            @sfxdynch_label_1650:
            	loop		@sfxdynch_loop_1650
            	pop		P0
            	P0--
            	rets
            
            ; --------------------------------------------------------
            
            
            ; ~~ for C
            
            ; P1 = function start address
            ; AX = function end address
            
            sfx_DynFastCall:
            ; {
            	; look up function entry by prom address (P1)
            
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfc_label_1759:
            	AR=		pm[P0++]		; next
            	if ZR jmp	@sfxdfc_label_1758
            	SF=		AR - P1
            	if EQ jmp	@sfxdfc_label_1722
            	AR=		pm[P0]
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfc_label_2035
            	P0=		AR
            	jmp		@sfxdfc_label_1759
            
            @sfxdfc_label_2035:
            	P0=		PRAM_OFFSET + 1
            
            ; -----
            
            @sfxdfc_label_1758:
            
            	; look for remain free space
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	P0--
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdfc_label_1840
            	
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdfc_label_1817
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdfc_label_1817:
            
            	; copy program to pram
            
            	; ~~ PROM field
            		AR=		P1
            		pm[P0++]=	AR
            	; ~~ next field
            		AR=		P0
            		AR=		AR - 3		; remove 1 list and 1 next
            		CX=		CX + AR
            		pm[P0++]=	CX		; next
            
            	; ~~ booking
            		push		P1
            		P1=		#@sfxdfc_label_1840
            		AR=		pm[P1]		; inst -> P1.hh = 0
            		pm[P0++]=	AR
            		AR=		CX
            		P1=		AR
            		P1.hh=		PRAM_BANK
            		AR=		0
            		pm[P1++]=	AR
            		pm[P1]=		AR
            		P1.hh=		0
            		pop		P1
            
            	; copy instruction  "P0.hh = 0"
            		push		P0		; save exec address
            	@sfxdfc_loop_1829:
            		AR=		pm[P1++]
            		pm[P0++]=	AR
            		AR=		P0
            		SF=		AR - CX
            		if AN jmp	@sfxdfc_loop_1829
            		pop		P0
            		P0--
            		fjmp		pm[P0]
            
            @sfxdfc_label_1722:
            	P0++			; program entry
            	fjmp		pm[P0]
            
            @sfxdfc_label_1840:
            	P0.hh=		0
            
            @sfxdfc_label_1733:
            	; free space too small, direct run
            	fjmp		pm[P1]
            ; }
            
            
            
            
            #endif
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> End=========================
            
            
            
            // .code segment
            
            WAKEUP_PROC:
03747:      	PCH=	SYS_PROG_ENTRY
03748:      	ljmp	SYS_PROG_ENTRY
            
            IntVectTable:
03749:      	DW #EMPTY_INTENTRY
0374A:      	DW #EMPTY_INTENTRY
0374B:      	DW #_RTC24B6AA79
0374C:      	DW #EMPTY_INTENTRY
0374D:      	DW #EMPTY_INTENTRY
0374E:      	DW #Pwm_process
            
            // .code ends
            ;;FDSP-IDE V2.53
            _SYSTEM_MAIN_PROGRAM_END_ADDRESS: 
