            ;=========================Include <OPTION.INC> Start=========================
            //--------------------------------------------------------------------------------------------------
            // TRITAN FDSP-IDE Option define file.
            // WARNING! All changes made in this file will be lost when recompiling.
            //--------------------------------------------------------------------------------------------------
            // Part number    : TRSF16127A
            // Option version : 2.2
            // Base Information--------------------------------------------------------------------------------
            #define       _OPT_TRSF16127A_                
            #define       _OPT_PROMSize_                0x20000   //PROM Size
            #define       _OPT_SRAMSize_                3072      //SRAM Size
            // I/O Configuration--------------------------------------------------------------------------------
            #define       _OPT_EXTReset_EN_             0         //EXT Reset Enable,0:Disable,1:Enable
            #define       _OPT_EXTINT1_EN_              0         //EXTINT1_EN,0:Disable,1:Enable
            #define       _OPT_EXTINT0_EN_              0         //EXTINT0_EN,0:Disable,1:Enable
            #define       _OPT_SpreadSpectrum_          0         //Spread Spectrum Enable,0:Disable,1:Enable
            #define       _OPT_EXTResetPin_             0         //EXT Reset Pin Select,0:PB3,1:PC3
            #define       _OPT_EXTINT1_INV_             0         //EXTINT1_INV,0:Disable,1:Enable
            #define       _OPT_EXTINT0_INV_             0         //EXTINT0_INV,0:Disable,1:Enable
            // Memory Configuration-----------------------------------------------------------------------------
            #define       _OPT_PRAMBank_                0         //PRAM Bank
            #define       _OPT_PRAMSize_                0         //PRAM Size(Words)
            #define       _OPT_WriteSegmentProtection_  0x0FFFF   //Write Segment Protection(0000H~ )
            // System Control Setup-----------------------------------------------------------------------------
            #define       _OPT_Bank0Speed_              11        //Bank0 Speed(MHz)
            #define       _OPT_RTCINT_                  1         //RTC interrupt,0:Disable,1:Enable
            #define       _OPT_RTCinHalt_               0         //RTC LP32K in Halt Mode,0:Disable,1:Enable
            #define       _OPT_LVR_                     2200      //LVR(mv)
            #define       _OPT_WatchDog_                256       //Watch dog(ms)
            #define       _OPT_ICEEnable_               1         //ICE Disable/Enable,0:Disable,1:Enable
            // Audio Configuration------------------------------------------------------------------------------
            #define       _OPT_AudioSamplingRate_       32        //Audio Sampling Rate(KHz)
            #define       _OPT_PWMBit_                  16        //PWM Bit
            #define       _OPT_DACFIFO_                 1         //DAC FIFO,0:Disable,1:Enable
            //--------------------------------------------------------------------------------------------------
            ;=========================Include <OPTION.INC> End=========================
            
            #define DSP_SRAM_SIZE		3072
            #define DSP_VECT_SUPPORT		6
            #define _PROJECT_CONFIG_FILE_		
            #define _PWM_32K_		
            #define MD2_USE_PROM		
            #define MD2_WORD_ADR		
            #define RAMBANK 		 15
            #define MD2_PRAM_START_BASE 		 0x0000
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> Start=========================
            
            ; =====================
            ;      COMMON I/O
            ; =====================
            
            #ifdef _MFDSP_
            
            ; {
            	STATUS          EQU             00H             ;R/W, BIT0: Zero.
            							;R/W, BIT1: Carry.
            							;R/W, BIT2: Overflow.
            							;R/W, BIT3: Negative.
            							;R/W, BIT7: Global Interrupt Enable.
            							;R/W, BIT[12:8]: SD_EN, TRA_EN, ADH_EN, SPIS_EN, SPIM_EN.
            							;R/W, BIT13: Interrupt Vector Table Access Enable.
            							;R/W, BIT14: Filter Buffer Available.
            							;R/W, BIT15: Parser Buffer Available.
            
            	INTENA          EQU             01H             ;R/W, Int Enable.
            	INTREQ          EQU             02H             ;R/W, Int Request.
            	IntVect         EQU             03H             ;R/W, Interrupt Table
            	IOC_PA          EQU             04H             ;R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB          EQU             05H             ;R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PCI         EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PC          EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA           EQU             07H             ;R/W, General input/output port.
            	PortB           EQU             08H             ;R/W, General input/output port.
            	PortCI          EQU             09H             ;R/W, General input/output port.
            	PortC           EQU             09H             ;R/W, General input/output port.
            	INTMASK         EQU             0AH             ;R/W, Int Mask.
            	SPIS_CTL        EQU             0BH             ;R/W, SPI slaver control register.
            	SPIS_DAT        EQU             0CH             ;R/W, SPI slaver data    register.
            	SPI_CTL         EQU             0DH             ;R/W, SPI master control register.
            	SPI_DAT         EQU             0EH             ;R/W, SPI master data    register.
            	SD_CTL          EQU             0FH             ;R/W, SD card interface control register.
            	SD_DAT          EQU             10H             ;R/W, SD card interface data.
            	SD_RSP          EQU             11H             ;R/W, SD card interface response register.
            	UART_CTL        EQU             12H
            	UART_DAT        EQU             13H
            	DPPWM           EQU             14H
            	//------------------------------------
            	PUPD_PA         EQU             15H             ;R/W, PortA  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	DACL            EQU             16H
            	DACR            EQU             17H
            	USB_CTL         EQU             18H
            	USB_DAT         EQU             19H
            	PUPD_PB         EQU             1AH             ;R/W, PortB  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	PUPD_PC         EQU             1BH             ;R/W, PortC  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	MISC            EQU             1CH
            	ClrWDT          EQU             1DH             ;W, Clear Watch-dog reset.
            	Real_T          EQU             1DH             ;R, System Real-Time Counter, base on 31.25us
            	IOP_IX          EQU             1EH             ;W, Programming IO Port index .
            	IOP_DAT         EQU             1FH             ;W, Programming IO Port Data .
            
            	//------------------------------------
            	// Virtual         Program IO Port
            	IOP_Timer1      EQU             00H
            	IOP_Timer2      EQU             01H
            	IOP_RTC32K      EQU             02H
            	IOP_PreScale    EQU             03H
            	IOP_FGREEN32K   EQU             04H
            	IOP_ODEN_PA     EQU             05H
            	IOP_ODEN_PB     EQU             06H
            	IOP_ODEN_PC     EQU             07H
            
            	IOP_TOUCH_CFG   EQU             08H
            	IOP_TOUCH_DAT   EQU             09H
            
            	IOP_CLK_CFG     EQU             0AH
            	IOP_CLK_DAT1    EQU             0BH
            	IOP_CLK_DAT2    EQU             0CH
            	IOP_CUR_PA      EQU             0DH
            	IOP_CUR_PB      EQU             0EH
            	IOP_CUR_PC      EQU             0FH
            
            	//------------------------------------
            	// IO[0x40-0x7F]
            	ADH_CFG0        EQU             40H
            	ADH_CFG1        EQU             41H
            	ADH_CFG2        EQU             42H
            	ADH_CFG3        EQU             43H
            	ADH_DO          EQU             44H
            
            	ADL_CFG         EQU             45H
            
            	TRA_CFG         EQU             46H
            	TRA_DAT         EQU             47H
            
            	I2C_CTL         EQU             48H
            	I2C_DAT         EQU             49H
            	I2C_CMD         EQU             4AH
            	I2C_SR          EQU             4AH             ; same as I2C_CMD
            
            	I80_CTL         EQU             4BH
            	I80_INX         EQU             4CH
            	I80_DAT         EQU             4DH
            	I80_RADR        EQU             4EH
            	I80_DMANUM      EQU             4FH
            
            	SD_DMA_CTL      EQU             50H
            	SD_DMA_RADR     EQU             51H
            	SD_DMA_DMANUM   EQU             52H
            
            	SPI_DMA_CTL     EQU             53H
            	SPI_DMA_RADR    EQU             54H
            	SPI_DMA_DMANUM  EQU             55H
            
            	USB_DMA_CTL     EQU             56H
            	USB_DMA_RADR    EQU             57H
            	USB_DMA_DMANUM  EQU             58H
            
            	SSC             EQU             63H
            	MIC             EQU             64H
            	GREEN           EQU             65H
            	SLEEP           EQU             66H
            	SPEED           EQU             67H
            	PR              EQU             68H
            
            	//------------------------------------
            	IOP_WAKEN_PA    EQU             10H
            	IOP_WAKEN_PB    EQU             11H
            	IOP_WAKEN_PC    EQU             12H
            ; }
            
            #endif
            
            
            
            
            #ifdef _MSPEECHDSP_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            #ifdef _MSPEECHDSP2_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            
            ;-----------------------------------------------------------
            
            #ifdef NO_OPTIMAL_RM
            
            
            #else
            
            #define Optimal_RM	; Optimal RAM function Enable
            
            #endif
            
            
            VarRM[0:127] = {
            BP_SAVE,
            
            }
            
            VarRM[128:511] = {
            
            }
            
            VarRM[512:4095] = {
            
            }
            
            ShareVar = {
            
            }
            
            ;--------------------------------------------------------------------
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> Start=========================
            
            	org	0000h
            RSTB_ENTRY:
00000:      	PCH=		SYS_PROG_ENTRY
00001:      	ljmp		SYS_PROG_ENTRY
            
            
            	org	0004h
            WAKEUP_ENTRY:
00004:      	PCH=		WAKEUP_PROC
00005:      	ljmp		WAKEUP_PROC
            
            
            	org	0100h
            
            
            
            SYS_PROG_ENTRY:
            	; ~~ DSP initial
            
00100:      	dsi
00101:      	nop
00102:      	AR=		@STACKBOTTOM
00104:      	BP=		AR
00105:      	AR=		DSP_SRAM_SIZE
00107:      	AR--
00108:      	CX=		AR
00109:      	I1=		AR
0010A:      	AR=		0
            @clearram_loop_1705:
0010B:      	rm[I1--]=	AR
0010C:      	loop		@clearram_loop_1705
            
0010D:      	io[ClrWDT]=	AR
            
0010E:      	set		io[STATUS].b13
0010F:      	CX=		DSP_VECT_SUPPORT
00110:      	P1=		#IntVectTable
00113:      	jmp		@setintvect_label_1548
            @setintvect_loop_1548:
00114:      	AR=		pm[P1++]
00115:      	io[IntVect]=	AR
            @setintvect_label_1548:
00116:      	loop		@setintvect_loop_1548
            
00117:      	clr		io[STATUS].b13
            
            	; ~~ C code
            
            #ifdef PRAM_BANK
            	PCH=		sfx_DynFastCallInit
            	lcall		sfx_DynFastCallInit
            #endif
            
00118:      	PCH=		ginit_code
00119:      	lcall		ginit_code
            
0011A:      	PCH=		_main
0011B:      	lcall		_main
0011C:      	jmp		SYS_PROG_ENTRY
            
            
            /* ================================================================= */
            // ------------- Interrupt Service Routine--------------------------
            /* ================================================================= */
            
            EMPTY_INTENTRY:
0011D:      	reti
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> End=========================
            
            ;=========================Include <DEPS\655_99B6FC89.S.CODE.ASM> Start=========================
            ; 655.C Code Start!!;
            VarRM[0:4095]={
             LD1B663E8_2,_flagD698DD9D,_Key_press_flag14FFF825,_TFSF_Color_BufA76B681D[5] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _main();
            ; //rjmp void _InitSound5CCD501D();
            ; //rjmp void _INITIAL0C18377D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _main()				
            _main:
            ; //{
            ; //_AE0CFD6DA_0:;					
            _AE0CFD6DA_0:
            ; //	
            ; //_AE0CFD6DA_1:;					
            _AE0CFD6DA_1:
            ; //	sAX	= 0x0000;			
0011E:      	AX	= 0x00
            ; //	asm I1 = _sub_vol980B1B83+0;		
0011F:      	I1 = _sub_vol980B1B83+0//
            ; //	*(__int16*)sSI	= sAX			
00120:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2:;					
            _AE0CFD6DA_2:
            ; //_AE0CFD6DA_3:;					
            _AE0CFD6DA_3:
            ; //	_INITIAL0C18377D();			
00121:      	pch	= _INITIAL0C18377D
00122:      	lcall	_INITIAL0C18377D
            ; //_AE0CFD6DA_4:;					
            _AE0CFD6DA_4:
            ; //_AE0CFD6DA_5:;					
            _AE0CFD6DA_5:
            ; //	_InitialDA4A7CC4();			
00123:      	pch	= _InitialDA4A7CC4
00124:      	lcall	_InitialDA4A7CC4
            ; //LD1B663E8_5:;					
            LD1B663E8_5:
            ; //_AE0CFD6DA_6:;					
            _AE0CFD6DA_6:
            ; //_AE0CFD6DA_7:;					
            _AE0CFD6DA_7:
            ; //	asm	io[ClrWDT] = AR			
00125:      	io[ClrWDT] = AR
            ; //	
            ; //_AE0CFD6DA_8:;					
            _AE0CFD6DA_8:
            ; //	sAX	= 0;				
00126:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00127:      	test io[0x08].b2//
            ; //	if(__jz__) goto LD1B663E8_8;		
00128:      	if ZR	jmp LD1B663E8_8
            ; //	sAX	= 1;				
00129:      	AX	= 0x01
            ; //LD1B663E8_8:;					
            LD1B663E8_8:
            ; //	sCX	= 0x0001;			
0012A:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
0012B:      	pch	= sfx_CMP_AX_CX_JE
0012C:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_9;	
0012D:      	if ZR	jmp LD1B663E8_9
            ; //	goto	LD1B663E8_6;			
0012E:      	jmp	LD1B663E8_6
            ; //LD1B663E8_9:;					
            LD1B663E8_9:
            ; //	sAX	= 0x0001;			
0012F:      	AX	= 0x01
            ; //	goto LD1B663E8_7;			
00130:      	jmp	LD1B663E8_7
            ; //LD1B663E8_6:;					
            LD1B663E8_6:
            ; //	sAX	= 0x0000;			
00131:      	AX	= 0x00
            ; //LD1B663E8_7:;					
            LD1B663E8_7:
            ; //	asm I1 = _Key_press_flag14FFF825+0;	
00132:      	I1 = _Key_press_flag14FFF825+0//
            ; //	*(__int16*)sSI	= sAX			
00133:      	rm[I1]	= AX
            ; //_AE0CFD6DA_9:;					
            _AE0CFD6DA_9:
            ; //	sAX	= 0;				
00134:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00135:      	test io[0x08].b2//
            ; //	if(__jz__) goto LD1B663E8_11;		
00136:      	if ZR	jmp LD1B663E8_11
            ; //	sAX	= 1;				
00137:      	AX	= 0x01
            ; //LD1B663E8_11:;					
            LD1B663E8_11:
            ; //	sCX	= 0x0001;			
00138:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JNE();			
00139:      	pch	= sfx_CMP_AX_CX_JNE
0013A:      	lcall	sfx_CMP_AX_CX_JNE
            ; //	if(__je__)	goto LD1B663E8_12;	
0013B:      	if ZR	jmp LD1B663E8_12
            ; //	sAX	= 1;				
0013C:      	AX	= 0x01
            ; //	goto	LD1B663E8_13;			
0013D:      	jmp	LD1B663E8_13
            ; //LD1B663E8_12:;					
            LD1B663E8_12:
            ; //	sAX	= 0;				
0013E:      	AX	= 0x00
            ; //LD1B663E8_13:;					
            LD1B663E8_13:
            ; //	sfx_CHECKZERO();			
0013F:      	AR	= AX
            ; //	if(__jnz__)	goto LD1B663E8_14;	
00140:      	if NZ	jmp LD1B663E8_14
            ; //	goto	LD1B663E8_10;			
00141:      	jmp	LD1B663E8_10
            ; //LD1B663E8_14:;					
            LD1B663E8_14:
            ; //	asm I1 = _Key_press_flag14FFF825+0;	
00142:      	I1 = _Key_press_flag14FFF825+0//
            ; //	sAX	= *(__int16*)sSI;		
00143:      	AX	= rm[I1]
            ; //	sCX	= 0x0001;			
00144:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JNE();			
00145:      	pch	= sfx_CMP_AX_CX_JNE
00146:      	lcall	sfx_CMP_AX_CX_JNE
            ; //	if(__je__)	goto LD1B663E8_15;	
00147:      	if ZR	jmp LD1B663E8_15
            ; //	sAX	= 1;				
00148:      	AX	= 0x01
            ; //	goto	LD1B663E8_16;			
00149:      	jmp	LD1B663E8_16
            ; //LD1B663E8_15:;					
            LD1B663E8_15:
            ; //	sAX	= 0;				
0014A:      	AX	= 0x00
            ; //LD1B663E8_16:;					
            LD1B663E8_16:
            ; //LD1B663E8_10:;					
            LD1B663E8_10:
            ; //	sfx_CHECKZERO();			
0014B:      	AR	= AX
            ; //	if(__jnz__)	goto LD1B663E8_18;	
0014C:      	if NZ	jmp LD1B663E8_18
            ; //	goto	LD1B663E8_17;			
0014D:      	jmp	LD1B663E8_17
            ; //LD1B663E8_18:;					
            LD1B663E8_18:
            ; //	
            ; //_AE0CFD6DA_10:;					
            _AE0CFD6DA_10:
            ; //	sAX	= 0x0000;			
0014E:      	AX	= 0x00
            ; //	asm I1 = _Key_press_flag14FFF825+0;	
0014F:      	I1 = _Key_press_flag14FFF825+0//
            ; //	*(__int16*)sSI	= sAX			
00150:      	rm[I1]	= AX
            ; //_AE0CFD6DA_11:;					
            _AE0CFD6DA_11:
            ; //	sAX	= 0;				
00151:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00152:      	test io[0x08].b2//
            ; //	if(__jz__) goto LD1B663E8_19;		
00153:      	if ZR	jmp LD1B663E8_19
            ; //	sAX	= 1;				
00154:      	AX	= 0x01
            ; //LD1B663E8_19:;					
            LD1B663E8_19:
            ; //	sCX	= 0x0001;			
00155:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00156:      	pch	= sfx_CMP_AX_CX_JE
00157:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_21;	
00158:      	if ZR	jmp LD1B663E8_21
            ; //	goto	LD1B663E8_20;			
00159:      	jmp	LD1B663E8_20
            ; //LD1B663E8_21:;					
            LD1B663E8_21:
            ; //	
            ; //_AE0CFD6DA_12:;					
            _AE0CFD6DA_12:
            ; //	asm I1 = _flagD698DD9D+0;		
0015A:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0015B:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
0015C:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
0015D:      	pch	= sfx_CMP_AX_CX_JE
0015E:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_23;	
0015F:      	if ZR	jmp LD1B663E8_23
            ; //	goto	LD1B663E8_22;			
00160:      	jmp	LD1B663E8_22
            ; //LD1B663E8_23:;					
            LD1B663E8_23:
            ; //	
            ; //_AE0CFD6DA_13:;					
            _AE0CFD6DA_13:
            ; //_AE0CFD6DA_14:;					
            _AE0CFD6DA_14:
            ; //	sAX	= 0x0003;			
00161:      	AX	= 0x03
            ; //	PUSH(sAX);				
00162:      	push	AX
            ; //	sAX	= 0x0005;			
00163:      	AX	= 0x05
            ; //	PUSH(sAX);				
00164:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00165:      	pch	= _WS_TRSF_color_setE1CC300C
00166:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00167:      	pop	AR
00168:      	pop	AR
            ; //_AE0CFD6DA_15:;					
            _AE0CFD6DA_15:
            ; //	asm clr io[0x09].b14;			
00169:      	clr io[0x09].b14//
            ; //	goto LD1B663E8_24;			
0016A:      	jmp	LD1B663E8_24
            ; //LD1B663E8_22:;					
            LD1B663E8_22:
            ; //_AE0CFD6DA_16:;					
            _AE0CFD6DA_16:
            ; //	asm I1 = _flagD698DD9D+0;		
0016B:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0016C:      	AX	= rm[I1]
            ; //	sCX	= 0x0001;			
0016D:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
0016E:      	pch	= sfx_CMP_AX_CX_JE
0016F:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_26;	
00170:      	if ZR	jmp LD1B663E8_26
            ; //	goto	LD1B663E8_25;			
00171:      	jmp	LD1B663E8_25
            ; //LD1B663E8_26:;					
            LD1B663E8_26:
            ; //	
            ; //_AE0CFD6DA_17:;					
            _AE0CFD6DA_17:
            ; //_AE0CFD6DA_18:;					
            _AE0CFD6DA_18:
            ; //	sAX	= 0x0003;			
00172:      	AX	= 0x03
            ; //	PUSH(sAX);				
00173:      	push	AX
            ; //	sAX	= 0x0003;			
00174:      	AX	= 0x03
            ; //	PUSH(sAX);				
00175:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00176:      	pch	= _WS_TRSF_color_setE1CC300C
00177:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00178:      	pop	AR
00179:      	pop	AR
            ; //_AE0CFD6DA_19:;					
            _AE0CFD6DA_19:
            ; //	asm clr io[0x09].b14;			
0017A:      	clr io[0x09].b14//
            ; //LD1B663E8_25:;					
            LD1B663E8_25:
            ; //_AE0CFD6DA_20:;					
            _AE0CFD6DA_20:
            ; //LD1B663E8_24:;					
            LD1B663E8_24:
            ; //_AE0CFD6DA_21:;					
            _AE0CFD6DA_21:
            ; //_AE0CFD6DA_22:;					
            _AE0CFD6DA_22:
            ; //	asm I1 = _flagD698DD9D+0;		
0017B:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0017C:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
0017D:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
0017E:      	pch	= sfx_CMP_AX_CX_JE
0017F:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_28;	
00180:      	if ZR	jmp LD1B663E8_28
            ; //	goto	LD1B663E8_27;			
00181:      	jmp	LD1B663E8_27
            ; //LD1B663E8_28:;					
            LD1B663E8_28:
            ; //	
            ; //_AE0CFD6DA_23:;					
            _AE0CFD6DA_23:
            ; //_AE0CFD6DA_24:;					
            _AE0CFD6DA_24:
            ; //	sAX	= 0x0003;			
00182:      	AX	= 0x03
            ; //	PUSH(sAX);				
00183:      	push	AX
            ; //	sAX	= 0x0004;			
00184:      	AX	= 0x04
            ; //	PUSH(sAX);				
00185:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00186:      	pch	= _WS_TRSF_color_setE1CC300C
00187:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00188:      	pop	AR
00189:      	pop	AR
            ; //_AE0CFD6DA_25:;					
            _AE0CFD6DA_25:
            ; //	asm clr io[0x09].b14;			
0018A:      	clr io[0x09].b14//
            ; //LD1B663E8_27:;					
            LD1B663E8_27:
            ; //_AE0CFD6DA_26:;					
            _AE0CFD6DA_26:
            ; //_AE0CFD6DA_27:;					
            _AE0CFD6DA_27:
            ; //	sAX	= 0x0002;			
0018B:      	AX	= 0x02
            ; //	asm I1 = _flagD698DD9D+0;		
0018C:      	I1 = _flagD698DD9D+0//
            ; //	asm CX = rm[I1];			
0018D:      	CX = rm[I1]//
            ; //	sfx_CMP_AX_CX_JE();			
0018E:      	pch	= sfx_CMP_AX_CX_JE
0018F:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_31;	
00190:      	if ZR	jmp LD1B663E8_31
            ; //	goto	LD1B663E8_29;			
00191:      	jmp	LD1B663E8_29
            ; //LD1B663E8_31:;					
            LD1B663E8_31:
            ; //	sAX	= 0x0000;			
00192:      	AX	= 0x00
            ; //	goto LD1B663E8_30;			
00193:      	jmp	LD1B663E8_30
            ; //LD1B663E8_29:;					
            LD1B663E8_29:
            ; //	sAX	= 0x0001;			
00194:      	AX	= 0x01
            ; //	asm I1 = _flagD698DD9D+0;		
00195:      	I1 = _flagD698DD9D+0//
            ; //	sCX	= *(__int16*)sSI;		
00196:      	CX	= rm[I1]
            ; //	sAX	= sAX + sCX;			
00197:      	AR	= CX
00198:      	AX	+= AR
            ; //LD1B663E8_30:;					
            LD1B663E8_30:
            ; //	asm I1 = _flagD698DD9D+0;		
00199:      	I1 = _flagD698DD9D+0//
            ; //	*(__int16*)sSI	= sAX			
0019A:      	rm[I1]	= AX
            ; //LD1B663E8_20:;					
            LD1B663E8_20:
            ; //_AE0CFD6DA_28:;					
            _AE0CFD6DA_28:
            ; //LD1B663E8_17:;					
            LD1B663E8_17:
            ; //_AE0CFD6DA_29:;					
            _AE0CFD6DA_29:
            ; //	goto LD1B663E8_5;			
0019B:      	jmp	LD1B663E8_5
            ; //LD1B663E8_4:;					
            LD1B663E8_4:
            ; //LD1B663E8_3:;					
            LD1B663E8_3:
            ; //_AE0CFD6DA_30:;					
            _AE0CFD6DA_30:
            ; //	return;					
0019C:      	rets
            ; //_main_end:;					
            _main_end:
            ; //_AE0CFD6DA_31:;					
            _AE0CFD6DA_31:
            ; //}
            ; //
            ; //rjmp void _InitSound5CCD501D()			
            _InitSound5CCD501D:
            ; //{
            ; //_AE0CFD6DA_32:;					
            _AE0CFD6DA_32:
            ; //	
            ; //_AE0CFD6DA_33:;					
            _AE0CFD6DA_33:
            ; //	io[0x3E]	= 0x3FFF;		
0019D:      	AR	= 0x3FFF
0019F:      	io[0x3E]	= AR
            ; //_AE0CFD6DA_34:;					
            _AE0CFD6DA_34:
            ; //	io[0x16]	= 0x0000;		
001A0:      	AR	= 0x00
001A1:      	io[0x16]	= AR
            ; //_AE0CFD6DA_35:;					
            _AE0CFD6DA_35:
            ; //	io[0x16]	= 0x0000;		
001A2:      	AR	= 0x00
001A3:      	io[0x16]	= AR
            ; //_AE0CFD6DA_36:;					
            _AE0CFD6DA_36:
            ; //	io[0x16]	= 0x0000;		
001A4:      	AR	= 0x00
001A5:      	io[0x16]	= AR
            ; //_AE0CFD6DA_37:;					
            _AE0CFD6DA_37:
            ; //	io[0x16]	= 0x0000;		
001A6:      	AR	= 0x00
001A7:      	io[0x16]	= AR
            ; //_AE0CFD6DA_38:;					
            _AE0CFD6DA_38:
            ; //	io[0x36]	= 0x0000;		
001A8:      	AR	= 0x00
001A9:      	io[0x36]	= AR
            ; //_AE0CFD6DA_39:;					
            _AE0CFD6DA_39:
            ; //	io[0x36]	= 0x0000;		
001AA:      	AR	= 0x00
001AB:      	io[0x36]	= AR
            ; //_AE0CFD6DA_40:;					
            _AE0CFD6DA_40:
            ; //	io[0x36]	= 0x0000;		
001AC:      	AR	= 0x00
001AD:      	io[0x36]	= AR
            ; //_AE0CFD6DA_41:;					
            _AE0CFD6DA_41:
            ; //	io[0x36]	= 0x0000;		
001AE:      	AR	= 0x00
001AF:      	io[0x36]	= AR
            ; //_AE0CFD6DA_42:;					
            _AE0CFD6DA_42:
            ; //	io[0x36]	= 0x0000;		
001B0:      	AR	= 0x00
001B1:      	io[0x36]	= AR
            ; //_AE0CFD6DA_43:;					
            _AE0CFD6DA_43:
            ; //	io[0x36]	= 0x0000;		
001B2:      	AR	= 0x00
001B3:      	io[0x36]	= AR
            ; //_AE0CFD6DA_44:;					
            _AE0CFD6DA_44:
            ; //	io[0x36]	= 0x0000;		
001B4:      	AR	= 0x00
001B5:      	io[0x36]	= AR
            ; //_AE0CFD6DA_45:;					
            _AE0CFD6DA_45:
            ; //	io[0x36]	= 0x0000;		
001B6:      	AR	= 0x00
001B7:      	io[0x36]	= AR
            ; //_AE0CFD6DA_46:;					
            _AE0CFD6DA_46:
            ; //	io[0x3C]	= 0x0000;		
001B8:      	AR	= 0x00
001B9:      	io[0x3C]	= AR
            ; //_AE0CFD6DA_47:;					
            _AE0CFD6DA_47:
            ; //	sAX	= io[0x3C];			
001BA:      	AR	= io[0x3C]
001BB:      	AX	= AR
            ; //_AE0CFD6DA_48:;					
            _AE0CFD6DA_48:
            ; //	asm	set io[MISC].b9			
001BC:      	set io[MISC].b9
            ; //_AE0CFD6DA_49:;					
            _AE0CFD6DA_49:
            ; //	asm	set io[MISC].b8			
001BD:      	set io[MISC].b8
            ; //_AE0CFD6DA_50:;					
            _AE0CFD6DA_50:
            ; //	asm	set io[MISC].b4			
001BE:      	set io[MISC].b4
            ; //LD1B663E8_32:;					
            LD1B663E8_32:
            ; //_AE0CFD6DA_51:;					
            _AE0CFD6DA_51:
            ; //	return;					
001BF:      	rets
            ; //_InitSound5CCD501D_end:;			
            _InitSound5CCD501D_end:
            ; //_AE0CFD6DA_52:;					
            _AE0CFD6DA_52:
            ; //}
            ; //
            ; //rjmp void _INITIAL0C18377D()			
            _INITIAL0C18377D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
001C0:      	AR	= rm[BP_SAVE]
001C1:      	push	AR
001C2:      	AR	= BP
001C3:      	rm[BP_SAVE]	= AR
001C4:      	AR	 = -1
001C5:      	BP	+= AR
            ; //_AE0CFD6DA_53:;					
            _AE0CFD6DA_53:
            ; //_AE0CFD6DA_54:;					
            _AE0CFD6DA_54:
            ; //_AE0CFD6DA_55:;					
            _AE0CFD6DA_55:
            ; //	NEARCALL(_InitSound5CCD501D);		
001C6:      	call	_InitSound5CCD501D
            ; //	
            ; //_AE0CFD6DA_56:;					
            _AE0CFD6DA_56:
            ; //	asm AX = PCMY+0;			
001C7:      	AX = PCMY+0//
            ; //_AE0CFD6DA_57:;					
            _AE0CFD6DA_57:
            ; //	asm	AR = AX				
001C9:      	AR = AX
            ; //_AE0CFD6DA_58:;					
            _AE0CFD6DA_58:
            ; //	asm	I0 = AR				
001CA:      	I0 = AR
            ; //_AE0CFD6DA_59:;					
            _AE0CFD6DA_59:
            ; //	_i_1_2+0	= 0x0200;		
001CB:      	I1	= rm[BP_SAVE]
001CC:      	AR	= 0x0200
001CE:      	rm[I1]	= AR
            ; //LD1B663E8_35:;					
            LD1B663E8_35:
            ; //_AE0CFD6DA_60:;					
            _AE0CFD6DA_60:
            ; //	sSI	= (int)&_i_1_2;			
001CF:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
001D0:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
001D1:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
001D2:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
001D3:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
001D4:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
001D5:      	AR	= AX
            ; //	if(__jnz__)	goto LD1B663E8_36;	
001D6:      	if NZ	jmp LD1B663E8_36
            ; //	goto	LD1B663E8_34;			
001D7:      	jmp	LD1B663E8_34
            ; //LD1B663E8_36:;					
            LD1B663E8_36:
            ; //	
            ; //_AE0CFD6DA_61:;					
            _AE0CFD6DA_61:
            ; //	sAX	= 0x0000;			
001D8:      	AX	= 0x00
            ; //_AE0CFD6DA_62:;					
            _AE0CFD6DA_62:
            ; //	asm	rm[I0++] = AX			
001D9:      	rm[I0++] = AX
            ; //	goto LD1B663E8_35;			
001DA:      	jmp	LD1B663E8_35
            ; //LD1B663E8_34:;					
            LD1B663E8_34:
            ; //_AE0CFD6DA_63:;					
            _AE0CFD6DA_63:
            ; //	asm AX = PCMY+0;			
001DB:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
001DD:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
001DE:      	rm[I1]	= AX
            ; //_AE0CFD6DA_64:;					
            _AE0CFD6DA_64:
            ; //	asm AX = PCMY+0;			
001DF:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
001E1:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
001E2:      	rm[I1]	= AX
            ; //_AE0CFD6DA_65:;					
            _AE0CFD6DA_65:
            ; //	asm I1 = _sub_vol980B1B83+0;		
001E3:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
001E4:      	AX	= rm[I1]
            ; //	io[0x3C]	= sAX;			
001E5:      	AR	= AX
001E6:      	io[0x3C]	= AR
            ; //_AE0CFD6DA_66:;					
            _AE0CFD6DA_66:
            ; //	io[0x3E]	= 0x1FFF;		
001E7:      	AR	= 0x1FFF
001E9:      	io[0x3E]	= AR
            ; //_AE0CFD6DA_67:;					
            _AE0CFD6DA_67:
            ; //	io[0x3B]	= 0x0000;		
001EA:      	AR	= 0x00
001EB:      	io[0x3B]	= AR
            ; //LD1B663E8_33:;					
            LD1B663E8_33:
            ; //_AE0CFD6DA_68:;					
            _AE0CFD6DA_68:
            ; //	return;					
001EC:      	AR	= 1
001ED:      	BP	+= AR
001EE:      	pop	AR
001EF:      	rm[BP_SAVE]	= AR
001F0:      	rets
            ; //_INITIAL0C18377D_end:;				
            _INITIAL0C18377D_end:
            ; //_AE0CFD6DA_69:;					
            _AE0CFD6DA_69:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_655_99B6FC89_s(void)	
            ginit_code_655_99B6FC89_s:
            ; //{
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+0;	
001F1:      	P1 = #ginit_seg_655_99B6FC89_s+0//
            ; //	asm I1 = LD1B663E8_2;			
001F4:      	I1 = LD1B663E8_2//
            ; //	sCX = 1;				
001F5:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
001F6:      	pch	= sfx_GLOBALINIT
001F7:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+1;	
001F8:      	P1 = #ginit_seg_655_99B6FC89_s+1//
            ; //	asm I1 = _flagD698DD9D;			
001FB:      	I1 = _flagD698DD9D//
            ; //	sCX = 1;				
001FC:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
001FD:      	pch	= sfx_GLOBALINIT
001FE:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+2;	
001FF:      	P1 = #ginit_seg_655_99B6FC89_s+2//
            ; //	asm I1 = _Key_press_flag14FFF825;	
00202:      	I1 = _Key_press_flag14FFF825//
            ; //	sCX = 1;				
00203:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00204:      	pch	= sfx_GLOBALINIT
00205:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00206:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_655_99B6FC89_s[3] = {		
            ginit_seg_655_99B6FC89_s:
            ; //						
            DW 
            ; //	0x0000,					
00207:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000,					
00208:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0001					
00209:      DW 0x0001,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\655_99B6FC89.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> Start=========================
            ; WS2811.c Code Start!!;
            VarRM[0:4095]={
             LD63FD439_37,LD63FD439_94,_LED_Buf98A4A35A[20],_sum6BC8EB73,LD63FD439_50 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4);
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6);
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8);
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6);
            ; //void _WS_RefreshAD7B99B1();
            ; //void _WS_Key_RGBC5B96B6D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4)	
            _WS_Send24bits851C5C55:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
0020A:      	AR	= rm[BP_SAVE]
0020B:      	push	AR
0020C:      	AR	= BP
0020D:      	rm[BP_SAVE]	= AR
0020E:      	AR	 = -1
0020F:      	BP	+= AR
            ; //_AE0CFD6DA_70:;					
            _AE0CFD6DA_70:
            ; //_AE0CFD6DA_71:;					
            _AE0CFD6DA_71:
            ; //	_i_1_2+0	= 0x00;			
00210:      	I1	= rm[BP_SAVE]
00211:      	AR	= 0x00
00212:      	rm[I1]	= AR
            ; //LD63FD439_40:;					
            LD63FD439_40:
            ; //	sSI	= (int)&_i_1_2;			
00213:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00214:      	AX	= rm[I1]
            ; //	sCX	= 0x0018;			
00215:      	CX	= 0x18
            ; //	sfx_CMP_AX_CX_JB();			
00216:      	pch	= sfx_CMP_AX_CX_JB
00217:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_44;	
00218:      	if ZR	jmp LD63FD439_44
            ; //	goto	LD63FD439_42;			
00219:      	pch =	LD63FD439_42
0021A:      	ljmp	LD63FD439_42
            ; //LD63FD439_44:;					
            LD63FD439_44:
            ; //	goto LD63FD439_41;			
0021B:      	pch =	LD63FD439_41
0021C:      	ljmp	LD63FD439_41
            ; //LD63FD439_43:;					
            LD63FD439_43:
            ; //	sSI	= (int)&_i_1_2;			
0021D:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
0021E:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
0021F:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00220:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00221:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00222:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_40;			
00223:      	pch =	LD63FD439_40
00224:      	ljmp	LD63FD439_40
            ; //LD63FD439_41:;					
            LD63FD439_41:
            ; //	
            ; //_AE0CFD6DA_72:;					
            _AE0CFD6DA_72:
            ; //	sSI	= (int)&_color_0_4;		
00225:      	AR	= 2
00226:      	I1	= rm[BP_SAVE]
00227:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00228:      	AX	= rm[I1]
            ; //	asm AR = 0x0000;			
00229:      	AR = 0x0000//
            ; //	asm AX = AX & AR;			
0022A:      	AX = AX & AR//
            ; //	sfx_CHECKZERO();			
0022B:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_46;	
0022C:      	if NZ	jmp LD63FD439_46
            ; //	goto	LD63FD439_45;			
0022D:      	pch =	LD63FD439_45
0022E:      	ljmp	LD63FD439_45
            ; //LD63FD439_46:;					
            LD63FD439_46:
            ; //	
            ; //_AE0CFD6DA_73:;					
            _AE0CFD6DA_73:
            ; //	asm set io[0x09].b14;			
0022F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_74:;					
            _AE0CFD6DA_74:
            ; //	asm	nop				
00230:      	nop
            ; //_AE0CFD6DA_75:;					
            _AE0CFD6DA_75:
            ; //	asm	nop				
00231:      	nop
            ; //_AE0CFD6DA_76:;					
            _AE0CFD6DA_76:
            ; //	asm	nop				
00232:      	nop
            ; //_AE0CFD6DA_77:;					
            _AE0CFD6DA_77:
            ; //	asm	nop				
00233:      	nop
            ; //_AE0CFD6DA_78:;					
            _AE0CFD6DA_78:
            ; //	asm	nop				
00234:      	nop
            ; //_AE0CFD6DA_79:;					
            _AE0CFD6DA_79:
            ; //	asm	nop				
00235:      	nop
            ; //_AE0CFD6DA_80:;					
            _AE0CFD6DA_80:
            ; //	asm	nop				
00236:      	nop
            ; //_AE0CFD6DA_81:;					
            _AE0CFD6DA_81:
            ; //	asm	nop				
00237:      	nop
            ; //_AE0CFD6DA_82:;					
            _AE0CFD6DA_82:
            ; //	asm	nop				
00238:      	nop
            ; //_AE0CFD6DA_83:;					
            _AE0CFD6DA_83:
            ; //	asm	nop				
00239:      	nop
            ; //_AE0CFD6DA_84:;					
            _AE0CFD6DA_84:
            ; //	asm	nop				
0023A:      	nop
            ; //_AE0CFD6DA_85:;					
            _AE0CFD6DA_85:
            ; //	asm	nop				
0023B:      	nop
            ; //_AE0CFD6DA_86:;					
            _AE0CFD6DA_86:
            ; //	asm clr io[0x09].b14;			
0023C:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_87:;					
            _AE0CFD6DA_87:
            ; //	asm	nop				
0023D:      	nop
            ; //_AE0CFD6DA_88:;					
            _AE0CFD6DA_88:
            ; //	asm	nop				
0023E:      	nop
            ; //_AE0CFD6DA_89:;					
            _AE0CFD6DA_89:
            ; //	asm	nop				
0023F:      	nop
            ; //	goto LD63FD439_47;			
00240:      	pch =	LD63FD439_47
00241:      	ljmp	LD63FD439_47
            ; //LD63FD439_45:;					
            LD63FD439_45:
            ; //_AE0CFD6DA_90:;					
            _AE0CFD6DA_90:
            ; //	asm set io[0x09].b14;			
00242:      	set io[0x09].b14//
            ; //LD63FD439_47:;					
            LD63FD439_47:
            ; //_AE0CFD6DA_91:;					
            _AE0CFD6DA_91:
            ; //_AE0CFD6DA_92:;					
            _AE0CFD6DA_92:
            ; //	asm	nop				
00243:      	nop
            ; //_AE0CFD6DA_93:;					
            _AE0CFD6DA_93:
            ; //	asm	nop				
00244:      	nop
            ; //_AE0CFD6DA_94:;					
            _AE0CFD6DA_94:
            ; //	asm	nop				
00245:      	nop
            ; //_AE0CFD6DA_95:;					
            _AE0CFD6DA_95:
            ; //	asm clr io[0x09].b14;			
00246:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_96:;					
            _AE0CFD6DA_96:
            ; //	asm	nop				
00247:      	nop
            ; //_AE0CFD6DA_97:;					
            _AE0CFD6DA_97:
            ; //	asm	nop				
00248:      	nop
            ; //_AE0CFD6DA_98:;					
            _AE0CFD6DA_98:
            ; //	asm	nop				
00249:      	nop
            ; //_AE0CFD6DA_99:;					
            _AE0CFD6DA_99:
            ; //	asm	nop				
0024A:      	nop
            ; //_AE0CFD6DA_100:;				
            _AE0CFD6DA_100:
            ; //	asm	nop				
0024B:      	nop
            ; //_AE0CFD6DA_101:;				
            _AE0CFD6DA_101:
            ; //	asm	nop				
0024C:      	nop
            ; //_AE0CFD6DA_102:;				
            _AE0CFD6DA_102:
            ; //	asm	nop				
0024D:      	nop
            ; //_AE0CFD6DA_103:;				
            _AE0CFD6DA_103:
            ; //	asm	nop				
0024E:      	nop
            ; //_AE0CFD6DA_104:;				
            _AE0CFD6DA_104:
            ; //	asm	nop				
0024F:      	nop
            ; //_AE0CFD6DA_105:;				
            _AE0CFD6DA_105:
            ; //	asm	nop				
00250:      	nop
            ; //_AE0CFD6DA_106:;				
            _AE0CFD6DA_106:
            ; //	asm	nop				
00251:      	nop
            ; //_AE0CFD6DA_107:;				
            _AE0CFD6DA_107:
            ; //	asm	nop				
00252:      	nop
            ; //_AE0CFD6DA_108:;				
            _AE0CFD6DA_108:
            ; //	sSI	= (int)&_color_0_4;		
00253:      	AR	= 2
00254:      	I1	= rm[BP_SAVE]
00255:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00256:      	AX	= rm[I1]
            ; //	asm slz AX, 1;				
00257:      	slz AX, 1//
            ; //	sSI	= (int)&_color_0_4;		
00258:      	AR	= 2
00259:      	I1	= rm[BP_SAVE]
0025A:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
0025B:      	rm[I1]	= AX
            ; //	goto LD63FD439_43;			
0025C:      	pch =	LD63FD439_43
0025D:      	ljmp	LD63FD439_43
            ; //LD63FD439_42:;					
            LD63FD439_42:
            ; //_AE0CFD6DA_109:;				
            _AE0CFD6DA_109:
            ; //LD63FD439_39:;					
            LD63FD439_39:
            ; //_AE0CFD6DA_110:;				
            _AE0CFD6DA_110:
            ; //	return;					
0025E:      	AR	= 1
0025F:      	BP	+= AR
00260:      	pop	AR
00261:      	rm[BP_SAVE]	= AR
00262:      	rets
            ; //_WS_Send24bits851C5C55_end:;			
            _WS_Send24bits851C5C55_end:
            ; //_AE0CFD6DA_111:;				
            _AE0CFD6DA_111:
            ; //}
            ; //
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6)
            _WS_Color_copyADB1DFED:
            ; //{						
00263:      	AR	= rm[BP_SAVE]
00264:      	push	AR
00265:      	AR	= BP
00266:      	rm[BP_SAVE]	= AR
            ; //_AE0CFD6DA_112:;				
            _AE0CFD6DA_112:
            ; //	
            ; //_AE0CFD6DA_113:;				
            _AE0CFD6DA_113:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00267:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00268:      	push	AX
            ; //	sSI	= (int)&_No_0_4;		
00269:      	AR	= 2
0026A:      	I1	= rm[BP_SAVE]
0026B:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0026C:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
0026D:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
0026E:      	pch	= sfx_IMUL_AX_CX
0026F:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00270:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00271:      	AR	= CX
00272:      	AX	+= AR
            ; //	PUSH(sAX);				
00273:      	push	AX
            ; //	sSI	= (int)&_color_0_6;		
00274:      	AR	= 3
00275:      	I1	= rm[BP_SAVE]
00276:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00277:      	AX	= rm[I1]
            ; //	sfx_UINT2ULONG_AX();			
00278:      	DX	= 0
            ; //	sSI	= POP();			
00279:      	pop	I1
            ; //	sfx_STORSILONG();			
0027A:      	rm[I1++]	= AX
0027B:      	rm[I1--]	= DX
            ; //LD63FD439_48:;					
            LD63FD439_48:
            ; //_AE0CFD6DA_114:;				
            _AE0CFD6DA_114:
            ; //	return;					
0027C:      	pop	AR
0027D:      	rm[BP_SAVE]	= AR
0027E:      	rets
            ; //_WS_Color_copyADB1DFED_end:;			
            _WS_Color_copyADB1DFED_end:
            ; //_AE0CFD6DA_115:;				
            _AE0CFD6DA_115:
            ; //}
            ; //
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8)
            _WS_ColorSet_LEDCA3DEB8C:
            ; //{						
0027F:      	AR	= rm[BP_SAVE]
00280:      	push	AR
00281:      	AR	= BP
00282:      	rm[BP_SAVE]	= AR
            ; //_AE0CFD6DA_116:;				
            _AE0CFD6DA_116:
            ; //	
            ; //_AE0CFD6DA_117:;				
            _AE0CFD6DA_117:
            ; //	sSI	= (int)&_to_0_6;		
00283:      	AR	= 3
00284:      	I1	= rm[BP_SAVE]
00285:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00286:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00287:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00288:      	pch	= sfx_CMP_AX_CX_JBE
00289:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_52;	
0028A:      	if ZR	jmp LD63FD439_52
            ; //	sAX	= 1;				
0028B:      	AX	= 0x01
            ; //	goto	LD63FD439_53;			
0028C:      	pch =	LD63FD439_53
0028D:      	ljmp	LD63FD439_53
            ; //LD63FD439_52:;					
            LD63FD439_52:
            ; //	sAX	= 0;				
0028E:      	AX	= 0x00
            ; //LD63FD439_53:;					
            LD63FD439_53:
            ; //	sfx_CHECKZERO();			
0028F:      	AR	= AX
            ; //	if(__jz__)	goto LD63FD439_54;	
00290:      	if ZR	jmp LD63FD439_54
            ; //	goto	LD63FD439_51;			
00291:      	pch =	LD63FD439_51
00292:      	ljmp	LD63FD439_51
            ; //LD63FD439_54:;					
            LD63FD439_54:
            ; //	sSI	= (int)&_from_0_4;		
00293:      	AR	= 2
00294:      	I1	= rm[BP_SAVE]
00295:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00296:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
00297:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JAE();			
00298:      	pch	= sfx_CMP_AX_CX_JAE
00299:      	lcall	sfx_CMP_AX_CX_JAE
            ; //	if(__je__)	goto LD63FD439_55;	
0029A:      	if ZR	jmp LD63FD439_55
            ; //	sAX	= 1;				
0029B:      	AX	= 0x01
            ; //	goto	LD63FD439_56;			
0029C:      	pch =	LD63FD439_56
0029D:      	ljmp	LD63FD439_56
            ; //LD63FD439_55:;					
            LD63FD439_55:
            ; //	sAX	= 0;				
0029E:      	AX	= 0x00
            ; //LD63FD439_56:;					
            LD63FD439_56:
            ; //LD63FD439_51:;					
            LD63FD439_51:
            ; //	sfx_CHECKZERO();			
0029F:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_58;	
002A0:      	if NZ	jmp LD63FD439_58
            ; //	goto	LD63FD439_57;			
002A1:      	pch =	LD63FD439_57
002A2:      	ljmp	LD63FD439_57
            ; //LD63FD439_58:;					
            LD63FD439_58:
            ; //	
            ; //_AE0CFD6DA_118:;				
            _AE0CFD6DA_118:
            ; //	_to_0_6+0	= 0x03;			
002A3:      	AR	= 3
002A4:      	I1	= rm[BP_SAVE]
002A5:      	I1	+= AR
002A6:      	AR	= 0x03
002A7:      	rm[I1]	= AR
            ; //_AE0CFD6DA_119:;				
            _AE0CFD6DA_119:
            ; //	_from_0_4+0	= 0x00;			
002A8:      	AR	= 2
002A9:      	I1	= rm[BP_SAVE]
002AA:      	I1	+= AR
002AB:      	AR	= 0x00
002AC:      	rm[I1]	= AR
            ; //LD63FD439_57:;					
            LD63FD439_57:
            ; //_AE0CFD6DA_120:;				
            _AE0CFD6DA_120:
            ; //_AE0CFD6DA_121:;				
            _AE0CFD6DA_121:
            ; //	sAX	= 0xFFFF;			
002AD:      	AX	= 0xFFFF
            ; //	sSI	= (int)&_color_0_8;		
002AF:      	AR	= 4
002B0:      	I1	= rm[BP_SAVE]
002B1:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
002B2:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
002B3:      	AR	= CX
002B4:      	AX	&= AR
            ; //	sSI	= (int)&_color_0_8;		
002B5:      	AR	= 4
002B6:      	I1	= rm[BP_SAVE]
002B7:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
002B8:      	rm[I1]	= AX
            ; //_AE0CFD6DA_122:;				
            _AE0CFD6DA_122:
            ; //	sSI	= (int)&_from_0_4;		
002B9:      	AR	= 2
002BA:      	I1	= rm[BP_SAVE]
002BB:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002BC:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
002BD:      	AR	= 3
002BE:      	I1	= rm[BP_SAVE]
002BF:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
002C0:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JA();			
002C1:      	pch	= sfx_CMP_AX_CX_JA
002C2:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_60;	
002C3:      	if ZR	jmp LD63FD439_60
            ; //	goto	LD63FD439_59;			
002C4:      	pch =	LD63FD439_59
002C5:      	ljmp	LD63FD439_59
            ; //LD63FD439_60:;					
            LD63FD439_60:
            ; //	
            ; //_AE0CFD6DA_123:;				
            _AE0CFD6DA_123:
            ; //	sSI	= (int)&_from_0_4;		
002C6:      	AR	= 2
002C7:      	I1	= rm[BP_SAVE]
002C8:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002C9:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_50;		
002CA:      	I1	= LD63FD439_50
            ; //	*(__int16*)sSI	= sAX			
002CB:      	rm[I1]	= AX
            ; //_AE0CFD6DA_124:;				
            _AE0CFD6DA_124:
            ; //	sSI	= (int)&_to_0_6;		
002CC:      	AR	= 3
002CD:      	I1	= rm[BP_SAVE]
002CE:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002CF:      	AX	= rm[I1]
            ; //	sSI	= (int)&_from_0_4;		
002D0:      	AR	= 2
002D1:      	I1	= rm[BP_SAVE]
002D2:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
002D3:      	rm[I1]	= AX
            ; //_AE0CFD6DA_125:;				
            _AE0CFD6DA_125:
            ; //	asm I1 = LD63FD439_50+0;		
002D4:      	I1 = LD63FD439_50+0//
            ; //	sAX	= *(__int16*)sSI;		
002D5:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
002D6:      	AR	= 3
002D7:      	I1	= rm[BP_SAVE]
002D8:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
002D9:      	rm[I1]	= AX
            ; //LD63FD439_59:;					
            LD63FD439_59:
            ; //_AE0CFD6DA_126:;				
            _AE0CFD6DA_126:
            ; //_AE0CFD6DA_127:;				
            _AE0CFD6DA_127:
            ; //	sSI	= (int)&_from_0_4;		
002DA:      	AR	= 2
002DB:      	I1	= rm[BP_SAVE]
002DC:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002DD:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_50;		
002DE:      	I1	= LD63FD439_50
            ; //	*(__int16*)sSI	= sAX			
002DF:      	rm[I1]	= AX
            ; //LD63FD439_61:;					
            LD63FD439_61:
            ; //	asm I1 = LD63FD439_50+0;		
002E0:      	I1 = LD63FD439_50+0//
            ; //	sAX	= *(__int16*)sSI;		
002E1:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
002E2:      	AR	= 3
002E3:      	I1	= rm[BP_SAVE]
002E4:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
002E5:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JLE();			
002E6:      	pch	= sfx_CMP_AX_CX_JLE
002E7:      	lcall	sfx_CMP_AX_CX_JLE
            ; //	if(__je__)	goto LD63FD439_65;	
002E8:      	if ZR	jmp LD63FD439_65
            ; //	goto	LD63FD439_63;			
002E9:      	pch =	LD63FD439_63
002EA:      	ljmp	LD63FD439_63
            ; //LD63FD439_65:;					
            LD63FD439_65:
            ; //	goto LD63FD439_62;			
002EB:      	pch =	LD63FD439_62
002EC:      	ljmp	LD63FD439_62
            ; //LD63FD439_64:;					
            LD63FD439_64:
            ; //	asm I1 = LD63FD439_50+0;		
002ED:      	I1 = LD63FD439_50+0//
            ; //	sAX	= *(__int16*)sSI;		
002EE:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_50;		
002EF:      	I1	= LD63FD439_50
            ; //	PUSH(sAX);				
002F0:      	push	AX
            ; //	sAX	= 0x0001;			
002F1:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
002F2:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
002F3:      	AR	= AX
002F4:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
002F5:      	rm[I1]	= CX
            ; //	sAX	= POP();			
002F6:      	pop	AX
            ; //	goto LD63FD439_61;			
002F7:      	pch =	LD63FD439_61
002F8:      	ljmp	LD63FD439_61
            ; //LD63FD439_62:;					
            LD63FD439_62:
            ; //	
            ; //_AE0CFD6DA_128:;				
            _AE0CFD6DA_128:
            ; //_AE0CFD6DA_129:;				
            _AE0CFD6DA_129:
            ; //	sSI	= (int)&_color_0_8;		
002F9:      	AR	= 4
002FA:      	I1	= rm[BP_SAVE]
002FB:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002FC:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
002FD:      	push	AX
            ; //	asm I1 = LD63FD439_50+0;		
002FE:      	I1 = LD63FD439_50+0//
            ; //	sAX	= *(__int16*)sSI;		
002FF:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
00300:      	push	AX
            ; //	_WS_Color_copyADB1DFED(STACK[sSP + 0], STACK[sSP + 1]);
00301:      	pch	= _WS_Color_copyADB1DFED
00302:      	lcall	_WS_Color_copyADB1DFED
            ; //	RESTORESP(2);				
00303:      	pop	AR
00304:      	pop	AR
            ; //	goto LD63FD439_64;			
00305:      	pch =	LD63FD439_64
00306:      	ljmp	LD63FD439_64
            ; //LD63FD439_63:;					
            LD63FD439_63:
            ; //_AE0CFD6DA_130:;				
            _AE0CFD6DA_130:
            ; //LD63FD439_49:;					
            LD63FD439_49:
            ; //_AE0CFD6DA_131:;				
            _AE0CFD6DA_131:
            ; //	return;					
00307:      	pop	AR
00308:      	rm[BP_SAVE]	= AR
00309:      	rets
            ; //_WS_ColorSet_LEDCA3DEB8C_end:;			
            _WS_ColorSet_LEDCA3DEB8C_end:
            ; //_AE0CFD6DA_132:;				
            _AE0CFD6DA_132:
            ; //}
            ; //
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6)
            _WS_TRSF_color_setE1CC300C:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
0030A:      	AR	= rm[BP_SAVE]
0030B:      	push	AR
0030C:      	AR	= BP
0030D:      	rm[BP_SAVE]	= AR
0030E:      	AR	 = -1
0030F:      	BP	+= AR
            ; //_AE0CFD6DA_133:;				
            _AE0CFD6DA_133:
            ; //_AE0CFD6DA_134:;				
            _AE0CFD6DA_134:
            ; //	_i_1_2+0	= 0x00;			
00310:      	I1	= rm[BP_SAVE]
00311:      	AR	= 0x00
00312:      	rm[I1]	= AR
            ; //LD63FD439_67:;					
            LD63FD439_67:
            ; //	sSI	= (int)&_i_1_2;			
00313:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00314:      	AX	= rm[I1]
            ; //	sSI	= (int)&_Led_num_0_6;		
00315:      	AR	= 3
00316:      	I1	= rm[BP_SAVE]
00317:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
00318:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JB();			
00319:      	pch	= sfx_CMP_AX_CX_JB
0031A:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_71;	
0031B:      	if ZR	jmp LD63FD439_71
            ; //	goto	LD63FD439_69;			
0031C:      	pch =	LD63FD439_69
0031D:      	ljmp	LD63FD439_69
            ; //LD63FD439_71:;					
            LD63FD439_71:
            ; //	goto LD63FD439_68;			
0031E:      	pch =	LD63FD439_68
0031F:      	ljmp	LD63FD439_68
            ; //LD63FD439_70:;					
            LD63FD439_70:
            ; //	sSI	= (int)&_i_1_2;			
00320:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00321:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00322:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00323:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00324:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00325:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_67;			
00326:      	pch =	LD63FD439_67
00327:      	ljmp	LD63FD439_67
            ; //LD63FD439_68:;					
            LD63FD439_68:
            ; //	
            ; //_AE0CFD6DA_135:;				
            _AE0CFD6DA_135:
            ; //	sSI	= (int)&_color_0_4;		
00328:      	AR	= 2
00329:      	I1	= rm[BP_SAVE]
0032A:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0032B:      	AX	= rm[I1]
            ; //	goto LD63FD439_73;			
0032C:      	pch =	LD63FD439_73
0032D:      	ljmp	LD63FD439_73
            ; //LD63FD439_74:;					
            LD63FD439_74:
            ; //_AE0CFD6DA_136:;				
            _AE0CFD6DA_136:
            ; //	asm set io[0x09].b14;			
0032E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_137:;				
            _AE0CFD6DA_137:
            ; //	asm	nop				
0032F:      	nop
            ; //_AE0CFD6DA_138:;				
            _AE0CFD6DA_138:
            ; //	asm	nop				
00330:      	nop
            ; //_AE0CFD6DA_139:;				
            _AE0CFD6DA_139:
            ; //	asm	nop				
00331:      	nop
            ; //_AE0CFD6DA_140:;				
            _AE0CFD6DA_140:
            ; //	asm	nop				
00332:      	nop
            ; //_AE0CFD6DA_141:;				
            _AE0CFD6DA_141:
            ; //	asm	nop				
00333:      	nop
            ; //_AE0CFD6DA_142:;				
            _AE0CFD6DA_142:
            ; //	asm	nop				
00334:      	nop
            ; //_AE0CFD6DA_143:;				
            _AE0CFD6DA_143:
            ; //	asm	nop				
00335:      	nop
            ; //_AE0CFD6DA_144:;				
            _AE0CFD6DA_144:
            ; //	asm	nop				
00336:      	nop
            ; //_AE0CFD6DA_145:;				
            _AE0CFD6DA_145:
            ; //	asm	nop				
00337:      	nop
            ; //_AE0CFD6DA_146:;				
            _AE0CFD6DA_146:
            ; //	asm	nop				
00338:      	nop
            ; //_AE0CFD6DA_147:;				
            _AE0CFD6DA_147:
            ; //	asm	nop				
00339:      	nop
            ; //_AE0CFD6DA_148:;				
            _AE0CFD6DA_148:
            ; //	asm	nop				
0033A:      	nop
            ; //_AE0CFD6DA_149:;				
            _AE0CFD6DA_149:
            ; //	asm clr io[0x09].b14;			
0033B:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_150:;				
            _AE0CFD6DA_150:
            ; //	asm	nop				
0033C:      	nop
            ; //_AE0CFD6DA_151:;				
            _AE0CFD6DA_151:
            ; //	asm	nop				
0033D:      	nop
            ; //_AE0CFD6DA_152:;				
            _AE0CFD6DA_152:
            ; //	asm	nop				
0033E:      	nop
            ; //_AE0CFD6DA_153:;				
            _AE0CFD6DA_153:
            ; //	asm set io[0x09].b14;			
0033F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_154:;				
            _AE0CFD6DA_154:
            ; //	asm	nop				
00340:      	nop
            ; //_AE0CFD6DA_155:;				
            _AE0CFD6DA_155:
            ; //	asm	nop				
00341:      	nop
            ; //_AE0CFD6DA_156:;				
            _AE0CFD6DA_156:
            ; //	asm	nop				
00342:      	nop
            ; //_AE0CFD6DA_157:;				
            _AE0CFD6DA_157:
            ; //	asm	nop				
00343:      	nop
            ; //_AE0CFD6DA_158:;				
            _AE0CFD6DA_158:
            ; //	asm	nop				
00344:      	nop
            ; //_AE0CFD6DA_159:;				
            _AE0CFD6DA_159:
            ; //	asm	nop				
00345:      	nop
            ; //_AE0CFD6DA_160:;				
            _AE0CFD6DA_160:
            ; //	asm	nop				
00346:      	nop
            ; //_AE0CFD6DA_161:;				
            _AE0CFD6DA_161:
            ; //	asm	nop				
00347:      	nop
            ; //_AE0CFD6DA_162:;				
            _AE0CFD6DA_162:
            ; //	asm	nop				
00348:      	nop
            ; //_AE0CFD6DA_163:;				
            _AE0CFD6DA_163:
            ; //	asm	nop				
00349:      	nop
            ; //_AE0CFD6DA_164:;				
            _AE0CFD6DA_164:
            ; //	asm	nop				
0034A:      	nop
            ; //_AE0CFD6DA_165:;				
            _AE0CFD6DA_165:
            ; //	asm	nop				
0034B:      	nop
            ; //_AE0CFD6DA_166:;				
            _AE0CFD6DA_166:
            ; //	asm clr io[0x09].b14;			
0034C:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_167:;				
            _AE0CFD6DA_167:
            ; //	asm	nop				
0034D:      	nop
            ; //_AE0CFD6DA_168:;				
            _AE0CFD6DA_168:
            ; //	asm	nop				
0034E:      	nop
            ; //_AE0CFD6DA_169:;				
            _AE0CFD6DA_169:
            ; //	asm	nop				
0034F:      	nop
            ; //_AE0CFD6DA_170:;				
            _AE0CFD6DA_170:
            ; //	asm set io[0x09].b14;			
00350:      	set io[0x09].b14//
            ; //_AE0CFD6DA_171:;				
            _AE0CFD6DA_171:
            ; //	asm	nop				
00351:      	nop
            ; //_AE0CFD6DA_172:;				
            _AE0CFD6DA_172:
            ; //	asm	nop				
00352:      	nop
            ; //_AE0CFD6DA_173:;				
            _AE0CFD6DA_173:
            ; //	asm	nop				
00353:      	nop
            ; //_AE0CFD6DA_174:;				
            _AE0CFD6DA_174:
            ; //	asm	nop				
00354:      	nop
            ; //_AE0CFD6DA_175:;				
            _AE0CFD6DA_175:
            ; //	asm	nop				
00355:      	nop
            ; //_AE0CFD6DA_176:;				
            _AE0CFD6DA_176:
            ; //	asm	nop				
00356:      	nop
            ; //_AE0CFD6DA_177:;				
            _AE0CFD6DA_177:
            ; //	asm	nop				
00357:      	nop
            ; //_AE0CFD6DA_178:;				
            _AE0CFD6DA_178:
            ; //	asm	nop				
00358:      	nop
            ; //_AE0CFD6DA_179:;				
            _AE0CFD6DA_179:
            ; //	asm	nop				
00359:      	nop
            ; //_AE0CFD6DA_180:;				
            _AE0CFD6DA_180:
            ; //	asm	nop				
0035A:      	nop
            ; //_AE0CFD6DA_181:;				
            _AE0CFD6DA_181:
            ; //	asm	nop				
0035B:      	nop
            ; //_AE0CFD6DA_182:;				
            _AE0CFD6DA_182:
            ; //	asm	nop				
0035C:      	nop
            ; //_AE0CFD6DA_183:;				
            _AE0CFD6DA_183:
            ; //	asm clr io[0x09].b14;			
0035D:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_184:;				
            _AE0CFD6DA_184:
            ; //	asm	nop				
0035E:      	nop
            ; //_AE0CFD6DA_185:;				
            _AE0CFD6DA_185:
            ; //	asm	nop				
0035F:      	nop
            ; //_AE0CFD6DA_186:;				
            _AE0CFD6DA_186:
            ; //	asm	nop				
00360:      	nop
            ; //_AE0CFD6DA_187:;				
            _AE0CFD6DA_187:
            ; //	asm set io[0x09].b14;			
00361:      	set io[0x09].b14//
            ; //_AE0CFD6DA_188:;				
            _AE0CFD6DA_188:
            ; //	asm	nop				
00362:      	nop
            ; //_AE0CFD6DA_189:;				
            _AE0CFD6DA_189:
            ; //	asm	nop				
00363:      	nop
            ; //_AE0CFD6DA_190:;				
            _AE0CFD6DA_190:
            ; //	asm	nop				
00364:      	nop
            ; //_AE0CFD6DA_191:;				
            _AE0CFD6DA_191:
            ; //	asm	nop				
00365:      	nop
            ; //_AE0CFD6DA_192:;				
            _AE0CFD6DA_192:
            ; //	asm	nop				
00366:      	nop
            ; //_AE0CFD6DA_193:;				
            _AE0CFD6DA_193:
            ; //	asm	nop				
00367:      	nop
            ; //_AE0CFD6DA_194:;				
            _AE0CFD6DA_194:
            ; //	asm	nop				
00368:      	nop
            ; //_AE0CFD6DA_195:;				
            _AE0CFD6DA_195:
            ; //	asm	nop				
00369:      	nop
            ; //_AE0CFD6DA_196:;				
            _AE0CFD6DA_196:
            ; //	asm	nop				
0036A:      	nop
            ; //_AE0CFD6DA_197:;				
            _AE0CFD6DA_197:
            ; //	asm	nop				
0036B:      	nop
            ; //_AE0CFD6DA_198:;				
            _AE0CFD6DA_198:
            ; //	asm	nop				
0036C:      	nop
            ; //_AE0CFD6DA_199:;				
            _AE0CFD6DA_199:
            ; //	asm	nop				
0036D:      	nop
            ; //_AE0CFD6DA_200:;				
            _AE0CFD6DA_200:
            ; //	asm clr io[0x09].b14;			
0036E:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_201:;				
            _AE0CFD6DA_201:
            ; //	asm	nop				
0036F:      	nop
            ; //_AE0CFD6DA_202:;				
            _AE0CFD6DA_202:
            ; //	asm	nop				
00370:      	nop
            ; //_AE0CFD6DA_203:;				
            _AE0CFD6DA_203:
            ; //	asm	nop				
00371:      	nop
            ; //_AE0CFD6DA_204:;				
            _AE0CFD6DA_204:
            ; //	asm set io[0x09].b14;			
00372:      	set io[0x09].b14//
            ; //_AE0CFD6DA_205:;				
            _AE0CFD6DA_205:
            ; //	asm	nop				
00373:      	nop
            ; //_AE0CFD6DA_206:;				
            _AE0CFD6DA_206:
            ; //	asm	nop				
00374:      	nop
            ; //_AE0CFD6DA_207:;				
            _AE0CFD6DA_207:
            ; //	asm	nop				
00375:      	nop
            ; //_AE0CFD6DA_208:;				
            _AE0CFD6DA_208:
            ; //	asm	nop				
00376:      	nop
            ; //_AE0CFD6DA_209:;				
            _AE0CFD6DA_209:
            ; //	asm	nop				
00377:      	nop
            ; //_AE0CFD6DA_210:;				
            _AE0CFD6DA_210:
            ; //	asm	nop				
00378:      	nop
            ; //_AE0CFD6DA_211:;				
            _AE0CFD6DA_211:
            ; //	asm	nop				
00379:      	nop
            ; //_AE0CFD6DA_212:;				
            _AE0CFD6DA_212:
            ; //	asm	nop				
0037A:      	nop
            ; //_AE0CFD6DA_213:;				
            _AE0CFD6DA_213:
            ; //	asm	nop				
0037B:      	nop
            ; //_AE0CFD6DA_214:;				
            _AE0CFD6DA_214:
            ; //	asm	nop				
0037C:      	nop
            ; //_AE0CFD6DA_215:;				
            _AE0CFD6DA_215:
            ; //	asm	nop				
0037D:      	nop
            ; //_AE0CFD6DA_216:;				
            _AE0CFD6DA_216:
            ; //	asm	nop				
0037E:      	nop
            ; //_AE0CFD6DA_217:;				
            _AE0CFD6DA_217:
            ; //	asm clr io[0x09].b14;			
0037F:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_218:;				
            _AE0CFD6DA_218:
            ; //	asm	nop				
00380:      	nop
            ; //_AE0CFD6DA_219:;				
            _AE0CFD6DA_219:
            ; //	asm	nop				
00381:      	nop
            ; //_AE0CFD6DA_220:;				
            _AE0CFD6DA_220:
            ; //	asm	nop				
00382:      	nop
            ; //_AE0CFD6DA_221:;				
            _AE0CFD6DA_221:
            ; //	asm set io[0x09].b14;			
00383:      	set io[0x09].b14//
            ; //_AE0CFD6DA_222:;				
            _AE0CFD6DA_222:
            ; //	asm	nop				
00384:      	nop
            ; //_AE0CFD6DA_223:;				
            _AE0CFD6DA_223:
            ; //	asm	nop				
00385:      	nop
            ; //_AE0CFD6DA_224:;				
            _AE0CFD6DA_224:
            ; //	asm	nop				
00386:      	nop
            ; //_AE0CFD6DA_225:;				
            _AE0CFD6DA_225:
            ; //	asm	nop				
00387:      	nop
            ; //_AE0CFD6DA_226:;				
            _AE0CFD6DA_226:
            ; //	asm	nop				
00388:      	nop
            ; //_AE0CFD6DA_227:;				
            _AE0CFD6DA_227:
            ; //	asm	nop				
00389:      	nop
            ; //_AE0CFD6DA_228:;				
            _AE0CFD6DA_228:
            ; //	asm	nop				
0038A:      	nop
            ; //_AE0CFD6DA_229:;				
            _AE0CFD6DA_229:
            ; //	asm	nop				
0038B:      	nop
            ; //_AE0CFD6DA_230:;				
            _AE0CFD6DA_230:
            ; //	asm	nop				
0038C:      	nop
            ; //_AE0CFD6DA_231:;				
            _AE0CFD6DA_231:
            ; //	asm	nop				
0038D:      	nop
            ; //_AE0CFD6DA_232:;				
            _AE0CFD6DA_232:
            ; //	asm	nop				
0038E:      	nop
            ; //_AE0CFD6DA_233:;				
            _AE0CFD6DA_233:
            ; //	asm	nop				
0038F:      	nop
            ; //_AE0CFD6DA_234:;				
            _AE0CFD6DA_234:
            ; //	asm clr io[0x09].b14;			
00390:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_235:;				
            _AE0CFD6DA_235:
            ; //	asm	nop				
00391:      	nop
            ; //_AE0CFD6DA_236:;				
            _AE0CFD6DA_236:
            ; //	asm	nop				
00392:      	nop
            ; //_AE0CFD6DA_237:;				
            _AE0CFD6DA_237:
            ; //	asm	nop				
00393:      	nop
            ; //_AE0CFD6DA_238:;				
            _AE0CFD6DA_238:
            ; //	asm set io[0x09].b14;			
00394:      	set io[0x09].b14//
            ; //_AE0CFD6DA_239:;				
            _AE0CFD6DA_239:
            ; //	asm	nop				
00395:      	nop
            ; //_AE0CFD6DA_240:;				
            _AE0CFD6DA_240:
            ; //	asm	nop				
00396:      	nop
            ; //_AE0CFD6DA_241:;				
            _AE0CFD6DA_241:
            ; //	asm	nop				
00397:      	nop
            ; //_AE0CFD6DA_242:;				
            _AE0CFD6DA_242:
            ; //	asm	nop				
00398:      	nop
            ; //_AE0CFD6DA_243:;				
            _AE0CFD6DA_243:
            ; //	asm	nop				
00399:      	nop
            ; //_AE0CFD6DA_244:;				
            _AE0CFD6DA_244:
            ; //	asm	nop				
0039A:      	nop
            ; //_AE0CFD6DA_245:;				
            _AE0CFD6DA_245:
            ; //	asm	nop				
0039B:      	nop
            ; //_AE0CFD6DA_246:;				
            _AE0CFD6DA_246:
            ; //	asm	nop				
0039C:      	nop
            ; //_AE0CFD6DA_247:;				
            _AE0CFD6DA_247:
            ; //	asm	nop				
0039D:      	nop
            ; //_AE0CFD6DA_248:;				
            _AE0CFD6DA_248:
            ; //	asm	nop				
0039E:      	nop
            ; //_AE0CFD6DA_249:;				
            _AE0CFD6DA_249:
            ; //	asm	nop				
0039F:      	nop
            ; //_AE0CFD6DA_250:;				
            _AE0CFD6DA_250:
            ; //	asm	nop				
003A0:      	nop
            ; //_AE0CFD6DA_251:;				
            _AE0CFD6DA_251:
            ; //	asm clr io[0x09].b14;			
003A1:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_252:;				
            _AE0CFD6DA_252:
            ; //	asm	nop				
003A2:      	nop
            ; //_AE0CFD6DA_253:;				
            _AE0CFD6DA_253:
            ; //	asm	nop				
003A3:      	nop
            ; //_AE0CFD6DA_254:;				
            _AE0CFD6DA_254:
            ; //	asm	nop				
003A4:      	nop
            ; //_AE0CFD6DA_255:;				
            _AE0CFD6DA_255:
            ; //	asm set io[0x09].b14;			
003A5:      	set io[0x09].b14//
            ; //_AE0CFD6DA_256:;				
            _AE0CFD6DA_256:
            ; //	asm	nop				
003A6:      	nop
            ; //_AE0CFD6DA_257:;				
            _AE0CFD6DA_257:
            ; //	asm	nop				
003A7:      	nop
            ; //_AE0CFD6DA_258:;				
            _AE0CFD6DA_258:
            ; //	asm	nop				
003A8:      	nop
            ; //_AE0CFD6DA_259:;				
            _AE0CFD6DA_259:
            ; //	asm	nop				
003A9:      	nop
            ; //_AE0CFD6DA_260:;				
            _AE0CFD6DA_260:
            ; //	asm	nop				
003AA:      	nop
            ; //_AE0CFD6DA_261:;				
            _AE0CFD6DA_261:
            ; //	asm	nop				
003AB:      	nop
            ; //_AE0CFD6DA_262:;				
            _AE0CFD6DA_262:
            ; //	asm	nop				
003AC:      	nop
            ; //_AE0CFD6DA_263:;				
            _AE0CFD6DA_263:
            ; //	asm	nop				
003AD:      	nop
            ; //_AE0CFD6DA_264:;				
            _AE0CFD6DA_264:
            ; //	asm	nop				
003AE:      	nop
            ; //_AE0CFD6DA_265:;				
            _AE0CFD6DA_265:
            ; //	asm	nop				
003AF:      	nop
            ; //_AE0CFD6DA_266:;				
            _AE0CFD6DA_266:
            ; //	asm	nop				
003B0:      	nop
            ; //_AE0CFD6DA_267:;				
            _AE0CFD6DA_267:
            ; //	asm	nop				
003B1:      	nop
            ; //_AE0CFD6DA_268:;				
            _AE0CFD6DA_268:
            ; //	asm clr io[0x09].b14;			
003B2:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_269:;				
            _AE0CFD6DA_269:
            ; //	asm	nop				
003B3:      	nop
            ; //_AE0CFD6DA_270:;				
            _AE0CFD6DA_270:
            ; //	asm	nop				
003B4:      	nop
            ; //_AE0CFD6DA_271:;				
            _AE0CFD6DA_271:
            ; //	asm	nop				
003B5:      	nop
            ; //_AE0CFD6DA_272:;				
            _AE0CFD6DA_272:
            ; //	asm set io[0x09].b14;			
003B6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_273:;				
            _AE0CFD6DA_273:
            ; //	asm	nop				
003B7:      	nop
            ; //_AE0CFD6DA_274:;				
            _AE0CFD6DA_274:
            ; //	asm	nop				
003B8:      	nop
            ; //_AE0CFD6DA_275:;				
            _AE0CFD6DA_275:
            ; //	asm	nop				
003B9:      	nop
            ; //_AE0CFD6DA_276:;				
            _AE0CFD6DA_276:
            ; //	asm	nop				
003BA:      	nop
            ; //_AE0CFD6DA_277:;				
            _AE0CFD6DA_277:
            ; //	asm	nop				
003BB:      	nop
            ; //_AE0CFD6DA_278:;				
            _AE0CFD6DA_278:
            ; //	asm	nop				
003BC:      	nop
            ; //_AE0CFD6DA_279:;				
            _AE0CFD6DA_279:
            ; //	asm	nop				
003BD:      	nop
            ; //_AE0CFD6DA_280:;				
            _AE0CFD6DA_280:
            ; //	asm	nop				
003BE:      	nop
            ; //_AE0CFD6DA_281:;				
            _AE0CFD6DA_281:
            ; //	asm	nop				
003BF:      	nop
            ; //_AE0CFD6DA_282:;				
            _AE0CFD6DA_282:
            ; //	asm	nop				
003C0:      	nop
            ; //_AE0CFD6DA_283:;				
            _AE0CFD6DA_283:
            ; //	asm	nop				
003C1:      	nop
            ; //_AE0CFD6DA_284:;				
            _AE0CFD6DA_284:
            ; //	asm	nop				
003C2:      	nop
            ; //_AE0CFD6DA_285:;				
            _AE0CFD6DA_285:
            ; //	asm clr io[0x09].b14;			
003C3:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_286:;				
            _AE0CFD6DA_286:
            ; //	asm	nop				
003C4:      	nop
            ; //_AE0CFD6DA_287:;				
            _AE0CFD6DA_287:
            ; //	asm	nop				
003C5:      	nop
            ; //_AE0CFD6DA_288:;				
            _AE0CFD6DA_288:
            ; //	asm	nop				
003C6:      	nop
            ; //_AE0CFD6DA_289:;				
            _AE0CFD6DA_289:
            ; //	asm set io[0x09].b14;			
003C7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_290:;				
            _AE0CFD6DA_290:
            ; //	asm	nop				
003C8:      	nop
            ; //_AE0CFD6DA_291:;				
            _AE0CFD6DA_291:
            ; //	asm	nop				
003C9:      	nop
            ; //_AE0CFD6DA_292:;				
            _AE0CFD6DA_292:
            ; //	asm	nop				
003CA:      	nop
            ; //_AE0CFD6DA_293:;				
            _AE0CFD6DA_293:
            ; //	asm	nop				
003CB:      	nop
            ; //_AE0CFD6DA_294:;				
            _AE0CFD6DA_294:
            ; //	asm	nop				
003CC:      	nop
            ; //_AE0CFD6DA_295:;				
            _AE0CFD6DA_295:
            ; //	asm	nop				
003CD:      	nop
            ; //_AE0CFD6DA_296:;				
            _AE0CFD6DA_296:
            ; //	asm	nop				
003CE:      	nop
            ; //_AE0CFD6DA_297:;				
            _AE0CFD6DA_297:
            ; //	asm	nop				
003CF:      	nop
            ; //_AE0CFD6DA_298:;				
            _AE0CFD6DA_298:
            ; //	asm	nop				
003D0:      	nop
            ; //_AE0CFD6DA_299:;				
            _AE0CFD6DA_299:
            ; //	asm	nop				
003D1:      	nop
            ; //_AE0CFD6DA_300:;				
            _AE0CFD6DA_300:
            ; //	asm	nop				
003D2:      	nop
            ; //_AE0CFD6DA_301:;				
            _AE0CFD6DA_301:
            ; //	asm	nop				
003D3:      	nop
            ; //_AE0CFD6DA_302:;				
            _AE0CFD6DA_302:
            ; //	asm clr io[0x09].b14;			
003D4:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_303:;				
            _AE0CFD6DA_303:
            ; //	asm	nop				
003D5:      	nop
            ; //_AE0CFD6DA_304:;				
            _AE0CFD6DA_304:
            ; //	asm	nop				
003D6:      	nop
            ; //_AE0CFD6DA_305:;				
            _AE0CFD6DA_305:
            ; //	asm	nop				
003D7:      	nop
            ; //_AE0CFD6DA_306:;				
            _AE0CFD6DA_306:
            ; //	asm set io[0x09].b14;			
003D8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_307:;				
            _AE0CFD6DA_307:
            ; //	asm	nop				
003D9:      	nop
            ; //_AE0CFD6DA_308:;				
            _AE0CFD6DA_308:
            ; //	asm	nop				
003DA:      	nop
            ; //_AE0CFD6DA_309:;				
            _AE0CFD6DA_309:
            ; //	asm	nop				
003DB:      	nop
            ; //_AE0CFD6DA_310:;				
            _AE0CFD6DA_310:
            ; //	asm	nop				
003DC:      	nop
            ; //_AE0CFD6DA_311:;				
            _AE0CFD6DA_311:
            ; //	asm	nop				
003DD:      	nop
            ; //_AE0CFD6DA_312:;				
            _AE0CFD6DA_312:
            ; //	asm	nop				
003DE:      	nop
            ; //_AE0CFD6DA_313:;				
            _AE0CFD6DA_313:
            ; //	asm	nop				
003DF:      	nop
            ; //_AE0CFD6DA_314:;				
            _AE0CFD6DA_314:
            ; //	asm	nop				
003E0:      	nop
            ; //_AE0CFD6DA_315:;				
            _AE0CFD6DA_315:
            ; //	asm	nop				
003E1:      	nop
            ; //_AE0CFD6DA_316:;				
            _AE0CFD6DA_316:
            ; //	asm	nop				
003E2:      	nop
            ; //_AE0CFD6DA_317:;				
            _AE0CFD6DA_317:
            ; //	asm	nop				
003E3:      	nop
            ; //_AE0CFD6DA_318:;				
            _AE0CFD6DA_318:
            ; //	asm	nop				
003E4:      	nop
            ; //_AE0CFD6DA_319:;				
            _AE0CFD6DA_319:
            ; //	asm clr io[0x09].b14;			
003E5:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_320:;				
            _AE0CFD6DA_320:
            ; //	asm	nop				
003E6:      	nop
            ; //_AE0CFD6DA_321:;				
            _AE0CFD6DA_321:
            ; //	asm	nop				
003E7:      	nop
            ; //_AE0CFD6DA_322:;				
            _AE0CFD6DA_322:
            ; //	asm	nop				
003E8:      	nop
            ; //_AE0CFD6DA_323:;				
            _AE0CFD6DA_323:
            ; //	asm set io[0x09].b14;			
003E9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_324:;				
            _AE0CFD6DA_324:
            ; //	asm	nop				
003EA:      	nop
            ; //_AE0CFD6DA_325:;				
            _AE0CFD6DA_325:
            ; //	asm	nop				
003EB:      	nop
            ; //_AE0CFD6DA_326:;				
            _AE0CFD6DA_326:
            ; //	asm	nop				
003EC:      	nop
            ; //_AE0CFD6DA_327:;				
            _AE0CFD6DA_327:
            ; //	asm	nop				
003ED:      	nop
            ; //_AE0CFD6DA_328:;				
            _AE0CFD6DA_328:
            ; //	asm	nop				
003EE:      	nop
            ; //_AE0CFD6DA_329:;				
            _AE0CFD6DA_329:
            ; //	asm	nop				
003EF:      	nop
            ; //_AE0CFD6DA_330:;				
            _AE0CFD6DA_330:
            ; //	asm	nop				
003F0:      	nop
            ; //_AE0CFD6DA_331:;				
            _AE0CFD6DA_331:
            ; //	asm	nop				
003F1:      	nop
            ; //_AE0CFD6DA_332:;				
            _AE0CFD6DA_332:
            ; //	asm	nop				
003F2:      	nop
            ; //_AE0CFD6DA_333:;				
            _AE0CFD6DA_333:
            ; //	asm	nop				
003F3:      	nop
            ; //_AE0CFD6DA_334:;				
            _AE0CFD6DA_334:
            ; //	asm	nop				
003F4:      	nop
            ; //_AE0CFD6DA_335:;				
            _AE0CFD6DA_335:
            ; //	asm	nop				
003F5:      	nop
            ; //_AE0CFD6DA_336:;				
            _AE0CFD6DA_336:
            ; //	asm clr io[0x09].b14;			
003F6:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_337:;				
            _AE0CFD6DA_337:
            ; //	asm	nop				
003F7:      	nop
            ; //_AE0CFD6DA_338:;				
            _AE0CFD6DA_338:
            ; //	asm	nop				
003F8:      	nop
            ; //_AE0CFD6DA_339:;				
            _AE0CFD6DA_339:
            ; //	asm	nop				
003F9:      	nop
            ; //_AE0CFD6DA_340:;				
            _AE0CFD6DA_340:
            ; //	asm set io[0x09].b14;			
003FA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_341:;				
            _AE0CFD6DA_341:
            ; //	asm	nop				
003FB:      	nop
            ; //_AE0CFD6DA_342:;				
            _AE0CFD6DA_342:
            ; //	asm	nop				
003FC:      	nop
            ; //_AE0CFD6DA_343:;				
            _AE0CFD6DA_343:
            ; //	asm	nop				
003FD:      	nop
            ; //_AE0CFD6DA_344:;				
            _AE0CFD6DA_344:
            ; //	asm	nop				
003FE:      	nop
            ; //_AE0CFD6DA_345:;				
            _AE0CFD6DA_345:
            ; //	asm	nop				
003FF:      	nop
            ; //_AE0CFD6DA_346:;				
            _AE0CFD6DA_346:
            ; //	asm	nop				
00400:      	nop
            ; //_AE0CFD6DA_347:;				
            _AE0CFD6DA_347:
            ; //	asm	nop				
00401:      	nop
            ; //_AE0CFD6DA_348:;				
            _AE0CFD6DA_348:
            ; //	asm	nop				
00402:      	nop
            ; //_AE0CFD6DA_349:;				
            _AE0CFD6DA_349:
            ; //	asm	nop				
00403:      	nop
            ; //_AE0CFD6DA_350:;				
            _AE0CFD6DA_350:
            ; //	asm	nop				
00404:      	nop
            ; //_AE0CFD6DA_351:;				
            _AE0CFD6DA_351:
            ; //	asm	nop				
00405:      	nop
            ; //_AE0CFD6DA_352:;				
            _AE0CFD6DA_352:
            ; //	asm	nop				
00406:      	nop
            ; //_AE0CFD6DA_353:;				
            _AE0CFD6DA_353:
            ; //	asm clr io[0x09].b14;			
00407:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_354:;				
            _AE0CFD6DA_354:
            ; //	asm	nop				
00408:      	nop
            ; //_AE0CFD6DA_355:;				
            _AE0CFD6DA_355:
            ; //	asm	nop				
00409:      	nop
            ; //_AE0CFD6DA_356:;				
            _AE0CFD6DA_356:
            ; //	asm	nop				
0040A:      	nop
            ; //_AE0CFD6DA_357:;				
            _AE0CFD6DA_357:
            ; //	asm set io[0x09].b14;			
0040B:      	set io[0x09].b14//
            ; //_AE0CFD6DA_358:;				
            _AE0CFD6DA_358:
            ; //	asm	nop				
0040C:      	nop
            ; //_AE0CFD6DA_359:;				
            _AE0CFD6DA_359:
            ; //	asm	nop				
0040D:      	nop
            ; //_AE0CFD6DA_360:;				
            _AE0CFD6DA_360:
            ; //	asm	nop				
0040E:      	nop
            ; //_AE0CFD6DA_361:;				
            _AE0CFD6DA_361:
            ; //	asm	nop				
0040F:      	nop
            ; //_AE0CFD6DA_362:;				
            _AE0CFD6DA_362:
            ; //	asm	nop				
00410:      	nop
            ; //_AE0CFD6DA_363:;				
            _AE0CFD6DA_363:
            ; //	asm	nop				
00411:      	nop
            ; //_AE0CFD6DA_364:;				
            _AE0CFD6DA_364:
            ; //	asm	nop				
00412:      	nop
            ; //_AE0CFD6DA_365:;				
            _AE0CFD6DA_365:
            ; //	asm	nop				
00413:      	nop
            ; //_AE0CFD6DA_366:;				
            _AE0CFD6DA_366:
            ; //	asm	nop				
00414:      	nop
            ; //_AE0CFD6DA_367:;				
            _AE0CFD6DA_367:
            ; //	asm	nop				
00415:      	nop
            ; //_AE0CFD6DA_368:;				
            _AE0CFD6DA_368:
            ; //	asm	nop				
00416:      	nop
            ; //_AE0CFD6DA_369:;				
            _AE0CFD6DA_369:
            ; //	asm	nop				
00417:      	nop
            ; //_AE0CFD6DA_370:;				
            _AE0CFD6DA_370:
            ; //	asm clr io[0x09].b14;			
00418:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_371:;				
            _AE0CFD6DA_371:
            ; //	asm	nop				
00419:      	nop
            ; //_AE0CFD6DA_372:;				
            _AE0CFD6DA_372:
            ; //	asm	nop				
0041A:      	nop
            ; //_AE0CFD6DA_373:;				
            _AE0CFD6DA_373:
            ; //	asm	nop				
0041B:      	nop
            ; //_AE0CFD6DA_374:;				
            _AE0CFD6DA_374:
            ; //	asm set io[0x09].b14;			
0041C:      	set io[0x09].b14//
            ; //_AE0CFD6DA_375:;				
            _AE0CFD6DA_375:
            ; //	asm	nop				
0041D:      	nop
            ; //_AE0CFD6DA_376:;				
            _AE0CFD6DA_376:
            ; //	asm	nop				
0041E:      	nop
            ; //_AE0CFD6DA_377:;				
            _AE0CFD6DA_377:
            ; //	asm	nop				
0041F:      	nop
            ; //_AE0CFD6DA_378:;				
            _AE0CFD6DA_378:
            ; //	asm	nop				
00420:      	nop
            ; //_AE0CFD6DA_379:;				
            _AE0CFD6DA_379:
            ; //	asm	nop				
00421:      	nop
            ; //_AE0CFD6DA_380:;				
            _AE0CFD6DA_380:
            ; //	asm	nop				
00422:      	nop
            ; //_AE0CFD6DA_381:;				
            _AE0CFD6DA_381:
            ; //	asm	nop				
00423:      	nop
            ; //_AE0CFD6DA_382:;				
            _AE0CFD6DA_382:
            ; //	asm	nop				
00424:      	nop
            ; //_AE0CFD6DA_383:;				
            _AE0CFD6DA_383:
            ; //	asm	nop				
00425:      	nop
            ; //_AE0CFD6DA_384:;				
            _AE0CFD6DA_384:
            ; //	asm	nop				
00426:      	nop
            ; //_AE0CFD6DA_385:;				
            _AE0CFD6DA_385:
            ; //	asm	nop				
00427:      	nop
            ; //_AE0CFD6DA_386:;				
            _AE0CFD6DA_386:
            ; //	asm	nop				
00428:      	nop
            ; //_AE0CFD6DA_387:;				
            _AE0CFD6DA_387:
            ; //	asm clr io[0x09].b14;			
00429:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_388:;				
            _AE0CFD6DA_388:
            ; //	asm	nop				
0042A:      	nop
            ; //_AE0CFD6DA_389:;				
            _AE0CFD6DA_389:
            ; //	asm	nop				
0042B:      	nop
            ; //_AE0CFD6DA_390:;				
            _AE0CFD6DA_390:
            ; //	asm	nop				
0042C:      	nop
            ; //_AE0CFD6DA_391:;				
            _AE0CFD6DA_391:
            ; //	asm set io[0x09].b14;			
0042D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_392:;				
            _AE0CFD6DA_392:
            ; //	asm	nop				
0042E:      	nop
            ; //_AE0CFD6DA_393:;				
            _AE0CFD6DA_393:
            ; //	asm	nop				
0042F:      	nop
            ; //_AE0CFD6DA_394:;				
            _AE0CFD6DA_394:
            ; //	asm	nop				
00430:      	nop
            ; //_AE0CFD6DA_395:;				
            _AE0CFD6DA_395:
            ; //	asm	nop				
00431:      	nop
            ; //_AE0CFD6DA_396:;				
            _AE0CFD6DA_396:
            ; //	asm	nop				
00432:      	nop
            ; //_AE0CFD6DA_397:;				
            _AE0CFD6DA_397:
            ; //	asm	nop				
00433:      	nop
            ; //_AE0CFD6DA_398:;				
            _AE0CFD6DA_398:
            ; //	asm	nop				
00434:      	nop
            ; //_AE0CFD6DA_399:;				
            _AE0CFD6DA_399:
            ; //	asm	nop				
00435:      	nop
            ; //_AE0CFD6DA_400:;				
            _AE0CFD6DA_400:
            ; //	asm	nop				
00436:      	nop
            ; //_AE0CFD6DA_401:;				
            _AE0CFD6DA_401:
            ; //	asm	nop				
00437:      	nop
            ; //_AE0CFD6DA_402:;				
            _AE0CFD6DA_402:
            ; //	asm	nop				
00438:      	nop
            ; //_AE0CFD6DA_403:;				
            _AE0CFD6DA_403:
            ; //	asm	nop				
00439:      	nop
            ; //_AE0CFD6DA_404:;				
            _AE0CFD6DA_404:
            ; //	asm clr io[0x09].b14;			
0043A:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_405:;				
            _AE0CFD6DA_405:
            ; //	asm	nop				
0043B:      	nop
            ; //_AE0CFD6DA_406:;				
            _AE0CFD6DA_406:
            ; //	asm	nop				
0043C:      	nop
            ; //_AE0CFD6DA_407:;				
            _AE0CFD6DA_407:
            ; //	asm	nop				
0043D:      	nop
            ; //_AE0CFD6DA_408:;				
            _AE0CFD6DA_408:
            ; //	asm set io[0x09].b14;			
0043E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_409:;				
            _AE0CFD6DA_409:
            ; //	asm	nop				
0043F:      	nop
            ; //_AE0CFD6DA_410:;				
            _AE0CFD6DA_410:
            ; //	asm	nop				
00440:      	nop
            ; //_AE0CFD6DA_411:;				
            _AE0CFD6DA_411:
            ; //	asm	nop				
00441:      	nop
            ; //_AE0CFD6DA_412:;				
            _AE0CFD6DA_412:
            ; //	asm	nop				
00442:      	nop
            ; //_AE0CFD6DA_413:;				
            _AE0CFD6DA_413:
            ; //	asm	nop				
00443:      	nop
            ; //_AE0CFD6DA_414:;				
            _AE0CFD6DA_414:
            ; //	asm	nop				
00444:      	nop
            ; //_AE0CFD6DA_415:;				
            _AE0CFD6DA_415:
            ; //	asm	nop				
00445:      	nop
            ; //_AE0CFD6DA_416:;				
            _AE0CFD6DA_416:
            ; //	asm	nop				
00446:      	nop
            ; //_AE0CFD6DA_417:;				
            _AE0CFD6DA_417:
            ; //	asm	nop				
00447:      	nop
            ; //_AE0CFD6DA_418:;				
            _AE0CFD6DA_418:
            ; //	asm	nop				
00448:      	nop
            ; //_AE0CFD6DA_419:;				
            _AE0CFD6DA_419:
            ; //	asm	nop				
00449:      	nop
            ; //_AE0CFD6DA_420:;				
            _AE0CFD6DA_420:
            ; //	asm	nop				
0044A:      	nop
            ; //_AE0CFD6DA_421:;				
            _AE0CFD6DA_421:
            ; //	asm clr io[0x09].b14;			
0044B:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_422:;				
            _AE0CFD6DA_422:
            ; //	asm	nop				
0044C:      	nop
            ; //_AE0CFD6DA_423:;				
            _AE0CFD6DA_423:
            ; //	asm	nop				
0044D:      	nop
            ; //_AE0CFD6DA_424:;				
            _AE0CFD6DA_424:
            ; //	asm	nop				
0044E:      	nop
            ; //_AE0CFD6DA_425:;				
            _AE0CFD6DA_425:
            ; //	asm set io[0x09].b14;			
0044F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_426:;				
            _AE0CFD6DA_426:
            ; //	asm	nop				
00450:      	nop
            ; //_AE0CFD6DA_427:;				
            _AE0CFD6DA_427:
            ; //	asm	nop				
00451:      	nop
            ; //_AE0CFD6DA_428:;				
            _AE0CFD6DA_428:
            ; //	asm	nop				
00452:      	nop
            ; //_AE0CFD6DA_429:;				
            _AE0CFD6DA_429:
            ; //	asm	nop				
00453:      	nop
            ; //_AE0CFD6DA_430:;				
            _AE0CFD6DA_430:
            ; //	asm	nop				
00454:      	nop
            ; //_AE0CFD6DA_431:;				
            _AE0CFD6DA_431:
            ; //	asm	nop				
00455:      	nop
            ; //_AE0CFD6DA_432:;				
            _AE0CFD6DA_432:
            ; //	asm	nop				
00456:      	nop
            ; //_AE0CFD6DA_433:;				
            _AE0CFD6DA_433:
            ; //	asm	nop				
00457:      	nop
            ; //_AE0CFD6DA_434:;				
            _AE0CFD6DA_434:
            ; //	asm	nop				
00458:      	nop
            ; //_AE0CFD6DA_435:;				
            _AE0CFD6DA_435:
            ; //	asm	nop				
00459:      	nop
            ; //_AE0CFD6DA_436:;				
            _AE0CFD6DA_436:
            ; //	asm	nop				
0045A:      	nop
            ; //_AE0CFD6DA_437:;				
            _AE0CFD6DA_437:
            ; //	asm	nop				
0045B:      	nop
            ; //_AE0CFD6DA_438:;				
            _AE0CFD6DA_438:
            ; //	asm clr io[0x09].b14;			
0045C:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_439:;				
            _AE0CFD6DA_439:
            ; //	asm	nop				
0045D:      	nop
            ; //_AE0CFD6DA_440:;				
            _AE0CFD6DA_440:
            ; //	asm	nop				
0045E:      	nop
            ; //_AE0CFD6DA_441:;				
            _AE0CFD6DA_441:
            ; //	asm	nop				
0045F:      	nop
            ; //_AE0CFD6DA_442:;				
            _AE0CFD6DA_442:
            ; //	asm set io[0x09].b14;			
00460:      	set io[0x09].b14//
            ; //_AE0CFD6DA_443:;				
            _AE0CFD6DA_443:
            ; //	asm	nop				
00461:      	nop
            ; //_AE0CFD6DA_444:;				
            _AE0CFD6DA_444:
            ; //	asm	nop				
00462:      	nop
            ; //_AE0CFD6DA_445:;				
            _AE0CFD6DA_445:
            ; //	asm	nop				
00463:      	nop
            ; //_AE0CFD6DA_446:;				
            _AE0CFD6DA_446:
            ; //	asm	nop				
00464:      	nop
            ; //_AE0CFD6DA_447:;				
            _AE0CFD6DA_447:
            ; //	asm	nop				
00465:      	nop
            ; //_AE0CFD6DA_448:;				
            _AE0CFD6DA_448:
            ; //	asm	nop				
00466:      	nop
            ; //_AE0CFD6DA_449:;				
            _AE0CFD6DA_449:
            ; //	asm	nop				
00467:      	nop
            ; //_AE0CFD6DA_450:;				
            _AE0CFD6DA_450:
            ; //	asm	nop				
00468:      	nop
            ; //_AE0CFD6DA_451:;				
            _AE0CFD6DA_451:
            ; //	asm	nop				
00469:      	nop
            ; //_AE0CFD6DA_452:;				
            _AE0CFD6DA_452:
            ; //	asm	nop				
0046A:      	nop
            ; //_AE0CFD6DA_453:;				
            _AE0CFD6DA_453:
            ; //	asm	nop				
0046B:      	nop
            ; //_AE0CFD6DA_454:;				
            _AE0CFD6DA_454:
            ; //	asm	nop				
0046C:      	nop
            ; //_AE0CFD6DA_455:;				
            _AE0CFD6DA_455:
            ; //	asm clr io[0x09].b14;			
0046D:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_456:;				
            _AE0CFD6DA_456:
            ; //	asm	nop				
0046E:      	nop
            ; //_AE0CFD6DA_457:;				
            _AE0CFD6DA_457:
            ; //	asm	nop				
0046F:      	nop
            ; //_AE0CFD6DA_458:;				
            _AE0CFD6DA_458:
            ; //	asm	nop				
00470:      	nop
            ; //_AE0CFD6DA_459:;				
            _AE0CFD6DA_459:
            ; //	asm set io[0x09].b14;			
00471:      	set io[0x09].b14//
            ; //_AE0CFD6DA_460:;				
            _AE0CFD6DA_460:
            ; //	asm	nop				
00472:      	nop
            ; //_AE0CFD6DA_461:;				
            _AE0CFD6DA_461:
            ; //	asm	nop				
00473:      	nop
            ; //_AE0CFD6DA_462:;				
            _AE0CFD6DA_462:
            ; //	asm	nop				
00474:      	nop
            ; //_AE0CFD6DA_463:;				
            _AE0CFD6DA_463:
            ; //	asm	nop				
00475:      	nop
            ; //_AE0CFD6DA_464:;				
            _AE0CFD6DA_464:
            ; //	asm	nop				
00476:      	nop
            ; //_AE0CFD6DA_465:;				
            _AE0CFD6DA_465:
            ; //	asm	nop				
00477:      	nop
            ; //_AE0CFD6DA_466:;				
            _AE0CFD6DA_466:
            ; //	asm	nop				
00478:      	nop
            ; //_AE0CFD6DA_467:;				
            _AE0CFD6DA_467:
            ; //	asm	nop				
00479:      	nop
            ; //_AE0CFD6DA_468:;				
            _AE0CFD6DA_468:
            ; //	asm	nop				
0047A:      	nop
            ; //_AE0CFD6DA_469:;				
            _AE0CFD6DA_469:
            ; //	asm	nop				
0047B:      	nop
            ; //_AE0CFD6DA_470:;				
            _AE0CFD6DA_470:
            ; //	asm	nop				
0047C:      	nop
            ; //_AE0CFD6DA_471:;				
            _AE0CFD6DA_471:
            ; //	asm	nop				
0047D:      	nop
            ; //_AE0CFD6DA_472:;				
            _AE0CFD6DA_472:
            ; //	asm clr io[0x09].b14;			
0047E:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_473:;				
            _AE0CFD6DA_473:
            ; //	asm	nop				
0047F:      	nop
            ; //_AE0CFD6DA_474:;				
            _AE0CFD6DA_474:
            ; //	asm	nop				
00480:      	nop
            ; //_AE0CFD6DA_475:;				
            _AE0CFD6DA_475:
            ; //	asm	nop				
00481:      	nop
            ; //_AE0CFD6DA_476:;				
            _AE0CFD6DA_476:
            ; //	asm set io[0x09].b14;			
00482:      	set io[0x09].b14//
            ; //_AE0CFD6DA_477:;				
            _AE0CFD6DA_477:
            ; //	asm	nop				
00483:      	nop
            ; //_AE0CFD6DA_478:;				
            _AE0CFD6DA_478:
            ; //	asm	nop				
00484:      	nop
            ; //_AE0CFD6DA_479:;				
            _AE0CFD6DA_479:
            ; //	asm	nop				
00485:      	nop
            ; //_AE0CFD6DA_480:;				
            _AE0CFD6DA_480:
            ; //	asm	nop				
00486:      	nop
            ; //_AE0CFD6DA_481:;				
            _AE0CFD6DA_481:
            ; //	asm	nop				
00487:      	nop
            ; //_AE0CFD6DA_482:;				
            _AE0CFD6DA_482:
            ; //	asm	nop				
00488:      	nop
            ; //_AE0CFD6DA_483:;				
            _AE0CFD6DA_483:
            ; //	asm	nop				
00489:      	nop
            ; //_AE0CFD6DA_484:;				
            _AE0CFD6DA_484:
            ; //	asm	nop				
0048A:      	nop
            ; //_AE0CFD6DA_485:;				
            _AE0CFD6DA_485:
            ; //	asm	nop				
0048B:      	nop
            ; //_AE0CFD6DA_486:;				
            _AE0CFD6DA_486:
            ; //	asm	nop				
0048C:      	nop
            ; //_AE0CFD6DA_487:;				
            _AE0CFD6DA_487:
            ; //	asm	nop				
0048D:      	nop
            ; //_AE0CFD6DA_488:;				
            _AE0CFD6DA_488:
            ; //	asm	nop				
0048E:      	nop
            ; //_AE0CFD6DA_489:;				
            _AE0CFD6DA_489:
            ; //	asm clr io[0x09].b14;			
0048F:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_490:;				
            _AE0CFD6DA_490:
            ; //	asm	nop				
00490:      	nop
            ; //_AE0CFD6DA_491:;				
            _AE0CFD6DA_491:
            ; //	asm	nop				
00491:      	nop
            ; //_AE0CFD6DA_492:;				
            _AE0CFD6DA_492:
            ; //	asm	nop				
00492:      	nop
            ; //_AE0CFD6DA_493:;				
            _AE0CFD6DA_493:
            ; //	asm set io[0x09].b14;			
00493:      	set io[0x09].b14//
            ; //_AE0CFD6DA_494:;				
            _AE0CFD6DA_494:
            ; //	asm	nop				
00494:      	nop
            ; //_AE0CFD6DA_495:;				
            _AE0CFD6DA_495:
            ; //	asm	nop				
00495:      	nop
            ; //_AE0CFD6DA_496:;				
            _AE0CFD6DA_496:
            ; //	asm	nop				
00496:      	nop
            ; //_AE0CFD6DA_497:;				
            _AE0CFD6DA_497:
            ; //	asm	nop				
00497:      	nop
            ; //_AE0CFD6DA_498:;				
            _AE0CFD6DA_498:
            ; //	asm	nop				
00498:      	nop
            ; //_AE0CFD6DA_499:;				
            _AE0CFD6DA_499:
            ; //	asm	nop				
00499:      	nop
            ; //_AE0CFD6DA_500:;				
            _AE0CFD6DA_500:
            ; //	asm	nop				
0049A:      	nop
            ; //_AE0CFD6DA_501:;				
            _AE0CFD6DA_501:
            ; //	asm	nop				
0049B:      	nop
            ; //_AE0CFD6DA_502:;				
            _AE0CFD6DA_502:
            ; //	asm	nop				
0049C:      	nop
            ; //_AE0CFD6DA_503:;				
            _AE0CFD6DA_503:
            ; //	asm	nop				
0049D:      	nop
            ; //_AE0CFD6DA_504:;				
            _AE0CFD6DA_504:
            ; //	asm	nop				
0049E:      	nop
            ; //_AE0CFD6DA_505:;				
            _AE0CFD6DA_505:
            ; //	asm	nop				
0049F:      	nop
            ; //_AE0CFD6DA_506:;				
            _AE0CFD6DA_506:
            ; //	asm clr io[0x09].b14;			
004A0:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_507:;				
            _AE0CFD6DA_507:
            ; //	asm	nop				
004A1:      	nop
            ; //_AE0CFD6DA_508:;				
            _AE0CFD6DA_508:
            ; //	asm	nop				
004A2:      	nop
            ; //_AE0CFD6DA_509:;				
            _AE0CFD6DA_509:
            ; //	asm	nop				
004A3:      	nop
            ; //_AE0CFD6DA_510:;				
            _AE0CFD6DA_510:
            ; //	asm set io[0x09].b14;			
004A4:      	set io[0x09].b14//
            ; //_AE0CFD6DA_511:;				
            _AE0CFD6DA_511:
            ; //	asm	nop				
004A5:      	nop
            ; //_AE0CFD6DA_512:;				
            _AE0CFD6DA_512:
            ; //	asm	nop				
004A6:      	nop
            ; //_AE0CFD6DA_513:;				
            _AE0CFD6DA_513:
            ; //	asm	nop				
004A7:      	nop
            ; //_AE0CFD6DA_514:;				
            _AE0CFD6DA_514:
            ; //	asm	nop				
004A8:      	nop
            ; //_AE0CFD6DA_515:;				
            _AE0CFD6DA_515:
            ; //	asm	nop				
004A9:      	nop
            ; //_AE0CFD6DA_516:;				
            _AE0CFD6DA_516:
            ; //	asm	nop				
004AA:      	nop
            ; //_AE0CFD6DA_517:;				
            _AE0CFD6DA_517:
            ; //	asm	nop				
004AB:      	nop
            ; //_AE0CFD6DA_518:;				
            _AE0CFD6DA_518:
            ; //	asm	nop				
004AC:      	nop
            ; //_AE0CFD6DA_519:;				
            _AE0CFD6DA_519:
            ; //	asm	nop				
004AD:      	nop
            ; //_AE0CFD6DA_520:;				
            _AE0CFD6DA_520:
            ; //	asm	nop				
004AE:      	nop
            ; //_AE0CFD6DA_521:;				
            _AE0CFD6DA_521:
            ; //	asm	nop				
004AF:      	nop
            ; //_AE0CFD6DA_522:;				
            _AE0CFD6DA_522:
            ; //	asm	nop				
004B0:      	nop
            ; //_AE0CFD6DA_523:;				
            _AE0CFD6DA_523:
            ; //	asm clr io[0x09].b14;			
004B1:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_524:;				
            _AE0CFD6DA_524:
            ; //	asm	nop				
004B2:      	nop
            ; //_AE0CFD6DA_525:;				
            _AE0CFD6DA_525:
            ; //	asm	nop				
004B3:      	nop
            ; //_AE0CFD6DA_526:;				
            _AE0CFD6DA_526:
            ; //	asm	nop				
004B4:      	nop
            ; //_AE0CFD6DA_527:;				
            _AE0CFD6DA_527:
            ; //	asm set io[0x09].b14;			
004B5:      	set io[0x09].b14//
            ; //_AE0CFD6DA_528:;				
            _AE0CFD6DA_528:
            ; //	asm	nop				
004B6:      	nop
            ; //_AE0CFD6DA_529:;				
            _AE0CFD6DA_529:
            ; //	asm	nop				
004B7:      	nop
            ; //_AE0CFD6DA_530:;				
            _AE0CFD6DA_530:
            ; //	asm	nop				
004B8:      	nop
            ; //_AE0CFD6DA_531:;				
            _AE0CFD6DA_531:
            ; //	asm	nop				
004B9:      	nop
            ; //_AE0CFD6DA_532:;				
            _AE0CFD6DA_532:
            ; //	asm	nop				
004BA:      	nop
            ; //_AE0CFD6DA_533:;				
            _AE0CFD6DA_533:
            ; //	asm	nop				
004BB:      	nop
            ; //_AE0CFD6DA_534:;				
            _AE0CFD6DA_534:
            ; //	asm	nop				
004BC:      	nop
            ; //_AE0CFD6DA_535:;				
            _AE0CFD6DA_535:
            ; //	asm	nop				
004BD:      	nop
            ; //_AE0CFD6DA_536:;				
            _AE0CFD6DA_536:
            ; //	asm	nop				
004BE:      	nop
            ; //_AE0CFD6DA_537:;				
            _AE0CFD6DA_537:
            ; //	asm	nop				
004BF:      	nop
            ; //_AE0CFD6DA_538:;				
            _AE0CFD6DA_538:
            ; //	asm	nop				
004C0:      	nop
            ; //_AE0CFD6DA_539:;				
            _AE0CFD6DA_539:
            ; //	asm	nop				
004C1:      	nop
            ; //_AE0CFD6DA_540:;				
            _AE0CFD6DA_540:
            ; //	asm clr io[0x09].b14;			
004C2:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_541:;				
            _AE0CFD6DA_541:
            ; //	asm	nop				
004C3:      	nop
            ; //_AE0CFD6DA_542:;				
            _AE0CFD6DA_542:
            ; //	asm	nop				
004C4:      	nop
            ; //_AE0CFD6DA_543:;				
            _AE0CFD6DA_543:
            ; //	asm	nop				
004C5:      	nop
            ; //_AE0CFD6DA_544:;				
            _AE0CFD6DA_544:
            ; //	goto LD63FD439_72;			
004C6:      	pch =	LD63FD439_72
004C7:      	ljmp	LD63FD439_72
            ; //LD63FD439_75:;					
            LD63FD439_75:
            ; //_AE0CFD6DA_545:;				
            _AE0CFD6DA_545:
            ; //	asm set io[0x09].b14;			
004C8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_546:;				
            _AE0CFD6DA_546:
            ; //	asm	nop				
004C9:      	nop
            ; //_AE0CFD6DA_547:;				
            _AE0CFD6DA_547:
            ; //	asm	nop				
004CA:      	nop
            ; //_AE0CFD6DA_548:;				
            _AE0CFD6DA_548:
            ; //	asm	nop				
004CB:      	nop
            ; //_AE0CFD6DA_549:;				
            _AE0CFD6DA_549:
            ; //	asm clr io[0x09].b14;			
004CC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_550:;				
            _AE0CFD6DA_550:
            ; //	asm	nop				
004CD:      	nop
            ; //_AE0CFD6DA_551:;				
            _AE0CFD6DA_551:
            ; //	asm	nop				
004CE:      	nop
            ; //_AE0CFD6DA_552:;				
            _AE0CFD6DA_552:
            ; //	asm	nop				
004CF:      	nop
            ; //_AE0CFD6DA_553:;				
            _AE0CFD6DA_553:
            ; //	asm	nop				
004D0:      	nop
            ; //_AE0CFD6DA_554:;				
            _AE0CFD6DA_554:
            ; //	asm	nop				
004D1:      	nop
            ; //_AE0CFD6DA_555:;				
            _AE0CFD6DA_555:
            ; //	asm	nop				
004D2:      	nop
            ; //_AE0CFD6DA_556:;				
            _AE0CFD6DA_556:
            ; //	asm	nop				
004D3:      	nop
            ; //_AE0CFD6DA_557:;				
            _AE0CFD6DA_557:
            ; //	asm	nop				
004D4:      	nop
            ; //_AE0CFD6DA_558:;				
            _AE0CFD6DA_558:
            ; //	asm	nop				
004D5:      	nop
            ; //_AE0CFD6DA_559:;				
            _AE0CFD6DA_559:
            ; //	asm	nop				
004D6:      	nop
            ; //_AE0CFD6DA_560:;				
            _AE0CFD6DA_560:
            ; //	asm	nop				
004D7:      	nop
            ; //_AE0CFD6DA_561:;				
            _AE0CFD6DA_561:
            ; //	asm	nop				
004D8:      	nop
            ; //_AE0CFD6DA_562:;				
            _AE0CFD6DA_562:
            ; //	asm set io[0x09].b14;			
004D9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_563:;				
            _AE0CFD6DA_563:
            ; //	asm	nop				
004DA:      	nop
            ; //_AE0CFD6DA_564:;				
            _AE0CFD6DA_564:
            ; //	asm	nop				
004DB:      	nop
            ; //_AE0CFD6DA_565:;				
            _AE0CFD6DA_565:
            ; //	asm	nop				
004DC:      	nop
            ; //_AE0CFD6DA_566:;				
            _AE0CFD6DA_566:
            ; //	asm clr io[0x09].b14;			
004DD:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_567:;				
            _AE0CFD6DA_567:
            ; //	asm	nop				
004DE:      	nop
            ; //_AE0CFD6DA_568:;				
            _AE0CFD6DA_568:
            ; //	asm	nop				
004DF:      	nop
            ; //_AE0CFD6DA_569:;				
            _AE0CFD6DA_569:
            ; //	asm	nop				
004E0:      	nop
            ; //_AE0CFD6DA_570:;				
            _AE0CFD6DA_570:
            ; //	asm	nop				
004E1:      	nop
            ; //_AE0CFD6DA_571:;				
            _AE0CFD6DA_571:
            ; //	asm	nop				
004E2:      	nop
            ; //_AE0CFD6DA_572:;				
            _AE0CFD6DA_572:
            ; //	asm	nop				
004E3:      	nop
            ; //_AE0CFD6DA_573:;				
            _AE0CFD6DA_573:
            ; //	asm	nop				
004E4:      	nop
            ; //_AE0CFD6DA_574:;				
            _AE0CFD6DA_574:
            ; //	asm	nop				
004E5:      	nop
            ; //_AE0CFD6DA_575:;				
            _AE0CFD6DA_575:
            ; //	asm	nop				
004E6:      	nop
            ; //_AE0CFD6DA_576:;				
            _AE0CFD6DA_576:
            ; //	asm	nop				
004E7:      	nop
            ; //_AE0CFD6DA_577:;				
            _AE0CFD6DA_577:
            ; //	asm	nop				
004E8:      	nop
            ; //_AE0CFD6DA_578:;				
            _AE0CFD6DA_578:
            ; //	asm	nop				
004E9:      	nop
            ; //_AE0CFD6DA_579:;				
            _AE0CFD6DA_579:
            ; //	asm set io[0x09].b14;			
004EA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_580:;				
            _AE0CFD6DA_580:
            ; //	asm	nop				
004EB:      	nop
            ; //_AE0CFD6DA_581:;				
            _AE0CFD6DA_581:
            ; //	asm	nop				
004EC:      	nop
            ; //_AE0CFD6DA_582:;				
            _AE0CFD6DA_582:
            ; //	asm	nop				
004ED:      	nop
            ; //_AE0CFD6DA_583:;				
            _AE0CFD6DA_583:
            ; //	asm clr io[0x09].b14;			
004EE:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_584:;				
            _AE0CFD6DA_584:
            ; //	asm	nop				
004EF:      	nop
            ; //_AE0CFD6DA_585:;				
            _AE0CFD6DA_585:
            ; //	asm	nop				
004F0:      	nop
            ; //_AE0CFD6DA_586:;				
            _AE0CFD6DA_586:
            ; //	asm	nop				
004F1:      	nop
            ; //_AE0CFD6DA_587:;				
            _AE0CFD6DA_587:
            ; //	asm	nop				
004F2:      	nop
            ; //_AE0CFD6DA_588:;				
            _AE0CFD6DA_588:
            ; //	asm	nop				
004F3:      	nop
            ; //_AE0CFD6DA_589:;				
            _AE0CFD6DA_589:
            ; //	asm	nop				
004F4:      	nop
            ; //_AE0CFD6DA_590:;				
            _AE0CFD6DA_590:
            ; //	asm	nop				
004F5:      	nop
            ; //_AE0CFD6DA_591:;				
            _AE0CFD6DA_591:
            ; //	asm	nop				
004F6:      	nop
            ; //_AE0CFD6DA_592:;				
            _AE0CFD6DA_592:
            ; //	asm	nop				
004F7:      	nop
            ; //_AE0CFD6DA_593:;				
            _AE0CFD6DA_593:
            ; //	asm	nop				
004F8:      	nop
            ; //_AE0CFD6DA_594:;				
            _AE0CFD6DA_594:
            ; //	asm	nop				
004F9:      	nop
            ; //_AE0CFD6DA_595:;				
            _AE0CFD6DA_595:
            ; //	asm	nop				
004FA:      	nop
            ; //_AE0CFD6DA_596:;				
            _AE0CFD6DA_596:
            ; //	asm set io[0x09].b14;			
004FB:      	set io[0x09].b14//
            ; //_AE0CFD6DA_597:;				
            _AE0CFD6DA_597:
            ; //	asm	nop				
004FC:      	nop
            ; //_AE0CFD6DA_598:;				
            _AE0CFD6DA_598:
            ; //	asm	nop				
004FD:      	nop
            ; //_AE0CFD6DA_599:;				
            _AE0CFD6DA_599:
            ; //	asm	nop				
004FE:      	nop
            ; //_AE0CFD6DA_600:;				
            _AE0CFD6DA_600:
            ; //	asm clr io[0x09].b14;			
004FF:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_601:;				
            _AE0CFD6DA_601:
            ; //	asm	nop				
00500:      	nop
            ; //_AE0CFD6DA_602:;				
            _AE0CFD6DA_602:
            ; //	asm	nop				
00501:      	nop
            ; //_AE0CFD6DA_603:;				
            _AE0CFD6DA_603:
            ; //	asm	nop				
00502:      	nop
            ; //_AE0CFD6DA_604:;				
            _AE0CFD6DA_604:
            ; //	asm	nop				
00503:      	nop
            ; //_AE0CFD6DA_605:;				
            _AE0CFD6DA_605:
            ; //	asm	nop				
00504:      	nop
            ; //_AE0CFD6DA_606:;				
            _AE0CFD6DA_606:
            ; //	asm	nop				
00505:      	nop
            ; //_AE0CFD6DA_607:;				
            _AE0CFD6DA_607:
            ; //	asm	nop				
00506:      	nop
            ; //_AE0CFD6DA_608:;				
            _AE0CFD6DA_608:
            ; //	asm	nop				
00507:      	nop
            ; //_AE0CFD6DA_609:;				
            _AE0CFD6DA_609:
            ; //	asm	nop				
00508:      	nop
            ; //_AE0CFD6DA_610:;				
            _AE0CFD6DA_610:
            ; //	asm	nop				
00509:      	nop
            ; //_AE0CFD6DA_611:;				
            _AE0CFD6DA_611:
            ; //	asm	nop				
0050A:      	nop
            ; //_AE0CFD6DA_612:;				
            _AE0CFD6DA_612:
            ; //	asm	nop				
0050B:      	nop
            ; //_AE0CFD6DA_613:;				
            _AE0CFD6DA_613:
            ; //	asm set io[0x09].b14;			
0050C:      	set io[0x09].b14//
            ; //_AE0CFD6DA_614:;				
            _AE0CFD6DA_614:
            ; //	asm	nop				
0050D:      	nop
            ; //_AE0CFD6DA_615:;				
            _AE0CFD6DA_615:
            ; //	asm	nop				
0050E:      	nop
            ; //_AE0CFD6DA_616:;				
            _AE0CFD6DA_616:
            ; //	asm	nop				
0050F:      	nop
            ; //_AE0CFD6DA_617:;				
            _AE0CFD6DA_617:
            ; //	asm clr io[0x09].b14;			
00510:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_618:;				
            _AE0CFD6DA_618:
            ; //	asm	nop				
00511:      	nop
            ; //_AE0CFD6DA_619:;				
            _AE0CFD6DA_619:
            ; //	asm	nop				
00512:      	nop
            ; //_AE0CFD6DA_620:;				
            _AE0CFD6DA_620:
            ; //	asm	nop				
00513:      	nop
            ; //_AE0CFD6DA_621:;				
            _AE0CFD6DA_621:
            ; //	asm	nop				
00514:      	nop
            ; //_AE0CFD6DA_622:;				
            _AE0CFD6DA_622:
            ; //	asm	nop				
00515:      	nop
            ; //_AE0CFD6DA_623:;				
            _AE0CFD6DA_623:
            ; //	asm	nop				
00516:      	nop
            ; //_AE0CFD6DA_624:;				
            _AE0CFD6DA_624:
            ; //	asm	nop				
00517:      	nop
            ; //_AE0CFD6DA_625:;				
            _AE0CFD6DA_625:
            ; //	asm	nop				
00518:      	nop
            ; //_AE0CFD6DA_626:;				
            _AE0CFD6DA_626:
            ; //	asm	nop				
00519:      	nop
            ; //_AE0CFD6DA_627:;				
            _AE0CFD6DA_627:
            ; //	asm	nop				
0051A:      	nop
            ; //_AE0CFD6DA_628:;				
            _AE0CFD6DA_628:
            ; //	asm	nop				
0051B:      	nop
            ; //_AE0CFD6DA_629:;				
            _AE0CFD6DA_629:
            ; //	asm	nop				
0051C:      	nop
            ; //_AE0CFD6DA_630:;				
            _AE0CFD6DA_630:
            ; //	asm set io[0x09].b14;			
0051D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_631:;				
            _AE0CFD6DA_631:
            ; //	asm	nop				
0051E:      	nop
            ; //_AE0CFD6DA_632:;				
            _AE0CFD6DA_632:
            ; //	asm	nop				
0051F:      	nop
            ; //_AE0CFD6DA_633:;				
            _AE0CFD6DA_633:
            ; //	asm	nop				
00520:      	nop
            ; //_AE0CFD6DA_634:;				
            _AE0CFD6DA_634:
            ; //	asm clr io[0x09].b14;			
00521:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_635:;				
            _AE0CFD6DA_635:
            ; //	asm	nop				
00522:      	nop
            ; //_AE0CFD6DA_636:;				
            _AE0CFD6DA_636:
            ; //	asm	nop				
00523:      	nop
            ; //_AE0CFD6DA_637:;				
            _AE0CFD6DA_637:
            ; //	asm	nop				
00524:      	nop
            ; //_AE0CFD6DA_638:;				
            _AE0CFD6DA_638:
            ; //	asm	nop				
00525:      	nop
            ; //_AE0CFD6DA_639:;				
            _AE0CFD6DA_639:
            ; //	asm	nop				
00526:      	nop
            ; //_AE0CFD6DA_640:;				
            _AE0CFD6DA_640:
            ; //	asm	nop				
00527:      	nop
            ; //_AE0CFD6DA_641:;				
            _AE0CFD6DA_641:
            ; //	asm	nop				
00528:      	nop
            ; //_AE0CFD6DA_642:;				
            _AE0CFD6DA_642:
            ; //	asm	nop				
00529:      	nop
            ; //_AE0CFD6DA_643:;				
            _AE0CFD6DA_643:
            ; //	asm	nop				
0052A:      	nop
            ; //_AE0CFD6DA_644:;				
            _AE0CFD6DA_644:
            ; //	asm	nop				
0052B:      	nop
            ; //_AE0CFD6DA_645:;				
            _AE0CFD6DA_645:
            ; //	asm	nop				
0052C:      	nop
            ; //_AE0CFD6DA_646:;				
            _AE0CFD6DA_646:
            ; //	asm	nop				
0052D:      	nop
            ; //_AE0CFD6DA_647:;				
            _AE0CFD6DA_647:
            ; //	asm set io[0x09].b14;			
0052E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_648:;				
            _AE0CFD6DA_648:
            ; //	asm	nop				
0052F:      	nop
            ; //_AE0CFD6DA_649:;				
            _AE0CFD6DA_649:
            ; //	asm	nop				
00530:      	nop
            ; //_AE0CFD6DA_650:;				
            _AE0CFD6DA_650:
            ; //	asm	nop				
00531:      	nop
            ; //_AE0CFD6DA_651:;				
            _AE0CFD6DA_651:
            ; //	asm clr io[0x09].b14;			
00532:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_652:;				
            _AE0CFD6DA_652:
            ; //	asm	nop				
00533:      	nop
            ; //_AE0CFD6DA_653:;				
            _AE0CFD6DA_653:
            ; //	asm	nop				
00534:      	nop
            ; //_AE0CFD6DA_654:;				
            _AE0CFD6DA_654:
            ; //	asm	nop				
00535:      	nop
            ; //_AE0CFD6DA_655:;				
            _AE0CFD6DA_655:
            ; //	asm	nop				
00536:      	nop
            ; //_AE0CFD6DA_656:;				
            _AE0CFD6DA_656:
            ; //	asm	nop				
00537:      	nop
            ; //_AE0CFD6DA_657:;				
            _AE0CFD6DA_657:
            ; //	asm	nop				
00538:      	nop
            ; //_AE0CFD6DA_658:;				
            _AE0CFD6DA_658:
            ; //	asm	nop				
00539:      	nop
            ; //_AE0CFD6DA_659:;				
            _AE0CFD6DA_659:
            ; //	asm	nop				
0053A:      	nop
            ; //_AE0CFD6DA_660:;				
            _AE0CFD6DA_660:
            ; //	asm	nop				
0053B:      	nop
            ; //_AE0CFD6DA_661:;				
            _AE0CFD6DA_661:
            ; //	asm	nop				
0053C:      	nop
            ; //_AE0CFD6DA_662:;				
            _AE0CFD6DA_662:
            ; //	asm	nop				
0053D:      	nop
            ; //_AE0CFD6DA_663:;				
            _AE0CFD6DA_663:
            ; //	asm	nop				
0053E:      	nop
            ; //_AE0CFD6DA_664:;				
            _AE0CFD6DA_664:
            ; //	asm set io[0x09].b14;			
0053F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_665:;				
            _AE0CFD6DA_665:
            ; //	asm	nop				
00540:      	nop
            ; //_AE0CFD6DA_666:;				
            _AE0CFD6DA_666:
            ; //	asm	nop				
00541:      	nop
            ; //_AE0CFD6DA_667:;				
            _AE0CFD6DA_667:
            ; //	asm	nop				
00542:      	nop
            ; //_AE0CFD6DA_668:;				
            _AE0CFD6DA_668:
            ; //	asm clr io[0x09].b14;			
00543:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_669:;				
            _AE0CFD6DA_669:
            ; //	asm	nop				
00544:      	nop
            ; //_AE0CFD6DA_670:;				
            _AE0CFD6DA_670:
            ; //	asm	nop				
00545:      	nop
            ; //_AE0CFD6DA_671:;				
            _AE0CFD6DA_671:
            ; //	asm	nop				
00546:      	nop
            ; //_AE0CFD6DA_672:;				
            _AE0CFD6DA_672:
            ; //	asm	nop				
00547:      	nop
            ; //_AE0CFD6DA_673:;				
            _AE0CFD6DA_673:
            ; //	asm	nop				
00548:      	nop
            ; //_AE0CFD6DA_674:;				
            _AE0CFD6DA_674:
            ; //	asm	nop				
00549:      	nop
            ; //_AE0CFD6DA_675:;				
            _AE0CFD6DA_675:
            ; //	asm	nop				
0054A:      	nop
            ; //_AE0CFD6DA_676:;				
            _AE0CFD6DA_676:
            ; //	asm	nop				
0054B:      	nop
            ; //_AE0CFD6DA_677:;				
            _AE0CFD6DA_677:
            ; //	asm	nop				
0054C:      	nop
            ; //_AE0CFD6DA_678:;				
            _AE0CFD6DA_678:
            ; //	asm	nop				
0054D:      	nop
            ; //_AE0CFD6DA_679:;				
            _AE0CFD6DA_679:
            ; //	asm	nop				
0054E:      	nop
            ; //_AE0CFD6DA_680:;				
            _AE0CFD6DA_680:
            ; //	asm	nop				
0054F:      	nop
            ; //_AE0CFD6DA_681:;				
            _AE0CFD6DA_681:
            ; //	asm set io[0x09].b14;			
00550:      	set io[0x09].b14//
            ; //_AE0CFD6DA_682:;				
            _AE0CFD6DA_682:
            ; //	asm	nop				
00551:      	nop
            ; //_AE0CFD6DA_683:;				
            _AE0CFD6DA_683:
            ; //	asm	nop				
00552:      	nop
            ; //_AE0CFD6DA_684:;				
            _AE0CFD6DA_684:
            ; //	asm	nop				
00553:      	nop
            ; //_AE0CFD6DA_685:;				
            _AE0CFD6DA_685:
            ; //	asm clr io[0x09].b14;			
00554:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_686:;				
            _AE0CFD6DA_686:
            ; //	asm	nop				
00555:      	nop
            ; //_AE0CFD6DA_687:;				
            _AE0CFD6DA_687:
            ; //	asm	nop				
00556:      	nop
            ; //_AE0CFD6DA_688:;				
            _AE0CFD6DA_688:
            ; //	asm	nop				
00557:      	nop
            ; //_AE0CFD6DA_689:;				
            _AE0CFD6DA_689:
            ; //	asm	nop				
00558:      	nop
            ; //_AE0CFD6DA_690:;				
            _AE0CFD6DA_690:
            ; //	asm	nop				
00559:      	nop
            ; //_AE0CFD6DA_691:;				
            _AE0CFD6DA_691:
            ; //	asm	nop				
0055A:      	nop
            ; //_AE0CFD6DA_692:;				
            _AE0CFD6DA_692:
            ; //	asm	nop				
0055B:      	nop
            ; //_AE0CFD6DA_693:;				
            _AE0CFD6DA_693:
            ; //	asm	nop				
0055C:      	nop
            ; //_AE0CFD6DA_694:;				
            _AE0CFD6DA_694:
            ; //	asm	nop				
0055D:      	nop
            ; //_AE0CFD6DA_695:;				
            _AE0CFD6DA_695:
            ; //	asm	nop				
0055E:      	nop
            ; //_AE0CFD6DA_696:;				
            _AE0CFD6DA_696:
            ; //	asm	nop				
0055F:      	nop
            ; //_AE0CFD6DA_697:;				
            _AE0CFD6DA_697:
            ; //	asm	nop				
00560:      	nop
            ; //_AE0CFD6DA_698:;				
            _AE0CFD6DA_698:
            ; //	asm set io[0x09].b14;			
00561:      	set io[0x09].b14//
            ; //_AE0CFD6DA_699:;				
            _AE0CFD6DA_699:
            ; //	asm	nop				
00562:      	nop
            ; //_AE0CFD6DA_700:;				
            _AE0CFD6DA_700:
            ; //	asm	nop				
00563:      	nop
            ; //_AE0CFD6DA_701:;				
            _AE0CFD6DA_701:
            ; //	asm	nop				
00564:      	nop
            ; //_AE0CFD6DA_702:;				
            _AE0CFD6DA_702:
            ; //	asm clr io[0x09].b14;			
00565:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_703:;				
            _AE0CFD6DA_703:
            ; //	asm	nop				
00566:      	nop
            ; //_AE0CFD6DA_704:;				
            _AE0CFD6DA_704:
            ; //	asm	nop				
00567:      	nop
            ; //_AE0CFD6DA_705:;				
            _AE0CFD6DA_705:
            ; //	asm	nop				
00568:      	nop
            ; //_AE0CFD6DA_706:;				
            _AE0CFD6DA_706:
            ; //	asm	nop				
00569:      	nop
            ; //_AE0CFD6DA_707:;				
            _AE0CFD6DA_707:
            ; //	asm	nop				
0056A:      	nop
            ; //_AE0CFD6DA_708:;				
            _AE0CFD6DA_708:
            ; //	asm	nop				
0056B:      	nop
            ; //_AE0CFD6DA_709:;				
            _AE0CFD6DA_709:
            ; //	asm	nop				
0056C:      	nop
            ; //_AE0CFD6DA_710:;				
            _AE0CFD6DA_710:
            ; //	asm	nop				
0056D:      	nop
            ; //_AE0CFD6DA_711:;				
            _AE0CFD6DA_711:
            ; //	asm	nop				
0056E:      	nop
            ; //_AE0CFD6DA_712:;				
            _AE0CFD6DA_712:
            ; //	asm	nop				
0056F:      	nop
            ; //_AE0CFD6DA_713:;				
            _AE0CFD6DA_713:
            ; //	asm	nop				
00570:      	nop
            ; //_AE0CFD6DA_714:;				
            _AE0CFD6DA_714:
            ; //	asm	nop				
00571:      	nop
            ; //_AE0CFD6DA_715:;				
            _AE0CFD6DA_715:
            ; //	asm set io[0x09].b14;			
00572:      	set io[0x09].b14//
            ; //_AE0CFD6DA_716:;				
            _AE0CFD6DA_716:
            ; //	asm	nop				
00573:      	nop
            ; //_AE0CFD6DA_717:;				
            _AE0CFD6DA_717:
            ; //	asm	nop				
00574:      	nop
            ; //_AE0CFD6DA_718:;				
            _AE0CFD6DA_718:
            ; //	asm	nop				
00575:      	nop
            ; //_AE0CFD6DA_719:;				
            _AE0CFD6DA_719:
            ; //	asm clr io[0x09].b14;			
00576:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_720:;				
            _AE0CFD6DA_720:
            ; //	asm	nop				
00577:      	nop
            ; //_AE0CFD6DA_721:;				
            _AE0CFD6DA_721:
            ; //	asm	nop				
00578:      	nop
            ; //_AE0CFD6DA_722:;				
            _AE0CFD6DA_722:
            ; //	asm	nop				
00579:      	nop
            ; //_AE0CFD6DA_723:;				
            _AE0CFD6DA_723:
            ; //	asm	nop				
0057A:      	nop
            ; //_AE0CFD6DA_724:;				
            _AE0CFD6DA_724:
            ; //	asm	nop				
0057B:      	nop
            ; //_AE0CFD6DA_725:;				
            _AE0CFD6DA_725:
            ; //	asm	nop				
0057C:      	nop
            ; //_AE0CFD6DA_726:;				
            _AE0CFD6DA_726:
            ; //	asm	nop				
0057D:      	nop
            ; //_AE0CFD6DA_727:;				
            _AE0CFD6DA_727:
            ; //	asm	nop				
0057E:      	nop
            ; //_AE0CFD6DA_728:;				
            _AE0CFD6DA_728:
            ; //	asm	nop				
0057F:      	nop
            ; //_AE0CFD6DA_729:;				
            _AE0CFD6DA_729:
            ; //	asm	nop				
00580:      	nop
            ; //_AE0CFD6DA_730:;				
            _AE0CFD6DA_730:
            ; //	asm	nop				
00581:      	nop
            ; //_AE0CFD6DA_731:;				
            _AE0CFD6DA_731:
            ; //	asm	nop				
00582:      	nop
            ; //_AE0CFD6DA_732:;				
            _AE0CFD6DA_732:
            ; //	asm set io[0x09].b14;			
00583:      	set io[0x09].b14//
            ; //_AE0CFD6DA_733:;				
            _AE0CFD6DA_733:
            ; //	asm	nop				
00584:      	nop
            ; //_AE0CFD6DA_734:;				
            _AE0CFD6DA_734:
            ; //	asm	nop				
00585:      	nop
            ; //_AE0CFD6DA_735:;				
            _AE0CFD6DA_735:
            ; //	asm	nop				
00586:      	nop
            ; //_AE0CFD6DA_736:;				
            _AE0CFD6DA_736:
            ; //	asm clr io[0x09].b14;			
00587:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_737:;				
            _AE0CFD6DA_737:
            ; //	asm	nop				
00588:      	nop
            ; //_AE0CFD6DA_738:;				
            _AE0CFD6DA_738:
            ; //	asm	nop				
00589:      	nop
            ; //_AE0CFD6DA_739:;				
            _AE0CFD6DA_739:
            ; //	asm	nop				
0058A:      	nop
            ; //_AE0CFD6DA_740:;				
            _AE0CFD6DA_740:
            ; //	asm	nop				
0058B:      	nop
            ; //_AE0CFD6DA_741:;				
            _AE0CFD6DA_741:
            ; //	asm	nop				
0058C:      	nop
            ; //_AE0CFD6DA_742:;				
            _AE0CFD6DA_742:
            ; //	asm	nop				
0058D:      	nop
            ; //_AE0CFD6DA_743:;				
            _AE0CFD6DA_743:
            ; //	asm	nop				
0058E:      	nop
            ; //_AE0CFD6DA_744:;				
            _AE0CFD6DA_744:
            ; //	asm	nop				
0058F:      	nop
            ; //_AE0CFD6DA_745:;				
            _AE0CFD6DA_745:
            ; //	asm	nop				
00590:      	nop
            ; //_AE0CFD6DA_746:;				
            _AE0CFD6DA_746:
            ; //	asm	nop				
00591:      	nop
            ; //_AE0CFD6DA_747:;				
            _AE0CFD6DA_747:
            ; //	asm	nop				
00592:      	nop
            ; //_AE0CFD6DA_748:;				
            _AE0CFD6DA_748:
            ; //	asm	nop				
00593:      	nop
            ; //_AE0CFD6DA_749:;				
            _AE0CFD6DA_749:
            ; //	asm set io[0x09].b14;			
00594:      	set io[0x09].b14//
            ; //_AE0CFD6DA_750:;				
            _AE0CFD6DA_750:
            ; //	asm	nop				
00595:      	nop
            ; //_AE0CFD6DA_751:;				
            _AE0CFD6DA_751:
            ; //	asm	nop				
00596:      	nop
            ; //_AE0CFD6DA_752:;				
            _AE0CFD6DA_752:
            ; //	asm	nop				
00597:      	nop
            ; //_AE0CFD6DA_753:;				
            _AE0CFD6DA_753:
            ; //	asm clr io[0x09].b14;			
00598:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_754:;				
            _AE0CFD6DA_754:
            ; //	asm	nop				
00599:      	nop
            ; //_AE0CFD6DA_755:;				
            _AE0CFD6DA_755:
            ; //	asm	nop				
0059A:      	nop
            ; //_AE0CFD6DA_756:;				
            _AE0CFD6DA_756:
            ; //	asm	nop				
0059B:      	nop
            ; //_AE0CFD6DA_757:;				
            _AE0CFD6DA_757:
            ; //	asm	nop				
0059C:      	nop
            ; //_AE0CFD6DA_758:;				
            _AE0CFD6DA_758:
            ; //	asm	nop				
0059D:      	nop
            ; //_AE0CFD6DA_759:;				
            _AE0CFD6DA_759:
            ; //	asm	nop				
0059E:      	nop
            ; //_AE0CFD6DA_760:;				
            _AE0CFD6DA_760:
            ; //	asm	nop				
0059F:      	nop
            ; //_AE0CFD6DA_761:;				
            _AE0CFD6DA_761:
            ; //	asm	nop				
005A0:      	nop
            ; //_AE0CFD6DA_762:;				
            _AE0CFD6DA_762:
            ; //	asm	nop				
005A1:      	nop
            ; //_AE0CFD6DA_763:;				
            _AE0CFD6DA_763:
            ; //	asm	nop				
005A2:      	nop
            ; //_AE0CFD6DA_764:;				
            _AE0CFD6DA_764:
            ; //	asm	nop				
005A3:      	nop
            ; //_AE0CFD6DA_765:;				
            _AE0CFD6DA_765:
            ; //	asm	nop				
005A4:      	nop
            ; //_AE0CFD6DA_766:;				
            _AE0CFD6DA_766:
            ; //	asm set io[0x09].b14;			
005A5:      	set io[0x09].b14//
            ; //_AE0CFD6DA_767:;				
            _AE0CFD6DA_767:
            ; //	asm	nop				
005A6:      	nop
            ; //_AE0CFD6DA_768:;				
            _AE0CFD6DA_768:
            ; //	asm	nop				
005A7:      	nop
            ; //_AE0CFD6DA_769:;				
            _AE0CFD6DA_769:
            ; //	asm	nop				
005A8:      	nop
            ; //_AE0CFD6DA_770:;				
            _AE0CFD6DA_770:
            ; //	asm clr io[0x09].b14;			
005A9:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_771:;				
            _AE0CFD6DA_771:
            ; //	asm	nop				
005AA:      	nop
            ; //_AE0CFD6DA_772:;				
            _AE0CFD6DA_772:
            ; //	asm	nop				
005AB:      	nop
            ; //_AE0CFD6DA_773:;				
            _AE0CFD6DA_773:
            ; //	asm	nop				
005AC:      	nop
            ; //_AE0CFD6DA_774:;				
            _AE0CFD6DA_774:
            ; //	asm	nop				
005AD:      	nop
            ; //_AE0CFD6DA_775:;				
            _AE0CFD6DA_775:
            ; //	asm	nop				
005AE:      	nop
            ; //_AE0CFD6DA_776:;				
            _AE0CFD6DA_776:
            ; //	asm	nop				
005AF:      	nop
            ; //_AE0CFD6DA_777:;				
            _AE0CFD6DA_777:
            ; //	asm	nop				
005B0:      	nop
            ; //_AE0CFD6DA_778:;				
            _AE0CFD6DA_778:
            ; //	asm	nop				
005B1:      	nop
            ; //_AE0CFD6DA_779:;				
            _AE0CFD6DA_779:
            ; //	asm	nop				
005B2:      	nop
            ; //_AE0CFD6DA_780:;				
            _AE0CFD6DA_780:
            ; //	asm	nop				
005B3:      	nop
            ; //_AE0CFD6DA_781:;				
            _AE0CFD6DA_781:
            ; //	asm	nop				
005B4:      	nop
            ; //_AE0CFD6DA_782:;				
            _AE0CFD6DA_782:
            ; //	asm	nop				
005B5:      	nop
            ; //_AE0CFD6DA_783:;				
            _AE0CFD6DA_783:
            ; //	asm set io[0x09].b14;			
005B6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_784:;				
            _AE0CFD6DA_784:
            ; //	asm	nop				
005B7:      	nop
            ; //_AE0CFD6DA_785:;				
            _AE0CFD6DA_785:
            ; //	asm	nop				
005B8:      	nop
            ; //_AE0CFD6DA_786:;				
            _AE0CFD6DA_786:
            ; //	asm	nop				
005B9:      	nop
            ; //_AE0CFD6DA_787:;				
            _AE0CFD6DA_787:
            ; //	asm clr io[0x09].b14;			
005BA:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_788:;				
            _AE0CFD6DA_788:
            ; //	asm	nop				
005BB:      	nop
            ; //_AE0CFD6DA_789:;				
            _AE0CFD6DA_789:
            ; //	asm	nop				
005BC:      	nop
            ; //_AE0CFD6DA_790:;				
            _AE0CFD6DA_790:
            ; //	asm	nop				
005BD:      	nop
            ; //_AE0CFD6DA_791:;				
            _AE0CFD6DA_791:
            ; //	asm	nop				
005BE:      	nop
            ; //_AE0CFD6DA_792:;				
            _AE0CFD6DA_792:
            ; //	asm	nop				
005BF:      	nop
            ; //_AE0CFD6DA_793:;				
            _AE0CFD6DA_793:
            ; //	asm	nop				
005C0:      	nop
            ; //_AE0CFD6DA_794:;				
            _AE0CFD6DA_794:
            ; //	asm	nop				
005C1:      	nop
            ; //_AE0CFD6DA_795:;				
            _AE0CFD6DA_795:
            ; //	asm	nop				
005C2:      	nop
            ; //_AE0CFD6DA_796:;				
            _AE0CFD6DA_796:
            ; //	asm	nop				
005C3:      	nop
            ; //_AE0CFD6DA_797:;				
            _AE0CFD6DA_797:
            ; //	asm	nop				
005C4:      	nop
            ; //_AE0CFD6DA_798:;				
            _AE0CFD6DA_798:
            ; //	asm	nop				
005C5:      	nop
            ; //_AE0CFD6DA_799:;				
            _AE0CFD6DA_799:
            ; //	asm	nop				
005C6:      	nop
            ; //_AE0CFD6DA_800:;				
            _AE0CFD6DA_800:
            ; //	asm set io[0x09].b14;			
005C7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_801:;				
            _AE0CFD6DA_801:
            ; //	asm	nop				
005C8:      	nop
            ; //_AE0CFD6DA_802:;				
            _AE0CFD6DA_802:
            ; //	asm	nop				
005C9:      	nop
            ; //_AE0CFD6DA_803:;				
            _AE0CFD6DA_803:
            ; //	asm	nop				
005CA:      	nop
            ; //_AE0CFD6DA_804:;				
            _AE0CFD6DA_804:
            ; //	asm clr io[0x09].b14;			
005CB:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_805:;				
            _AE0CFD6DA_805:
            ; //	asm	nop				
005CC:      	nop
            ; //_AE0CFD6DA_806:;				
            _AE0CFD6DA_806:
            ; //	asm	nop				
005CD:      	nop
            ; //_AE0CFD6DA_807:;				
            _AE0CFD6DA_807:
            ; //	asm	nop				
005CE:      	nop
            ; //_AE0CFD6DA_808:;				
            _AE0CFD6DA_808:
            ; //	asm	nop				
005CF:      	nop
            ; //_AE0CFD6DA_809:;				
            _AE0CFD6DA_809:
            ; //	asm	nop				
005D0:      	nop
            ; //_AE0CFD6DA_810:;				
            _AE0CFD6DA_810:
            ; //	asm	nop				
005D1:      	nop
            ; //_AE0CFD6DA_811:;				
            _AE0CFD6DA_811:
            ; //	asm	nop				
005D2:      	nop
            ; //_AE0CFD6DA_812:;				
            _AE0CFD6DA_812:
            ; //	asm	nop				
005D3:      	nop
            ; //_AE0CFD6DA_813:;				
            _AE0CFD6DA_813:
            ; //	asm	nop				
005D4:      	nop
            ; //_AE0CFD6DA_814:;				
            _AE0CFD6DA_814:
            ; //	asm	nop				
005D5:      	nop
            ; //_AE0CFD6DA_815:;				
            _AE0CFD6DA_815:
            ; //	asm	nop				
005D6:      	nop
            ; //_AE0CFD6DA_816:;				
            _AE0CFD6DA_816:
            ; //	asm	nop				
005D7:      	nop
            ; //_AE0CFD6DA_817:;				
            _AE0CFD6DA_817:
            ; //	asm set io[0x09].b14;			
005D8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_818:;				
            _AE0CFD6DA_818:
            ; //	asm	nop				
005D9:      	nop
            ; //_AE0CFD6DA_819:;				
            _AE0CFD6DA_819:
            ; //	asm	nop				
005DA:      	nop
            ; //_AE0CFD6DA_820:;				
            _AE0CFD6DA_820:
            ; //	asm	nop				
005DB:      	nop
            ; //_AE0CFD6DA_821:;				
            _AE0CFD6DA_821:
            ; //	asm clr io[0x09].b14;			
005DC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_822:;				
            _AE0CFD6DA_822:
            ; //	asm	nop				
005DD:      	nop
            ; //_AE0CFD6DA_823:;				
            _AE0CFD6DA_823:
            ; //	asm	nop				
005DE:      	nop
            ; //_AE0CFD6DA_824:;				
            _AE0CFD6DA_824:
            ; //	asm	nop				
005DF:      	nop
            ; //_AE0CFD6DA_825:;				
            _AE0CFD6DA_825:
            ; //	asm	nop				
005E0:      	nop
            ; //_AE0CFD6DA_826:;				
            _AE0CFD6DA_826:
            ; //	asm	nop				
005E1:      	nop
            ; //_AE0CFD6DA_827:;				
            _AE0CFD6DA_827:
            ; //	asm	nop				
005E2:      	nop
            ; //_AE0CFD6DA_828:;				
            _AE0CFD6DA_828:
            ; //	asm	nop				
005E3:      	nop
            ; //_AE0CFD6DA_829:;				
            _AE0CFD6DA_829:
            ; //	asm	nop				
005E4:      	nop
            ; //_AE0CFD6DA_830:;				
            _AE0CFD6DA_830:
            ; //	asm	nop				
005E5:      	nop
            ; //_AE0CFD6DA_831:;				
            _AE0CFD6DA_831:
            ; //	asm	nop				
005E6:      	nop
            ; //_AE0CFD6DA_832:;				
            _AE0CFD6DA_832:
            ; //	asm	nop				
005E7:      	nop
            ; //_AE0CFD6DA_833:;				
            _AE0CFD6DA_833:
            ; //	asm	nop				
005E8:      	nop
            ; //_AE0CFD6DA_834:;				
            _AE0CFD6DA_834:
            ; //	asm set io[0x09].b14;			
005E9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_835:;				
            _AE0CFD6DA_835:
            ; //	asm	nop				
005EA:      	nop
            ; //_AE0CFD6DA_836:;				
            _AE0CFD6DA_836:
            ; //	asm	nop				
005EB:      	nop
            ; //_AE0CFD6DA_837:;				
            _AE0CFD6DA_837:
            ; //	asm	nop				
005EC:      	nop
            ; //_AE0CFD6DA_838:;				
            _AE0CFD6DA_838:
            ; //	asm clr io[0x09].b14;			
005ED:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_839:;				
            _AE0CFD6DA_839:
            ; //	asm	nop				
005EE:      	nop
            ; //_AE0CFD6DA_840:;				
            _AE0CFD6DA_840:
            ; //	asm	nop				
005EF:      	nop
            ; //_AE0CFD6DA_841:;				
            _AE0CFD6DA_841:
            ; //	asm	nop				
005F0:      	nop
            ; //_AE0CFD6DA_842:;				
            _AE0CFD6DA_842:
            ; //	asm	nop				
005F1:      	nop
            ; //_AE0CFD6DA_843:;				
            _AE0CFD6DA_843:
            ; //	asm	nop				
005F2:      	nop
            ; //_AE0CFD6DA_844:;				
            _AE0CFD6DA_844:
            ; //	asm	nop				
005F3:      	nop
            ; //_AE0CFD6DA_845:;				
            _AE0CFD6DA_845:
            ; //	asm	nop				
005F4:      	nop
            ; //_AE0CFD6DA_846:;				
            _AE0CFD6DA_846:
            ; //	asm	nop				
005F5:      	nop
            ; //_AE0CFD6DA_847:;				
            _AE0CFD6DA_847:
            ; //	asm	nop				
005F6:      	nop
            ; //_AE0CFD6DA_848:;				
            _AE0CFD6DA_848:
            ; //	asm	nop				
005F7:      	nop
            ; //_AE0CFD6DA_849:;				
            _AE0CFD6DA_849:
            ; //	asm	nop				
005F8:      	nop
            ; //_AE0CFD6DA_850:;				
            _AE0CFD6DA_850:
            ; //	asm	nop				
005F9:      	nop
            ; //_AE0CFD6DA_851:;				
            _AE0CFD6DA_851:
            ; //	asm set io[0x09].b14;			
005FA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_852:;				
            _AE0CFD6DA_852:
            ; //	asm	nop				
005FB:      	nop
            ; //_AE0CFD6DA_853:;				
            _AE0CFD6DA_853:
            ; //	asm	nop				
005FC:      	nop
            ; //_AE0CFD6DA_854:;				
            _AE0CFD6DA_854:
            ; //	asm	nop				
005FD:      	nop
            ; //_AE0CFD6DA_855:;				
            _AE0CFD6DA_855:
            ; //	asm clr io[0x09].b14;			
005FE:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_856:;				
            _AE0CFD6DA_856:
            ; //	asm	nop				
005FF:      	nop
            ; //_AE0CFD6DA_857:;				
            _AE0CFD6DA_857:
            ; //	asm	nop				
00600:      	nop
            ; //_AE0CFD6DA_858:;				
            _AE0CFD6DA_858:
            ; //	asm	nop				
00601:      	nop
            ; //_AE0CFD6DA_859:;				
            _AE0CFD6DA_859:
            ; //	asm	nop				
00602:      	nop
            ; //_AE0CFD6DA_860:;				
            _AE0CFD6DA_860:
            ; //	asm	nop				
00603:      	nop
            ; //_AE0CFD6DA_861:;				
            _AE0CFD6DA_861:
            ; //	asm	nop				
00604:      	nop
            ; //_AE0CFD6DA_862:;				
            _AE0CFD6DA_862:
            ; //	asm	nop				
00605:      	nop
            ; //_AE0CFD6DA_863:;				
            _AE0CFD6DA_863:
            ; //	asm	nop				
00606:      	nop
            ; //_AE0CFD6DA_864:;				
            _AE0CFD6DA_864:
            ; //	asm	nop				
00607:      	nop
            ; //_AE0CFD6DA_865:;				
            _AE0CFD6DA_865:
            ; //	asm	nop				
00608:      	nop
            ; //_AE0CFD6DA_866:;				
            _AE0CFD6DA_866:
            ; //	asm	nop				
00609:      	nop
            ; //_AE0CFD6DA_867:;				
            _AE0CFD6DA_867:
            ; //	asm	nop				
0060A:      	nop
            ; //_AE0CFD6DA_868:;				
            _AE0CFD6DA_868:
            ; //	asm set io[0x09].b14;			
0060B:      	set io[0x09].b14//
            ; //_AE0CFD6DA_869:;				
            _AE0CFD6DA_869:
            ; //	asm	nop				
0060C:      	nop
            ; //_AE0CFD6DA_870:;				
            _AE0CFD6DA_870:
            ; //	asm	nop				
0060D:      	nop
            ; //_AE0CFD6DA_871:;				
            _AE0CFD6DA_871:
            ; //	asm	nop				
0060E:      	nop
            ; //_AE0CFD6DA_872:;				
            _AE0CFD6DA_872:
            ; //	asm clr io[0x09].b14;			
0060F:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_873:;				
            _AE0CFD6DA_873:
            ; //	asm	nop				
00610:      	nop
            ; //_AE0CFD6DA_874:;				
            _AE0CFD6DA_874:
            ; //	asm	nop				
00611:      	nop
            ; //_AE0CFD6DA_875:;				
            _AE0CFD6DA_875:
            ; //	asm	nop				
00612:      	nop
            ; //_AE0CFD6DA_876:;				
            _AE0CFD6DA_876:
            ; //	asm	nop				
00613:      	nop
            ; //_AE0CFD6DA_877:;				
            _AE0CFD6DA_877:
            ; //	asm	nop				
00614:      	nop
            ; //_AE0CFD6DA_878:;				
            _AE0CFD6DA_878:
            ; //	asm	nop				
00615:      	nop
            ; //_AE0CFD6DA_879:;				
            _AE0CFD6DA_879:
            ; //	asm	nop				
00616:      	nop
            ; //_AE0CFD6DA_880:;				
            _AE0CFD6DA_880:
            ; //	asm	nop				
00617:      	nop
            ; //_AE0CFD6DA_881:;				
            _AE0CFD6DA_881:
            ; //	asm	nop				
00618:      	nop
            ; //_AE0CFD6DA_882:;				
            _AE0CFD6DA_882:
            ; //	asm	nop				
00619:      	nop
            ; //_AE0CFD6DA_883:;				
            _AE0CFD6DA_883:
            ; //	asm	nop				
0061A:      	nop
            ; //_AE0CFD6DA_884:;				
            _AE0CFD6DA_884:
            ; //	asm	nop				
0061B:      	nop
            ; //_AE0CFD6DA_885:;				
            _AE0CFD6DA_885:
            ; //	asm set io[0x09].b14;			
0061C:      	set io[0x09].b14//
            ; //_AE0CFD6DA_886:;				
            _AE0CFD6DA_886:
            ; //	asm	nop				
0061D:      	nop
            ; //_AE0CFD6DA_887:;				
            _AE0CFD6DA_887:
            ; //	asm	nop				
0061E:      	nop
            ; //_AE0CFD6DA_888:;				
            _AE0CFD6DA_888:
            ; //	asm	nop				
0061F:      	nop
            ; //_AE0CFD6DA_889:;				
            _AE0CFD6DA_889:
            ; //	asm clr io[0x09].b14;			
00620:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_890:;				
            _AE0CFD6DA_890:
            ; //	asm	nop				
00621:      	nop
            ; //_AE0CFD6DA_891:;				
            _AE0CFD6DA_891:
            ; //	asm	nop				
00622:      	nop
            ; //_AE0CFD6DA_892:;				
            _AE0CFD6DA_892:
            ; //	asm	nop				
00623:      	nop
            ; //_AE0CFD6DA_893:;				
            _AE0CFD6DA_893:
            ; //	asm	nop				
00624:      	nop
            ; //_AE0CFD6DA_894:;				
            _AE0CFD6DA_894:
            ; //	asm	nop				
00625:      	nop
            ; //_AE0CFD6DA_895:;				
            _AE0CFD6DA_895:
            ; //	asm	nop				
00626:      	nop
            ; //_AE0CFD6DA_896:;				
            _AE0CFD6DA_896:
            ; //	asm	nop				
00627:      	nop
            ; //_AE0CFD6DA_897:;				
            _AE0CFD6DA_897:
            ; //	asm	nop				
00628:      	nop
            ; //_AE0CFD6DA_898:;				
            _AE0CFD6DA_898:
            ; //	asm	nop				
00629:      	nop
            ; //_AE0CFD6DA_899:;				
            _AE0CFD6DA_899:
            ; //	asm	nop				
0062A:      	nop
            ; //_AE0CFD6DA_900:;				
            _AE0CFD6DA_900:
            ; //	asm	nop				
0062B:      	nop
            ; //_AE0CFD6DA_901:;				
            _AE0CFD6DA_901:
            ; //	asm	nop				
0062C:      	nop
            ; //_AE0CFD6DA_902:;				
            _AE0CFD6DA_902:
            ; //	asm set io[0x09].b14;			
0062D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_903:;				
            _AE0CFD6DA_903:
            ; //	asm	nop				
0062E:      	nop
            ; //_AE0CFD6DA_904:;				
            _AE0CFD6DA_904:
            ; //	asm	nop				
0062F:      	nop
            ; //_AE0CFD6DA_905:;				
            _AE0CFD6DA_905:
            ; //	asm	nop				
00630:      	nop
            ; //_AE0CFD6DA_906:;				
            _AE0CFD6DA_906:
            ; //	asm clr io[0x09].b14;			
00631:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_907:;				
            _AE0CFD6DA_907:
            ; //	asm	nop				
00632:      	nop
            ; //_AE0CFD6DA_908:;				
            _AE0CFD6DA_908:
            ; //	asm	nop				
00633:      	nop
            ; //_AE0CFD6DA_909:;				
            _AE0CFD6DA_909:
            ; //	asm	nop				
00634:      	nop
            ; //_AE0CFD6DA_910:;				
            _AE0CFD6DA_910:
            ; //	asm	nop				
00635:      	nop
            ; //_AE0CFD6DA_911:;				
            _AE0CFD6DA_911:
            ; //	asm	nop				
00636:      	nop
            ; //_AE0CFD6DA_912:;				
            _AE0CFD6DA_912:
            ; //	asm	nop				
00637:      	nop
            ; //_AE0CFD6DA_913:;				
            _AE0CFD6DA_913:
            ; //	asm	nop				
00638:      	nop
            ; //_AE0CFD6DA_914:;				
            _AE0CFD6DA_914:
            ; //	asm	nop				
00639:      	nop
            ; //_AE0CFD6DA_915:;				
            _AE0CFD6DA_915:
            ; //	asm	nop				
0063A:      	nop
            ; //_AE0CFD6DA_916:;				
            _AE0CFD6DA_916:
            ; //	asm	nop				
0063B:      	nop
            ; //_AE0CFD6DA_917:;				
            _AE0CFD6DA_917:
            ; //	asm	nop				
0063C:      	nop
            ; //_AE0CFD6DA_918:;				
            _AE0CFD6DA_918:
            ; //	asm	nop				
0063D:      	nop
            ; //_AE0CFD6DA_919:;				
            _AE0CFD6DA_919:
            ; //	asm set io[0x09].b14;			
0063E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_920:;				
            _AE0CFD6DA_920:
            ; //	asm	nop				
0063F:      	nop
            ; //_AE0CFD6DA_921:;				
            _AE0CFD6DA_921:
            ; //	asm	nop				
00640:      	nop
            ; //_AE0CFD6DA_922:;				
            _AE0CFD6DA_922:
            ; //	asm	nop				
00641:      	nop
            ; //_AE0CFD6DA_923:;				
            _AE0CFD6DA_923:
            ; //	asm clr io[0x09].b14;			
00642:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_924:;				
            _AE0CFD6DA_924:
            ; //	asm	nop				
00643:      	nop
            ; //_AE0CFD6DA_925:;				
            _AE0CFD6DA_925:
            ; //	asm	nop				
00644:      	nop
            ; //_AE0CFD6DA_926:;				
            _AE0CFD6DA_926:
            ; //	asm	nop				
00645:      	nop
            ; //_AE0CFD6DA_927:;				
            _AE0CFD6DA_927:
            ; //	asm	nop				
00646:      	nop
            ; //_AE0CFD6DA_928:;				
            _AE0CFD6DA_928:
            ; //	asm	nop				
00647:      	nop
            ; //_AE0CFD6DA_929:;				
            _AE0CFD6DA_929:
            ; //	asm	nop				
00648:      	nop
            ; //_AE0CFD6DA_930:;				
            _AE0CFD6DA_930:
            ; //	asm	nop				
00649:      	nop
            ; //_AE0CFD6DA_931:;				
            _AE0CFD6DA_931:
            ; //	asm	nop				
0064A:      	nop
            ; //_AE0CFD6DA_932:;				
            _AE0CFD6DA_932:
            ; //	asm	nop				
0064B:      	nop
            ; //_AE0CFD6DA_933:;				
            _AE0CFD6DA_933:
            ; //	asm	nop				
0064C:      	nop
            ; //_AE0CFD6DA_934:;				
            _AE0CFD6DA_934:
            ; //	asm	nop				
0064D:      	nop
            ; //_AE0CFD6DA_935:;				
            _AE0CFD6DA_935:
            ; //	asm	nop				
0064E:      	nop
            ; //_AE0CFD6DA_936:;				
            _AE0CFD6DA_936:
            ; //	asm set io[0x09].b14;			
0064F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_937:;				
            _AE0CFD6DA_937:
            ; //	asm	nop				
00650:      	nop
            ; //_AE0CFD6DA_938:;				
            _AE0CFD6DA_938:
            ; //	asm	nop				
00651:      	nop
            ; //_AE0CFD6DA_939:;				
            _AE0CFD6DA_939:
            ; //	asm	nop				
00652:      	nop
            ; //_AE0CFD6DA_940:;				
            _AE0CFD6DA_940:
            ; //	asm clr io[0x09].b14;			
00653:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_941:;				
            _AE0CFD6DA_941:
            ; //	asm	nop				
00654:      	nop
            ; //_AE0CFD6DA_942:;				
            _AE0CFD6DA_942:
            ; //	asm	nop				
00655:      	nop
            ; //_AE0CFD6DA_943:;				
            _AE0CFD6DA_943:
            ; //	asm	nop				
00656:      	nop
            ; //_AE0CFD6DA_944:;				
            _AE0CFD6DA_944:
            ; //	asm	nop				
00657:      	nop
            ; //_AE0CFD6DA_945:;				
            _AE0CFD6DA_945:
            ; //	asm	nop				
00658:      	nop
            ; //_AE0CFD6DA_946:;				
            _AE0CFD6DA_946:
            ; //	asm	nop				
00659:      	nop
            ; //_AE0CFD6DA_947:;				
            _AE0CFD6DA_947:
            ; //	asm	nop				
0065A:      	nop
            ; //_AE0CFD6DA_948:;				
            _AE0CFD6DA_948:
            ; //	asm	nop				
0065B:      	nop
            ; //_AE0CFD6DA_949:;				
            _AE0CFD6DA_949:
            ; //	asm	nop				
0065C:      	nop
            ; //_AE0CFD6DA_950:;				
            _AE0CFD6DA_950:
            ; //	asm	nop				
0065D:      	nop
            ; //_AE0CFD6DA_951:;				
            _AE0CFD6DA_951:
            ; //	asm	nop				
0065E:      	nop
            ; //_AE0CFD6DA_952:;				
            _AE0CFD6DA_952:
            ; //	asm	nop				
0065F:      	nop
            ; //_AE0CFD6DA_953:;				
            _AE0CFD6DA_953:
            ; //	goto LD63FD439_72;			
00660:      	pch =	LD63FD439_72
00661:      	ljmp	LD63FD439_72
            ; //LD63FD439_76:;					
            LD63FD439_76:
            ; //_AE0CFD6DA_954:;				
            _AE0CFD6DA_954:
            ; //	asm set io[0x09].b14;			
00662:      	set io[0x09].b14//
            ; //_AE0CFD6DA_955:;				
            _AE0CFD6DA_955:
            ; //	asm	nop				
00663:      	nop
            ; //_AE0CFD6DA_956:;				
            _AE0CFD6DA_956:
            ; //	asm	nop				
00664:      	nop
            ; //_AE0CFD6DA_957:;				
            _AE0CFD6DA_957:
            ; //	asm	nop				
00665:      	nop
            ; //_AE0CFD6DA_958:;				
            _AE0CFD6DA_958:
            ; //	asm clr io[0x09].b14;			
00666:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_959:;				
            _AE0CFD6DA_959:
            ; //	asm	nop				
00667:      	nop
            ; //_AE0CFD6DA_960:;				
            _AE0CFD6DA_960:
            ; //	asm	nop				
00668:      	nop
            ; //_AE0CFD6DA_961:;				
            _AE0CFD6DA_961:
            ; //	asm	nop				
00669:      	nop
            ; //_AE0CFD6DA_962:;				
            _AE0CFD6DA_962:
            ; //	asm	nop				
0066A:      	nop
            ; //_AE0CFD6DA_963:;				
            _AE0CFD6DA_963:
            ; //	asm	nop				
0066B:      	nop
            ; //_AE0CFD6DA_964:;				
            _AE0CFD6DA_964:
            ; //	asm	nop				
0066C:      	nop
            ; //_AE0CFD6DA_965:;				
            _AE0CFD6DA_965:
            ; //	asm	nop				
0066D:      	nop
            ; //_AE0CFD6DA_966:;				
            _AE0CFD6DA_966:
            ; //	asm	nop				
0066E:      	nop
            ; //_AE0CFD6DA_967:;				
            _AE0CFD6DA_967:
            ; //	asm	nop				
0066F:      	nop
            ; //_AE0CFD6DA_968:;				
            _AE0CFD6DA_968:
            ; //	asm	nop				
00670:      	nop
            ; //_AE0CFD6DA_969:;				
            _AE0CFD6DA_969:
            ; //	asm	nop				
00671:      	nop
            ; //_AE0CFD6DA_970:;				
            _AE0CFD6DA_970:
            ; //	asm	nop				
00672:      	nop
            ; //_AE0CFD6DA_971:;				
            _AE0CFD6DA_971:
            ; //	asm set io[0x09].b14;			
00673:      	set io[0x09].b14//
            ; //_AE0CFD6DA_972:;				
            _AE0CFD6DA_972:
            ; //	asm	nop				
00674:      	nop
            ; //_AE0CFD6DA_973:;				
            _AE0CFD6DA_973:
            ; //	asm	nop				
00675:      	nop
            ; //_AE0CFD6DA_974:;				
            _AE0CFD6DA_974:
            ; //	asm	nop				
00676:      	nop
            ; //_AE0CFD6DA_975:;				
            _AE0CFD6DA_975:
            ; //	asm clr io[0x09].b14;			
00677:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_976:;				
            _AE0CFD6DA_976:
            ; //	asm	nop				
00678:      	nop
            ; //_AE0CFD6DA_977:;				
            _AE0CFD6DA_977:
            ; //	asm	nop				
00679:      	nop
            ; //_AE0CFD6DA_978:;				
            _AE0CFD6DA_978:
            ; //	asm	nop				
0067A:      	nop
            ; //_AE0CFD6DA_979:;				
            _AE0CFD6DA_979:
            ; //	asm	nop				
0067B:      	nop
            ; //_AE0CFD6DA_980:;				
            _AE0CFD6DA_980:
            ; //	asm	nop				
0067C:      	nop
            ; //_AE0CFD6DA_981:;				
            _AE0CFD6DA_981:
            ; //	asm	nop				
0067D:      	nop
            ; //_AE0CFD6DA_982:;				
            _AE0CFD6DA_982:
            ; //	asm	nop				
0067E:      	nop
            ; //_AE0CFD6DA_983:;				
            _AE0CFD6DA_983:
            ; //	asm	nop				
0067F:      	nop
            ; //_AE0CFD6DA_984:;				
            _AE0CFD6DA_984:
            ; //	asm	nop				
00680:      	nop
            ; //_AE0CFD6DA_985:;				
            _AE0CFD6DA_985:
            ; //	asm	nop				
00681:      	nop
            ; //_AE0CFD6DA_986:;				
            _AE0CFD6DA_986:
            ; //	asm	nop				
00682:      	nop
            ; //_AE0CFD6DA_987:;				
            _AE0CFD6DA_987:
            ; //	asm	nop				
00683:      	nop
            ; //_AE0CFD6DA_988:;				
            _AE0CFD6DA_988:
            ; //	asm set io[0x09].b14;			
00684:      	set io[0x09].b14//
            ; //_AE0CFD6DA_989:;				
            _AE0CFD6DA_989:
            ; //	asm	nop				
00685:      	nop
            ; //_AE0CFD6DA_990:;				
            _AE0CFD6DA_990:
            ; //	asm	nop				
00686:      	nop
            ; //_AE0CFD6DA_991:;				
            _AE0CFD6DA_991:
            ; //	asm	nop				
00687:      	nop
            ; //_AE0CFD6DA_992:;				
            _AE0CFD6DA_992:
            ; //	asm clr io[0x09].b14;			
00688:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_993:;				
            _AE0CFD6DA_993:
            ; //	asm	nop				
00689:      	nop
            ; //_AE0CFD6DA_994:;				
            _AE0CFD6DA_994:
            ; //	asm	nop				
0068A:      	nop
            ; //_AE0CFD6DA_995:;				
            _AE0CFD6DA_995:
            ; //	asm	nop				
0068B:      	nop
            ; //_AE0CFD6DA_996:;				
            _AE0CFD6DA_996:
            ; //	asm	nop				
0068C:      	nop
            ; //_AE0CFD6DA_997:;				
            _AE0CFD6DA_997:
            ; //	asm	nop				
0068D:      	nop
            ; //_AE0CFD6DA_998:;				
            _AE0CFD6DA_998:
            ; //	asm	nop				
0068E:      	nop
            ; //_AE0CFD6DA_999:;				
            _AE0CFD6DA_999:
            ; //	asm	nop				
0068F:      	nop
            ; //_AE0CFD6DA_1000:;				
            _AE0CFD6DA_1000:
            ; //	asm	nop				
00690:      	nop
            ; //_AE0CFD6DA_1001:;				
            _AE0CFD6DA_1001:
            ; //	asm	nop				
00691:      	nop
            ; //_AE0CFD6DA_1002:;				
            _AE0CFD6DA_1002:
            ; //	asm	nop				
00692:      	nop
            ; //_AE0CFD6DA_1003:;				
            _AE0CFD6DA_1003:
            ; //	asm	nop				
00693:      	nop
            ; //_AE0CFD6DA_1004:;				
            _AE0CFD6DA_1004:
            ; //	asm	nop				
00694:      	nop
            ; //_AE0CFD6DA_1005:;				
            _AE0CFD6DA_1005:
            ; //	asm set io[0x09].b14;			
00695:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1006:;				
            _AE0CFD6DA_1006:
            ; //	asm	nop				
00696:      	nop
            ; //_AE0CFD6DA_1007:;				
            _AE0CFD6DA_1007:
            ; //	asm	nop				
00697:      	nop
            ; //_AE0CFD6DA_1008:;				
            _AE0CFD6DA_1008:
            ; //	asm	nop				
00698:      	nop
            ; //_AE0CFD6DA_1009:;				
            _AE0CFD6DA_1009:
            ; //	asm clr io[0x09].b14;			
00699:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1010:;				
            _AE0CFD6DA_1010:
            ; //	asm	nop				
0069A:      	nop
            ; //_AE0CFD6DA_1011:;				
            _AE0CFD6DA_1011:
            ; //	asm	nop				
0069B:      	nop
            ; //_AE0CFD6DA_1012:;				
            _AE0CFD6DA_1012:
            ; //	asm	nop				
0069C:      	nop
            ; //_AE0CFD6DA_1013:;				
            _AE0CFD6DA_1013:
            ; //	asm	nop				
0069D:      	nop
            ; //_AE0CFD6DA_1014:;				
            _AE0CFD6DA_1014:
            ; //	asm	nop				
0069E:      	nop
            ; //_AE0CFD6DA_1015:;				
            _AE0CFD6DA_1015:
            ; //	asm	nop				
0069F:      	nop
            ; //_AE0CFD6DA_1016:;				
            _AE0CFD6DA_1016:
            ; //	asm	nop				
006A0:      	nop
            ; //_AE0CFD6DA_1017:;				
            _AE0CFD6DA_1017:
            ; //	asm	nop				
006A1:      	nop
            ; //_AE0CFD6DA_1018:;				
            _AE0CFD6DA_1018:
            ; //	asm	nop				
006A2:      	nop
            ; //_AE0CFD6DA_1019:;				
            _AE0CFD6DA_1019:
            ; //	asm	nop				
006A3:      	nop
            ; //_AE0CFD6DA_1020:;				
            _AE0CFD6DA_1020:
            ; //	asm	nop				
006A4:      	nop
            ; //_AE0CFD6DA_1021:;				
            _AE0CFD6DA_1021:
            ; //	asm	nop				
006A5:      	nop
            ; //_AE0CFD6DA_1022:;				
            _AE0CFD6DA_1022:
            ; //	asm set io[0x09].b14;			
006A6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1023:;				
            _AE0CFD6DA_1023:
            ; //	asm	nop				
006A7:      	nop
            ; //_AE0CFD6DA_1024:;				
            _AE0CFD6DA_1024:
            ; //	asm	nop				
006A8:      	nop
            ; //_AE0CFD6DA_1025:;				
            _AE0CFD6DA_1025:
            ; //	asm	nop				
006A9:      	nop
            ; //_AE0CFD6DA_1026:;				
            _AE0CFD6DA_1026:
            ; //	asm clr io[0x09].b14;			
006AA:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1027:;				
            _AE0CFD6DA_1027:
            ; //	asm	nop				
006AB:      	nop
            ; //_AE0CFD6DA_1028:;				
            _AE0CFD6DA_1028:
            ; //	asm	nop				
006AC:      	nop
            ; //_AE0CFD6DA_1029:;				
            _AE0CFD6DA_1029:
            ; //	asm	nop				
006AD:      	nop
            ; //_AE0CFD6DA_1030:;				
            _AE0CFD6DA_1030:
            ; //	asm	nop				
006AE:      	nop
            ; //_AE0CFD6DA_1031:;				
            _AE0CFD6DA_1031:
            ; //	asm	nop				
006AF:      	nop
            ; //_AE0CFD6DA_1032:;				
            _AE0CFD6DA_1032:
            ; //	asm	nop				
006B0:      	nop
            ; //_AE0CFD6DA_1033:;				
            _AE0CFD6DA_1033:
            ; //	asm	nop				
006B1:      	nop
            ; //_AE0CFD6DA_1034:;				
            _AE0CFD6DA_1034:
            ; //	asm	nop				
006B2:      	nop
            ; //_AE0CFD6DA_1035:;				
            _AE0CFD6DA_1035:
            ; //	asm	nop				
006B3:      	nop
            ; //_AE0CFD6DA_1036:;				
            _AE0CFD6DA_1036:
            ; //	asm	nop				
006B4:      	nop
            ; //_AE0CFD6DA_1037:;				
            _AE0CFD6DA_1037:
            ; //	asm	nop				
006B5:      	nop
            ; //_AE0CFD6DA_1038:;				
            _AE0CFD6DA_1038:
            ; //	asm	nop				
006B6:      	nop
            ; //_AE0CFD6DA_1039:;				
            _AE0CFD6DA_1039:
            ; //	asm set io[0x09].b14;			
006B7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1040:;				
            _AE0CFD6DA_1040:
            ; //	asm	nop				
006B8:      	nop
            ; //_AE0CFD6DA_1041:;				
            _AE0CFD6DA_1041:
            ; //	asm	nop				
006B9:      	nop
            ; //_AE0CFD6DA_1042:;				
            _AE0CFD6DA_1042:
            ; //	asm	nop				
006BA:      	nop
            ; //_AE0CFD6DA_1043:;				
            _AE0CFD6DA_1043:
            ; //	asm clr io[0x09].b14;			
006BB:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1044:;				
            _AE0CFD6DA_1044:
            ; //	asm	nop				
006BC:      	nop
            ; //_AE0CFD6DA_1045:;				
            _AE0CFD6DA_1045:
            ; //	asm	nop				
006BD:      	nop
            ; //_AE0CFD6DA_1046:;				
            _AE0CFD6DA_1046:
            ; //	asm	nop				
006BE:      	nop
            ; //_AE0CFD6DA_1047:;				
            _AE0CFD6DA_1047:
            ; //	asm	nop				
006BF:      	nop
            ; //_AE0CFD6DA_1048:;				
            _AE0CFD6DA_1048:
            ; //	asm	nop				
006C0:      	nop
            ; //_AE0CFD6DA_1049:;				
            _AE0CFD6DA_1049:
            ; //	asm	nop				
006C1:      	nop
            ; //_AE0CFD6DA_1050:;				
            _AE0CFD6DA_1050:
            ; //	asm	nop				
006C2:      	nop
            ; //_AE0CFD6DA_1051:;				
            _AE0CFD6DA_1051:
            ; //	asm	nop				
006C3:      	nop
            ; //_AE0CFD6DA_1052:;				
            _AE0CFD6DA_1052:
            ; //	asm	nop				
006C4:      	nop
            ; //_AE0CFD6DA_1053:;				
            _AE0CFD6DA_1053:
            ; //	asm	nop				
006C5:      	nop
            ; //_AE0CFD6DA_1054:;				
            _AE0CFD6DA_1054:
            ; //	asm	nop				
006C6:      	nop
            ; //_AE0CFD6DA_1055:;				
            _AE0CFD6DA_1055:
            ; //	asm	nop				
006C7:      	nop
            ; //_AE0CFD6DA_1056:;				
            _AE0CFD6DA_1056:
            ; //	asm set io[0x09].b14;			
006C8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1057:;				
            _AE0CFD6DA_1057:
            ; //	asm	nop				
006C9:      	nop
            ; //_AE0CFD6DA_1058:;				
            _AE0CFD6DA_1058:
            ; //	asm	nop				
006CA:      	nop
            ; //_AE0CFD6DA_1059:;				
            _AE0CFD6DA_1059:
            ; //	asm	nop				
006CB:      	nop
            ; //_AE0CFD6DA_1060:;				
            _AE0CFD6DA_1060:
            ; //	asm clr io[0x09].b14;			
006CC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1061:;				
            _AE0CFD6DA_1061:
            ; //	asm	nop				
006CD:      	nop
            ; //_AE0CFD6DA_1062:;				
            _AE0CFD6DA_1062:
            ; //	asm	nop				
006CE:      	nop
            ; //_AE0CFD6DA_1063:;				
            _AE0CFD6DA_1063:
            ; //	asm	nop				
006CF:      	nop
            ; //_AE0CFD6DA_1064:;				
            _AE0CFD6DA_1064:
            ; //	asm	nop				
006D0:      	nop
            ; //_AE0CFD6DA_1065:;				
            _AE0CFD6DA_1065:
            ; //	asm	nop				
006D1:      	nop
            ; //_AE0CFD6DA_1066:;				
            _AE0CFD6DA_1066:
            ; //	asm	nop				
006D2:      	nop
            ; //_AE0CFD6DA_1067:;				
            _AE0CFD6DA_1067:
            ; //	asm	nop				
006D3:      	nop
            ; //_AE0CFD6DA_1068:;				
            _AE0CFD6DA_1068:
            ; //	asm	nop				
006D4:      	nop
            ; //_AE0CFD6DA_1069:;				
            _AE0CFD6DA_1069:
            ; //	asm	nop				
006D5:      	nop
            ; //_AE0CFD6DA_1070:;				
            _AE0CFD6DA_1070:
            ; //	asm	nop				
006D6:      	nop
            ; //_AE0CFD6DA_1071:;				
            _AE0CFD6DA_1071:
            ; //	asm	nop				
006D7:      	nop
            ; //_AE0CFD6DA_1072:;				
            _AE0CFD6DA_1072:
            ; //	asm	nop				
006D8:      	nop
            ; //_AE0CFD6DA_1073:;				
            _AE0CFD6DA_1073:
            ; //	asm set io[0x09].b14;			
006D9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1074:;				
            _AE0CFD6DA_1074:
            ; //	asm	nop				
006DA:      	nop
            ; //_AE0CFD6DA_1075:;				
            _AE0CFD6DA_1075:
            ; //	asm	nop				
006DB:      	nop
            ; //_AE0CFD6DA_1076:;				
            _AE0CFD6DA_1076:
            ; //	asm	nop				
006DC:      	nop
            ; //_AE0CFD6DA_1077:;				
            _AE0CFD6DA_1077:
            ; //	asm clr io[0x09].b14;			
006DD:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1078:;				
            _AE0CFD6DA_1078:
            ; //	asm	nop				
006DE:      	nop
            ; //_AE0CFD6DA_1079:;				
            _AE0CFD6DA_1079:
            ; //	asm	nop				
006DF:      	nop
            ; //_AE0CFD6DA_1080:;				
            _AE0CFD6DA_1080:
            ; //	asm	nop				
006E0:      	nop
            ; //_AE0CFD6DA_1081:;				
            _AE0CFD6DA_1081:
            ; //	asm	nop				
006E1:      	nop
            ; //_AE0CFD6DA_1082:;				
            _AE0CFD6DA_1082:
            ; //	asm	nop				
006E2:      	nop
            ; //_AE0CFD6DA_1083:;				
            _AE0CFD6DA_1083:
            ; //	asm	nop				
006E3:      	nop
            ; //_AE0CFD6DA_1084:;				
            _AE0CFD6DA_1084:
            ; //	asm	nop				
006E4:      	nop
            ; //_AE0CFD6DA_1085:;				
            _AE0CFD6DA_1085:
            ; //	asm	nop				
006E5:      	nop
            ; //_AE0CFD6DA_1086:;				
            _AE0CFD6DA_1086:
            ; //	asm	nop				
006E6:      	nop
            ; //_AE0CFD6DA_1087:;				
            _AE0CFD6DA_1087:
            ; //	asm	nop				
006E7:      	nop
            ; //_AE0CFD6DA_1088:;				
            _AE0CFD6DA_1088:
            ; //	asm	nop				
006E8:      	nop
            ; //_AE0CFD6DA_1089:;				
            _AE0CFD6DA_1089:
            ; //	asm	nop				
006E9:      	nop
            ; //_AE0CFD6DA_1090:;				
            _AE0CFD6DA_1090:
            ; //	asm set io[0x09].b14;			
006EA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1091:;				
            _AE0CFD6DA_1091:
            ; //	asm	nop				
006EB:      	nop
            ; //_AE0CFD6DA_1092:;				
            _AE0CFD6DA_1092:
            ; //	asm	nop				
006EC:      	nop
            ; //_AE0CFD6DA_1093:;				
            _AE0CFD6DA_1093:
            ; //	asm	nop				
006ED:      	nop
            ; //_AE0CFD6DA_1094:;				
            _AE0CFD6DA_1094:
            ; //	asm	nop				
006EE:      	nop
            ; //_AE0CFD6DA_1095:;				
            _AE0CFD6DA_1095:
            ; //	asm	nop				
006EF:      	nop
            ; //_AE0CFD6DA_1096:;				
            _AE0CFD6DA_1096:
            ; //	asm	nop				
006F0:      	nop
            ; //_AE0CFD6DA_1097:;				
            _AE0CFD6DA_1097:
            ; //	asm	nop				
006F1:      	nop
            ; //_AE0CFD6DA_1098:;				
            _AE0CFD6DA_1098:
            ; //	asm	nop				
006F2:      	nop
            ; //_AE0CFD6DA_1099:;				
            _AE0CFD6DA_1099:
            ; //	asm	nop				
006F3:      	nop
            ; //_AE0CFD6DA_1100:;				
            _AE0CFD6DA_1100:
            ; //	asm	nop				
006F4:      	nop
            ; //_AE0CFD6DA_1101:;				
            _AE0CFD6DA_1101:
            ; //	asm	nop				
006F5:      	nop
            ; //_AE0CFD6DA_1102:;				
            _AE0CFD6DA_1102:
            ; //	asm	nop				
006F6:      	nop
            ; //_AE0CFD6DA_1103:;				
            _AE0CFD6DA_1103:
            ; //	asm clr io[0x09].b14;			
006F7:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1104:;				
            _AE0CFD6DA_1104:
            ; //	asm	nop				
006F8:      	nop
            ; //_AE0CFD6DA_1105:;				
            _AE0CFD6DA_1105:
            ; //	asm	nop				
006F9:      	nop
            ; //_AE0CFD6DA_1106:;				
            _AE0CFD6DA_1106:
            ; //	asm	nop				
006FA:      	nop
            ; //_AE0CFD6DA_1107:;				
            _AE0CFD6DA_1107:
            ; //	asm set io[0x09].b14;			
006FB:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1108:;				
            _AE0CFD6DA_1108:
            ; //	asm	nop				
006FC:      	nop
            ; //_AE0CFD6DA_1109:;				
            _AE0CFD6DA_1109:
            ; //	asm	nop				
006FD:      	nop
            ; //_AE0CFD6DA_1110:;				
            _AE0CFD6DA_1110:
            ; //	asm	nop				
006FE:      	nop
            ; //_AE0CFD6DA_1111:;				
            _AE0CFD6DA_1111:
            ; //	asm	nop				
006FF:      	nop
            ; //_AE0CFD6DA_1112:;				
            _AE0CFD6DA_1112:
            ; //	asm	nop				
00700:      	nop
            ; //_AE0CFD6DA_1113:;				
            _AE0CFD6DA_1113:
            ; //	asm	nop				
00701:      	nop
            ; //_AE0CFD6DA_1114:;				
            _AE0CFD6DA_1114:
            ; //	asm	nop				
00702:      	nop
            ; //_AE0CFD6DA_1115:;				
            _AE0CFD6DA_1115:
            ; //	asm	nop				
00703:      	nop
            ; //_AE0CFD6DA_1116:;				
            _AE0CFD6DA_1116:
            ; //	asm	nop				
00704:      	nop
            ; //_AE0CFD6DA_1117:;				
            _AE0CFD6DA_1117:
            ; //	asm	nop				
00705:      	nop
            ; //_AE0CFD6DA_1118:;				
            _AE0CFD6DA_1118:
            ; //	asm	nop				
00706:      	nop
            ; //_AE0CFD6DA_1119:;				
            _AE0CFD6DA_1119:
            ; //	asm	nop				
00707:      	nop
            ; //_AE0CFD6DA_1120:;				
            _AE0CFD6DA_1120:
            ; //	asm clr io[0x09].b14;			
00708:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1121:;				
            _AE0CFD6DA_1121:
            ; //	asm	nop				
00709:      	nop
            ; //_AE0CFD6DA_1122:;				
            _AE0CFD6DA_1122:
            ; //	asm	nop				
0070A:      	nop
            ; //_AE0CFD6DA_1123:;				
            _AE0CFD6DA_1123:
            ; //	asm	nop				
0070B:      	nop
            ; //_AE0CFD6DA_1124:;				
            _AE0CFD6DA_1124:
            ; //	asm set io[0x09].b14;			
0070C:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1125:;				
            _AE0CFD6DA_1125:
            ; //	asm	nop				
0070D:      	nop
            ; //_AE0CFD6DA_1126:;				
            _AE0CFD6DA_1126:
            ; //	asm	nop				
0070E:      	nop
            ; //_AE0CFD6DA_1127:;				
            _AE0CFD6DA_1127:
            ; //	asm	nop				
0070F:      	nop
            ; //_AE0CFD6DA_1128:;				
            _AE0CFD6DA_1128:
            ; //	asm	nop				
00710:      	nop
            ; //_AE0CFD6DA_1129:;				
            _AE0CFD6DA_1129:
            ; //	asm	nop				
00711:      	nop
            ; //_AE0CFD6DA_1130:;				
            _AE0CFD6DA_1130:
            ; //	asm	nop				
00712:      	nop
            ; //_AE0CFD6DA_1131:;				
            _AE0CFD6DA_1131:
            ; //	asm	nop				
00713:      	nop
            ; //_AE0CFD6DA_1132:;				
            _AE0CFD6DA_1132:
            ; //	asm	nop				
00714:      	nop
            ; //_AE0CFD6DA_1133:;				
            _AE0CFD6DA_1133:
            ; //	asm	nop				
00715:      	nop
            ; //_AE0CFD6DA_1134:;				
            _AE0CFD6DA_1134:
            ; //	asm	nop				
00716:      	nop
            ; //_AE0CFD6DA_1135:;				
            _AE0CFD6DA_1135:
            ; //	asm	nop				
00717:      	nop
            ; //_AE0CFD6DA_1136:;				
            _AE0CFD6DA_1136:
            ; //	asm	nop				
00718:      	nop
            ; //_AE0CFD6DA_1137:;				
            _AE0CFD6DA_1137:
            ; //	asm clr io[0x09].b14;			
00719:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1138:;				
            _AE0CFD6DA_1138:
            ; //	asm	nop				
0071A:      	nop
            ; //_AE0CFD6DA_1139:;				
            _AE0CFD6DA_1139:
            ; //	asm	nop				
0071B:      	nop
            ; //_AE0CFD6DA_1140:;				
            _AE0CFD6DA_1140:
            ; //	asm	nop				
0071C:      	nop
            ; //_AE0CFD6DA_1141:;				
            _AE0CFD6DA_1141:
            ; //	asm set io[0x09].b14;			
0071D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1142:;				
            _AE0CFD6DA_1142:
            ; //	asm	nop				
0071E:      	nop
            ; //_AE0CFD6DA_1143:;				
            _AE0CFD6DA_1143:
            ; //	asm	nop				
0071F:      	nop
            ; //_AE0CFD6DA_1144:;				
            _AE0CFD6DA_1144:
            ; //	asm	nop				
00720:      	nop
            ; //_AE0CFD6DA_1145:;				
            _AE0CFD6DA_1145:
            ; //	asm	nop				
00721:      	nop
            ; //_AE0CFD6DA_1146:;				
            _AE0CFD6DA_1146:
            ; //	asm	nop				
00722:      	nop
            ; //_AE0CFD6DA_1147:;				
            _AE0CFD6DA_1147:
            ; //	asm	nop				
00723:      	nop
            ; //_AE0CFD6DA_1148:;				
            _AE0CFD6DA_1148:
            ; //	asm	nop				
00724:      	nop
            ; //_AE0CFD6DA_1149:;				
            _AE0CFD6DA_1149:
            ; //	asm	nop				
00725:      	nop
            ; //_AE0CFD6DA_1150:;				
            _AE0CFD6DA_1150:
            ; //	asm	nop				
00726:      	nop
            ; //_AE0CFD6DA_1151:;				
            _AE0CFD6DA_1151:
            ; //	asm	nop				
00727:      	nop
            ; //_AE0CFD6DA_1152:;				
            _AE0CFD6DA_1152:
            ; //	asm	nop				
00728:      	nop
            ; //_AE0CFD6DA_1153:;				
            _AE0CFD6DA_1153:
            ; //	asm	nop				
00729:      	nop
            ; //_AE0CFD6DA_1154:;				
            _AE0CFD6DA_1154:
            ; //	asm clr io[0x09].b14;			
0072A:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1155:;				
            _AE0CFD6DA_1155:
            ; //	asm	nop				
0072B:      	nop
            ; //_AE0CFD6DA_1156:;				
            _AE0CFD6DA_1156:
            ; //	asm	nop				
0072C:      	nop
            ; //_AE0CFD6DA_1157:;				
            _AE0CFD6DA_1157:
            ; //	asm	nop				
0072D:      	nop
            ; //_AE0CFD6DA_1158:;				
            _AE0CFD6DA_1158:
            ; //	asm set io[0x09].b14;			
0072E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1159:;				
            _AE0CFD6DA_1159:
            ; //	asm	nop				
0072F:      	nop
            ; //_AE0CFD6DA_1160:;				
            _AE0CFD6DA_1160:
            ; //	asm	nop				
00730:      	nop
            ; //_AE0CFD6DA_1161:;				
            _AE0CFD6DA_1161:
            ; //	asm	nop				
00731:      	nop
            ; //_AE0CFD6DA_1162:;				
            _AE0CFD6DA_1162:
            ; //	asm	nop				
00732:      	nop
            ; //_AE0CFD6DA_1163:;				
            _AE0CFD6DA_1163:
            ; //	asm	nop				
00733:      	nop
            ; //_AE0CFD6DA_1164:;				
            _AE0CFD6DA_1164:
            ; //	asm	nop				
00734:      	nop
            ; //_AE0CFD6DA_1165:;				
            _AE0CFD6DA_1165:
            ; //	asm	nop				
00735:      	nop
            ; //_AE0CFD6DA_1166:;				
            _AE0CFD6DA_1166:
            ; //	asm	nop				
00736:      	nop
            ; //_AE0CFD6DA_1167:;				
            _AE0CFD6DA_1167:
            ; //	asm	nop				
00737:      	nop
            ; //_AE0CFD6DA_1168:;				
            _AE0CFD6DA_1168:
            ; //	asm	nop				
00738:      	nop
            ; //_AE0CFD6DA_1169:;				
            _AE0CFD6DA_1169:
            ; //	asm	nop				
00739:      	nop
            ; //_AE0CFD6DA_1170:;				
            _AE0CFD6DA_1170:
            ; //	asm	nop				
0073A:      	nop
            ; //_AE0CFD6DA_1171:;				
            _AE0CFD6DA_1171:
            ; //	asm clr io[0x09].b14;			
0073B:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1172:;				
            _AE0CFD6DA_1172:
            ; //	asm	nop				
0073C:      	nop
            ; //_AE0CFD6DA_1173:;				
            _AE0CFD6DA_1173:
            ; //	asm	nop				
0073D:      	nop
            ; //_AE0CFD6DA_1174:;				
            _AE0CFD6DA_1174:
            ; //	asm	nop				
0073E:      	nop
            ; //_AE0CFD6DA_1175:;				
            _AE0CFD6DA_1175:
            ; //	asm set io[0x09].b14;			
0073F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1176:;				
            _AE0CFD6DA_1176:
            ; //	asm	nop				
00740:      	nop
            ; //_AE0CFD6DA_1177:;				
            _AE0CFD6DA_1177:
            ; //	asm	nop				
00741:      	nop
            ; //_AE0CFD6DA_1178:;				
            _AE0CFD6DA_1178:
            ; //	asm	nop				
00742:      	nop
            ; //_AE0CFD6DA_1179:;				
            _AE0CFD6DA_1179:
            ; //	asm	nop				
00743:      	nop
            ; //_AE0CFD6DA_1180:;				
            _AE0CFD6DA_1180:
            ; //	asm	nop				
00744:      	nop
            ; //_AE0CFD6DA_1181:;				
            _AE0CFD6DA_1181:
            ; //	asm	nop				
00745:      	nop
            ; //_AE0CFD6DA_1182:;				
            _AE0CFD6DA_1182:
            ; //	asm	nop				
00746:      	nop
            ; //_AE0CFD6DA_1183:;				
            _AE0CFD6DA_1183:
            ; //	asm	nop				
00747:      	nop
            ; //_AE0CFD6DA_1184:;				
            _AE0CFD6DA_1184:
            ; //	asm	nop				
00748:      	nop
            ; //_AE0CFD6DA_1185:;				
            _AE0CFD6DA_1185:
            ; //	asm	nop				
00749:      	nop
            ; //_AE0CFD6DA_1186:;				
            _AE0CFD6DA_1186:
            ; //	asm	nop				
0074A:      	nop
            ; //_AE0CFD6DA_1187:;				
            _AE0CFD6DA_1187:
            ; //	asm	nop				
0074B:      	nop
            ; //_AE0CFD6DA_1188:;				
            _AE0CFD6DA_1188:
            ; //	asm clr io[0x09].b14;			
0074C:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1189:;				
            _AE0CFD6DA_1189:
            ; //	asm	nop				
0074D:      	nop
            ; //_AE0CFD6DA_1190:;				
            _AE0CFD6DA_1190:
            ; //	asm	nop				
0074E:      	nop
            ; //_AE0CFD6DA_1191:;				
            _AE0CFD6DA_1191:
            ; //	asm	nop				
0074F:      	nop
            ; //_AE0CFD6DA_1192:;				
            _AE0CFD6DA_1192:
            ; //	asm set io[0x09].b14;			
00750:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1193:;				
            _AE0CFD6DA_1193:
            ; //	asm	nop				
00751:      	nop
            ; //_AE0CFD6DA_1194:;				
            _AE0CFD6DA_1194:
            ; //	asm	nop				
00752:      	nop
            ; //_AE0CFD6DA_1195:;				
            _AE0CFD6DA_1195:
            ; //	asm	nop				
00753:      	nop
            ; //_AE0CFD6DA_1196:;				
            _AE0CFD6DA_1196:
            ; //	asm	nop				
00754:      	nop
            ; //_AE0CFD6DA_1197:;				
            _AE0CFD6DA_1197:
            ; //	asm	nop				
00755:      	nop
            ; //_AE0CFD6DA_1198:;				
            _AE0CFD6DA_1198:
            ; //	asm	nop				
00756:      	nop
            ; //_AE0CFD6DA_1199:;				
            _AE0CFD6DA_1199:
            ; //	asm	nop				
00757:      	nop
            ; //_AE0CFD6DA_1200:;				
            _AE0CFD6DA_1200:
            ; //	asm	nop				
00758:      	nop
            ; //_AE0CFD6DA_1201:;				
            _AE0CFD6DA_1201:
            ; //	asm	nop				
00759:      	nop
            ; //_AE0CFD6DA_1202:;				
            _AE0CFD6DA_1202:
            ; //	asm	nop				
0075A:      	nop
            ; //_AE0CFD6DA_1203:;				
            _AE0CFD6DA_1203:
            ; //	asm	nop				
0075B:      	nop
            ; //_AE0CFD6DA_1204:;				
            _AE0CFD6DA_1204:
            ; //	asm	nop				
0075C:      	nop
            ; //_AE0CFD6DA_1205:;				
            _AE0CFD6DA_1205:
            ; //	asm clr io[0x09].b14;			
0075D:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1206:;				
            _AE0CFD6DA_1206:
            ; //	asm	nop				
0075E:      	nop
            ; //_AE0CFD6DA_1207:;				
            _AE0CFD6DA_1207:
            ; //	asm	nop				
0075F:      	nop
            ; //_AE0CFD6DA_1208:;				
            _AE0CFD6DA_1208:
            ; //	asm	nop				
00760:      	nop
            ; //_AE0CFD6DA_1209:;				
            _AE0CFD6DA_1209:
            ; //	asm set io[0x09].b14;			
00761:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1210:;				
            _AE0CFD6DA_1210:
            ; //	asm	nop				
00762:      	nop
            ; //_AE0CFD6DA_1211:;				
            _AE0CFD6DA_1211:
            ; //	asm	nop				
00763:      	nop
            ; //_AE0CFD6DA_1212:;				
            _AE0CFD6DA_1212:
            ; //	asm	nop				
00764:      	nop
            ; //_AE0CFD6DA_1213:;				
            _AE0CFD6DA_1213:
            ; //	asm	nop				
00765:      	nop
            ; //_AE0CFD6DA_1214:;				
            _AE0CFD6DA_1214:
            ; //	asm	nop				
00766:      	nop
            ; //_AE0CFD6DA_1215:;				
            _AE0CFD6DA_1215:
            ; //	asm	nop				
00767:      	nop
            ; //_AE0CFD6DA_1216:;				
            _AE0CFD6DA_1216:
            ; //	asm	nop				
00768:      	nop
            ; //_AE0CFD6DA_1217:;				
            _AE0CFD6DA_1217:
            ; //	asm	nop				
00769:      	nop
            ; //_AE0CFD6DA_1218:;				
            _AE0CFD6DA_1218:
            ; //	asm	nop				
0076A:      	nop
            ; //_AE0CFD6DA_1219:;				
            _AE0CFD6DA_1219:
            ; //	asm	nop				
0076B:      	nop
            ; //_AE0CFD6DA_1220:;				
            _AE0CFD6DA_1220:
            ; //	asm	nop				
0076C:      	nop
            ; //_AE0CFD6DA_1221:;				
            _AE0CFD6DA_1221:
            ; //	asm	nop				
0076D:      	nop
            ; //_AE0CFD6DA_1222:;				
            _AE0CFD6DA_1222:
            ; //	asm clr io[0x09].b14;			
0076E:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1223:;				
            _AE0CFD6DA_1223:
            ; //	asm	nop				
0076F:      	nop
            ; //_AE0CFD6DA_1224:;				
            _AE0CFD6DA_1224:
            ; //	asm	nop				
00770:      	nop
            ; //_AE0CFD6DA_1225:;				
            _AE0CFD6DA_1225:
            ; //	asm	nop				
00771:      	nop
            ; //_AE0CFD6DA_1226:;				
            _AE0CFD6DA_1226:
            ; //	asm set io[0x09].b14;			
00772:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1227:;				
            _AE0CFD6DA_1227:
            ; //	asm	nop				
00773:      	nop
            ; //_AE0CFD6DA_1228:;				
            _AE0CFD6DA_1228:
            ; //	asm	nop				
00774:      	nop
            ; //_AE0CFD6DA_1229:;				
            _AE0CFD6DA_1229:
            ; //	asm	nop				
00775:      	nop
            ; //_AE0CFD6DA_1230:;				
            _AE0CFD6DA_1230:
            ; //	asm clr io[0x09].b14;			
00776:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1231:;				
            _AE0CFD6DA_1231:
            ; //	asm	nop				
00777:      	nop
            ; //_AE0CFD6DA_1232:;				
            _AE0CFD6DA_1232:
            ; //	asm	nop				
00778:      	nop
            ; //_AE0CFD6DA_1233:;				
            _AE0CFD6DA_1233:
            ; //	asm	nop				
00779:      	nop
            ; //_AE0CFD6DA_1234:;				
            _AE0CFD6DA_1234:
            ; //	asm	nop				
0077A:      	nop
            ; //_AE0CFD6DA_1235:;				
            _AE0CFD6DA_1235:
            ; //	asm	nop				
0077B:      	nop
            ; //_AE0CFD6DA_1236:;				
            _AE0CFD6DA_1236:
            ; //	asm	nop				
0077C:      	nop
            ; //_AE0CFD6DA_1237:;				
            _AE0CFD6DA_1237:
            ; //	asm	nop				
0077D:      	nop
            ; //_AE0CFD6DA_1238:;				
            _AE0CFD6DA_1238:
            ; //	asm	nop				
0077E:      	nop
            ; //_AE0CFD6DA_1239:;				
            _AE0CFD6DA_1239:
            ; //	asm	nop				
0077F:      	nop
            ; //_AE0CFD6DA_1240:;				
            _AE0CFD6DA_1240:
            ; //	asm	nop				
00780:      	nop
            ; //_AE0CFD6DA_1241:;				
            _AE0CFD6DA_1241:
            ; //	asm	nop				
00781:      	nop
            ; //_AE0CFD6DA_1242:;				
            _AE0CFD6DA_1242:
            ; //	asm	nop				
00782:      	nop
            ; //_AE0CFD6DA_1243:;				
            _AE0CFD6DA_1243:
            ; //	asm set io[0x09].b14;			
00783:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1244:;				
            _AE0CFD6DA_1244:
            ; //	asm	nop				
00784:      	nop
            ; //_AE0CFD6DA_1245:;				
            _AE0CFD6DA_1245:
            ; //	asm	nop				
00785:      	nop
            ; //_AE0CFD6DA_1246:;				
            _AE0CFD6DA_1246:
            ; //	asm	nop				
00786:      	nop
            ; //_AE0CFD6DA_1247:;				
            _AE0CFD6DA_1247:
            ; //	asm clr io[0x09].b14;			
00787:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1248:;				
            _AE0CFD6DA_1248:
            ; //	asm	nop				
00788:      	nop
            ; //_AE0CFD6DA_1249:;				
            _AE0CFD6DA_1249:
            ; //	asm	nop				
00789:      	nop
            ; //_AE0CFD6DA_1250:;				
            _AE0CFD6DA_1250:
            ; //	asm	nop				
0078A:      	nop
            ; //_AE0CFD6DA_1251:;				
            _AE0CFD6DA_1251:
            ; //	asm	nop				
0078B:      	nop
            ; //_AE0CFD6DA_1252:;				
            _AE0CFD6DA_1252:
            ; //	asm	nop				
0078C:      	nop
            ; //_AE0CFD6DA_1253:;				
            _AE0CFD6DA_1253:
            ; //	asm	nop				
0078D:      	nop
            ; //_AE0CFD6DA_1254:;				
            _AE0CFD6DA_1254:
            ; //	asm	nop				
0078E:      	nop
            ; //_AE0CFD6DA_1255:;				
            _AE0CFD6DA_1255:
            ; //	asm	nop				
0078F:      	nop
            ; //_AE0CFD6DA_1256:;				
            _AE0CFD6DA_1256:
            ; //	asm	nop				
00790:      	nop
            ; //_AE0CFD6DA_1257:;				
            _AE0CFD6DA_1257:
            ; //	asm	nop				
00791:      	nop
            ; //_AE0CFD6DA_1258:;				
            _AE0CFD6DA_1258:
            ; //	asm	nop				
00792:      	nop
            ; //_AE0CFD6DA_1259:;				
            _AE0CFD6DA_1259:
            ; //	asm	nop				
00793:      	nop
            ; //_AE0CFD6DA_1260:;				
            _AE0CFD6DA_1260:
            ; //	asm set io[0x09].b14;			
00794:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1261:;				
            _AE0CFD6DA_1261:
            ; //	asm	nop				
00795:      	nop
            ; //_AE0CFD6DA_1262:;				
            _AE0CFD6DA_1262:
            ; //	asm	nop				
00796:      	nop
            ; //_AE0CFD6DA_1263:;				
            _AE0CFD6DA_1263:
            ; //	asm	nop				
00797:      	nop
            ; //_AE0CFD6DA_1264:;				
            _AE0CFD6DA_1264:
            ; //	asm clr io[0x09].b14;			
00798:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1265:;				
            _AE0CFD6DA_1265:
            ; //	asm	nop				
00799:      	nop
            ; //_AE0CFD6DA_1266:;				
            _AE0CFD6DA_1266:
            ; //	asm	nop				
0079A:      	nop
            ; //_AE0CFD6DA_1267:;				
            _AE0CFD6DA_1267:
            ; //	asm	nop				
0079B:      	nop
            ; //_AE0CFD6DA_1268:;				
            _AE0CFD6DA_1268:
            ; //	asm	nop				
0079C:      	nop
            ; //_AE0CFD6DA_1269:;				
            _AE0CFD6DA_1269:
            ; //	asm	nop				
0079D:      	nop
            ; //_AE0CFD6DA_1270:;				
            _AE0CFD6DA_1270:
            ; //	asm	nop				
0079E:      	nop
            ; //_AE0CFD6DA_1271:;				
            _AE0CFD6DA_1271:
            ; //	asm	nop				
0079F:      	nop
            ; //_AE0CFD6DA_1272:;				
            _AE0CFD6DA_1272:
            ; //	asm	nop				
007A0:      	nop
            ; //_AE0CFD6DA_1273:;				
            _AE0CFD6DA_1273:
            ; //	asm	nop				
007A1:      	nop
            ; //_AE0CFD6DA_1274:;				
            _AE0CFD6DA_1274:
            ; //	asm	nop				
007A2:      	nop
            ; //_AE0CFD6DA_1275:;				
            _AE0CFD6DA_1275:
            ; //	asm	nop				
007A3:      	nop
            ; //_AE0CFD6DA_1276:;				
            _AE0CFD6DA_1276:
            ; //	asm	nop				
007A4:      	nop
            ; //_AE0CFD6DA_1277:;				
            _AE0CFD6DA_1277:
            ; //	asm set io[0x09].b14;			
007A5:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1278:;				
            _AE0CFD6DA_1278:
            ; //	asm	nop				
007A6:      	nop
            ; //_AE0CFD6DA_1279:;				
            _AE0CFD6DA_1279:
            ; //	asm	nop				
007A7:      	nop
            ; //_AE0CFD6DA_1280:;				
            _AE0CFD6DA_1280:
            ; //	asm	nop				
007A8:      	nop
            ; //_AE0CFD6DA_1281:;				
            _AE0CFD6DA_1281:
            ; //	asm clr io[0x09].b14;			
007A9:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1282:;				
            _AE0CFD6DA_1282:
            ; //	asm	nop				
007AA:      	nop
            ; //_AE0CFD6DA_1283:;				
            _AE0CFD6DA_1283:
            ; //	asm	nop				
007AB:      	nop
            ; //_AE0CFD6DA_1284:;				
            _AE0CFD6DA_1284:
            ; //	asm	nop				
007AC:      	nop
            ; //_AE0CFD6DA_1285:;				
            _AE0CFD6DA_1285:
            ; //	asm	nop				
007AD:      	nop
            ; //_AE0CFD6DA_1286:;				
            _AE0CFD6DA_1286:
            ; //	asm	nop				
007AE:      	nop
            ; //_AE0CFD6DA_1287:;				
            _AE0CFD6DA_1287:
            ; //	asm	nop				
007AF:      	nop
            ; //_AE0CFD6DA_1288:;				
            _AE0CFD6DA_1288:
            ; //	asm	nop				
007B0:      	nop
            ; //_AE0CFD6DA_1289:;				
            _AE0CFD6DA_1289:
            ; //	asm	nop				
007B1:      	nop
            ; //_AE0CFD6DA_1290:;				
            _AE0CFD6DA_1290:
            ; //	asm	nop				
007B2:      	nop
            ; //_AE0CFD6DA_1291:;				
            _AE0CFD6DA_1291:
            ; //	asm	nop				
007B3:      	nop
            ; //_AE0CFD6DA_1292:;				
            _AE0CFD6DA_1292:
            ; //	asm	nop				
007B4:      	nop
            ; //_AE0CFD6DA_1293:;				
            _AE0CFD6DA_1293:
            ; //	asm	nop				
007B5:      	nop
            ; //_AE0CFD6DA_1294:;				
            _AE0CFD6DA_1294:
            ; //	asm set io[0x09].b14;			
007B6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1295:;				
            _AE0CFD6DA_1295:
            ; //	asm	nop				
007B7:      	nop
            ; //_AE0CFD6DA_1296:;				
            _AE0CFD6DA_1296:
            ; //	asm	nop				
007B8:      	nop
            ; //_AE0CFD6DA_1297:;				
            _AE0CFD6DA_1297:
            ; //	asm	nop				
007B9:      	nop
            ; //_AE0CFD6DA_1298:;				
            _AE0CFD6DA_1298:
            ; //	asm clr io[0x09].b14;			
007BA:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1299:;				
            _AE0CFD6DA_1299:
            ; //	asm	nop				
007BB:      	nop
            ; //_AE0CFD6DA_1300:;				
            _AE0CFD6DA_1300:
            ; //	asm	nop				
007BC:      	nop
            ; //_AE0CFD6DA_1301:;				
            _AE0CFD6DA_1301:
            ; //	asm	nop				
007BD:      	nop
            ; //_AE0CFD6DA_1302:;				
            _AE0CFD6DA_1302:
            ; //	asm	nop				
007BE:      	nop
            ; //_AE0CFD6DA_1303:;				
            _AE0CFD6DA_1303:
            ; //	asm	nop				
007BF:      	nop
            ; //_AE0CFD6DA_1304:;				
            _AE0CFD6DA_1304:
            ; //	asm	nop				
007C0:      	nop
            ; //_AE0CFD6DA_1305:;				
            _AE0CFD6DA_1305:
            ; //	asm	nop				
007C1:      	nop
            ; //_AE0CFD6DA_1306:;				
            _AE0CFD6DA_1306:
            ; //	asm	nop				
007C2:      	nop
            ; //_AE0CFD6DA_1307:;				
            _AE0CFD6DA_1307:
            ; //	asm	nop				
007C3:      	nop
            ; //_AE0CFD6DA_1308:;				
            _AE0CFD6DA_1308:
            ; //	asm	nop				
007C4:      	nop
            ; //_AE0CFD6DA_1309:;				
            _AE0CFD6DA_1309:
            ; //	asm	nop				
007C5:      	nop
            ; //_AE0CFD6DA_1310:;				
            _AE0CFD6DA_1310:
            ; //	asm	nop				
007C6:      	nop
            ; //_AE0CFD6DA_1311:;				
            _AE0CFD6DA_1311:
            ; //	asm set io[0x09].b14;			
007C7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1312:;				
            _AE0CFD6DA_1312:
            ; //	asm	nop				
007C8:      	nop
            ; //_AE0CFD6DA_1313:;				
            _AE0CFD6DA_1313:
            ; //	asm	nop				
007C9:      	nop
            ; //_AE0CFD6DA_1314:;				
            _AE0CFD6DA_1314:
            ; //	asm	nop				
007CA:      	nop
            ; //_AE0CFD6DA_1315:;				
            _AE0CFD6DA_1315:
            ; //	asm clr io[0x09].b14;			
007CB:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1316:;				
            _AE0CFD6DA_1316:
            ; //	asm	nop				
007CC:      	nop
            ; //_AE0CFD6DA_1317:;				
            _AE0CFD6DA_1317:
            ; //	asm	nop				
007CD:      	nop
            ; //_AE0CFD6DA_1318:;				
            _AE0CFD6DA_1318:
            ; //	asm	nop				
007CE:      	nop
            ; //_AE0CFD6DA_1319:;				
            _AE0CFD6DA_1319:
            ; //	asm	nop				
007CF:      	nop
            ; //_AE0CFD6DA_1320:;				
            _AE0CFD6DA_1320:
            ; //	asm	nop				
007D0:      	nop
            ; //_AE0CFD6DA_1321:;				
            _AE0CFD6DA_1321:
            ; //	asm	nop				
007D1:      	nop
            ; //_AE0CFD6DA_1322:;				
            _AE0CFD6DA_1322:
            ; //	asm	nop				
007D2:      	nop
            ; //_AE0CFD6DA_1323:;				
            _AE0CFD6DA_1323:
            ; //	asm	nop				
007D3:      	nop
            ; //_AE0CFD6DA_1324:;				
            _AE0CFD6DA_1324:
            ; //	asm	nop				
007D4:      	nop
            ; //_AE0CFD6DA_1325:;				
            _AE0CFD6DA_1325:
            ; //	asm	nop				
007D5:      	nop
            ; //_AE0CFD6DA_1326:;				
            _AE0CFD6DA_1326:
            ; //	asm	nop				
007D6:      	nop
            ; //_AE0CFD6DA_1327:;				
            _AE0CFD6DA_1327:
            ; //	asm	nop				
007D7:      	nop
            ; //_AE0CFD6DA_1328:;				
            _AE0CFD6DA_1328:
            ; //	asm set io[0x09].b14;			
007D8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1329:;				
            _AE0CFD6DA_1329:
            ; //	asm	nop				
007D9:      	nop
            ; //_AE0CFD6DA_1330:;				
            _AE0CFD6DA_1330:
            ; //	asm	nop				
007DA:      	nop
            ; //_AE0CFD6DA_1331:;				
            _AE0CFD6DA_1331:
            ; //	asm	nop				
007DB:      	nop
            ; //_AE0CFD6DA_1332:;				
            _AE0CFD6DA_1332:
            ; //	asm clr io[0x09].b14;			
007DC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1333:;				
            _AE0CFD6DA_1333:
            ; //	asm	nop				
007DD:      	nop
            ; //_AE0CFD6DA_1334:;				
            _AE0CFD6DA_1334:
            ; //	asm	nop				
007DE:      	nop
            ; //_AE0CFD6DA_1335:;				
            _AE0CFD6DA_1335:
            ; //	asm	nop				
007DF:      	nop
            ; //_AE0CFD6DA_1336:;				
            _AE0CFD6DA_1336:
            ; //	asm	nop				
007E0:      	nop
            ; //_AE0CFD6DA_1337:;				
            _AE0CFD6DA_1337:
            ; //	asm	nop				
007E1:      	nop
            ; //_AE0CFD6DA_1338:;				
            _AE0CFD6DA_1338:
            ; //	asm	nop				
007E2:      	nop
            ; //_AE0CFD6DA_1339:;				
            _AE0CFD6DA_1339:
            ; //	asm	nop				
007E3:      	nop
            ; //_AE0CFD6DA_1340:;				
            _AE0CFD6DA_1340:
            ; //	asm	nop				
007E4:      	nop
            ; //_AE0CFD6DA_1341:;				
            _AE0CFD6DA_1341:
            ; //	asm	nop				
007E5:      	nop
            ; //_AE0CFD6DA_1342:;				
            _AE0CFD6DA_1342:
            ; //	asm	nop				
007E6:      	nop
            ; //_AE0CFD6DA_1343:;				
            _AE0CFD6DA_1343:
            ; //	asm	nop				
007E7:      	nop
            ; //_AE0CFD6DA_1344:;				
            _AE0CFD6DA_1344:
            ; //	asm	nop				
007E8:      	nop
            ; //_AE0CFD6DA_1345:;				
            _AE0CFD6DA_1345:
            ; //	asm set io[0x09].b14;			
007E9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1346:;				
            _AE0CFD6DA_1346:
            ; //	asm	nop				
007EA:      	nop
            ; //_AE0CFD6DA_1347:;				
            _AE0CFD6DA_1347:
            ; //	asm	nop				
007EB:      	nop
            ; //_AE0CFD6DA_1348:;				
            _AE0CFD6DA_1348:
            ; //	asm	nop				
007EC:      	nop
            ; //_AE0CFD6DA_1349:;				
            _AE0CFD6DA_1349:
            ; //	asm clr io[0x09].b14;			
007ED:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1350:;				
            _AE0CFD6DA_1350:
            ; //	asm	nop				
007EE:      	nop
            ; //_AE0CFD6DA_1351:;				
            _AE0CFD6DA_1351:
            ; //	asm	nop				
007EF:      	nop
            ; //_AE0CFD6DA_1352:;				
            _AE0CFD6DA_1352:
            ; //	asm	nop				
007F0:      	nop
            ; //_AE0CFD6DA_1353:;				
            _AE0CFD6DA_1353:
            ; //	asm	nop				
007F1:      	nop
            ; //_AE0CFD6DA_1354:;				
            _AE0CFD6DA_1354:
            ; //	asm	nop				
007F2:      	nop
            ; //_AE0CFD6DA_1355:;				
            _AE0CFD6DA_1355:
            ; //	asm	nop				
007F3:      	nop
            ; //_AE0CFD6DA_1356:;				
            _AE0CFD6DA_1356:
            ; //	asm	nop				
007F4:      	nop
            ; //_AE0CFD6DA_1357:;				
            _AE0CFD6DA_1357:
            ; //	asm	nop				
007F5:      	nop
            ; //_AE0CFD6DA_1358:;				
            _AE0CFD6DA_1358:
            ; //	asm	nop				
007F6:      	nop
            ; //_AE0CFD6DA_1359:;				
            _AE0CFD6DA_1359:
            ; //	asm	nop				
007F7:      	nop
            ; //_AE0CFD6DA_1360:;				
            _AE0CFD6DA_1360:
            ; //	asm	nop				
007F8:      	nop
            ; //_AE0CFD6DA_1361:;				
            _AE0CFD6DA_1361:
            ; //	asm	nop				
007F9:      	nop
            ; //_AE0CFD6DA_1362:;				
            _AE0CFD6DA_1362:
            ; //	goto LD63FD439_72;			
007FA:      	pch =	LD63FD439_72
007FB:      	ljmp	LD63FD439_72
            ; //LD63FD439_77:;					
            LD63FD439_77:
            ; //_AE0CFD6DA_1363:;				
            _AE0CFD6DA_1363:
            ; //	asm set io[0x09].b14;			
007FC:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1364:;				
            _AE0CFD6DA_1364:
            ; //	asm	nop				
007FD:      	nop
            ; //_AE0CFD6DA_1365:;				
            _AE0CFD6DA_1365:
            ; //	asm	nop				
007FE:      	nop
            ; //_AE0CFD6DA_1366:;				
            _AE0CFD6DA_1366:
            ; //	asm	nop				
007FF:      	nop
            ; //_AE0CFD6DA_1367:;				
            _AE0CFD6DA_1367:
            ; //	asm	nop				
00800:      	nop
            ; //_AE0CFD6DA_1368:;				
            _AE0CFD6DA_1368:
            ; //	asm	nop				
00801:      	nop
            ; //_AE0CFD6DA_1369:;				
            _AE0CFD6DA_1369:
            ; //	asm	nop				
00802:      	nop
            ; //_AE0CFD6DA_1370:;				
            _AE0CFD6DA_1370:
            ; //	asm	nop				
00803:      	nop
            ; //_AE0CFD6DA_1371:;				
            _AE0CFD6DA_1371:
            ; //	asm	nop				
00804:      	nop
            ; //_AE0CFD6DA_1372:;				
            _AE0CFD6DA_1372:
            ; //	asm	nop				
00805:      	nop
            ; //_AE0CFD6DA_1373:;				
            _AE0CFD6DA_1373:
            ; //	asm	nop				
00806:      	nop
            ; //_AE0CFD6DA_1374:;				
            _AE0CFD6DA_1374:
            ; //	asm	nop				
00807:      	nop
            ; //_AE0CFD6DA_1375:;				
            _AE0CFD6DA_1375:
            ; //	asm	nop				
00808:      	nop
            ; //_AE0CFD6DA_1376:;				
            _AE0CFD6DA_1376:
            ; //	asm clr io[0x09].b14;			
00809:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1377:;				
            _AE0CFD6DA_1377:
            ; //	asm	nop				
0080A:      	nop
            ; //_AE0CFD6DA_1378:;				
            _AE0CFD6DA_1378:
            ; //	asm	nop				
0080B:      	nop
            ; //_AE0CFD6DA_1379:;				
            _AE0CFD6DA_1379:
            ; //	asm	nop				
0080C:      	nop
            ; //_AE0CFD6DA_1380:;				
            _AE0CFD6DA_1380:
            ; //	asm set io[0x09].b14;			
0080D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1381:;				
            _AE0CFD6DA_1381:
            ; //	asm	nop				
0080E:      	nop
            ; //_AE0CFD6DA_1382:;				
            _AE0CFD6DA_1382:
            ; //	asm	nop				
0080F:      	nop
            ; //_AE0CFD6DA_1383:;				
            _AE0CFD6DA_1383:
            ; //	asm	nop				
00810:      	nop
            ; //_AE0CFD6DA_1384:;				
            _AE0CFD6DA_1384:
            ; //	asm	nop				
00811:      	nop
            ; //_AE0CFD6DA_1385:;				
            _AE0CFD6DA_1385:
            ; //	asm	nop				
00812:      	nop
            ; //_AE0CFD6DA_1386:;				
            _AE0CFD6DA_1386:
            ; //	asm	nop				
00813:      	nop
            ; //_AE0CFD6DA_1387:;				
            _AE0CFD6DA_1387:
            ; //	asm	nop				
00814:      	nop
            ; //_AE0CFD6DA_1388:;				
            _AE0CFD6DA_1388:
            ; //	asm	nop				
00815:      	nop
            ; //_AE0CFD6DA_1389:;				
            _AE0CFD6DA_1389:
            ; //	asm	nop				
00816:      	nop
            ; //_AE0CFD6DA_1390:;				
            _AE0CFD6DA_1390:
            ; //	asm	nop				
00817:      	nop
            ; //_AE0CFD6DA_1391:;				
            _AE0CFD6DA_1391:
            ; //	asm	nop				
00818:      	nop
            ; //_AE0CFD6DA_1392:;				
            _AE0CFD6DA_1392:
            ; //	asm	nop				
00819:      	nop
            ; //_AE0CFD6DA_1393:;				
            _AE0CFD6DA_1393:
            ; //	asm clr io[0x09].b14;			
0081A:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1394:;				
            _AE0CFD6DA_1394:
            ; //	asm	nop				
0081B:      	nop
            ; //_AE0CFD6DA_1395:;				
            _AE0CFD6DA_1395:
            ; //	asm	nop				
0081C:      	nop
            ; //_AE0CFD6DA_1396:;				
            _AE0CFD6DA_1396:
            ; //	asm	nop				
0081D:      	nop
            ; //_AE0CFD6DA_1397:;				
            _AE0CFD6DA_1397:
            ; //	asm set io[0x09].b14;			
0081E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1398:;				
            _AE0CFD6DA_1398:
            ; //	asm	nop				
0081F:      	nop
            ; //_AE0CFD6DA_1399:;				
            _AE0CFD6DA_1399:
            ; //	asm	nop				
00820:      	nop
            ; //_AE0CFD6DA_1400:;				
            _AE0CFD6DA_1400:
            ; //	asm	nop				
00821:      	nop
            ; //_AE0CFD6DA_1401:;				
            _AE0CFD6DA_1401:
            ; //	asm	nop				
00822:      	nop
            ; //_AE0CFD6DA_1402:;				
            _AE0CFD6DA_1402:
            ; //	asm	nop				
00823:      	nop
            ; //_AE0CFD6DA_1403:;				
            _AE0CFD6DA_1403:
            ; //	asm	nop				
00824:      	nop
            ; //_AE0CFD6DA_1404:;				
            _AE0CFD6DA_1404:
            ; //	asm	nop				
00825:      	nop
            ; //_AE0CFD6DA_1405:;				
            _AE0CFD6DA_1405:
            ; //	asm	nop				
00826:      	nop
            ; //_AE0CFD6DA_1406:;				
            _AE0CFD6DA_1406:
            ; //	asm	nop				
00827:      	nop
            ; //_AE0CFD6DA_1407:;				
            _AE0CFD6DA_1407:
            ; //	asm	nop				
00828:      	nop
            ; //_AE0CFD6DA_1408:;				
            _AE0CFD6DA_1408:
            ; //	asm	nop				
00829:      	nop
            ; //_AE0CFD6DA_1409:;				
            _AE0CFD6DA_1409:
            ; //	asm	nop				
0082A:      	nop
            ; //_AE0CFD6DA_1410:;				
            _AE0CFD6DA_1410:
            ; //	asm clr io[0x09].b14;			
0082B:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1411:;				
            _AE0CFD6DA_1411:
            ; //	asm	nop				
0082C:      	nop
            ; //_AE0CFD6DA_1412:;				
            _AE0CFD6DA_1412:
            ; //	asm	nop				
0082D:      	nop
            ; //_AE0CFD6DA_1413:;				
            _AE0CFD6DA_1413:
            ; //	asm	nop				
0082E:      	nop
            ; //_AE0CFD6DA_1414:;				
            _AE0CFD6DA_1414:
            ; //	asm set io[0x09].b14;			
0082F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1415:;				
            _AE0CFD6DA_1415:
            ; //	asm	nop				
00830:      	nop
            ; //_AE0CFD6DA_1416:;				
            _AE0CFD6DA_1416:
            ; //	asm	nop				
00831:      	nop
            ; //_AE0CFD6DA_1417:;				
            _AE0CFD6DA_1417:
            ; //	asm	nop				
00832:      	nop
            ; //_AE0CFD6DA_1418:;				
            _AE0CFD6DA_1418:
            ; //	asm	nop				
00833:      	nop
            ; //_AE0CFD6DA_1419:;				
            _AE0CFD6DA_1419:
            ; //	asm	nop				
00834:      	nop
            ; //_AE0CFD6DA_1420:;				
            _AE0CFD6DA_1420:
            ; //	asm	nop				
00835:      	nop
            ; //_AE0CFD6DA_1421:;				
            _AE0CFD6DA_1421:
            ; //	asm	nop				
00836:      	nop
            ; //_AE0CFD6DA_1422:;				
            _AE0CFD6DA_1422:
            ; //	asm	nop				
00837:      	nop
            ; //_AE0CFD6DA_1423:;				
            _AE0CFD6DA_1423:
            ; //	asm	nop				
00838:      	nop
            ; //_AE0CFD6DA_1424:;				
            _AE0CFD6DA_1424:
            ; //	asm	nop				
00839:      	nop
            ; //_AE0CFD6DA_1425:;				
            _AE0CFD6DA_1425:
            ; //	asm	nop				
0083A:      	nop
            ; //_AE0CFD6DA_1426:;				
            _AE0CFD6DA_1426:
            ; //	asm	nop				
0083B:      	nop
            ; //_AE0CFD6DA_1427:;				
            _AE0CFD6DA_1427:
            ; //	asm clr io[0x09].b14;			
0083C:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1428:;				
            _AE0CFD6DA_1428:
            ; //	asm	nop				
0083D:      	nop
            ; //_AE0CFD6DA_1429:;				
            _AE0CFD6DA_1429:
            ; //	asm	nop				
0083E:      	nop
            ; //_AE0CFD6DA_1430:;				
            _AE0CFD6DA_1430:
            ; //	asm	nop				
0083F:      	nop
            ; //_AE0CFD6DA_1431:;				
            _AE0CFD6DA_1431:
            ; //	asm set io[0x09].b14;			
00840:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1432:;				
            _AE0CFD6DA_1432:
            ; //	asm	nop				
00841:      	nop
            ; //_AE0CFD6DA_1433:;				
            _AE0CFD6DA_1433:
            ; //	asm	nop				
00842:      	nop
            ; //_AE0CFD6DA_1434:;				
            _AE0CFD6DA_1434:
            ; //	asm	nop				
00843:      	nop
            ; //_AE0CFD6DA_1435:;				
            _AE0CFD6DA_1435:
            ; //	asm	nop				
00844:      	nop
            ; //_AE0CFD6DA_1436:;				
            _AE0CFD6DA_1436:
            ; //	asm	nop				
00845:      	nop
            ; //_AE0CFD6DA_1437:;				
            _AE0CFD6DA_1437:
            ; //	asm	nop				
00846:      	nop
            ; //_AE0CFD6DA_1438:;				
            _AE0CFD6DA_1438:
            ; //	asm	nop				
00847:      	nop
            ; //_AE0CFD6DA_1439:;				
            _AE0CFD6DA_1439:
            ; //	asm	nop				
00848:      	nop
            ; //_AE0CFD6DA_1440:;				
            _AE0CFD6DA_1440:
            ; //	asm	nop				
00849:      	nop
            ; //_AE0CFD6DA_1441:;				
            _AE0CFD6DA_1441:
            ; //	asm	nop				
0084A:      	nop
            ; //_AE0CFD6DA_1442:;				
            _AE0CFD6DA_1442:
            ; //	asm	nop				
0084B:      	nop
            ; //_AE0CFD6DA_1443:;				
            _AE0CFD6DA_1443:
            ; //	asm	nop				
0084C:      	nop
            ; //_AE0CFD6DA_1444:;				
            _AE0CFD6DA_1444:
            ; //	asm clr io[0x09].b14;			
0084D:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1445:;				
            _AE0CFD6DA_1445:
            ; //	asm	nop				
0084E:      	nop
            ; //_AE0CFD6DA_1446:;				
            _AE0CFD6DA_1446:
            ; //	asm	nop				
0084F:      	nop
            ; //_AE0CFD6DA_1447:;				
            _AE0CFD6DA_1447:
            ; //	asm	nop				
00850:      	nop
            ; //_AE0CFD6DA_1448:;				
            _AE0CFD6DA_1448:
            ; //	asm set io[0x09].b14;			
00851:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1449:;				
            _AE0CFD6DA_1449:
            ; //	asm	nop				
00852:      	nop
            ; //_AE0CFD6DA_1450:;				
            _AE0CFD6DA_1450:
            ; //	asm	nop				
00853:      	nop
            ; //_AE0CFD6DA_1451:;				
            _AE0CFD6DA_1451:
            ; //	asm	nop				
00854:      	nop
            ; //_AE0CFD6DA_1452:;				
            _AE0CFD6DA_1452:
            ; //	asm	nop				
00855:      	nop
            ; //_AE0CFD6DA_1453:;				
            _AE0CFD6DA_1453:
            ; //	asm	nop				
00856:      	nop
            ; //_AE0CFD6DA_1454:;				
            _AE0CFD6DA_1454:
            ; //	asm	nop				
00857:      	nop
            ; //_AE0CFD6DA_1455:;				
            _AE0CFD6DA_1455:
            ; //	asm	nop				
00858:      	nop
            ; //_AE0CFD6DA_1456:;				
            _AE0CFD6DA_1456:
            ; //	asm	nop				
00859:      	nop
            ; //_AE0CFD6DA_1457:;				
            _AE0CFD6DA_1457:
            ; //	asm	nop				
0085A:      	nop
            ; //_AE0CFD6DA_1458:;				
            _AE0CFD6DA_1458:
            ; //	asm	nop				
0085B:      	nop
            ; //_AE0CFD6DA_1459:;				
            _AE0CFD6DA_1459:
            ; //	asm	nop				
0085C:      	nop
            ; //_AE0CFD6DA_1460:;				
            _AE0CFD6DA_1460:
            ; //	asm	nop				
0085D:      	nop
            ; //_AE0CFD6DA_1461:;				
            _AE0CFD6DA_1461:
            ; //	asm clr io[0x09].b14;			
0085E:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1462:;				
            _AE0CFD6DA_1462:
            ; //	asm	nop				
0085F:      	nop
            ; //_AE0CFD6DA_1463:;				
            _AE0CFD6DA_1463:
            ; //	asm	nop				
00860:      	nop
            ; //_AE0CFD6DA_1464:;				
            _AE0CFD6DA_1464:
            ; //	asm	nop				
00861:      	nop
            ; //_AE0CFD6DA_1465:;				
            _AE0CFD6DA_1465:
            ; //	asm set io[0x09].b14;			
00862:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1466:;				
            _AE0CFD6DA_1466:
            ; //	asm	nop				
00863:      	nop
            ; //_AE0CFD6DA_1467:;				
            _AE0CFD6DA_1467:
            ; //	asm	nop				
00864:      	nop
            ; //_AE0CFD6DA_1468:;				
            _AE0CFD6DA_1468:
            ; //	asm	nop				
00865:      	nop
            ; //_AE0CFD6DA_1469:;				
            _AE0CFD6DA_1469:
            ; //	asm	nop				
00866:      	nop
            ; //_AE0CFD6DA_1470:;				
            _AE0CFD6DA_1470:
            ; //	asm	nop				
00867:      	nop
            ; //_AE0CFD6DA_1471:;				
            _AE0CFD6DA_1471:
            ; //	asm	nop				
00868:      	nop
            ; //_AE0CFD6DA_1472:;				
            _AE0CFD6DA_1472:
            ; //	asm	nop				
00869:      	nop
            ; //_AE0CFD6DA_1473:;				
            _AE0CFD6DA_1473:
            ; //	asm	nop				
0086A:      	nop
            ; //_AE0CFD6DA_1474:;				
            _AE0CFD6DA_1474:
            ; //	asm	nop				
0086B:      	nop
            ; //_AE0CFD6DA_1475:;				
            _AE0CFD6DA_1475:
            ; //	asm	nop				
0086C:      	nop
            ; //_AE0CFD6DA_1476:;				
            _AE0CFD6DA_1476:
            ; //	asm	nop				
0086D:      	nop
            ; //_AE0CFD6DA_1477:;				
            _AE0CFD6DA_1477:
            ; //	asm	nop				
0086E:      	nop
            ; //_AE0CFD6DA_1478:;				
            _AE0CFD6DA_1478:
            ; //	asm clr io[0x09].b14;			
0086F:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1479:;				
            _AE0CFD6DA_1479:
            ; //	asm	nop				
00870:      	nop
            ; //_AE0CFD6DA_1480:;				
            _AE0CFD6DA_1480:
            ; //	asm	nop				
00871:      	nop
            ; //_AE0CFD6DA_1481:;				
            _AE0CFD6DA_1481:
            ; //	asm	nop				
00872:      	nop
            ; //_AE0CFD6DA_1482:;				
            _AE0CFD6DA_1482:
            ; //	asm set io[0x09].b14;			
00873:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1483:;				
            _AE0CFD6DA_1483:
            ; //	asm	nop				
00874:      	nop
            ; //_AE0CFD6DA_1484:;				
            _AE0CFD6DA_1484:
            ; //	asm	nop				
00875:      	nop
            ; //_AE0CFD6DA_1485:;				
            _AE0CFD6DA_1485:
            ; //	asm	nop				
00876:      	nop
            ; //_AE0CFD6DA_1486:;				
            _AE0CFD6DA_1486:
            ; //	asm	nop				
00877:      	nop
            ; //_AE0CFD6DA_1487:;				
            _AE0CFD6DA_1487:
            ; //	asm	nop				
00878:      	nop
            ; //_AE0CFD6DA_1488:;				
            _AE0CFD6DA_1488:
            ; //	asm	nop				
00879:      	nop
            ; //_AE0CFD6DA_1489:;				
            _AE0CFD6DA_1489:
            ; //	asm	nop				
0087A:      	nop
            ; //_AE0CFD6DA_1490:;				
            _AE0CFD6DA_1490:
            ; //	asm	nop				
0087B:      	nop
            ; //_AE0CFD6DA_1491:;				
            _AE0CFD6DA_1491:
            ; //	asm	nop				
0087C:      	nop
            ; //_AE0CFD6DA_1492:;				
            _AE0CFD6DA_1492:
            ; //	asm	nop				
0087D:      	nop
            ; //_AE0CFD6DA_1493:;				
            _AE0CFD6DA_1493:
            ; //	asm	nop				
0087E:      	nop
            ; //_AE0CFD6DA_1494:;				
            _AE0CFD6DA_1494:
            ; //	asm	nop				
0087F:      	nop
            ; //_AE0CFD6DA_1495:;				
            _AE0CFD6DA_1495:
            ; //	asm clr io[0x09].b14;			
00880:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1496:;				
            _AE0CFD6DA_1496:
            ; //	asm	nop				
00881:      	nop
            ; //_AE0CFD6DA_1497:;				
            _AE0CFD6DA_1497:
            ; //	asm	nop				
00882:      	nop
            ; //_AE0CFD6DA_1498:;				
            _AE0CFD6DA_1498:
            ; //	asm	nop				
00883:      	nop
            ; //_AE0CFD6DA_1499:;				
            _AE0CFD6DA_1499:
            ; //	asm set io[0x09].b14;			
00884:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1500:;				
            _AE0CFD6DA_1500:
            ; //	asm	nop				
00885:      	nop
            ; //_AE0CFD6DA_1501:;				
            _AE0CFD6DA_1501:
            ; //	asm	nop				
00886:      	nop
            ; //_AE0CFD6DA_1502:;				
            _AE0CFD6DA_1502:
            ; //	asm	nop				
00887:      	nop
            ; //_AE0CFD6DA_1503:;				
            _AE0CFD6DA_1503:
            ; //	asm clr io[0x09].b14;			
00888:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1504:;				
            _AE0CFD6DA_1504:
            ; //	asm	nop				
00889:      	nop
            ; //_AE0CFD6DA_1505:;				
            _AE0CFD6DA_1505:
            ; //	asm	nop				
0088A:      	nop
            ; //_AE0CFD6DA_1506:;				
            _AE0CFD6DA_1506:
            ; //	asm	nop				
0088B:      	nop
            ; //_AE0CFD6DA_1507:;				
            _AE0CFD6DA_1507:
            ; //	asm	nop				
0088C:      	nop
            ; //_AE0CFD6DA_1508:;				
            _AE0CFD6DA_1508:
            ; //	asm	nop				
0088D:      	nop
            ; //_AE0CFD6DA_1509:;				
            _AE0CFD6DA_1509:
            ; //	asm	nop				
0088E:      	nop
            ; //_AE0CFD6DA_1510:;				
            _AE0CFD6DA_1510:
            ; //	asm	nop				
0088F:      	nop
            ; //_AE0CFD6DA_1511:;				
            _AE0CFD6DA_1511:
            ; //	asm	nop				
00890:      	nop
            ; //_AE0CFD6DA_1512:;				
            _AE0CFD6DA_1512:
            ; //	asm	nop				
00891:      	nop
            ; //_AE0CFD6DA_1513:;				
            _AE0CFD6DA_1513:
            ; //	asm	nop				
00892:      	nop
            ; //_AE0CFD6DA_1514:;				
            _AE0CFD6DA_1514:
            ; //	asm	nop				
00893:      	nop
            ; //_AE0CFD6DA_1515:;				
            _AE0CFD6DA_1515:
            ; //	asm	nop				
00894:      	nop
            ; //_AE0CFD6DA_1516:;				
            _AE0CFD6DA_1516:
            ; //	asm set io[0x09].b14;			
00895:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1517:;				
            _AE0CFD6DA_1517:
            ; //	asm	nop				
00896:      	nop
            ; //_AE0CFD6DA_1518:;				
            _AE0CFD6DA_1518:
            ; //	asm	nop				
00897:      	nop
            ; //_AE0CFD6DA_1519:;				
            _AE0CFD6DA_1519:
            ; //	asm	nop				
00898:      	nop
            ; //_AE0CFD6DA_1520:;				
            _AE0CFD6DA_1520:
            ; //	asm clr io[0x09].b14;			
00899:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1521:;				
            _AE0CFD6DA_1521:
            ; //	asm	nop				
0089A:      	nop
            ; //_AE0CFD6DA_1522:;				
            _AE0CFD6DA_1522:
            ; //	asm	nop				
0089B:      	nop
            ; //_AE0CFD6DA_1523:;				
            _AE0CFD6DA_1523:
            ; //	asm	nop				
0089C:      	nop
            ; //_AE0CFD6DA_1524:;				
            _AE0CFD6DA_1524:
            ; //	asm	nop				
0089D:      	nop
            ; //_AE0CFD6DA_1525:;				
            _AE0CFD6DA_1525:
            ; //	asm	nop				
0089E:      	nop
            ; //_AE0CFD6DA_1526:;				
            _AE0CFD6DA_1526:
            ; //	asm	nop				
0089F:      	nop
            ; //_AE0CFD6DA_1527:;				
            _AE0CFD6DA_1527:
            ; //	asm	nop				
008A0:      	nop
            ; //_AE0CFD6DA_1528:;				
            _AE0CFD6DA_1528:
            ; //	asm	nop				
008A1:      	nop
            ; //_AE0CFD6DA_1529:;				
            _AE0CFD6DA_1529:
            ; //	asm	nop				
008A2:      	nop
            ; //_AE0CFD6DA_1530:;				
            _AE0CFD6DA_1530:
            ; //	asm	nop				
008A3:      	nop
            ; //_AE0CFD6DA_1531:;				
            _AE0CFD6DA_1531:
            ; //	asm	nop				
008A4:      	nop
            ; //_AE0CFD6DA_1532:;				
            _AE0CFD6DA_1532:
            ; //	asm	nop				
008A5:      	nop
            ; //_AE0CFD6DA_1533:;				
            _AE0CFD6DA_1533:
            ; //	asm set io[0x09].b14;			
008A6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1534:;				
            _AE0CFD6DA_1534:
            ; //	asm	nop				
008A7:      	nop
            ; //_AE0CFD6DA_1535:;				
            _AE0CFD6DA_1535:
            ; //	asm	nop				
008A8:      	nop
            ; //_AE0CFD6DA_1536:;				
            _AE0CFD6DA_1536:
            ; //	asm	nop				
008A9:      	nop
            ; //_AE0CFD6DA_1537:;				
            _AE0CFD6DA_1537:
            ; //	asm clr io[0x09].b14;			
008AA:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1538:;				
            _AE0CFD6DA_1538:
            ; //	asm	nop				
008AB:      	nop
            ; //_AE0CFD6DA_1539:;				
            _AE0CFD6DA_1539:
            ; //	asm	nop				
008AC:      	nop
            ; //_AE0CFD6DA_1540:;				
            _AE0CFD6DA_1540:
            ; //	asm	nop				
008AD:      	nop
            ; //_AE0CFD6DA_1541:;				
            _AE0CFD6DA_1541:
            ; //	asm	nop				
008AE:      	nop
            ; //_AE0CFD6DA_1542:;				
            _AE0CFD6DA_1542:
            ; //	asm	nop				
008AF:      	nop
            ; //_AE0CFD6DA_1543:;				
            _AE0CFD6DA_1543:
            ; //	asm	nop				
008B0:      	nop
            ; //_AE0CFD6DA_1544:;				
            _AE0CFD6DA_1544:
            ; //	asm	nop				
008B1:      	nop
            ; //_AE0CFD6DA_1545:;				
            _AE0CFD6DA_1545:
            ; //	asm	nop				
008B2:      	nop
            ; //_AE0CFD6DA_1546:;				
            _AE0CFD6DA_1546:
            ; //	asm	nop				
008B3:      	nop
            ; //_AE0CFD6DA_1547:;				
            _AE0CFD6DA_1547:
            ; //	asm	nop				
008B4:      	nop
            ; //_AE0CFD6DA_1548:;				
            _AE0CFD6DA_1548:
            ; //	asm	nop				
008B5:      	nop
            ; //_AE0CFD6DA_1549:;				
            _AE0CFD6DA_1549:
            ; //	asm	nop				
008B6:      	nop
            ; //_AE0CFD6DA_1550:;				
            _AE0CFD6DA_1550:
            ; //	asm set io[0x09].b14;			
008B7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1551:;				
            _AE0CFD6DA_1551:
            ; //	asm	nop				
008B8:      	nop
            ; //_AE0CFD6DA_1552:;				
            _AE0CFD6DA_1552:
            ; //	asm	nop				
008B9:      	nop
            ; //_AE0CFD6DA_1553:;				
            _AE0CFD6DA_1553:
            ; //	asm	nop				
008BA:      	nop
            ; //_AE0CFD6DA_1554:;				
            _AE0CFD6DA_1554:
            ; //	asm clr io[0x09].b14;			
008BB:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1555:;				
            _AE0CFD6DA_1555:
            ; //	asm	nop				
008BC:      	nop
            ; //_AE0CFD6DA_1556:;				
            _AE0CFD6DA_1556:
            ; //	asm	nop				
008BD:      	nop
            ; //_AE0CFD6DA_1557:;				
            _AE0CFD6DA_1557:
            ; //	asm	nop				
008BE:      	nop
            ; //_AE0CFD6DA_1558:;				
            _AE0CFD6DA_1558:
            ; //	asm	nop				
008BF:      	nop
            ; //_AE0CFD6DA_1559:;				
            _AE0CFD6DA_1559:
            ; //	asm	nop				
008C0:      	nop
            ; //_AE0CFD6DA_1560:;				
            _AE0CFD6DA_1560:
            ; //	asm	nop				
008C1:      	nop
            ; //_AE0CFD6DA_1561:;				
            _AE0CFD6DA_1561:
            ; //	asm	nop				
008C2:      	nop
            ; //_AE0CFD6DA_1562:;				
            _AE0CFD6DA_1562:
            ; //	asm	nop				
008C3:      	nop
            ; //_AE0CFD6DA_1563:;				
            _AE0CFD6DA_1563:
            ; //	asm	nop				
008C4:      	nop
            ; //_AE0CFD6DA_1564:;				
            _AE0CFD6DA_1564:
            ; //	asm	nop				
008C5:      	nop
            ; //_AE0CFD6DA_1565:;				
            _AE0CFD6DA_1565:
            ; //	asm	nop				
008C6:      	nop
            ; //_AE0CFD6DA_1566:;				
            _AE0CFD6DA_1566:
            ; //	asm	nop				
008C7:      	nop
            ; //_AE0CFD6DA_1567:;				
            _AE0CFD6DA_1567:
            ; //	asm set io[0x09].b14;			
008C8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1568:;				
            _AE0CFD6DA_1568:
            ; //	asm	nop				
008C9:      	nop
            ; //_AE0CFD6DA_1569:;				
            _AE0CFD6DA_1569:
            ; //	asm	nop				
008CA:      	nop
            ; //_AE0CFD6DA_1570:;				
            _AE0CFD6DA_1570:
            ; //	asm	nop				
008CB:      	nop
            ; //_AE0CFD6DA_1571:;				
            _AE0CFD6DA_1571:
            ; //	asm clr io[0x09].b14;			
008CC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1572:;				
            _AE0CFD6DA_1572:
            ; //	asm	nop				
008CD:      	nop
            ; //_AE0CFD6DA_1573:;				
            _AE0CFD6DA_1573:
            ; //	asm	nop				
008CE:      	nop
            ; //_AE0CFD6DA_1574:;				
            _AE0CFD6DA_1574:
            ; //	asm	nop				
008CF:      	nop
            ; //_AE0CFD6DA_1575:;				
            _AE0CFD6DA_1575:
            ; //	asm	nop				
008D0:      	nop
            ; //_AE0CFD6DA_1576:;				
            _AE0CFD6DA_1576:
            ; //	asm	nop				
008D1:      	nop
            ; //_AE0CFD6DA_1577:;				
            _AE0CFD6DA_1577:
            ; //	asm	nop				
008D2:      	nop
            ; //_AE0CFD6DA_1578:;				
            _AE0CFD6DA_1578:
            ; //	asm	nop				
008D3:      	nop
            ; //_AE0CFD6DA_1579:;				
            _AE0CFD6DA_1579:
            ; //	asm	nop				
008D4:      	nop
            ; //_AE0CFD6DA_1580:;				
            _AE0CFD6DA_1580:
            ; //	asm	nop				
008D5:      	nop
            ; //_AE0CFD6DA_1581:;				
            _AE0CFD6DA_1581:
            ; //	asm	nop				
008D6:      	nop
            ; //_AE0CFD6DA_1582:;				
            _AE0CFD6DA_1582:
            ; //	asm	nop				
008D7:      	nop
            ; //_AE0CFD6DA_1583:;				
            _AE0CFD6DA_1583:
            ; //	asm	nop				
008D8:      	nop
            ; //_AE0CFD6DA_1584:;				
            _AE0CFD6DA_1584:
            ; //	asm set io[0x09].b14;			
008D9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1585:;				
            _AE0CFD6DA_1585:
            ; //	asm	nop				
008DA:      	nop
            ; //_AE0CFD6DA_1586:;				
            _AE0CFD6DA_1586:
            ; //	asm	nop				
008DB:      	nop
            ; //_AE0CFD6DA_1587:;				
            _AE0CFD6DA_1587:
            ; //	asm	nop				
008DC:      	nop
            ; //_AE0CFD6DA_1588:;				
            _AE0CFD6DA_1588:
            ; //	asm clr io[0x09].b14;			
008DD:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1589:;				
            _AE0CFD6DA_1589:
            ; //	asm	nop				
008DE:      	nop
            ; //_AE0CFD6DA_1590:;				
            _AE0CFD6DA_1590:
            ; //	asm	nop				
008DF:      	nop
            ; //_AE0CFD6DA_1591:;				
            _AE0CFD6DA_1591:
            ; //	asm	nop				
008E0:      	nop
            ; //_AE0CFD6DA_1592:;				
            _AE0CFD6DA_1592:
            ; //	asm	nop				
008E1:      	nop
            ; //_AE0CFD6DA_1593:;				
            _AE0CFD6DA_1593:
            ; //	asm	nop				
008E2:      	nop
            ; //_AE0CFD6DA_1594:;				
            _AE0CFD6DA_1594:
            ; //	asm	nop				
008E3:      	nop
            ; //_AE0CFD6DA_1595:;				
            _AE0CFD6DA_1595:
            ; //	asm	nop				
008E4:      	nop
            ; //_AE0CFD6DA_1596:;				
            _AE0CFD6DA_1596:
            ; //	asm	nop				
008E5:      	nop
            ; //_AE0CFD6DA_1597:;				
            _AE0CFD6DA_1597:
            ; //	asm	nop				
008E6:      	nop
            ; //_AE0CFD6DA_1598:;				
            _AE0CFD6DA_1598:
            ; //	asm	nop				
008E7:      	nop
            ; //_AE0CFD6DA_1599:;				
            _AE0CFD6DA_1599:
            ; //	asm	nop				
008E8:      	nop
            ; //_AE0CFD6DA_1600:;				
            _AE0CFD6DA_1600:
            ; //	asm	nop				
008E9:      	nop
            ; //_AE0CFD6DA_1601:;				
            _AE0CFD6DA_1601:
            ; //	asm set io[0x09].b14;			
008EA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1602:;				
            _AE0CFD6DA_1602:
            ; //	asm	nop				
008EB:      	nop
            ; //_AE0CFD6DA_1603:;				
            _AE0CFD6DA_1603:
            ; //	asm	nop				
008EC:      	nop
            ; //_AE0CFD6DA_1604:;				
            _AE0CFD6DA_1604:
            ; //	asm	nop				
008ED:      	nop
            ; //_AE0CFD6DA_1605:;				
            _AE0CFD6DA_1605:
            ; //	asm clr io[0x09].b14;			
008EE:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1606:;				
            _AE0CFD6DA_1606:
            ; //	asm	nop				
008EF:      	nop
            ; //_AE0CFD6DA_1607:;				
            _AE0CFD6DA_1607:
            ; //	asm	nop				
008F0:      	nop
            ; //_AE0CFD6DA_1608:;				
            _AE0CFD6DA_1608:
            ; //	asm	nop				
008F1:      	nop
            ; //_AE0CFD6DA_1609:;				
            _AE0CFD6DA_1609:
            ; //	asm	nop				
008F2:      	nop
            ; //_AE0CFD6DA_1610:;				
            _AE0CFD6DA_1610:
            ; //	asm	nop				
008F3:      	nop
            ; //_AE0CFD6DA_1611:;				
            _AE0CFD6DA_1611:
            ; //	asm	nop				
008F4:      	nop
            ; //_AE0CFD6DA_1612:;				
            _AE0CFD6DA_1612:
            ; //	asm	nop				
008F5:      	nop
            ; //_AE0CFD6DA_1613:;				
            _AE0CFD6DA_1613:
            ; //	asm	nop				
008F6:      	nop
            ; //_AE0CFD6DA_1614:;				
            _AE0CFD6DA_1614:
            ; //	asm	nop				
008F7:      	nop
            ; //_AE0CFD6DA_1615:;				
            _AE0CFD6DA_1615:
            ; //	asm	nop				
008F8:      	nop
            ; //_AE0CFD6DA_1616:;				
            _AE0CFD6DA_1616:
            ; //	asm	nop				
008F9:      	nop
            ; //_AE0CFD6DA_1617:;				
            _AE0CFD6DA_1617:
            ; //	asm	nop				
008FA:      	nop
            ; //_AE0CFD6DA_1618:;				
            _AE0CFD6DA_1618:
            ; //	asm set io[0x09].b14;			
008FB:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1619:;				
            _AE0CFD6DA_1619:
            ; //	asm	nop				
008FC:      	nop
            ; //_AE0CFD6DA_1620:;				
            _AE0CFD6DA_1620:
            ; //	asm	nop				
008FD:      	nop
            ; //_AE0CFD6DA_1621:;				
            _AE0CFD6DA_1621:
            ; //	asm	nop				
008FE:      	nop
            ; //_AE0CFD6DA_1622:;				
            _AE0CFD6DA_1622:
            ; //	asm clr io[0x09].b14;			
008FF:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1623:;				
            _AE0CFD6DA_1623:
            ; //	asm	nop				
00900:      	nop
            ; //_AE0CFD6DA_1624:;				
            _AE0CFD6DA_1624:
            ; //	asm	nop				
00901:      	nop
            ; //_AE0CFD6DA_1625:;				
            _AE0CFD6DA_1625:
            ; //	asm	nop				
00902:      	nop
            ; //_AE0CFD6DA_1626:;				
            _AE0CFD6DA_1626:
            ; //	asm	nop				
00903:      	nop
            ; //_AE0CFD6DA_1627:;				
            _AE0CFD6DA_1627:
            ; //	asm	nop				
00904:      	nop
            ; //_AE0CFD6DA_1628:;				
            _AE0CFD6DA_1628:
            ; //	asm	nop				
00905:      	nop
            ; //_AE0CFD6DA_1629:;				
            _AE0CFD6DA_1629:
            ; //	asm	nop				
00906:      	nop
            ; //_AE0CFD6DA_1630:;				
            _AE0CFD6DA_1630:
            ; //	asm	nop				
00907:      	nop
            ; //_AE0CFD6DA_1631:;				
            _AE0CFD6DA_1631:
            ; //	asm	nop				
00908:      	nop
            ; //_AE0CFD6DA_1632:;				
            _AE0CFD6DA_1632:
            ; //	asm	nop				
00909:      	nop
            ; //_AE0CFD6DA_1633:;				
            _AE0CFD6DA_1633:
            ; //	asm	nop				
0090A:      	nop
            ; //_AE0CFD6DA_1634:;				
            _AE0CFD6DA_1634:
            ; //	asm	nop				
0090B:      	nop
            ; //_AE0CFD6DA_1635:;				
            _AE0CFD6DA_1635:
            ; //	asm set io[0x09].b14;			
0090C:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1636:;				
            _AE0CFD6DA_1636:
            ; //	asm	nop				
0090D:      	nop
            ; //_AE0CFD6DA_1637:;				
            _AE0CFD6DA_1637:
            ; //	asm	nop				
0090E:      	nop
            ; //_AE0CFD6DA_1638:;				
            _AE0CFD6DA_1638:
            ; //	asm	nop				
0090F:      	nop
            ; //_AE0CFD6DA_1639:;				
            _AE0CFD6DA_1639:
            ; //	asm clr io[0x09].b14;			
00910:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1640:;				
            _AE0CFD6DA_1640:
            ; //	asm	nop				
00911:      	nop
            ; //_AE0CFD6DA_1641:;				
            _AE0CFD6DA_1641:
            ; //	asm	nop				
00912:      	nop
            ; //_AE0CFD6DA_1642:;				
            _AE0CFD6DA_1642:
            ; //	asm	nop				
00913:      	nop
            ; //_AE0CFD6DA_1643:;				
            _AE0CFD6DA_1643:
            ; //	asm	nop				
00914:      	nop
            ; //_AE0CFD6DA_1644:;				
            _AE0CFD6DA_1644:
            ; //	asm	nop				
00915:      	nop
            ; //_AE0CFD6DA_1645:;				
            _AE0CFD6DA_1645:
            ; //	asm	nop				
00916:      	nop
            ; //_AE0CFD6DA_1646:;				
            _AE0CFD6DA_1646:
            ; //	asm	nop				
00917:      	nop
            ; //_AE0CFD6DA_1647:;				
            _AE0CFD6DA_1647:
            ; //	asm	nop				
00918:      	nop
            ; //_AE0CFD6DA_1648:;				
            _AE0CFD6DA_1648:
            ; //	asm	nop				
00919:      	nop
            ; //_AE0CFD6DA_1649:;				
            _AE0CFD6DA_1649:
            ; //	asm	nop				
0091A:      	nop
            ; //_AE0CFD6DA_1650:;				
            _AE0CFD6DA_1650:
            ; //	asm	nop				
0091B:      	nop
            ; //_AE0CFD6DA_1651:;				
            _AE0CFD6DA_1651:
            ; //	asm	nop				
0091C:      	nop
            ; //_AE0CFD6DA_1652:;				
            _AE0CFD6DA_1652:
            ; //	asm set io[0x09].b14;			
0091D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1653:;				
            _AE0CFD6DA_1653:
            ; //	asm	nop				
0091E:      	nop
            ; //_AE0CFD6DA_1654:;				
            _AE0CFD6DA_1654:
            ; //	asm	nop				
0091F:      	nop
            ; //_AE0CFD6DA_1655:;				
            _AE0CFD6DA_1655:
            ; //	asm	nop				
00920:      	nop
            ; //_AE0CFD6DA_1656:;				
            _AE0CFD6DA_1656:
            ; //	asm clr io[0x09].b14;			
00921:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1657:;				
            _AE0CFD6DA_1657:
            ; //	asm	nop				
00922:      	nop
            ; //_AE0CFD6DA_1658:;				
            _AE0CFD6DA_1658:
            ; //	asm	nop				
00923:      	nop
            ; //_AE0CFD6DA_1659:;				
            _AE0CFD6DA_1659:
            ; //	asm	nop				
00924:      	nop
            ; //_AE0CFD6DA_1660:;				
            _AE0CFD6DA_1660:
            ; //	asm	nop				
00925:      	nop
            ; //_AE0CFD6DA_1661:;				
            _AE0CFD6DA_1661:
            ; //	asm	nop				
00926:      	nop
            ; //_AE0CFD6DA_1662:;				
            _AE0CFD6DA_1662:
            ; //	asm	nop				
00927:      	nop
            ; //_AE0CFD6DA_1663:;				
            _AE0CFD6DA_1663:
            ; //	asm	nop				
00928:      	nop
            ; //_AE0CFD6DA_1664:;				
            _AE0CFD6DA_1664:
            ; //	asm	nop				
00929:      	nop
            ; //_AE0CFD6DA_1665:;				
            _AE0CFD6DA_1665:
            ; //	asm	nop				
0092A:      	nop
            ; //_AE0CFD6DA_1666:;				
            _AE0CFD6DA_1666:
            ; //	asm	nop				
0092B:      	nop
            ; //_AE0CFD6DA_1667:;				
            _AE0CFD6DA_1667:
            ; //	asm	nop				
0092C:      	nop
            ; //_AE0CFD6DA_1668:;				
            _AE0CFD6DA_1668:
            ; //	asm	nop				
0092D:      	nop
            ; //_AE0CFD6DA_1669:;				
            _AE0CFD6DA_1669:
            ; //	asm set io[0x09].b14;			
0092E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1670:;				
            _AE0CFD6DA_1670:
            ; //	asm	nop				
0092F:      	nop
            ; //_AE0CFD6DA_1671:;				
            _AE0CFD6DA_1671:
            ; //	asm	nop				
00930:      	nop
            ; //_AE0CFD6DA_1672:;				
            _AE0CFD6DA_1672:
            ; //	asm	nop				
00931:      	nop
            ; //_AE0CFD6DA_1673:;				
            _AE0CFD6DA_1673:
            ; //	asm clr io[0x09].b14;			
00932:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1674:;				
            _AE0CFD6DA_1674:
            ; //	asm	nop				
00933:      	nop
            ; //_AE0CFD6DA_1675:;				
            _AE0CFD6DA_1675:
            ; //	asm	nop				
00934:      	nop
            ; //_AE0CFD6DA_1676:;				
            _AE0CFD6DA_1676:
            ; //	asm	nop				
00935:      	nop
            ; //_AE0CFD6DA_1677:;				
            _AE0CFD6DA_1677:
            ; //	asm	nop				
00936:      	nop
            ; //_AE0CFD6DA_1678:;				
            _AE0CFD6DA_1678:
            ; //	asm	nop				
00937:      	nop
            ; //_AE0CFD6DA_1679:;				
            _AE0CFD6DA_1679:
            ; //	asm	nop				
00938:      	nop
            ; //_AE0CFD6DA_1680:;				
            _AE0CFD6DA_1680:
            ; //	asm	nop				
00939:      	nop
            ; //_AE0CFD6DA_1681:;				
            _AE0CFD6DA_1681:
            ; //	asm	nop				
0093A:      	nop
            ; //_AE0CFD6DA_1682:;				
            _AE0CFD6DA_1682:
            ; //	asm	nop				
0093B:      	nop
            ; //_AE0CFD6DA_1683:;				
            _AE0CFD6DA_1683:
            ; //	asm	nop				
0093C:      	nop
            ; //_AE0CFD6DA_1684:;				
            _AE0CFD6DA_1684:
            ; //	asm	nop				
0093D:      	nop
            ; //_AE0CFD6DA_1685:;				
            _AE0CFD6DA_1685:
            ; //	asm	nop				
0093E:      	nop
            ; //_AE0CFD6DA_1686:;				
            _AE0CFD6DA_1686:
            ; //	asm set io[0x09].b14;			
0093F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1687:;				
            _AE0CFD6DA_1687:
            ; //	asm	nop				
00940:      	nop
            ; //_AE0CFD6DA_1688:;				
            _AE0CFD6DA_1688:
            ; //	asm	nop				
00941:      	nop
            ; //_AE0CFD6DA_1689:;				
            _AE0CFD6DA_1689:
            ; //	asm	nop				
00942:      	nop
            ; //_AE0CFD6DA_1690:;				
            _AE0CFD6DA_1690:
            ; //	asm clr io[0x09].b14;			
00943:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1691:;				
            _AE0CFD6DA_1691:
            ; //	asm	nop				
00944:      	nop
            ; //_AE0CFD6DA_1692:;				
            _AE0CFD6DA_1692:
            ; //	asm	nop				
00945:      	nop
            ; //_AE0CFD6DA_1693:;				
            _AE0CFD6DA_1693:
            ; //	asm	nop				
00946:      	nop
            ; //_AE0CFD6DA_1694:;				
            _AE0CFD6DA_1694:
            ; //	asm	nop				
00947:      	nop
            ; //_AE0CFD6DA_1695:;				
            _AE0CFD6DA_1695:
            ; //	asm	nop				
00948:      	nop
            ; //_AE0CFD6DA_1696:;				
            _AE0CFD6DA_1696:
            ; //	asm	nop				
00949:      	nop
            ; //_AE0CFD6DA_1697:;				
            _AE0CFD6DA_1697:
            ; //	asm	nop				
0094A:      	nop
            ; //_AE0CFD6DA_1698:;				
            _AE0CFD6DA_1698:
            ; //	asm	nop				
0094B:      	nop
            ; //_AE0CFD6DA_1699:;				
            _AE0CFD6DA_1699:
            ; //	asm	nop				
0094C:      	nop
            ; //_AE0CFD6DA_1700:;				
            _AE0CFD6DA_1700:
            ; //	asm	nop				
0094D:      	nop
            ; //_AE0CFD6DA_1701:;				
            _AE0CFD6DA_1701:
            ; //	asm	nop				
0094E:      	nop
            ; //_AE0CFD6DA_1702:;				
            _AE0CFD6DA_1702:
            ; //	asm	nop				
0094F:      	nop
            ; //_AE0CFD6DA_1703:;				
            _AE0CFD6DA_1703:
            ; //	asm set io[0x09].b14;			
00950:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1704:;				
            _AE0CFD6DA_1704:
            ; //	asm	nop				
00951:      	nop
            ; //_AE0CFD6DA_1705:;				
            _AE0CFD6DA_1705:
            ; //	asm	nop				
00952:      	nop
            ; //_AE0CFD6DA_1706:;				
            _AE0CFD6DA_1706:
            ; //	asm	nop				
00953:      	nop
            ; //_AE0CFD6DA_1707:;				
            _AE0CFD6DA_1707:
            ; //	asm clr io[0x09].b14;			
00954:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1708:;				
            _AE0CFD6DA_1708:
            ; //	asm	nop				
00955:      	nop
            ; //_AE0CFD6DA_1709:;				
            _AE0CFD6DA_1709:
            ; //	asm	nop				
00956:      	nop
            ; //_AE0CFD6DA_1710:;				
            _AE0CFD6DA_1710:
            ; //	asm	nop				
00957:      	nop
            ; //_AE0CFD6DA_1711:;				
            _AE0CFD6DA_1711:
            ; //	asm	nop				
00958:      	nop
            ; //_AE0CFD6DA_1712:;				
            _AE0CFD6DA_1712:
            ; //	asm	nop				
00959:      	nop
            ; //_AE0CFD6DA_1713:;				
            _AE0CFD6DA_1713:
            ; //	asm	nop				
0095A:      	nop
            ; //_AE0CFD6DA_1714:;				
            _AE0CFD6DA_1714:
            ; //	asm	nop				
0095B:      	nop
            ; //_AE0CFD6DA_1715:;				
            _AE0CFD6DA_1715:
            ; //	asm	nop				
0095C:      	nop
            ; //_AE0CFD6DA_1716:;				
            _AE0CFD6DA_1716:
            ; //	asm	nop				
0095D:      	nop
            ; //_AE0CFD6DA_1717:;				
            _AE0CFD6DA_1717:
            ; //	asm	nop				
0095E:      	nop
            ; //_AE0CFD6DA_1718:;				
            _AE0CFD6DA_1718:
            ; //	asm	nop				
0095F:      	nop
            ; //_AE0CFD6DA_1719:;				
            _AE0CFD6DA_1719:
            ; //	asm	nop				
00960:      	nop
            ; //_AE0CFD6DA_1720:;				
            _AE0CFD6DA_1720:
            ; //	asm set io[0x09].b14;			
00961:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1721:;				
            _AE0CFD6DA_1721:
            ; //	asm	nop				
00962:      	nop
            ; //_AE0CFD6DA_1722:;				
            _AE0CFD6DA_1722:
            ; //	asm	nop				
00963:      	nop
            ; //_AE0CFD6DA_1723:;				
            _AE0CFD6DA_1723:
            ; //	asm	nop				
00964:      	nop
            ; //_AE0CFD6DA_1724:;				
            _AE0CFD6DA_1724:
            ; //	asm clr io[0x09].b14;			
00965:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1725:;				
            _AE0CFD6DA_1725:
            ; //	asm	nop				
00966:      	nop
            ; //_AE0CFD6DA_1726:;				
            _AE0CFD6DA_1726:
            ; //	asm	nop				
00967:      	nop
            ; //_AE0CFD6DA_1727:;				
            _AE0CFD6DA_1727:
            ; //	asm	nop				
00968:      	nop
            ; //_AE0CFD6DA_1728:;				
            _AE0CFD6DA_1728:
            ; //	asm	nop				
00969:      	nop
            ; //_AE0CFD6DA_1729:;				
            _AE0CFD6DA_1729:
            ; //	asm	nop				
0096A:      	nop
            ; //_AE0CFD6DA_1730:;				
            _AE0CFD6DA_1730:
            ; //	asm	nop				
0096B:      	nop
            ; //_AE0CFD6DA_1731:;				
            _AE0CFD6DA_1731:
            ; //	asm	nop				
0096C:      	nop
            ; //_AE0CFD6DA_1732:;				
            _AE0CFD6DA_1732:
            ; //	asm	nop				
0096D:      	nop
            ; //_AE0CFD6DA_1733:;				
            _AE0CFD6DA_1733:
            ; //	asm	nop				
0096E:      	nop
            ; //_AE0CFD6DA_1734:;				
            _AE0CFD6DA_1734:
            ; //	asm	nop				
0096F:      	nop
            ; //_AE0CFD6DA_1735:;				
            _AE0CFD6DA_1735:
            ; //	asm	nop				
00970:      	nop
            ; //_AE0CFD6DA_1736:;				
            _AE0CFD6DA_1736:
            ; //	asm	nop				
00971:      	nop
            ; //_AE0CFD6DA_1737:;				
            _AE0CFD6DA_1737:
            ; //	asm set io[0x09].b14;			
00972:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1738:;				
            _AE0CFD6DA_1738:
            ; //	asm	nop				
00973:      	nop
            ; //_AE0CFD6DA_1739:;				
            _AE0CFD6DA_1739:
            ; //	asm	nop				
00974:      	nop
            ; //_AE0CFD6DA_1740:;				
            _AE0CFD6DA_1740:
            ; //	asm	nop				
00975:      	nop
            ; //_AE0CFD6DA_1741:;				
            _AE0CFD6DA_1741:
            ; //	asm clr io[0x09].b14;			
00976:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1742:;				
            _AE0CFD6DA_1742:
            ; //	asm	nop				
00977:      	nop
            ; //_AE0CFD6DA_1743:;				
            _AE0CFD6DA_1743:
            ; //	asm	nop				
00978:      	nop
            ; //_AE0CFD6DA_1744:;				
            _AE0CFD6DA_1744:
            ; //	asm	nop				
00979:      	nop
            ; //_AE0CFD6DA_1745:;				
            _AE0CFD6DA_1745:
            ; //	asm	nop				
0097A:      	nop
            ; //_AE0CFD6DA_1746:;				
            _AE0CFD6DA_1746:
            ; //	asm	nop				
0097B:      	nop
            ; //_AE0CFD6DA_1747:;				
            _AE0CFD6DA_1747:
            ; //	asm	nop				
0097C:      	nop
            ; //_AE0CFD6DA_1748:;				
            _AE0CFD6DA_1748:
            ; //	asm	nop				
0097D:      	nop
            ; //_AE0CFD6DA_1749:;				
            _AE0CFD6DA_1749:
            ; //	asm	nop				
0097E:      	nop
            ; //_AE0CFD6DA_1750:;				
            _AE0CFD6DA_1750:
            ; //	asm	nop				
0097F:      	nop
            ; //_AE0CFD6DA_1751:;				
            _AE0CFD6DA_1751:
            ; //	asm	nop				
00980:      	nop
            ; //_AE0CFD6DA_1752:;				
            _AE0CFD6DA_1752:
            ; //	asm	nop				
00981:      	nop
            ; //_AE0CFD6DA_1753:;				
            _AE0CFD6DA_1753:
            ; //	asm	nop				
00982:      	nop
            ; //_AE0CFD6DA_1754:;				
            _AE0CFD6DA_1754:
            ; //	asm set io[0x09].b14;			
00983:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1755:;				
            _AE0CFD6DA_1755:
            ; //	asm	nop				
00984:      	nop
            ; //_AE0CFD6DA_1756:;				
            _AE0CFD6DA_1756:
            ; //	asm	nop				
00985:      	nop
            ; //_AE0CFD6DA_1757:;				
            _AE0CFD6DA_1757:
            ; //	asm	nop				
00986:      	nop
            ; //_AE0CFD6DA_1758:;				
            _AE0CFD6DA_1758:
            ; //	asm clr io[0x09].b14;			
00987:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1759:;				
            _AE0CFD6DA_1759:
            ; //	asm	nop				
00988:      	nop
            ; //_AE0CFD6DA_1760:;				
            _AE0CFD6DA_1760:
            ; //	asm	nop				
00989:      	nop
            ; //_AE0CFD6DA_1761:;				
            _AE0CFD6DA_1761:
            ; //	asm	nop				
0098A:      	nop
            ; //_AE0CFD6DA_1762:;				
            _AE0CFD6DA_1762:
            ; //	asm	nop				
0098B:      	nop
            ; //_AE0CFD6DA_1763:;				
            _AE0CFD6DA_1763:
            ; //	asm	nop				
0098C:      	nop
            ; //_AE0CFD6DA_1764:;				
            _AE0CFD6DA_1764:
            ; //	asm	nop				
0098D:      	nop
            ; //_AE0CFD6DA_1765:;				
            _AE0CFD6DA_1765:
            ; //	asm	nop				
0098E:      	nop
            ; //_AE0CFD6DA_1766:;				
            _AE0CFD6DA_1766:
            ; //	asm	nop				
0098F:      	nop
            ; //_AE0CFD6DA_1767:;				
            _AE0CFD6DA_1767:
            ; //	asm	nop				
00990:      	nop
            ; //_AE0CFD6DA_1768:;				
            _AE0CFD6DA_1768:
            ; //	asm	nop				
00991:      	nop
            ; //_AE0CFD6DA_1769:;				
            _AE0CFD6DA_1769:
            ; //	asm	nop				
00992:      	nop
            ; //_AE0CFD6DA_1770:;				
            _AE0CFD6DA_1770:
            ; //	asm	nop				
00993:      	nop
            ; //_AE0CFD6DA_1771:;				
            _AE0CFD6DA_1771:
            ; //	goto LD63FD439_72;			
00994:      	pch =	LD63FD439_72
00995:      	ljmp	LD63FD439_72
            ; //LD63FD439_78:;					
            LD63FD439_78:
            ; //_AE0CFD6DA_1772:;				
            _AE0CFD6DA_1772:
            ; //	asm set io[0x09].b14;			
00996:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1773:;				
            _AE0CFD6DA_1773:
            ; //	asm	nop				
00997:      	nop
            ; //_AE0CFD6DA_1774:;				
            _AE0CFD6DA_1774:
            ; //	asm	nop				
00998:      	nop
            ; //_AE0CFD6DA_1775:;				
            _AE0CFD6DA_1775:
            ; //	asm	nop				
00999:      	nop
            ; //_AE0CFD6DA_1776:;				
            _AE0CFD6DA_1776:
            ; //	asm clr io[0x09].b14;			
0099A:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1777:;				
            _AE0CFD6DA_1777:
            ; //	asm	nop				
0099B:      	nop
            ; //_AE0CFD6DA_1778:;				
            _AE0CFD6DA_1778:
            ; //	asm	nop				
0099C:      	nop
            ; //_AE0CFD6DA_1779:;				
            _AE0CFD6DA_1779:
            ; //	asm	nop				
0099D:      	nop
            ; //_AE0CFD6DA_1780:;				
            _AE0CFD6DA_1780:
            ; //	asm	nop				
0099E:      	nop
            ; //_AE0CFD6DA_1781:;				
            _AE0CFD6DA_1781:
            ; //	asm	nop				
0099F:      	nop
            ; //_AE0CFD6DA_1782:;				
            _AE0CFD6DA_1782:
            ; //	asm	nop				
009A0:      	nop
            ; //_AE0CFD6DA_1783:;				
            _AE0CFD6DA_1783:
            ; //	asm	nop				
009A1:      	nop
            ; //_AE0CFD6DA_1784:;				
            _AE0CFD6DA_1784:
            ; //	asm	nop				
009A2:      	nop
            ; //_AE0CFD6DA_1785:;				
            _AE0CFD6DA_1785:
            ; //	asm	nop				
009A3:      	nop
            ; //_AE0CFD6DA_1786:;				
            _AE0CFD6DA_1786:
            ; //	asm	nop				
009A4:      	nop
            ; //_AE0CFD6DA_1787:;				
            _AE0CFD6DA_1787:
            ; //	asm	nop				
009A5:      	nop
            ; //_AE0CFD6DA_1788:;				
            _AE0CFD6DA_1788:
            ; //	asm	nop				
009A6:      	nop
            ; //_AE0CFD6DA_1789:;				
            _AE0CFD6DA_1789:
            ; //	asm set io[0x09].b14;			
009A7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1790:;				
            _AE0CFD6DA_1790:
            ; //	asm	nop				
009A8:      	nop
            ; //_AE0CFD6DA_1791:;				
            _AE0CFD6DA_1791:
            ; //	asm	nop				
009A9:      	nop
            ; //_AE0CFD6DA_1792:;				
            _AE0CFD6DA_1792:
            ; //	asm	nop				
009AA:      	nop
            ; //_AE0CFD6DA_1793:;				
            _AE0CFD6DA_1793:
            ; //	asm clr io[0x09].b14;			
009AB:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1794:;				
            _AE0CFD6DA_1794:
            ; //	asm	nop				
009AC:      	nop
            ; //_AE0CFD6DA_1795:;				
            _AE0CFD6DA_1795:
            ; //	asm	nop				
009AD:      	nop
            ; //_AE0CFD6DA_1796:;				
            _AE0CFD6DA_1796:
            ; //	asm	nop				
009AE:      	nop
            ; //_AE0CFD6DA_1797:;				
            _AE0CFD6DA_1797:
            ; //	asm	nop				
009AF:      	nop
            ; //_AE0CFD6DA_1798:;				
            _AE0CFD6DA_1798:
            ; //	asm	nop				
009B0:      	nop
            ; //_AE0CFD6DA_1799:;				
            _AE0CFD6DA_1799:
            ; //	asm	nop				
009B1:      	nop
            ; //_AE0CFD6DA_1800:;				
            _AE0CFD6DA_1800:
            ; //	asm	nop				
009B2:      	nop
            ; //_AE0CFD6DA_1801:;				
            _AE0CFD6DA_1801:
            ; //	asm	nop				
009B3:      	nop
            ; //_AE0CFD6DA_1802:;				
            _AE0CFD6DA_1802:
            ; //	asm	nop				
009B4:      	nop
            ; //_AE0CFD6DA_1803:;				
            _AE0CFD6DA_1803:
            ; //	asm	nop				
009B5:      	nop
            ; //_AE0CFD6DA_1804:;				
            _AE0CFD6DA_1804:
            ; //	asm	nop				
009B6:      	nop
            ; //_AE0CFD6DA_1805:;				
            _AE0CFD6DA_1805:
            ; //	asm	nop				
009B7:      	nop
            ; //_AE0CFD6DA_1806:;				
            _AE0CFD6DA_1806:
            ; //	asm set io[0x09].b14;			
009B8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1807:;				
            _AE0CFD6DA_1807:
            ; //	asm	nop				
009B9:      	nop
            ; //_AE0CFD6DA_1808:;				
            _AE0CFD6DA_1808:
            ; //	asm	nop				
009BA:      	nop
            ; //_AE0CFD6DA_1809:;				
            _AE0CFD6DA_1809:
            ; //	asm	nop				
009BB:      	nop
            ; //_AE0CFD6DA_1810:;				
            _AE0CFD6DA_1810:
            ; //	asm clr io[0x09].b14;			
009BC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1811:;				
            _AE0CFD6DA_1811:
            ; //	asm	nop				
009BD:      	nop
            ; //_AE0CFD6DA_1812:;				
            _AE0CFD6DA_1812:
            ; //	asm	nop				
009BE:      	nop
            ; //_AE0CFD6DA_1813:;				
            _AE0CFD6DA_1813:
            ; //	asm	nop				
009BF:      	nop
            ; //_AE0CFD6DA_1814:;				
            _AE0CFD6DA_1814:
            ; //	asm	nop				
009C0:      	nop
            ; //_AE0CFD6DA_1815:;				
            _AE0CFD6DA_1815:
            ; //	asm	nop				
009C1:      	nop
            ; //_AE0CFD6DA_1816:;				
            _AE0CFD6DA_1816:
            ; //	asm	nop				
009C2:      	nop
            ; //_AE0CFD6DA_1817:;				
            _AE0CFD6DA_1817:
            ; //	asm	nop				
009C3:      	nop
            ; //_AE0CFD6DA_1818:;				
            _AE0CFD6DA_1818:
            ; //	asm	nop				
009C4:      	nop
            ; //_AE0CFD6DA_1819:;				
            _AE0CFD6DA_1819:
            ; //	asm	nop				
009C5:      	nop
            ; //_AE0CFD6DA_1820:;				
            _AE0CFD6DA_1820:
            ; //	asm	nop				
009C6:      	nop
            ; //_AE0CFD6DA_1821:;				
            _AE0CFD6DA_1821:
            ; //	asm	nop				
009C7:      	nop
            ; //_AE0CFD6DA_1822:;				
            _AE0CFD6DA_1822:
            ; //	asm	nop				
009C8:      	nop
            ; //_AE0CFD6DA_1823:;				
            _AE0CFD6DA_1823:
            ; //	asm set io[0x09].b14;			
009C9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1824:;				
            _AE0CFD6DA_1824:
            ; //	asm	nop				
009CA:      	nop
            ; //_AE0CFD6DA_1825:;				
            _AE0CFD6DA_1825:
            ; //	asm	nop				
009CB:      	nop
            ; //_AE0CFD6DA_1826:;				
            _AE0CFD6DA_1826:
            ; //	asm	nop				
009CC:      	nop
            ; //_AE0CFD6DA_1827:;				
            _AE0CFD6DA_1827:
            ; //	asm clr io[0x09].b14;			
009CD:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1828:;				
            _AE0CFD6DA_1828:
            ; //	asm	nop				
009CE:      	nop
            ; //_AE0CFD6DA_1829:;				
            _AE0CFD6DA_1829:
            ; //	asm	nop				
009CF:      	nop
            ; //_AE0CFD6DA_1830:;				
            _AE0CFD6DA_1830:
            ; //	asm	nop				
009D0:      	nop
            ; //_AE0CFD6DA_1831:;				
            _AE0CFD6DA_1831:
            ; //	asm	nop				
009D1:      	nop
            ; //_AE0CFD6DA_1832:;				
            _AE0CFD6DA_1832:
            ; //	asm	nop				
009D2:      	nop
            ; //_AE0CFD6DA_1833:;				
            _AE0CFD6DA_1833:
            ; //	asm	nop				
009D3:      	nop
            ; //_AE0CFD6DA_1834:;				
            _AE0CFD6DA_1834:
            ; //	asm	nop				
009D4:      	nop
            ; //_AE0CFD6DA_1835:;				
            _AE0CFD6DA_1835:
            ; //	asm	nop				
009D5:      	nop
            ; //_AE0CFD6DA_1836:;				
            _AE0CFD6DA_1836:
            ; //	asm	nop				
009D6:      	nop
            ; //_AE0CFD6DA_1837:;				
            _AE0CFD6DA_1837:
            ; //	asm	nop				
009D7:      	nop
            ; //_AE0CFD6DA_1838:;				
            _AE0CFD6DA_1838:
            ; //	asm	nop				
009D8:      	nop
            ; //_AE0CFD6DA_1839:;				
            _AE0CFD6DA_1839:
            ; //	asm	nop				
009D9:      	nop
            ; //_AE0CFD6DA_1840:;				
            _AE0CFD6DA_1840:
            ; //	asm set io[0x09].b14;			
009DA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1841:;				
            _AE0CFD6DA_1841:
            ; //	asm	nop				
009DB:      	nop
            ; //_AE0CFD6DA_1842:;				
            _AE0CFD6DA_1842:
            ; //	asm	nop				
009DC:      	nop
            ; //_AE0CFD6DA_1843:;				
            _AE0CFD6DA_1843:
            ; //	asm	nop				
009DD:      	nop
            ; //_AE0CFD6DA_1844:;				
            _AE0CFD6DA_1844:
            ; //	asm clr io[0x09].b14;			
009DE:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1845:;				
            _AE0CFD6DA_1845:
            ; //	asm	nop				
009DF:      	nop
            ; //_AE0CFD6DA_1846:;				
            _AE0CFD6DA_1846:
            ; //	asm	nop				
009E0:      	nop
            ; //_AE0CFD6DA_1847:;				
            _AE0CFD6DA_1847:
            ; //	asm	nop				
009E1:      	nop
            ; //_AE0CFD6DA_1848:;				
            _AE0CFD6DA_1848:
            ; //	asm	nop				
009E2:      	nop
            ; //_AE0CFD6DA_1849:;				
            _AE0CFD6DA_1849:
            ; //	asm	nop				
009E3:      	nop
            ; //_AE0CFD6DA_1850:;				
            _AE0CFD6DA_1850:
            ; //	asm	nop				
009E4:      	nop
            ; //_AE0CFD6DA_1851:;				
            _AE0CFD6DA_1851:
            ; //	asm	nop				
009E5:      	nop
            ; //_AE0CFD6DA_1852:;				
            _AE0CFD6DA_1852:
            ; //	asm	nop				
009E6:      	nop
            ; //_AE0CFD6DA_1853:;				
            _AE0CFD6DA_1853:
            ; //	asm	nop				
009E7:      	nop
            ; //_AE0CFD6DA_1854:;				
            _AE0CFD6DA_1854:
            ; //	asm	nop				
009E8:      	nop
            ; //_AE0CFD6DA_1855:;				
            _AE0CFD6DA_1855:
            ; //	asm	nop				
009E9:      	nop
            ; //_AE0CFD6DA_1856:;				
            _AE0CFD6DA_1856:
            ; //	asm	nop				
009EA:      	nop
            ; //_AE0CFD6DA_1857:;				
            _AE0CFD6DA_1857:
            ; //	asm set io[0x09].b14;			
009EB:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1858:;				
            _AE0CFD6DA_1858:
            ; //	asm	nop				
009EC:      	nop
            ; //_AE0CFD6DA_1859:;				
            _AE0CFD6DA_1859:
            ; //	asm	nop				
009ED:      	nop
            ; //_AE0CFD6DA_1860:;				
            _AE0CFD6DA_1860:
            ; //	asm	nop				
009EE:      	nop
            ; //_AE0CFD6DA_1861:;				
            _AE0CFD6DA_1861:
            ; //	asm clr io[0x09].b14;			
009EF:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1862:;				
            _AE0CFD6DA_1862:
            ; //	asm	nop				
009F0:      	nop
            ; //_AE0CFD6DA_1863:;				
            _AE0CFD6DA_1863:
            ; //	asm	nop				
009F1:      	nop
            ; //_AE0CFD6DA_1864:;				
            _AE0CFD6DA_1864:
            ; //	asm	nop				
009F2:      	nop
            ; //_AE0CFD6DA_1865:;				
            _AE0CFD6DA_1865:
            ; //	asm	nop				
009F3:      	nop
            ; //_AE0CFD6DA_1866:;				
            _AE0CFD6DA_1866:
            ; //	asm	nop				
009F4:      	nop
            ; //_AE0CFD6DA_1867:;				
            _AE0CFD6DA_1867:
            ; //	asm	nop				
009F5:      	nop
            ; //_AE0CFD6DA_1868:;				
            _AE0CFD6DA_1868:
            ; //	asm	nop				
009F6:      	nop
            ; //_AE0CFD6DA_1869:;				
            _AE0CFD6DA_1869:
            ; //	asm	nop				
009F7:      	nop
            ; //_AE0CFD6DA_1870:;				
            _AE0CFD6DA_1870:
            ; //	asm	nop				
009F8:      	nop
            ; //_AE0CFD6DA_1871:;				
            _AE0CFD6DA_1871:
            ; //	asm	nop				
009F9:      	nop
            ; //_AE0CFD6DA_1872:;				
            _AE0CFD6DA_1872:
            ; //	asm	nop				
009FA:      	nop
            ; //_AE0CFD6DA_1873:;				
            _AE0CFD6DA_1873:
            ; //	asm	nop				
009FB:      	nop
            ; //_AE0CFD6DA_1874:;				
            _AE0CFD6DA_1874:
            ; //	asm set io[0x09].b14;			
009FC:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1875:;				
            _AE0CFD6DA_1875:
            ; //	asm	nop				
009FD:      	nop
            ; //_AE0CFD6DA_1876:;				
            _AE0CFD6DA_1876:
            ; //	asm	nop				
009FE:      	nop
            ; //_AE0CFD6DA_1877:;				
            _AE0CFD6DA_1877:
            ; //	asm	nop				
009FF:      	nop
            ; //_AE0CFD6DA_1878:;				
            _AE0CFD6DA_1878:
            ; //	asm clr io[0x09].b14;			
00A00:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1879:;				
            _AE0CFD6DA_1879:
            ; //	asm	nop				
00A01:      	nop
            ; //_AE0CFD6DA_1880:;				
            _AE0CFD6DA_1880:
            ; //	asm	nop				
00A02:      	nop
            ; //_AE0CFD6DA_1881:;				
            _AE0CFD6DA_1881:
            ; //	asm	nop				
00A03:      	nop
            ; //_AE0CFD6DA_1882:;				
            _AE0CFD6DA_1882:
            ; //	asm	nop				
00A04:      	nop
            ; //_AE0CFD6DA_1883:;				
            _AE0CFD6DA_1883:
            ; //	asm	nop				
00A05:      	nop
            ; //_AE0CFD6DA_1884:;				
            _AE0CFD6DA_1884:
            ; //	asm	nop				
00A06:      	nop
            ; //_AE0CFD6DA_1885:;				
            _AE0CFD6DA_1885:
            ; //	asm	nop				
00A07:      	nop
            ; //_AE0CFD6DA_1886:;				
            _AE0CFD6DA_1886:
            ; //	asm	nop				
00A08:      	nop
            ; //_AE0CFD6DA_1887:;				
            _AE0CFD6DA_1887:
            ; //	asm	nop				
00A09:      	nop
            ; //_AE0CFD6DA_1888:;				
            _AE0CFD6DA_1888:
            ; //	asm	nop				
00A0A:      	nop
            ; //_AE0CFD6DA_1889:;				
            _AE0CFD6DA_1889:
            ; //	asm	nop				
00A0B:      	nop
            ; //_AE0CFD6DA_1890:;				
            _AE0CFD6DA_1890:
            ; //	asm	nop				
00A0C:      	nop
            ; //_AE0CFD6DA_1891:;				
            _AE0CFD6DA_1891:
            ; //	asm set io[0x09].b14;			
00A0D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1892:;				
            _AE0CFD6DA_1892:
            ; //	asm	nop				
00A0E:      	nop
            ; //_AE0CFD6DA_1893:;				
            _AE0CFD6DA_1893:
            ; //	asm	nop				
00A0F:      	nop
            ; //_AE0CFD6DA_1894:;				
            _AE0CFD6DA_1894:
            ; //	asm	nop				
00A10:      	nop
            ; //_AE0CFD6DA_1895:;				
            _AE0CFD6DA_1895:
            ; //	asm clr io[0x09].b14;			
00A11:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1896:;				
            _AE0CFD6DA_1896:
            ; //	asm	nop				
00A12:      	nop
            ; //_AE0CFD6DA_1897:;				
            _AE0CFD6DA_1897:
            ; //	asm	nop				
00A13:      	nop
            ; //_AE0CFD6DA_1898:;				
            _AE0CFD6DA_1898:
            ; //	asm	nop				
00A14:      	nop
            ; //_AE0CFD6DA_1899:;				
            _AE0CFD6DA_1899:
            ; //	asm	nop				
00A15:      	nop
            ; //_AE0CFD6DA_1900:;				
            _AE0CFD6DA_1900:
            ; //	asm	nop				
00A16:      	nop
            ; //_AE0CFD6DA_1901:;				
            _AE0CFD6DA_1901:
            ; //	asm	nop				
00A17:      	nop
            ; //_AE0CFD6DA_1902:;				
            _AE0CFD6DA_1902:
            ; //	asm	nop				
00A18:      	nop
            ; //_AE0CFD6DA_1903:;				
            _AE0CFD6DA_1903:
            ; //	asm	nop				
00A19:      	nop
            ; //_AE0CFD6DA_1904:;				
            _AE0CFD6DA_1904:
            ; //	asm	nop				
00A1A:      	nop
            ; //_AE0CFD6DA_1905:;				
            _AE0CFD6DA_1905:
            ; //	asm	nop				
00A1B:      	nop
            ; //_AE0CFD6DA_1906:;				
            _AE0CFD6DA_1906:
            ; //	asm	nop				
00A1C:      	nop
            ; //_AE0CFD6DA_1907:;				
            _AE0CFD6DA_1907:
            ; //	asm	nop				
00A1D:      	nop
            ; //_AE0CFD6DA_1908:;				
            _AE0CFD6DA_1908:
            ; //	asm set io[0x09].b14;			
00A1E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1909:;				
            _AE0CFD6DA_1909:
            ; //	asm	nop				
00A1F:      	nop
            ; //_AE0CFD6DA_1910:;				
            _AE0CFD6DA_1910:
            ; //	asm	nop				
00A20:      	nop
            ; //_AE0CFD6DA_1911:;				
            _AE0CFD6DA_1911:
            ; //	asm	nop				
00A21:      	nop
            ; //_AE0CFD6DA_1912:;				
            _AE0CFD6DA_1912:
            ; //	asm	nop				
00A22:      	nop
            ; //_AE0CFD6DA_1913:;				
            _AE0CFD6DA_1913:
            ; //	asm	nop				
00A23:      	nop
            ; //_AE0CFD6DA_1914:;				
            _AE0CFD6DA_1914:
            ; //	asm	nop				
00A24:      	nop
            ; //_AE0CFD6DA_1915:;				
            _AE0CFD6DA_1915:
            ; //	asm	nop				
00A25:      	nop
            ; //_AE0CFD6DA_1916:;				
            _AE0CFD6DA_1916:
            ; //	asm	nop				
00A26:      	nop
            ; //_AE0CFD6DA_1917:;				
            _AE0CFD6DA_1917:
            ; //	asm	nop				
00A27:      	nop
            ; //_AE0CFD6DA_1918:;				
            _AE0CFD6DA_1918:
            ; //	asm	nop				
00A28:      	nop
            ; //_AE0CFD6DA_1919:;				
            _AE0CFD6DA_1919:
            ; //	asm	nop				
00A29:      	nop
            ; //_AE0CFD6DA_1920:;				
            _AE0CFD6DA_1920:
            ; //	asm	nop				
00A2A:      	nop
            ; //_AE0CFD6DA_1921:;				
            _AE0CFD6DA_1921:
            ; //	asm clr io[0x09].b14;			
00A2B:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1922:;				
            _AE0CFD6DA_1922:
            ; //	asm	nop				
00A2C:      	nop
            ; //_AE0CFD6DA_1923:;				
            _AE0CFD6DA_1923:
            ; //	asm	nop				
00A2D:      	nop
            ; //_AE0CFD6DA_1924:;				
            _AE0CFD6DA_1924:
            ; //	asm	nop				
00A2E:      	nop
            ; //_AE0CFD6DA_1925:;				
            _AE0CFD6DA_1925:
            ; //	asm set io[0x09].b14;			
00A2F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1926:;				
            _AE0CFD6DA_1926:
            ; //	asm	nop				
00A30:      	nop
            ; //_AE0CFD6DA_1927:;				
            _AE0CFD6DA_1927:
            ; //	asm	nop				
00A31:      	nop
            ; //_AE0CFD6DA_1928:;				
            _AE0CFD6DA_1928:
            ; //	asm	nop				
00A32:      	nop
            ; //_AE0CFD6DA_1929:;				
            _AE0CFD6DA_1929:
            ; //	asm	nop				
00A33:      	nop
            ; //_AE0CFD6DA_1930:;				
            _AE0CFD6DA_1930:
            ; //	asm	nop				
00A34:      	nop
            ; //_AE0CFD6DA_1931:;				
            _AE0CFD6DA_1931:
            ; //	asm	nop				
00A35:      	nop
            ; //_AE0CFD6DA_1932:;				
            _AE0CFD6DA_1932:
            ; //	asm	nop				
00A36:      	nop
            ; //_AE0CFD6DA_1933:;				
            _AE0CFD6DA_1933:
            ; //	asm	nop				
00A37:      	nop
            ; //_AE0CFD6DA_1934:;				
            _AE0CFD6DA_1934:
            ; //	asm	nop				
00A38:      	nop
            ; //_AE0CFD6DA_1935:;				
            _AE0CFD6DA_1935:
            ; //	asm	nop				
00A39:      	nop
            ; //_AE0CFD6DA_1936:;				
            _AE0CFD6DA_1936:
            ; //	asm	nop				
00A3A:      	nop
            ; //_AE0CFD6DA_1937:;				
            _AE0CFD6DA_1937:
            ; //	asm	nop				
00A3B:      	nop
            ; //_AE0CFD6DA_1938:;				
            _AE0CFD6DA_1938:
            ; //	asm clr io[0x09].b14;			
00A3C:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1939:;				
            _AE0CFD6DA_1939:
            ; //	asm	nop				
00A3D:      	nop
            ; //_AE0CFD6DA_1940:;				
            _AE0CFD6DA_1940:
            ; //	asm	nop				
00A3E:      	nop
            ; //_AE0CFD6DA_1941:;				
            _AE0CFD6DA_1941:
            ; //	asm	nop				
00A3F:      	nop
            ; //_AE0CFD6DA_1942:;				
            _AE0CFD6DA_1942:
            ; //	asm set io[0x09].b14;			
00A40:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1943:;				
            _AE0CFD6DA_1943:
            ; //	asm	nop				
00A41:      	nop
            ; //_AE0CFD6DA_1944:;				
            _AE0CFD6DA_1944:
            ; //	asm	nop				
00A42:      	nop
            ; //_AE0CFD6DA_1945:;				
            _AE0CFD6DA_1945:
            ; //	asm	nop				
00A43:      	nop
            ; //_AE0CFD6DA_1946:;				
            _AE0CFD6DA_1946:
            ; //	asm	nop				
00A44:      	nop
            ; //_AE0CFD6DA_1947:;				
            _AE0CFD6DA_1947:
            ; //	asm	nop				
00A45:      	nop
            ; //_AE0CFD6DA_1948:;				
            _AE0CFD6DA_1948:
            ; //	asm	nop				
00A46:      	nop
            ; //_AE0CFD6DA_1949:;				
            _AE0CFD6DA_1949:
            ; //	asm	nop				
00A47:      	nop
            ; //_AE0CFD6DA_1950:;				
            _AE0CFD6DA_1950:
            ; //	asm	nop				
00A48:      	nop
            ; //_AE0CFD6DA_1951:;				
            _AE0CFD6DA_1951:
            ; //	asm	nop				
00A49:      	nop
            ; //_AE0CFD6DA_1952:;				
            _AE0CFD6DA_1952:
            ; //	asm	nop				
00A4A:      	nop
            ; //_AE0CFD6DA_1953:;				
            _AE0CFD6DA_1953:
            ; //	asm	nop				
00A4B:      	nop
            ; //_AE0CFD6DA_1954:;				
            _AE0CFD6DA_1954:
            ; //	asm	nop				
00A4C:      	nop
            ; //_AE0CFD6DA_1955:;				
            _AE0CFD6DA_1955:
            ; //	asm clr io[0x09].b14;			
00A4D:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1956:;				
            _AE0CFD6DA_1956:
            ; //	asm	nop				
00A4E:      	nop
            ; //_AE0CFD6DA_1957:;				
            _AE0CFD6DA_1957:
            ; //	asm	nop				
00A4F:      	nop
            ; //_AE0CFD6DA_1958:;				
            _AE0CFD6DA_1958:
            ; //	asm	nop				
00A50:      	nop
            ; //_AE0CFD6DA_1959:;				
            _AE0CFD6DA_1959:
            ; //	asm set io[0x09].b14;			
00A51:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1960:;				
            _AE0CFD6DA_1960:
            ; //	asm	nop				
00A52:      	nop
            ; //_AE0CFD6DA_1961:;				
            _AE0CFD6DA_1961:
            ; //	asm	nop				
00A53:      	nop
            ; //_AE0CFD6DA_1962:;				
            _AE0CFD6DA_1962:
            ; //	asm	nop				
00A54:      	nop
            ; //_AE0CFD6DA_1963:;				
            _AE0CFD6DA_1963:
            ; //	asm	nop				
00A55:      	nop
            ; //_AE0CFD6DA_1964:;				
            _AE0CFD6DA_1964:
            ; //	asm	nop				
00A56:      	nop
            ; //_AE0CFD6DA_1965:;				
            _AE0CFD6DA_1965:
            ; //	asm	nop				
00A57:      	nop
            ; //_AE0CFD6DA_1966:;				
            _AE0CFD6DA_1966:
            ; //	asm	nop				
00A58:      	nop
            ; //_AE0CFD6DA_1967:;				
            _AE0CFD6DA_1967:
            ; //	asm	nop				
00A59:      	nop
            ; //_AE0CFD6DA_1968:;				
            _AE0CFD6DA_1968:
            ; //	asm	nop				
00A5A:      	nop
            ; //_AE0CFD6DA_1969:;				
            _AE0CFD6DA_1969:
            ; //	asm	nop				
00A5B:      	nop
            ; //_AE0CFD6DA_1970:;				
            _AE0CFD6DA_1970:
            ; //	asm	nop				
00A5C:      	nop
            ; //_AE0CFD6DA_1971:;				
            _AE0CFD6DA_1971:
            ; //	asm	nop				
00A5D:      	nop
            ; //_AE0CFD6DA_1972:;				
            _AE0CFD6DA_1972:
            ; //	asm clr io[0x09].b14;			
00A5E:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1973:;				
            _AE0CFD6DA_1973:
            ; //	asm	nop				
00A5F:      	nop
            ; //_AE0CFD6DA_1974:;				
            _AE0CFD6DA_1974:
            ; //	asm	nop				
00A60:      	nop
            ; //_AE0CFD6DA_1975:;				
            _AE0CFD6DA_1975:
            ; //	asm	nop				
00A61:      	nop
            ; //_AE0CFD6DA_1976:;				
            _AE0CFD6DA_1976:
            ; //	asm set io[0x09].b14;			
00A62:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1977:;				
            _AE0CFD6DA_1977:
            ; //	asm	nop				
00A63:      	nop
            ; //_AE0CFD6DA_1978:;				
            _AE0CFD6DA_1978:
            ; //	asm	nop				
00A64:      	nop
            ; //_AE0CFD6DA_1979:;				
            _AE0CFD6DA_1979:
            ; //	asm	nop				
00A65:      	nop
            ; //_AE0CFD6DA_1980:;				
            _AE0CFD6DA_1980:
            ; //	asm	nop				
00A66:      	nop
            ; //_AE0CFD6DA_1981:;				
            _AE0CFD6DA_1981:
            ; //	asm	nop				
00A67:      	nop
            ; //_AE0CFD6DA_1982:;				
            _AE0CFD6DA_1982:
            ; //	asm	nop				
00A68:      	nop
            ; //_AE0CFD6DA_1983:;				
            _AE0CFD6DA_1983:
            ; //	asm	nop				
00A69:      	nop
            ; //_AE0CFD6DA_1984:;				
            _AE0CFD6DA_1984:
            ; //	asm	nop				
00A6A:      	nop
            ; //_AE0CFD6DA_1985:;				
            _AE0CFD6DA_1985:
            ; //	asm	nop				
00A6B:      	nop
            ; //_AE0CFD6DA_1986:;				
            _AE0CFD6DA_1986:
            ; //	asm	nop				
00A6C:      	nop
            ; //_AE0CFD6DA_1987:;				
            _AE0CFD6DA_1987:
            ; //	asm	nop				
00A6D:      	nop
            ; //_AE0CFD6DA_1988:;				
            _AE0CFD6DA_1988:
            ; //	asm	nop				
00A6E:      	nop
            ; //_AE0CFD6DA_1989:;				
            _AE0CFD6DA_1989:
            ; //	asm clr io[0x09].b14;			
00A6F:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_1990:;				
            _AE0CFD6DA_1990:
            ; //	asm	nop				
00A70:      	nop
            ; //_AE0CFD6DA_1991:;				
            _AE0CFD6DA_1991:
            ; //	asm	nop				
00A71:      	nop
            ; //_AE0CFD6DA_1992:;				
            _AE0CFD6DA_1992:
            ; //	asm	nop				
00A72:      	nop
            ; //_AE0CFD6DA_1993:;				
            _AE0CFD6DA_1993:
            ; //	asm set io[0x09].b14;			
00A73:      	set io[0x09].b14//
            ; //_AE0CFD6DA_1994:;				
            _AE0CFD6DA_1994:
            ; //	asm	nop				
00A74:      	nop
            ; //_AE0CFD6DA_1995:;				
            _AE0CFD6DA_1995:
            ; //	asm	nop				
00A75:      	nop
            ; //_AE0CFD6DA_1996:;				
            _AE0CFD6DA_1996:
            ; //	asm	nop				
00A76:      	nop
            ; //_AE0CFD6DA_1997:;				
            _AE0CFD6DA_1997:
            ; //	asm	nop				
00A77:      	nop
            ; //_AE0CFD6DA_1998:;				
            _AE0CFD6DA_1998:
            ; //	asm	nop				
00A78:      	nop
            ; //_AE0CFD6DA_1999:;				
            _AE0CFD6DA_1999:
            ; //	asm	nop				
00A79:      	nop
            ; //_AE0CFD6DA_2000:;				
            _AE0CFD6DA_2000:
            ; //	asm	nop				
00A7A:      	nop
            ; //_AE0CFD6DA_2001:;				
            _AE0CFD6DA_2001:
            ; //	asm	nop				
00A7B:      	nop
            ; //_AE0CFD6DA_2002:;				
            _AE0CFD6DA_2002:
            ; //	asm	nop				
00A7C:      	nop
            ; //_AE0CFD6DA_2003:;				
            _AE0CFD6DA_2003:
            ; //	asm	nop				
00A7D:      	nop
            ; //_AE0CFD6DA_2004:;				
            _AE0CFD6DA_2004:
            ; //	asm	nop				
00A7E:      	nop
            ; //_AE0CFD6DA_2005:;				
            _AE0CFD6DA_2005:
            ; //	asm	nop				
00A7F:      	nop
            ; //_AE0CFD6DA_2006:;				
            _AE0CFD6DA_2006:
            ; //	asm clr io[0x09].b14;			
00A80:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2007:;				
            _AE0CFD6DA_2007:
            ; //	asm	nop				
00A81:      	nop
            ; //_AE0CFD6DA_2008:;				
            _AE0CFD6DA_2008:
            ; //	asm	nop				
00A82:      	nop
            ; //_AE0CFD6DA_2009:;				
            _AE0CFD6DA_2009:
            ; //	asm	nop				
00A83:      	nop
            ; //_AE0CFD6DA_2010:;				
            _AE0CFD6DA_2010:
            ; //	asm set io[0x09].b14;			
00A84:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2011:;				
            _AE0CFD6DA_2011:
            ; //	asm	nop				
00A85:      	nop
            ; //_AE0CFD6DA_2012:;				
            _AE0CFD6DA_2012:
            ; //	asm	nop				
00A86:      	nop
            ; //_AE0CFD6DA_2013:;				
            _AE0CFD6DA_2013:
            ; //	asm	nop				
00A87:      	nop
            ; //_AE0CFD6DA_2014:;				
            _AE0CFD6DA_2014:
            ; //	asm	nop				
00A88:      	nop
            ; //_AE0CFD6DA_2015:;				
            _AE0CFD6DA_2015:
            ; //	asm	nop				
00A89:      	nop
            ; //_AE0CFD6DA_2016:;				
            _AE0CFD6DA_2016:
            ; //	asm	nop				
00A8A:      	nop
            ; //_AE0CFD6DA_2017:;				
            _AE0CFD6DA_2017:
            ; //	asm	nop				
00A8B:      	nop
            ; //_AE0CFD6DA_2018:;				
            _AE0CFD6DA_2018:
            ; //	asm	nop				
00A8C:      	nop
            ; //_AE0CFD6DA_2019:;				
            _AE0CFD6DA_2019:
            ; //	asm	nop				
00A8D:      	nop
            ; //_AE0CFD6DA_2020:;				
            _AE0CFD6DA_2020:
            ; //	asm	nop				
00A8E:      	nop
            ; //_AE0CFD6DA_2021:;				
            _AE0CFD6DA_2021:
            ; //	asm	nop				
00A8F:      	nop
            ; //_AE0CFD6DA_2022:;				
            _AE0CFD6DA_2022:
            ; //	asm	nop				
00A90:      	nop
            ; //_AE0CFD6DA_2023:;				
            _AE0CFD6DA_2023:
            ; //	asm clr io[0x09].b14;			
00A91:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2024:;				
            _AE0CFD6DA_2024:
            ; //	asm	nop				
00A92:      	nop
            ; //_AE0CFD6DA_2025:;				
            _AE0CFD6DA_2025:
            ; //	asm	nop				
00A93:      	nop
            ; //_AE0CFD6DA_2026:;				
            _AE0CFD6DA_2026:
            ; //	asm	nop				
00A94:      	nop
            ; //_AE0CFD6DA_2027:;				
            _AE0CFD6DA_2027:
            ; //	asm set io[0x09].b14;			
00A95:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2028:;				
            _AE0CFD6DA_2028:
            ; //	asm	nop				
00A96:      	nop
            ; //_AE0CFD6DA_2029:;				
            _AE0CFD6DA_2029:
            ; //	asm	nop				
00A97:      	nop
            ; //_AE0CFD6DA_2030:;				
            _AE0CFD6DA_2030:
            ; //	asm	nop				
00A98:      	nop
            ; //_AE0CFD6DA_2031:;				
            _AE0CFD6DA_2031:
            ; //	asm	nop				
00A99:      	nop
            ; //_AE0CFD6DA_2032:;				
            _AE0CFD6DA_2032:
            ; //	asm	nop				
00A9A:      	nop
            ; //_AE0CFD6DA_2033:;				
            _AE0CFD6DA_2033:
            ; //	asm	nop				
00A9B:      	nop
            ; //_AE0CFD6DA_2034:;				
            _AE0CFD6DA_2034:
            ; //	asm	nop				
00A9C:      	nop
            ; //_AE0CFD6DA_2035:;				
            _AE0CFD6DA_2035:
            ; //	asm	nop				
00A9D:      	nop
            ; //_AE0CFD6DA_2036:;				
            _AE0CFD6DA_2036:
            ; //	asm	nop				
00A9E:      	nop
            ; //_AE0CFD6DA_2037:;				
            _AE0CFD6DA_2037:
            ; //	asm	nop				
00A9F:      	nop
            ; //_AE0CFD6DA_2038:;				
            _AE0CFD6DA_2038:
            ; //	asm	nop				
00AA0:      	nop
            ; //_AE0CFD6DA_2039:;				
            _AE0CFD6DA_2039:
            ; //	asm	nop				
00AA1:      	nop
            ; //_AE0CFD6DA_2040:;				
            _AE0CFD6DA_2040:
            ; //	asm clr io[0x09].b14;			
00AA2:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2041:;				
            _AE0CFD6DA_2041:
            ; //	asm	nop				
00AA3:      	nop
            ; //_AE0CFD6DA_2042:;				
            _AE0CFD6DA_2042:
            ; //	asm	nop				
00AA4:      	nop
            ; //_AE0CFD6DA_2043:;				
            _AE0CFD6DA_2043:
            ; //	asm	nop				
00AA5:      	nop
            ; //_AE0CFD6DA_2044:;				
            _AE0CFD6DA_2044:
            ; //	asm set io[0x09].b14;			
00AA6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2045:;				
            _AE0CFD6DA_2045:
            ; //	asm	nop				
00AA7:      	nop
            ; //_AE0CFD6DA_2046:;				
            _AE0CFD6DA_2046:
            ; //	asm	nop				
00AA8:      	nop
            ; //_AE0CFD6DA_2047:;				
            _AE0CFD6DA_2047:
            ; //	asm	nop				
00AA9:      	nop
            ; //_AE0CFD6DA_2048:;				
            _AE0CFD6DA_2048:
            ; //	asm	nop				
00AAA:      	nop
            ; //_AE0CFD6DA_2049:;				
            _AE0CFD6DA_2049:
            ; //	asm	nop				
00AAB:      	nop
            ; //_AE0CFD6DA_2050:;				
            _AE0CFD6DA_2050:
            ; //	asm	nop				
00AAC:      	nop
            ; //_AE0CFD6DA_2051:;				
            _AE0CFD6DA_2051:
            ; //	asm	nop				
00AAD:      	nop
            ; //_AE0CFD6DA_2052:;				
            _AE0CFD6DA_2052:
            ; //	asm	nop				
00AAE:      	nop
            ; //_AE0CFD6DA_2053:;				
            _AE0CFD6DA_2053:
            ; //	asm	nop				
00AAF:      	nop
            ; //_AE0CFD6DA_2054:;				
            _AE0CFD6DA_2054:
            ; //	asm	nop				
00AB0:      	nop
            ; //_AE0CFD6DA_2055:;				
            _AE0CFD6DA_2055:
            ; //	asm	nop				
00AB1:      	nop
            ; //_AE0CFD6DA_2056:;				
            _AE0CFD6DA_2056:
            ; //	asm	nop				
00AB2:      	nop
            ; //_AE0CFD6DA_2057:;				
            _AE0CFD6DA_2057:
            ; //	asm clr io[0x09].b14;			
00AB3:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2058:;				
            _AE0CFD6DA_2058:
            ; //	asm	nop				
00AB4:      	nop
            ; //_AE0CFD6DA_2059:;				
            _AE0CFD6DA_2059:
            ; //	asm	nop				
00AB5:      	nop
            ; //_AE0CFD6DA_2060:;				
            _AE0CFD6DA_2060:
            ; //	asm	nop				
00AB6:      	nop
            ; //_AE0CFD6DA_2061:;				
            _AE0CFD6DA_2061:
            ; //	asm set io[0x09].b14;			
00AB7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2062:;				
            _AE0CFD6DA_2062:
            ; //	asm	nop				
00AB8:      	nop
            ; //_AE0CFD6DA_2063:;				
            _AE0CFD6DA_2063:
            ; //	asm	nop				
00AB9:      	nop
            ; //_AE0CFD6DA_2064:;				
            _AE0CFD6DA_2064:
            ; //	asm	nop				
00ABA:      	nop
            ; //_AE0CFD6DA_2065:;				
            _AE0CFD6DA_2065:
            ; //	asm	nop				
00ABB:      	nop
            ; //_AE0CFD6DA_2066:;				
            _AE0CFD6DA_2066:
            ; //	asm	nop				
00ABC:      	nop
            ; //_AE0CFD6DA_2067:;				
            _AE0CFD6DA_2067:
            ; //	asm	nop				
00ABD:      	nop
            ; //_AE0CFD6DA_2068:;				
            _AE0CFD6DA_2068:
            ; //	asm	nop				
00ABE:      	nop
            ; //_AE0CFD6DA_2069:;				
            _AE0CFD6DA_2069:
            ; //	asm	nop				
00ABF:      	nop
            ; //_AE0CFD6DA_2070:;				
            _AE0CFD6DA_2070:
            ; //	asm	nop				
00AC0:      	nop
            ; //_AE0CFD6DA_2071:;				
            _AE0CFD6DA_2071:
            ; //	asm	nop				
00AC1:      	nop
            ; //_AE0CFD6DA_2072:;				
            _AE0CFD6DA_2072:
            ; //	asm	nop				
00AC2:      	nop
            ; //_AE0CFD6DA_2073:;				
            _AE0CFD6DA_2073:
            ; //	asm	nop				
00AC3:      	nop
            ; //_AE0CFD6DA_2074:;				
            _AE0CFD6DA_2074:
            ; //	asm clr io[0x09].b14;			
00AC4:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2075:;				
            _AE0CFD6DA_2075:
            ; //	asm	nop				
00AC5:      	nop
            ; //_AE0CFD6DA_2076:;				
            _AE0CFD6DA_2076:
            ; //	asm	nop				
00AC6:      	nop
            ; //_AE0CFD6DA_2077:;				
            _AE0CFD6DA_2077:
            ; //	asm	nop				
00AC7:      	nop
            ; //_AE0CFD6DA_2078:;				
            _AE0CFD6DA_2078:
            ; //	asm set io[0x09].b14;			
00AC8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2079:;				
            _AE0CFD6DA_2079:
            ; //	asm	nop				
00AC9:      	nop
            ; //_AE0CFD6DA_2080:;				
            _AE0CFD6DA_2080:
            ; //	asm	nop				
00ACA:      	nop
            ; //_AE0CFD6DA_2081:;				
            _AE0CFD6DA_2081:
            ; //	asm	nop				
00ACB:      	nop
            ; //_AE0CFD6DA_2082:;				
            _AE0CFD6DA_2082:
            ; //	asm	nop				
00ACC:      	nop
            ; //_AE0CFD6DA_2083:;				
            _AE0CFD6DA_2083:
            ; //	asm	nop				
00ACD:      	nop
            ; //_AE0CFD6DA_2084:;				
            _AE0CFD6DA_2084:
            ; //	asm	nop				
00ACE:      	nop
            ; //_AE0CFD6DA_2085:;				
            _AE0CFD6DA_2085:
            ; //	asm	nop				
00ACF:      	nop
            ; //_AE0CFD6DA_2086:;				
            _AE0CFD6DA_2086:
            ; //	asm	nop				
00AD0:      	nop
            ; //_AE0CFD6DA_2087:;				
            _AE0CFD6DA_2087:
            ; //	asm	nop				
00AD1:      	nop
            ; //_AE0CFD6DA_2088:;				
            _AE0CFD6DA_2088:
            ; //	asm	nop				
00AD2:      	nop
            ; //_AE0CFD6DA_2089:;				
            _AE0CFD6DA_2089:
            ; //	asm	nop				
00AD3:      	nop
            ; //_AE0CFD6DA_2090:;				
            _AE0CFD6DA_2090:
            ; //	asm	nop				
00AD4:      	nop
            ; //_AE0CFD6DA_2091:;				
            _AE0CFD6DA_2091:
            ; //	asm clr io[0x09].b14;			
00AD5:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2092:;				
            _AE0CFD6DA_2092:
            ; //	asm	nop				
00AD6:      	nop
            ; //_AE0CFD6DA_2093:;				
            _AE0CFD6DA_2093:
            ; //	asm	nop				
00AD7:      	nop
            ; //_AE0CFD6DA_2094:;				
            _AE0CFD6DA_2094:
            ; //	asm	nop				
00AD8:      	nop
            ; //_AE0CFD6DA_2095:;				
            _AE0CFD6DA_2095:
            ; //	asm set io[0x09].b14;			
00AD9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2096:;				
            _AE0CFD6DA_2096:
            ; //	asm	nop				
00ADA:      	nop
            ; //_AE0CFD6DA_2097:;				
            _AE0CFD6DA_2097:
            ; //	asm	nop				
00ADB:      	nop
            ; //_AE0CFD6DA_2098:;				
            _AE0CFD6DA_2098:
            ; //	asm	nop				
00ADC:      	nop
            ; //_AE0CFD6DA_2099:;				
            _AE0CFD6DA_2099:
            ; //	asm	nop				
00ADD:      	nop
            ; //_AE0CFD6DA_2100:;				
            _AE0CFD6DA_2100:
            ; //	asm	nop				
00ADE:      	nop
            ; //_AE0CFD6DA_2101:;				
            _AE0CFD6DA_2101:
            ; //	asm	nop				
00ADF:      	nop
            ; //_AE0CFD6DA_2102:;				
            _AE0CFD6DA_2102:
            ; //	asm	nop				
00AE0:      	nop
            ; //_AE0CFD6DA_2103:;				
            _AE0CFD6DA_2103:
            ; //	asm	nop				
00AE1:      	nop
            ; //_AE0CFD6DA_2104:;				
            _AE0CFD6DA_2104:
            ; //	asm	nop				
00AE2:      	nop
            ; //_AE0CFD6DA_2105:;				
            _AE0CFD6DA_2105:
            ; //	asm	nop				
00AE3:      	nop
            ; //_AE0CFD6DA_2106:;				
            _AE0CFD6DA_2106:
            ; //	asm	nop				
00AE4:      	nop
            ; //_AE0CFD6DA_2107:;				
            _AE0CFD6DA_2107:
            ; //	asm	nop				
00AE5:      	nop
            ; //_AE0CFD6DA_2108:;				
            _AE0CFD6DA_2108:
            ; //	asm clr io[0x09].b14;			
00AE6:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2109:;				
            _AE0CFD6DA_2109:
            ; //	asm	nop				
00AE7:      	nop
            ; //_AE0CFD6DA_2110:;				
            _AE0CFD6DA_2110:
            ; //	asm	nop				
00AE8:      	nop
            ; //_AE0CFD6DA_2111:;				
            _AE0CFD6DA_2111:
            ; //	asm	nop				
00AE9:      	nop
            ; //_AE0CFD6DA_2112:;				
            _AE0CFD6DA_2112:
            ; //	asm set io[0x09].b14;			
00AEA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2113:;				
            _AE0CFD6DA_2113:
            ; //	asm	nop				
00AEB:      	nop
            ; //_AE0CFD6DA_2114:;				
            _AE0CFD6DA_2114:
            ; //	asm	nop				
00AEC:      	nop
            ; //_AE0CFD6DA_2115:;				
            _AE0CFD6DA_2115:
            ; //	asm	nop				
00AED:      	nop
            ; //_AE0CFD6DA_2116:;				
            _AE0CFD6DA_2116:
            ; //	asm	nop				
00AEE:      	nop
            ; //_AE0CFD6DA_2117:;				
            _AE0CFD6DA_2117:
            ; //	asm	nop				
00AEF:      	nop
            ; //_AE0CFD6DA_2118:;				
            _AE0CFD6DA_2118:
            ; //	asm	nop				
00AF0:      	nop
            ; //_AE0CFD6DA_2119:;				
            _AE0CFD6DA_2119:
            ; //	asm	nop				
00AF1:      	nop
            ; //_AE0CFD6DA_2120:;				
            _AE0CFD6DA_2120:
            ; //	asm	nop				
00AF2:      	nop
            ; //_AE0CFD6DA_2121:;				
            _AE0CFD6DA_2121:
            ; //	asm	nop				
00AF3:      	nop
            ; //_AE0CFD6DA_2122:;				
            _AE0CFD6DA_2122:
            ; //	asm	nop				
00AF4:      	nop
            ; //_AE0CFD6DA_2123:;				
            _AE0CFD6DA_2123:
            ; //	asm	nop				
00AF5:      	nop
            ; //_AE0CFD6DA_2124:;				
            _AE0CFD6DA_2124:
            ; //	asm	nop				
00AF6:      	nop
            ; //_AE0CFD6DA_2125:;				
            _AE0CFD6DA_2125:
            ; //	asm clr io[0x09].b14;			
00AF7:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2126:;				
            _AE0CFD6DA_2126:
            ; //	asm	nop				
00AF8:      	nop
            ; //_AE0CFD6DA_2127:;				
            _AE0CFD6DA_2127:
            ; //	asm	nop				
00AF9:      	nop
            ; //_AE0CFD6DA_2128:;				
            _AE0CFD6DA_2128:
            ; //	asm	nop				
00AFA:      	nop
            ; //_AE0CFD6DA_2129:;				
            _AE0CFD6DA_2129:
            ; //	asm set io[0x09].b14;			
00AFB:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2130:;				
            _AE0CFD6DA_2130:
            ; //	asm	nop				
00AFC:      	nop
            ; //_AE0CFD6DA_2131:;				
            _AE0CFD6DA_2131:
            ; //	asm	nop				
00AFD:      	nop
            ; //_AE0CFD6DA_2132:;				
            _AE0CFD6DA_2132:
            ; //	asm	nop				
00AFE:      	nop
            ; //_AE0CFD6DA_2133:;				
            _AE0CFD6DA_2133:
            ; //	asm	nop				
00AFF:      	nop
            ; //_AE0CFD6DA_2134:;				
            _AE0CFD6DA_2134:
            ; //	asm	nop				
00B00:      	nop
            ; //_AE0CFD6DA_2135:;				
            _AE0CFD6DA_2135:
            ; //	asm	nop				
00B01:      	nop
            ; //_AE0CFD6DA_2136:;				
            _AE0CFD6DA_2136:
            ; //	asm	nop				
00B02:      	nop
            ; //_AE0CFD6DA_2137:;				
            _AE0CFD6DA_2137:
            ; //	asm	nop				
00B03:      	nop
            ; //_AE0CFD6DA_2138:;				
            _AE0CFD6DA_2138:
            ; //	asm	nop				
00B04:      	nop
            ; //_AE0CFD6DA_2139:;				
            _AE0CFD6DA_2139:
            ; //	asm	nop				
00B05:      	nop
            ; //_AE0CFD6DA_2140:;				
            _AE0CFD6DA_2140:
            ; //	asm	nop				
00B06:      	nop
            ; //_AE0CFD6DA_2141:;				
            _AE0CFD6DA_2141:
            ; //	asm	nop				
00B07:      	nop
            ; //_AE0CFD6DA_2142:;				
            _AE0CFD6DA_2142:
            ; //	asm clr io[0x09].b14;			
00B08:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2143:;				
            _AE0CFD6DA_2143:
            ; //	asm	nop				
00B09:      	nop
            ; //_AE0CFD6DA_2144:;				
            _AE0CFD6DA_2144:
            ; //	asm	nop				
00B0A:      	nop
            ; //_AE0CFD6DA_2145:;				
            _AE0CFD6DA_2145:
            ; //	asm	nop				
00B0B:      	nop
            ; //_AE0CFD6DA_2146:;				
            _AE0CFD6DA_2146:
            ; //	asm set io[0x09].b14;			
00B0C:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2147:;				
            _AE0CFD6DA_2147:
            ; //	asm	nop				
00B0D:      	nop
            ; //_AE0CFD6DA_2148:;				
            _AE0CFD6DA_2148:
            ; //	asm	nop				
00B0E:      	nop
            ; //_AE0CFD6DA_2149:;				
            _AE0CFD6DA_2149:
            ; //	asm	nop				
00B0F:      	nop
            ; //_AE0CFD6DA_2150:;				
            _AE0CFD6DA_2150:
            ; //	asm	nop				
00B10:      	nop
            ; //_AE0CFD6DA_2151:;				
            _AE0CFD6DA_2151:
            ; //	asm	nop				
00B11:      	nop
            ; //_AE0CFD6DA_2152:;				
            _AE0CFD6DA_2152:
            ; //	asm	nop				
00B12:      	nop
            ; //_AE0CFD6DA_2153:;				
            _AE0CFD6DA_2153:
            ; //	asm	nop				
00B13:      	nop
            ; //_AE0CFD6DA_2154:;				
            _AE0CFD6DA_2154:
            ; //	asm	nop				
00B14:      	nop
            ; //_AE0CFD6DA_2155:;				
            _AE0CFD6DA_2155:
            ; //	asm	nop				
00B15:      	nop
            ; //_AE0CFD6DA_2156:;				
            _AE0CFD6DA_2156:
            ; //	asm	nop				
00B16:      	nop
            ; //_AE0CFD6DA_2157:;				
            _AE0CFD6DA_2157:
            ; //	asm	nop				
00B17:      	nop
            ; //_AE0CFD6DA_2158:;				
            _AE0CFD6DA_2158:
            ; //	asm	nop				
00B18:      	nop
            ; //_AE0CFD6DA_2159:;				
            _AE0CFD6DA_2159:
            ; //	asm clr io[0x09].b14;			
00B19:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2160:;				
            _AE0CFD6DA_2160:
            ; //	asm	nop				
00B1A:      	nop
            ; //_AE0CFD6DA_2161:;				
            _AE0CFD6DA_2161:
            ; //	asm	nop				
00B1B:      	nop
            ; //_AE0CFD6DA_2162:;				
            _AE0CFD6DA_2162:
            ; //	asm	nop				
00B1C:      	nop
            ; //_AE0CFD6DA_2163:;				
            _AE0CFD6DA_2163:
            ; //	asm set io[0x09].b14;			
00B1D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2164:;				
            _AE0CFD6DA_2164:
            ; //	asm	nop				
00B1E:      	nop
            ; //_AE0CFD6DA_2165:;				
            _AE0CFD6DA_2165:
            ; //	asm	nop				
00B1F:      	nop
            ; //_AE0CFD6DA_2166:;				
            _AE0CFD6DA_2166:
            ; //	asm	nop				
00B20:      	nop
            ; //_AE0CFD6DA_2167:;				
            _AE0CFD6DA_2167:
            ; //	asm	nop				
00B21:      	nop
            ; //_AE0CFD6DA_2168:;				
            _AE0CFD6DA_2168:
            ; //	asm	nop				
00B22:      	nop
            ; //_AE0CFD6DA_2169:;				
            _AE0CFD6DA_2169:
            ; //	asm	nop				
00B23:      	nop
            ; //_AE0CFD6DA_2170:;				
            _AE0CFD6DA_2170:
            ; //	asm	nop				
00B24:      	nop
            ; //_AE0CFD6DA_2171:;				
            _AE0CFD6DA_2171:
            ; //	asm	nop				
00B25:      	nop
            ; //_AE0CFD6DA_2172:;				
            _AE0CFD6DA_2172:
            ; //	asm	nop				
00B26:      	nop
            ; //_AE0CFD6DA_2173:;				
            _AE0CFD6DA_2173:
            ; //	asm	nop				
00B27:      	nop
            ; //_AE0CFD6DA_2174:;				
            _AE0CFD6DA_2174:
            ; //	asm	nop				
00B28:      	nop
            ; //_AE0CFD6DA_2175:;				
            _AE0CFD6DA_2175:
            ; //	asm	nop				
00B29:      	nop
            ; //_AE0CFD6DA_2176:;				
            _AE0CFD6DA_2176:
            ; //	asm clr io[0x09].b14;			
00B2A:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2177:;				
            _AE0CFD6DA_2177:
            ; //	asm	nop				
00B2B:      	nop
            ; //_AE0CFD6DA_2178:;				
            _AE0CFD6DA_2178:
            ; //	asm	nop				
00B2C:      	nop
            ; //_AE0CFD6DA_2179:;				
            _AE0CFD6DA_2179:
            ; //	asm	nop				
00B2D:      	nop
            ; //_AE0CFD6DA_2180:;				
            _AE0CFD6DA_2180:
            ; //	goto LD63FD439_72;			
00B2E:      	pch =	LD63FD439_72
00B2F:      	ljmp	LD63FD439_72
            ; //LD63FD439_79:;					
            LD63FD439_79:
            ; //_AE0CFD6DA_2181:;				
            _AE0CFD6DA_2181:
            ; //	asm set io[0x09].b14;			
00B30:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2182:;				
            _AE0CFD6DA_2182:
            ; //	asm	nop				
00B31:      	nop
            ; //_AE0CFD6DA_2183:;				
            _AE0CFD6DA_2183:
            ; //	asm	nop				
00B32:      	nop
            ; //_AE0CFD6DA_2184:;				
            _AE0CFD6DA_2184:
            ; //	asm	nop				
00B33:      	nop
            ; //_AE0CFD6DA_2185:;				
            _AE0CFD6DA_2185:
            ; //	asm clr io[0x09].b14;			
00B34:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2186:;				
            _AE0CFD6DA_2186:
            ; //	asm	nop				
00B35:      	nop
            ; //_AE0CFD6DA_2187:;				
            _AE0CFD6DA_2187:
            ; //	asm	nop				
00B36:      	nop
            ; //_AE0CFD6DA_2188:;				
            _AE0CFD6DA_2188:
            ; //	asm	nop				
00B37:      	nop
            ; //_AE0CFD6DA_2189:;				
            _AE0CFD6DA_2189:
            ; //	asm	nop				
00B38:      	nop
            ; //_AE0CFD6DA_2190:;				
            _AE0CFD6DA_2190:
            ; //	asm	nop				
00B39:      	nop
            ; //_AE0CFD6DA_2191:;				
            _AE0CFD6DA_2191:
            ; //	asm	nop				
00B3A:      	nop
            ; //_AE0CFD6DA_2192:;				
            _AE0CFD6DA_2192:
            ; //	asm	nop				
00B3B:      	nop
            ; //_AE0CFD6DA_2193:;				
            _AE0CFD6DA_2193:
            ; //	asm	nop				
00B3C:      	nop
            ; //_AE0CFD6DA_2194:;				
            _AE0CFD6DA_2194:
            ; //	asm	nop				
00B3D:      	nop
            ; //_AE0CFD6DA_2195:;				
            _AE0CFD6DA_2195:
            ; //	asm	nop				
00B3E:      	nop
            ; //_AE0CFD6DA_2196:;				
            _AE0CFD6DA_2196:
            ; //	asm	nop				
00B3F:      	nop
            ; //_AE0CFD6DA_2197:;				
            _AE0CFD6DA_2197:
            ; //	asm	nop				
00B40:      	nop
            ; //_AE0CFD6DA_2198:;				
            _AE0CFD6DA_2198:
            ; //	asm set io[0x09].b14;			
00B41:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2199:;				
            _AE0CFD6DA_2199:
            ; //	asm	nop				
00B42:      	nop
            ; //_AE0CFD6DA_2200:;				
            _AE0CFD6DA_2200:
            ; //	asm	nop				
00B43:      	nop
            ; //_AE0CFD6DA_2201:;				
            _AE0CFD6DA_2201:
            ; //	asm	nop				
00B44:      	nop
            ; //_AE0CFD6DA_2202:;				
            _AE0CFD6DA_2202:
            ; //	asm clr io[0x09].b14;			
00B45:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2203:;				
            _AE0CFD6DA_2203:
            ; //	asm	nop				
00B46:      	nop
            ; //_AE0CFD6DA_2204:;				
            _AE0CFD6DA_2204:
            ; //	asm	nop				
00B47:      	nop
            ; //_AE0CFD6DA_2205:;				
            _AE0CFD6DA_2205:
            ; //	asm	nop				
00B48:      	nop
            ; //_AE0CFD6DA_2206:;				
            _AE0CFD6DA_2206:
            ; //	asm	nop				
00B49:      	nop
            ; //_AE0CFD6DA_2207:;				
            _AE0CFD6DA_2207:
            ; //	asm	nop				
00B4A:      	nop
            ; //_AE0CFD6DA_2208:;				
            _AE0CFD6DA_2208:
            ; //	asm	nop				
00B4B:      	nop
            ; //_AE0CFD6DA_2209:;				
            _AE0CFD6DA_2209:
            ; //	asm	nop				
00B4C:      	nop
            ; //_AE0CFD6DA_2210:;				
            _AE0CFD6DA_2210:
            ; //	asm	nop				
00B4D:      	nop
            ; //_AE0CFD6DA_2211:;				
            _AE0CFD6DA_2211:
            ; //	asm	nop				
00B4E:      	nop
            ; //_AE0CFD6DA_2212:;				
            _AE0CFD6DA_2212:
            ; //	asm	nop				
00B4F:      	nop
            ; //_AE0CFD6DA_2213:;				
            _AE0CFD6DA_2213:
            ; //	asm	nop				
00B50:      	nop
            ; //_AE0CFD6DA_2214:;				
            _AE0CFD6DA_2214:
            ; //	asm	nop				
00B51:      	nop
            ; //_AE0CFD6DA_2215:;				
            _AE0CFD6DA_2215:
            ; //	asm set io[0x09].b14;			
00B52:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2216:;				
            _AE0CFD6DA_2216:
            ; //	asm	nop				
00B53:      	nop
            ; //_AE0CFD6DA_2217:;				
            _AE0CFD6DA_2217:
            ; //	asm	nop				
00B54:      	nop
            ; //_AE0CFD6DA_2218:;				
            _AE0CFD6DA_2218:
            ; //	asm	nop				
00B55:      	nop
            ; //_AE0CFD6DA_2219:;				
            _AE0CFD6DA_2219:
            ; //	asm clr io[0x09].b14;			
00B56:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2220:;				
            _AE0CFD6DA_2220:
            ; //	asm	nop				
00B57:      	nop
            ; //_AE0CFD6DA_2221:;				
            _AE0CFD6DA_2221:
            ; //	asm	nop				
00B58:      	nop
            ; //_AE0CFD6DA_2222:;				
            _AE0CFD6DA_2222:
            ; //	asm	nop				
00B59:      	nop
            ; //_AE0CFD6DA_2223:;				
            _AE0CFD6DA_2223:
            ; //	asm	nop				
00B5A:      	nop
            ; //_AE0CFD6DA_2224:;				
            _AE0CFD6DA_2224:
            ; //	asm	nop				
00B5B:      	nop
            ; //_AE0CFD6DA_2225:;				
            _AE0CFD6DA_2225:
            ; //	asm	nop				
00B5C:      	nop
            ; //_AE0CFD6DA_2226:;				
            _AE0CFD6DA_2226:
            ; //	asm	nop				
00B5D:      	nop
            ; //_AE0CFD6DA_2227:;				
            _AE0CFD6DA_2227:
            ; //	asm	nop				
00B5E:      	nop
            ; //_AE0CFD6DA_2228:;				
            _AE0CFD6DA_2228:
            ; //	asm	nop				
00B5F:      	nop
            ; //_AE0CFD6DA_2229:;				
            _AE0CFD6DA_2229:
            ; //	asm	nop				
00B60:      	nop
            ; //_AE0CFD6DA_2230:;				
            _AE0CFD6DA_2230:
            ; //	asm	nop				
00B61:      	nop
            ; //_AE0CFD6DA_2231:;				
            _AE0CFD6DA_2231:
            ; //	asm	nop				
00B62:      	nop
            ; //_AE0CFD6DA_2232:;				
            _AE0CFD6DA_2232:
            ; //	asm set io[0x09].b14;			
00B63:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2233:;				
            _AE0CFD6DA_2233:
            ; //	asm	nop				
00B64:      	nop
            ; //_AE0CFD6DA_2234:;				
            _AE0CFD6DA_2234:
            ; //	asm	nop				
00B65:      	nop
            ; //_AE0CFD6DA_2235:;				
            _AE0CFD6DA_2235:
            ; //	asm	nop				
00B66:      	nop
            ; //_AE0CFD6DA_2236:;				
            _AE0CFD6DA_2236:
            ; //	asm clr io[0x09].b14;			
00B67:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2237:;				
            _AE0CFD6DA_2237:
            ; //	asm	nop				
00B68:      	nop
            ; //_AE0CFD6DA_2238:;				
            _AE0CFD6DA_2238:
            ; //	asm	nop				
00B69:      	nop
            ; //_AE0CFD6DA_2239:;				
            _AE0CFD6DA_2239:
            ; //	asm	nop				
00B6A:      	nop
            ; //_AE0CFD6DA_2240:;				
            _AE0CFD6DA_2240:
            ; //	asm	nop				
00B6B:      	nop
            ; //_AE0CFD6DA_2241:;				
            _AE0CFD6DA_2241:
            ; //	asm	nop				
00B6C:      	nop
            ; //_AE0CFD6DA_2242:;				
            _AE0CFD6DA_2242:
            ; //	asm	nop				
00B6D:      	nop
            ; //_AE0CFD6DA_2243:;				
            _AE0CFD6DA_2243:
            ; //	asm	nop				
00B6E:      	nop
            ; //_AE0CFD6DA_2244:;				
            _AE0CFD6DA_2244:
            ; //	asm	nop				
00B6F:      	nop
            ; //_AE0CFD6DA_2245:;				
            _AE0CFD6DA_2245:
            ; //	asm	nop				
00B70:      	nop
            ; //_AE0CFD6DA_2246:;				
            _AE0CFD6DA_2246:
            ; //	asm	nop				
00B71:      	nop
            ; //_AE0CFD6DA_2247:;				
            _AE0CFD6DA_2247:
            ; //	asm	nop				
00B72:      	nop
            ; //_AE0CFD6DA_2248:;				
            _AE0CFD6DA_2248:
            ; //	asm	nop				
00B73:      	nop
            ; //_AE0CFD6DA_2249:;				
            _AE0CFD6DA_2249:
            ; //	asm set io[0x09].b14;			
00B74:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2250:;				
            _AE0CFD6DA_2250:
            ; //	asm	nop				
00B75:      	nop
            ; //_AE0CFD6DA_2251:;				
            _AE0CFD6DA_2251:
            ; //	asm	nop				
00B76:      	nop
            ; //_AE0CFD6DA_2252:;				
            _AE0CFD6DA_2252:
            ; //	asm	nop				
00B77:      	nop
            ; //_AE0CFD6DA_2253:;				
            _AE0CFD6DA_2253:
            ; //	asm clr io[0x09].b14;			
00B78:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2254:;				
            _AE0CFD6DA_2254:
            ; //	asm	nop				
00B79:      	nop
            ; //_AE0CFD6DA_2255:;				
            _AE0CFD6DA_2255:
            ; //	asm	nop				
00B7A:      	nop
            ; //_AE0CFD6DA_2256:;				
            _AE0CFD6DA_2256:
            ; //	asm	nop				
00B7B:      	nop
            ; //_AE0CFD6DA_2257:;				
            _AE0CFD6DA_2257:
            ; //	asm	nop				
00B7C:      	nop
            ; //_AE0CFD6DA_2258:;				
            _AE0CFD6DA_2258:
            ; //	asm	nop				
00B7D:      	nop
            ; //_AE0CFD6DA_2259:;				
            _AE0CFD6DA_2259:
            ; //	asm	nop				
00B7E:      	nop
            ; //_AE0CFD6DA_2260:;				
            _AE0CFD6DA_2260:
            ; //	asm	nop				
00B7F:      	nop
            ; //_AE0CFD6DA_2261:;				
            _AE0CFD6DA_2261:
            ; //	asm	nop				
00B80:      	nop
            ; //_AE0CFD6DA_2262:;				
            _AE0CFD6DA_2262:
            ; //	asm	nop				
00B81:      	nop
            ; //_AE0CFD6DA_2263:;				
            _AE0CFD6DA_2263:
            ; //	asm	nop				
00B82:      	nop
            ; //_AE0CFD6DA_2264:;				
            _AE0CFD6DA_2264:
            ; //	asm	nop				
00B83:      	nop
            ; //_AE0CFD6DA_2265:;				
            _AE0CFD6DA_2265:
            ; //	asm	nop				
00B84:      	nop
            ; //_AE0CFD6DA_2266:;				
            _AE0CFD6DA_2266:
            ; //	asm set io[0x09].b14;			
00B85:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2267:;				
            _AE0CFD6DA_2267:
            ; //	asm	nop				
00B86:      	nop
            ; //_AE0CFD6DA_2268:;				
            _AE0CFD6DA_2268:
            ; //	asm	nop				
00B87:      	nop
            ; //_AE0CFD6DA_2269:;				
            _AE0CFD6DA_2269:
            ; //	asm	nop				
00B88:      	nop
            ; //_AE0CFD6DA_2270:;				
            _AE0CFD6DA_2270:
            ; //	asm clr io[0x09].b14;			
00B89:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2271:;				
            _AE0CFD6DA_2271:
            ; //	asm	nop				
00B8A:      	nop
            ; //_AE0CFD6DA_2272:;				
            _AE0CFD6DA_2272:
            ; //	asm	nop				
00B8B:      	nop
            ; //_AE0CFD6DA_2273:;				
            _AE0CFD6DA_2273:
            ; //	asm	nop				
00B8C:      	nop
            ; //_AE0CFD6DA_2274:;				
            _AE0CFD6DA_2274:
            ; //	asm	nop				
00B8D:      	nop
            ; //_AE0CFD6DA_2275:;				
            _AE0CFD6DA_2275:
            ; //	asm	nop				
00B8E:      	nop
            ; //_AE0CFD6DA_2276:;				
            _AE0CFD6DA_2276:
            ; //	asm	nop				
00B8F:      	nop
            ; //_AE0CFD6DA_2277:;				
            _AE0CFD6DA_2277:
            ; //	asm	nop				
00B90:      	nop
            ; //_AE0CFD6DA_2278:;				
            _AE0CFD6DA_2278:
            ; //	asm	nop				
00B91:      	nop
            ; //_AE0CFD6DA_2279:;				
            _AE0CFD6DA_2279:
            ; //	asm	nop				
00B92:      	nop
            ; //_AE0CFD6DA_2280:;				
            _AE0CFD6DA_2280:
            ; //	asm	nop				
00B93:      	nop
            ; //_AE0CFD6DA_2281:;				
            _AE0CFD6DA_2281:
            ; //	asm	nop				
00B94:      	nop
            ; //_AE0CFD6DA_2282:;				
            _AE0CFD6DA_2282:
            ; //	asm	nop				
00B95:      	nop
            ; //_AE0CFD6DA_2283:;				
            _AE0CFD6DA_2283:
            ; //	asm set io[0x09].b14;			
00B96:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2284:;				
            _AE0CFD6DA_2284:
            ; //	asm	nop				
00B97:      	nop
            ; //_AE0CFD6DA_2285:;				
            _AE0CFD6DA_2285:
            ; //	asm	nop				
00B98:      	nop
            ; //_AE0CFD6DA_2286:;				
            _AE0CFD6DA_2286:
            ; //	asm	nop				
00B99:      	nop
            ; //_AE0CFD6DA_2287:;				
            _AE0CFD6DA_2287:
            ; //	asm clr io[0x09].b14;			
00B9A:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2288:;				
            _AE0CFD6DA_2288:
            ; //	asm	nop				
00B9B:      	nop
            ; //_AE0CFD6DA_2289:;				
            _AE0CFD6DA_2289:
            ; //	asm	nop				
00B9C:      	nop
            ; //_AE0CFD6DA_2290:;				
            _AE0CFD6DA_2290:
            ; //	asm	nop				
00B9D:      	nop
            ; //_AE0CFD6DA_2291:;				
            _AE0CFD6DA_2291:
            ; //	asm	nop				
00B9E:      	nop
            ; //_AE0CFD6DA_2292:;				
            _AE0CFD6DA_2292:
            ; //	asm	nop				
00B9F:      	nop
            ; //_AE0CFD6DA_2293:;				
            _AE0CFD6DA_2293:
            ; //	asm	nop				
00BA0:      	nop
            ; //_AE0CFD6DA_2294:;				
            _AE0CFD6DA_2294:
            ; //	asm	nop				
00BA1:      	nop
            ; //_AE0CFD6DA_2295:;				
            _AE0CFD6DA_2295:
            ; //	asm	nop				
00BA2:      	nop
            ; //_AE0CFD6DA_2296:;				
            _AE0CFD6DA_2296:
            ; //	asm	nop				
00BA3:      	nop
            ; //_AE0CFD6DA_2297:;				
            _AE0CFD6DA_2297:
            ; //	asm	nop				
00BA4:      	nop
            ; //_AE0CFD6DA_2298:;				
            _AE0CFD6DA_2298:
            ; //	asm	nop				
00BA5:      	nop
            ; //_AE0CFD6DA_2299:;				
            _AE0CFD6DA_2299:
            ; //	asm	nop				
00BA6:      	nop
            ; //_AE0CFD6DA_2300:;				
            _AE0CFD6DA_2300:
            ; //	asm set io[0x09].b14;			
00BA7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2301:;				
            _AE0CFD6DA_2301:
            ; //	asm	nop				
00BA8:      	nop
            ; //_AE0CFD6DA_2302:;				
            _AE0CFD6DA_2302:
            ; //	asm	nop				
00BA9:      	nop
            ; //_AE0CFD6DA_2303:;				
            _AE0CFD6DA_2303:
            ; //	asm	nop				
00BAA:      	nop
            ; //_AE0CFD6DA_2304:;				
            _AE0CFD6DA_2304:
            ; //	asm clr io[0x09].b14;			
00BAB:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2305:;				
            _AE0CFD6DA_2305:
            ; //	asm	nop				
00BAC:      	nop
            ; //_AE0CFD6DA_2306:;				
            _AE0CFD6DA_2306:
            ; //	asm	nop				
00BAD:      	nop
            ; //_AE0CFD6DA_2307:;				
            _AE0CFD6DA_2307:
            ; //	asm	nop				
00BAE:      	nop
            ; //_AE0CFD6DA_2308:;				
            _AE0CFD6DA_2308:
            ; //	asm	nop				
00BAF:      	nop
            ; //_AE0CFD6DA_2309:;				
            _AE0CFD6DA_2309:
            ; //	asm	nop				
00BB0:      	nop
            ; //_AE0CFD6DA_2310:;				
            _AE0CFD6DA_2310:
            ; //	asm	nop				
00BB1:      	nop
            ; //_AE0CFD6DA_2311:;				
            _AE0CFD6DA_2311:
            ; //	asm	nop				
00BB2:      	nop
            ; //_AE0CFD6DA_2312:;				
            _AE0CFD6DA_2312:
            ; //	asm	nop				
00BB3:      	nop
            ; //_AE0CFD6DA_2313:;				
            _AE0CFD6DA_2313:
            ; //	asm	nop				
00BB4:      	nop
            ; //_AE0CFD6DA_2314:;				
            _AE0CFD6DA_2314:
            ; //	asm	nop				
00BB5:      	nop
            ; //_AE0CFD6DA_2315:;				
            _AE0CFD6DA_2315:
            ; //	asm	nop				
00BB6:      	nop
            ; //_AE0CFD6DA_2316:;				
            _AE0CFD6DA_2316:
            ; //	asm	nop				
00BB7:      	nop
            ; //_AE0CFD6DA_2317:;				
            _AE0CFD6DA_2317:
            ; //	asm set io[0x09].b14;			
00BB8:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2318:;				
            _AE0CFD6DA_2318:
            ; //	asm	nop				
00BB9:      	nop
            ; //_AE0CFD6DA_2319:;				
            _AE0CFD6DA_2319:
            ; //	asm	nop				
00BBA:      	nop
            ; //_AE0CFD6DA_2320:;				
            _AE0CFD6DA_2320:
            ; //	asm	nop				
00BBB:      	nop
            ; //_AE0CFD6DA_2321:;				
            _AE0CFD6DA_2321:
            ; //	asm clr io[0x09].b14;			
00BBC:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2322:;				
            _AE0CFD6DA_2322:
            ; //	asm	nop				
00BBD:      	nop
            ; //_AE0CFD6DA_2323:;				
            _AE0CFD6DA_2323:
            ; //	asm	nop				
00BBE:      	nop
            ; //_AE0CFD6DA_2324:;				
            _AE0CFD6DA_2324:
            ; //	asm	nop				
00BBF:      	nop
            ; //_AE0CFD6DA_2325:;				
            _AE0CFD6DA_2325:
            ; //	asm	nop				
00BC0:      	nop
            ; //_AE0CFD6DA_2326:;				
            _AE0CFD6DA_2326:
            ; //	asm	nop				
00BC1:      	nop
            ; //_AE0CFD6DA_2327:;				
            _AE0CFD6DA_2327:
            ; //	asm	nop				
00BC2:      	nop
            ; //_AE0CFD6DA_2328:;				
            _AE0CFD6DA_2328:
            ; //	asm	nop				
00BC3:      	nop
            ; //_AE0CFD6DA_2329:;				
            _AE0CFD6DA_2329:
            ; //	asm	nop				
00BC4:      	nop
            ; //_AE0CFD6DA_2330:;				
            _AE0CFD6DA_2330:
            ; //	asm	nop				
00BC5:      	nop
            ; //_AE0CFD6DA_2331:;				
            _AE0CFD6DA_2331:
            ; //	asm	nop				
00BC6:      	nop
            ; //_AE0CFD6DA_2332:;				
            _AE0CFD6DA_2332:
            ; //	asm	nop				
00BC7:      	nop
            ; //_AE0CFD6DA_2333:;				
            _AE0CFD6DA_2333:
            ; //	asm	nop				
00BC8:      	nop
            ; //_AE0CFD6DA_2334:;				
            _AE0CFD6DA_2334:
            ; //	asm set io[0x09].b14;			
00BC9:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2335:;				
            _AE0CFD6DA_2335:
            ; //	asm	nop				
00BCA:      	nop
            ; //_AE0CFD6DA_2336:;				
            _AE0CFD6DA_2336:
            ; //	asm	nop				
00BCB:      	nop
            ; //_AE0CFD6DA_2337:;				
            _AE0CFD6DA_2337:
            ; //	asm	nop				
00BCC:      	nop
            ; //_AE0CFD6DA_2338:;				
            _AE0CFD6DA_2338:
            ; //	asm clr io[0x09].b14;			
00BCD:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2339:;				
            _AE0CFD6DA_2339:
            ; //	asm	nop				
00BCE:      	nop
            ; //_AE0CFD6DA_2340:;				
            _AE0CFD6DA_2340:
            ; //	asm	nop				
00BCF:      	nop
            ; //_AE0CFD6DA_2341:;				
            _AE0CFD6DA_2341:
            ; //	asm	nop				
00BD0:      	nop
            ; //_AE0CFD6DA_2342:;				
            _AE0CFD6DA_2342:
            ; //	asm	nop				
00BD1:      	nop
            ; //_AE0CFD6DA_2343:;				
            _AE0CFD6DA_2343:
            ; //	asm	nop				
00BD2:      	nop
            ; //_AE0CFD6DA_2344:;				
            _AE0CFD6DA_2344:
            ; //	asm	nop				
00BD3:      	nop
            ; //_AE0CFD6DA_2345:;				
            _AE0CFD6DA_2345:
            ; //	asm	nop				
00BD4:      	nop
            ; //_AE0CFD6DA_2346:;				
            _AE0CFD6DA_2346:
            ; //	asm	nop				
00BD5:      	nop
            ; //_AE0CFD6DA_2347:;				
            _AE0CFD6DA_2347:
            ; //	asm	nop				
00BD6:      	nop
            ; //_AE0CFD6DA_2348:;				
            _AE0CFD6DA_2348:
            ; //	asm	nop				
00BD7:      	nop
            ; //_AE0CFD6DA_2349:;				
            _AE0CFD6DA_2349:
            ; //	asm	nop				
00BD8:      	nop
            ; //_AE0CFD6DA_2350:;				
            _AE0CFD6DA_2350:
            ; //	asm	nop				
00BD9:      	nop
            ; //_AE0CFD6DA_2351:;				
            _AE0CFD6DA_2351:
            ; //	asm set io[0x09].b14;			
00BDA:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2352:;				
            _AE0CFD6DA_2352:
            ; //	asm	nop				
00BDB:      	nop
            ; //_AE0CFD6DA_2353:;				
            _AE0CFD6DA_2353:
            ; //	asm	nop				
00BDC:      	nop
            ; //_AE0CFD6DA_2354:;				
            _AE0CFD6DA_2354:
            ; //	asm	nop				
00BDD:      	nop
            ; //_AE0CFD6DA_2355:;				
            _AE0CFD6DA_2355:
            ; //	asm clr io[0x09].b14;			
00BDE:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2356:;				
            _AE0CFD6DA_2356:
            ; //	asm	nop				
00BDF:      	nop
            ; //_AE0CFD6DA_2357:;				
            _AE0CFD6DA_2357:
            ; //	asm	nop				
00BE0:      	nop
            ; //_AE0CFD6DA_2358:;				
            _AE0CFD6DA_2358:
            ; //	asm	nop				
00BE1:      	nop
            ; //_AE0CFD6DA_2359:;				
            _AE0CFD6DA_2359:
            ; //	asm	nop				
00BE2:      	nop
            ; //_AE0CFD6DA_2360:;				
            _AE0CFD6DA_2360:
            ; //	asm	nop				
00BE3:      	nop
            ; //_AE0CFD6DA_2361:;				
            _AE0CFD6DA_2361:
            ; //	asm	nop				
00BE4:      	nop
            ; //_AE0CFD6DA_2362:;				
            _AE0CFD6DA_2362:
            ; //	asm	nop				
00BE5:      	nop
            ; //_AE0CFD6DA_2363:;				
            _AE0CFD6DA_2363:
            ; //	asm	nop				
00BE6:      	nop
            ; //_AE0CFD6DA_2364:;				
            _AE0CFD6DA_2364:
            ; //	asm	nop				
00BE7:      	nop
            ; //_AE0CFD6DA_2365:;				
            _AE0CFD6DA_2365:
            ; //	asm	nop				
00BE8:      	nop
            ; //_AE0CFD6DA_2366:;				
            _AE0CFD6DA_2366:
            ; //	asm	nop				
00BE9:      	nop
            ; //_AE0CFD6DA_2367:;				
            _AE0CFD6DA_2367:
            ; //	asm	nop				
00BEA:      	nop
            ; //_AE0CFD6DA_2368:;				
            _AE0CFD6DA_2368:
            ; //	asm set io[0x09].b14;			
00BEB:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2369:;				
            _AE0CFD6DA_2369:
            ; //	asm	nop				
00BEC:      	nop
            ; //_AE0CFD6DA_2370:;				
            _AE0CFD6DA_2370:
            ; //	asm	nop				
00BED:      	nop
            ; //_AE0CFD6DA_2371:;				
            _AE0CFD6DA_2371:
            ; //	asm	nop				
00BEE:      	nop
            ; //_AE0CFD6DA_2372:;				
            _AE0CFD6DA_2372:
            ; //	asm clr io[0x09].b14;			
00BEF:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2373:;				
            _AE0CFD6DA_2373:
            ; //	asm	nop				
00BF0:      	nop
            ; //_AE0CFD6DA_2374:;				
            _AE0CFD6DA_2374:
            ; //	asm	nop				
00BF1:      	nop
            ; //_AE0CFD6DA_2375:;				
            _AE0CFD6DA_2375:
            ; //	asm	nop				
00BF2:      	nop
            ; //_AE0CFD6DA_2376:;				
            _AE0CFD6DA_2376:
            ; //	asm	nop				
00BF3:      	nop
            ; //_AE0CFD6DA_2377:;				
            _AE0CFD6DA_2377:
            ; //	asm	nop				
00BF4:      	nop
            ; //_AE0CFD6DA_2378:;				
            _AE0CFD6DA_2378:
            ; //	asm	nop				
00BF5:      	nop
            ; //_AE0CFD6DA_2379:;				
            _AE0CFD6DA_2379:
            ; //	asm	nop				
00BF6:      	nop
            ; //_AE0CFD6DA_2380:;				
            _AE0CFD6DA_2380:
            ; //	asm	nop				
00BF7:      	nop
            ; //_AE0CFD6DA_2381:;				
            _AE0CFD6DA_2381:
            ; //	asm	nop				
00BF8:      	nop
            ; //_AE0CFD6DA_2382:;				
            _AE0CFD6DA_2382:
            ; //	asm	nop				
00BF9:      	nop
            ; //_AE0CFD6DA_2383:;				
            _AE0CFD6DA_2383:
            ; //	asm	nop				
00BFA:      	nop
            ; //_AE0CFD6DA_2384:;				
            _AE0CFD6DA_2384:
            ; //	asm	nop				
00BFB:      	nop
            ; //_AE0CFD6DA_2385:;				
            _AE0CFD6DA_2385:
            ; //	asm set io[0x09].b14;			
00BFC:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2386:;				
            _AE0CFD6DA_2386:
            ; //	asm	nop				
00BFD:      	nop
            ; //_AE0CFD6DA_2387:;				
            _AE0CFD6DA_2387:
            ; //	asm	nop				
00BFE:      	nop
            ; //_AE0CFD6DA_2388:;				
            _AE0CFD6DA_2388:
            ; //	asm	nop				
00BFF:      	nop
            ; //_AE0CFD6DA_2389:;				
            _AE0CFD6DA_2389:
            ; //	asm clr io[0x09].b14;			
00C00:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2390:;				
            _AE0CFD6DA_2390:
            ; //	asm	nop				
00C01:      	nop
            ; //_AE0CFD6DA_2391:;				
            _AE0CFD6DA_2391:
            ; //	asm	nop				
00C02:      	nop
            ; //_AE0CFD6DA_2392:;				
            _AE0CFD6DA_2392:
            ; //	asm	nop				
00C03:      	nop
            ; //_AE0CFD6DA_2393:;				
            _AE0CFD6DA_2393:
            ; //	asm	nop				
00C04:      	nop
            ; //_AE0CFD6DA_2394:;				
            _AE0CFD6DA_2394:
            ; //	asm	nop				
00C05:      	nop
            ; //_AE0CFD6DA_2395:;				
            _AE0CFD6DA_2395:
            ; //	asm	nop				
00C06:      	nop
            ; //_AE0CFD6DA_2396:;				
            _AE0CFD6DA_2396:
            ; //	asm	nop				
00C07:      	nop
            ; //_AE0CFD6DA_2397:;				
            _AE0CFD6DA_2397:
            ; //	asm	nop				
00C08:      	nop
            ; //_AE0CFD6DA_2398:;				
            _AE0CFD6DA_2398:
            ; //	asm	nop				
00C09:      	nop
            ; //_AE0CFD6DA_2399:;				
            _AE0CFD6DA_2399:
            ; //	asm	nop				
00C0A:      	nop
            ; //_AE0CFD6DA_2400:;				
            _AE0CFD6DA_2400:
            ; //	asm	nop				
00C0B:      	nop
            ; //_AE0CFD6DA_2401:;				
            _AE0CFD6DA_2401:
            ; //	asm	nop				
00C0C:      	nop
            ; //_AE0CFD6DA_2402:;				
            _AE0CFD6DA_2402:
            ; //	asm set io[0x09].b14;			
00C0D:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2403:;				
            _AE0CFD6DA_2403:
            ; //	asm	nop				
00C0E:      	nop
            ; //_AE0CFD6DA_2404:;				
            _AE0CFD6DA_2404:
            ; //	asm	nop				
00C0F:      	nop
            ; //_AE0CFD6DA_2405:;				
            _AE0CFD6DA_2405:
            ; //	asm	nop				
00C10:      	nop
            ; //_AE0CFD6DA_2406:;				
            _AE0CFD6DA_2406:
            ; //	asm clr io[0x09].b14;			
00C11:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2407:;				
            _AE0CFD6DA_2407:
            ; //	asm	nop				
00C12:      	nop
            ; //_AE0CFD6DA_2408:;				
            _AE0CFD6DA_2408:
            ; //	asm	nop				
00C13:      	nop
            ; //_AE0CFD6DA_2409:;				
            _AE0CFD6DA_2409:
            ; //	asm	nop				
00C14:      	nop
            ; //_AE0CFD6DA_2410:;				
            _AE0CFD6DA_2410:
            ; //	asm	nop				
00C15:      	nop
            ; //_AE0CFD6DA_2411:;				
            _AE0CFD6DA_2411:
            ; //	asm	nop				
00C16:      	nop
            ; //_AE0CFD6DA_2412:;				
            _AE0CFD6DA_2412:
            ; //	asm	nop				
00C17:      	nop
            ; //_AE0CFD6DA_2413:;				
            _AE0CFD6DA_2413:
            ; //	asm	nop				
00C18:      	nop
            ; //_AE0CFD6DA_2414:;				
            _AE0CFD6DA_2414:
            ; //	asm	nop				
00C19:      	nop
            ; //_AE0CFD6DA_2415:;				
            _AE0CFD6DA_2415:
            ; //	asm	nop				
00C1A:      	nop
            ; //_AE0CFD6DA_2416:;				
            _AE0CFD6DA_2416:
            ; //	asm	nop				
00C1B:      	nop
            ; //_AE0CFD6DA_2417:;				
            _AE0CFD6DA_2417:
            ; //	asm	nop				
00C1C:      	nop
            ; //_AE0CFD6DA_2418:;				
            _AE0CFD6DA_2418:
            ; //	asm	nop				
00C1D:      	nop
            ; //_AE0CFD6DA_2419:;				
            _AE0CFD6DA_2419:
            ; //	asm set io[0x09].b14;			
00C1E:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2420:;				
            _AE0CFD6DA_2420:
            ; //	asm	nop				
00C1F:      	nop
            ; //_AE0CFD6DA_2421:;				
            _AE0CFD6DA_2421:
            ; //	asm	nop				
00C20:      	nop
            ; //_AE0CFD6DA_2422:;				
            _AE0CFD6DA_2422:
            ; //	asm	nop				
00C21:      	nop
            ; //_AE0CFD6DA_2423:;				
            _AE0CFD6DA_2423:
            ; //	asm clr io[0x09].b14;			
00C22:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2424:;				
            _AE0CFD6DA_2424:
            ; //	asm	nop				
00C23:      	nop
            ; //_AE0CFD6DA_2425:;				
            _AE0CFD6DA_2425:
            ; //	asm	nop				
00C24:      	nop
            ; //_AE0CFD6DA_2426:;				
            _AE0CFD6DA_2426:
            ; //	asm	nop				
00C25:      	nop
            ; //_AE0CFD6DA_2427:;				
            _AE0CFD6DA_2427:
            ; //	asm	nop				
00C26:      	nop
            ; //_AE0CFD6DA_2428:;				
            _AE0CFD6DA_2428:
            ; //	asm	nop				
00C27:      	nop
            ; //_AE0CFD6DA_2429:;				
            _AE0CFD6DA_2429:
            ; //	asm	nop				
00C28:      	nop
            ; //_AE0CFD6DA_2430:;				
            _AE0CFD6DA_2430:
            ; //	asm	nop				
00C29:      	nop
            ; //_AE0CFD6DA_2431:;				
            _AE0CFD6DA_2431:
            ; //	asm	nop				
00C2A:      	nop
            ; //_AE0CFD6DA_2432:;				
            _AE0CFD6DA_2432:
            ; //	asm	nop				
00C2B:      	nop
            ; //_AE0CFD6DA_2433:;				
            _AE0CFD6DA_2433:
            ; //	asm	nop				
00C2C:      	nop
            ; //_AE0CFD6DA_2434:;				
            _AE0CFD6DA_2434:
            ; //	asm	nop				
00C2D:      	nop
            ; //_AE0CFD6DA_2435:;				
            _AE0CFD6DA_2435:
            ; //	asm	nop				
00C2E:      	nop
            ; //_AE0CFD6DA_2436:;				
            _AE0CFD6DA_2436:
            ; //	asm set io[0x09].b14;			
00C2F:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2437:;				
            _AE0CFD6DA_2437:
            ; //	asm	nop				
00C30:      	nop
            ; //_AE0CFD6DA_2438:;				
            _AE0CFD6DA_2438:
            ; //	asm	nop				
00C31:      	nop
            ; //_AE0CFD6DA_2439:;				
            _AE0CFD6DA_2439:
            ; //	asm	nop				
00C32:      	nop
            ; //_AE0CFD6DA_2440:;				
            _AE0CFD6DA_2440:
            ; //	asm clr io[0x09].b14;			
00C33:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2441:;				
            _AE0CFD6DA_2441:
            ; //	asm	nop				
00C34:      	nop
            ; //_AE0CFD6DA_2442:;				
            _AE0CFD6DA_2442:
            ; //	asm	nop				
00C35:      	nop
            ; //_AE0CFD6DA_2443:;				
            _AE0CFD6DA_2443:
            ; //	asm	nop				
00C36:      	nop
            ; //_AE0CFD6DA_2444:;				
            _AE0CFD6DA_2444:
            ; //	asm	nop				
00C37:      	nop
            ; //_AE0CFD6DA_2445:;				
            _AE0CFD6DA_2445:
            ; //	asm	nop				
00C38:      	nop
            ; //_AE0CFD6DA_2446:;				
            _AE0CFD6DA_2446:
            ; //	asm	nop				
00C39:      	nop
            ; //_AE0CFD6DA_2447:;				
            _AE0CFD6DA_2447:
            ; //	asm	nop				
00C3A:      	nop
            ; //_AE0CFD6DA_2448:;				
            _AE0CFD6DA_2448:
            ; //	asm	nop				
00C3B:      	nop
            ; //_AE0CFD6DA_2449:;				
            _AE0CFD6DA_2449:
            ; //	asm	nop				
00C3C:      	nop
            ; //_AE0CFD6DA_2450:;				
            _AE0CFD6DA_2450:
            ; //	asm	nop				
00C3D:      	nop
            ; //_AE0CFD6DA_2451:;				
            _AE0CFD6DA_2451:
            ; //	asm	nop				
00C3E:      	nop
            ; //_AE0CFD6DA_2452:;				
            _AE0CFD6DA_2452:
            ; //	asm	nop				
00C3F:      	nop
            ; //_AE0CFD6DA_2453:;				
            _AE0CFD6DA_2453:
            ; //	asm set io[0x09].b14;			
00C40:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2454:;				
            _AE0CFD6DA_2454:
            ; //	asm	nop				
00C41:      	nop
            ; //_AE0CFD6DA_2455:;				
            _AE0CFD6DA_2455:
            ; //	asm	nop				
00C42:      	nop
            ; //_AE0CFD6DA_2456:;				
            _AE0CFD6DA_2456:
            ; //	asm	nop				
00C43:      	nop
            ; //_AE0CFD6DA_2457:;				
            _AE0CFD6DA_2457:
            ; //	asm	nop				
00C44:      	nop
            ; //_AE0CFD6DA_2458:;				
            _AE0CFD6DA_2458:
            ; //	asm	nop				
00C45:      	nop
            ; //_AE0CFD6DA_2459:;				
            _AE0CFD6DA_2459:
            ; //	asm	nop				
00C46:      	nop
            ; //_AE0CFD6DA_2460:;				
            _AE0CFD6DA_2460:
            ; //	asm	nop				
00C47:      	nop
            ; //_AE0CFD6DA_2461:;				
            _AE0CFD6DA_2461:
            ; //	asm	nop				
00C48:      	nop
            ; //_AE0CFD6DA_2462:;				
            _AE0CFD6DA_2462:
            ; //	asm	nop				
00C49:      	nop
            ; //_AE0CFD6DA_2463:;				
            _AE0CFD6DA_2463:
            ; //	asm	nop				
00C4A:      	nop
            ; //_AE0CFD6DA_2464:;				
            _AE0CFD6DA_2464:
            ; //	asm	nop				
00C4B:      	nop
            ; //_AE0CFD6DA_2465:;				
            _AE0CFD6DA_2465:
            ; //	asm	nop				
00C4C:      	nop
            ; //_AE0CFD6DA_2466:;				
            _AE0CFD6DA_2466:
            ; //	asm clr io[0x09].b14;			
00C4D:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2467:;				
            _AE0CFD6DA_2467:
            ; //	asm	nop				
00C4E:      	nop
            ; //_AE0CFD6DA_2468:;				
            _AE0CFD6DA_2468:
            ; //	asm	nop				
00C4F:      	nop
            ; //_AE0CFD6DA_2469:;				
            _AE0CFD6DA_2469:
            ; //	asm	nop				
00C50:      	nop
            ; //_AE0CFD6DA_2470:;				
            _AE0CFD6DA_2470:
            ; //	asm set io[0x09].b14;			
00C51:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2471:;				
            _AE0CFD6DA_2471:
            ; //	asm	nop				
00C52:      	nop
            ; //_AE0CFD6DA_2472:;				
            _AE0CFD6DA_2472:
            ; //	asm	nop				
00C53:      	nop
            ; //_AE0CFD6DA_2473:;				
            _AE0CFD6DA_2473:
            ; //	asm	nop				
00C54:      	nop
            ; //_AE0CFD6DA_2474:;				
            _AE0CFD6DA_2474:
            ; //	asm	nop				
00C55:      	nop
            ; //_AE0CFD6DA_2475:;				
            _AE0CFD6DA_2475:
            ; //	asm	nop				
00C56:      	nop
            ; //_AE0CFD6DA_2476:;				
            _AE0CFD6DA_2476:
            ; //	asm	nop				
00C57:      	nop
            ; //_AE0CFD6DA_2477:;				
            _AE0CFD6DA_2477:
            ; //	asm	nop				
00C58:      	nop
            ; //_AE0CFD6DA_2478:;				
            _AE0CFD6DA_2478:
            ; //	asm	nop				
00C59:      	nop
            ; //_AE0CFD6DA_2479:;				
            _AE0CFD6DA_2479:
            ; //	asm	nop				
00C5A:      	nop
            ; //_AE0CFD6DA_2480:;				
            _AE0CFD6DA_2480:
            ; //	asm	nop				
00C5B:      	nop
            ; //_AE0CFD6DA_2481:;				
            _AE0CFD6DA_2481:
            ; //	asm	nop				
00C5C:      	nop
            ; //_AE0CFD6DA_2482:;				
            _AE0CFD6DA_2482:
            ; //	asm	nop				
00C5D:      	nop
            ; //_AE0CFD6DA_2483:;				
            _AE0CFD6DA_2483:
            ; //	asm clr io[0x09].b14;			
00C5E:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2484:;				
            _AE0CFD6DA_2484:
            ; //	asm	nop				
00C5F:      	nop
            ; //_AE0CFD6DA_2485:;				
            _AE0CFD6DA_2485:
            ; //	asm	nop				
00C60:      	nop
            ; //_AE0CFD6DA_2486:;				
            _AE0CFD6DA_2486:
            ; //	asm	nop				
00C61:      	nop
            ; //_AE0CFD6DA_2487:;				
            _AE0CFD6DA_2487:
            ; //	asm set io[0x09].b14;			
00C62:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2488:;				
            _AE0CFD6DA_2488:
            ; //	asm	nop				
00C63:      	nop
            ; //_AE0CFD6DA_2489:;				
            _AE0CFD6DA_2489:
            ; //	asm	nop				
00C64:      	nop
            ; //_AE0CFD6DA_2490:;				
            _AE0CFD6DA_2490:
            ; //	asm	nop				
00C65:      	nop
            ; //_AE0CFD6DA_2491:;				
            _AE0CFD6DA_2491:
            ; //	asm	nop				
00C66:      	nop
            ; //_AE0CFD6DA_2492:;				
            _AE0CFD6DA_2492:
            ; //	asm	nop				
00C67:      	nop
            ; //_AE0CFD6DA_2493:;				
            _AE0CFD6DA_2493:
            ; //	asm	nop				
00C68:      	nop
            ; //_AE0CFD6DA_2494:;				
            _AE0CFD6DA_2494:
            ; //	asm	nop				
00C69:      	nop
            ; //_AE0CFD6DA_2495:;				
            _AE0CFD6DA_2495:
            ; //	asm	nop				
00C6A:      	nop
            ; //_AE0CFD6DA_2496:;				
            _AE0CFD6DA_2496:
            ; //	asm	nop				
00C6B:      	nop
            ; //_AE0CFD6DA_2497:;				
            _AE0CFD6DA_2497:
            ; //	asm	nop				
00C6C:      	nop
            ; //_AE0CFD6DA_2498:;				
            _AE0CFD6DA_2498:
            ; //	asm	nop				
00C6D:      	nop
            ; //_AE0CFD6DA_2499:;				
            _AE0CFD6DA_2499:
            ; //	asm	nop				
00C6E:      	nop
            ; //_AE0CFD6DA_2500:;				
            _AE0CFD6DA_2500:
            ; //	asm clr io[0x09].b14;			
00C6F:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2501:;				
            _AE0CFD6DA_2501:
            ; //	asm	nop				
00C70:      	nop
            ; //_AE0CFD6DA_2502:;				
            _AE0CFD6DA_2502:
            ; //	asm	nop				
00C71:      	nop
            ; //_AE0CFD6DA_2503:;				
            _AE0CFD6DA_2503:
            ; //	asm	nop				
00C72:      	nop
            ; //_AE0CFD6DA_2504:;				
            _AE0CFD6DA_2504:
            ; //	asm set io[0x09].b14;			
00C73:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2505:;				
            _AE0CFD6DA_2505:
            ; //	asm	nop				
00C74:      	nop
            ; //_AE0CFD6DA_2506:;				
            _AE0CFD6DA_2506:
            ; //	asm	nop				
00C75:      	nop
            ; //_AE0CFD6DA_2507:;				
            _AE0CFD6DA_2507:
            ; //	asm	nop				
00C76:      	nop
            ; //_AE0CFD6DA_2508:;				
            _AE0CFD6DA_2508:
            ; //	asm	nop				
00C77:      	nop
            ; //_AE0CFD6DA_2509:;				
            _AE0CFD6DA_2509:
            ; //	asm	nop				
00C78:      	nop
            ; //_AE0CFD6DA_2510:;				
            _AE0CFD6DA_2510:
            ; //	asm	nop				
00C79:      	nop
            ; //_AE0CFD6DA_2511:;				
            _AE0CFD6DA_2511:
            ; //	asm	nop				
00C7A:      	nop
            ; //_AE0CFD6DA_2512:;				
            _AE0CFD6DA_2512:
            ; //	asm	nop				
00C7B:      	nop
            ; //_AE0CFD6DA_2513:;				
            _AE0CFD6DA_2513:
            ; //	asm	nop				
00C7C:      	nop
            ; //_AE0CFD6DA_2514:;				
            _AE0CFD6DA_2514:
            ; //	asm	nop				
00C7D:      	nop
            ; //_AE0CFD6DA_2515:;				
            _AE0CFD6DA_2515:
            ; //	asm	nop				
00C7E:      	nop
            ; //_AE0CFD6DA_2516:;				
            _AE0CFD6DA_2516:
            ; //	asm	nop				
00C7F:      	nop
            ; //_AE0CFD6DA_2517:;				
            _AE0CFD6DA_2517:
            ; //	asm clr io[0x09].b14;			
00C80:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2518:;				
            _AE0CFD6DA_2518:
            ; //	asm	nop				
00C81:      	nop
            ; //_AE0CFD6DA_2519:;				
            _AE0CFD6DA_2519:
            ; //	asm	nop				
00C82:      	nop
            ; //_AE0CFD6DA_2520:;				
            _AE0CFD6DA_2520:
            ; //	asm	nop				
00C83:      	nop
            ; //_AE0CFD6DA_2521:;				
            _AE0CFD6DA_2521:
            ; //	asm set io[0x09].b14;			
00C84:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2522:;				
            _AE0CFD6DA_2522:
            ; //	asm	nop				
00C85:      	nop
            ; //_AE0CFD6DA_2523:;				
            _AE0CFD6DA_2523:
            ; //	asm	nop				
00C86:      	nop
            ; //_AE0CFD6DA_2524:;				
            _AE0CFD6DA_2524:
            ; //	asm	nop				
00C87:      	nop
            ; //_AE0CFD6DA_2525:;				
            _AE0CFD6DA_2525:
            ; //	asm	nop				
00C88:      	nop
            ; //_AE0CFD6DA_2526:;				
            _AE0CFD6DA_2526:
            ; //	asm	nop				
00C89:      	nop
            ; //_AE0CFD6DA_2527:;				
            _AE0CFD6DA_2527:
            ; //	asm	nop				
00C8A:      	nop
            ; //_AE0CFD6DA_2528:;				
            _AE0CFD6DA_2528:
            ; //	asm	nop				
00C8B:      	nop
            ; //_AE0CFD6DA_2529:;				
            _AE0CFD6DA_2529:
            ; //	asm	nop				
00C8C:      	nop
            ; //_AE0CFD6DA_2530:;				
            _AE0CFD6DA_2530:
            ; //	asm	nop				
00C8D:      	nop
            ; //_AE0CFD6DA_2531:;				
            _AE0CFD6DA_2531:
            ; //	asm	nop				
00C8E:      	nop
            ; //_AE0CFD6DA_2532:;				
            _AE0CFD6DA_2532:
            ; //	asm	nop				
00C8F:      	nop
            ; //_AE0CFD6DA_2533:;				
            _AE0CFD6DA_2533:
            ; //	asm	nop				
00C90:      	nop
            ; //_AE0CFD6DA_2534:;				
            _AE0CFD6DA_2534:
            ; //	asm clr io[0x09].b14;			
00C91:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2535:;				
            _AE0CFD6DA_2535:
            ; //	asm	nop				
00C92:      	nop
            ; //_AE0CFD6DA_2536:;				
            _AE0CFD6DA_2536:
            ; //	asm	nop				
00C93:      	nop
            ; //_AE0CFD6DA_2537:;				
            _AE0CFD6DA_2537:
            ; //	asm	nop				
00C94:      	nop
            ; //_AE0CFD6DA_2538:;				
            _AE0CFD6DA_2538:
            ; //	asm set io[0x09].b14;			
00C95:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2539:;				
            _AE0CFD6DA_2539:
            ; //	asm	nop				
00C96:      	nop
            ; //_AE0CFD6DA_2540:;				
            _AE0CFD6DA_2540:
            ; //	asm	nop				
00C97:      	nop
            ; //_AE0CFD6DA_2541:;				
            _AE0CFD6DA_2541:
            ; //	asm	nop				
00C98:      	nop
            ; //_AE0CFD6DA_2542:;				
            _AE0CFD6DA_2542:
            ; //	asm	nop				
00C99:      	nop
            ; //_AE0CFD6DA_2543:;				
            _AE0CFD6DA_2543:
            ; //	asm	nop				
00C9A:      	nop
            ; //_AE0CFD6DA_2544:;				
            _AE0CFD6DA_2544:
            ; //	asm	nop				
00C9B:      	nop
            ; //_AE0CFD6DA_2545:;				
            _AE0CFD6DA_2545:
            ; //	asm	nop				
00C9C:      	nop
            ; //_AE0CFD6DA_2546:;				
            _AE0CFD6DA_2546:
            ; //	asm	nop				
00C9D:      	nop
            ; //_AE0CFD6DA_2547:;				
            _AE0CFD6DA_2547:
            ; //	asm	nop				
00C9E:      	nop
            ; //_AE0CFD6DA_2548:;				
            _AE0CFD6DA_2548:
            ; //	asm	nop				
00C9F:      	nop
            ; //_AE0CFD6DA_2549:;				
            _AE0CFD6DA_2549:
            ; //	asm	nop				
00CA0:      	nop
            ; //_AE0CFD6DA_2550:;				
            _AE0CFD6DA_2550:
            ; //	asm	nop				
00CA1:      	nop
            ; //_AE0CFD6DA_2551:;				
            _AE0CFD6DA_2551:
            ; //	asm clr io[0x09].b14;			
00CA2:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2552:;				
            _AE0CFD6DA_2552:
            ; //	asm	nop				
00CA3:      	nop
            ; //_AE0CFD6DA_2553:;				
            _AE0CFD6DA_2553:
            ; //	asm	nop				
00CA4:      	nop
            ; //_AE0CFD6DA_2554:;				
            _AE0CFD6DA_2554:
            ; //	asm	nop				
00CA5:      	nop
            ; //_AE0CFD6DA_2555:;				
            _AE0CFD6DA_2555:
            ; //	asm set io[0x09].b14;			
00CA6:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2556:;				
            _AE0CFD6DA_2556:
            ; //	asm	nop				
00CA7:      	nop
            ; //_AE0CFD6DA_2557:;				
            _AE0CFD6DA_2557:
            ; //	asm	nop				
00CA8:      	nop
            ; //_AE0CFD6DA_2558:;				
            _AE0CFD6DA_2558:
            ; //	asm	nop				
00CA9:      	nop
            ; //_AE0CFD6DA_2559:;				
            _AE0CFD6DA_2559:
            ; //	asm	nop				
00CAA:      	nop
            ; //_AE0CFD6DA_2560:;				
            _AE0CFD6DA_2560:
            ; //	asm	nop				
00CAB:      	nop
            ; //_AE0CFD6DA_2561:;				
            _AE0CFD6DA_2561:
            ; //	asm	nop				
00CAC:      	nop
            ; //_AE0CFD6DA_2562:;				
            _AE0CFD6DA_2562:
            ; //	asm	nop				
00CAD:      	nop
            ; //_AE0CFD6DA_2563:;				
            _AE0CFD6DA_2563:
            ; //	asm	nop				
00CAE:      	nop
            ; //_AE0CFD6DA_2564:;				
            _AE0CFD6DA_2564:
            ; //	asm	nop				
00CAF:      	nop
            ; //_AE0CFD6DA_2565:;				
            _AE0CFD6DA_2565:
            ; //	asm	nop				
00CB0:      	nop
            ; //_AE0CFD6DA_2566:;				
            _AE0CFD6DA_2566:
            ; //	asm	nop				
00CB1:      	nop
            ; //_AE0CFD6DA_2567:;				
            _AE0CFD6DA_2567:
            ; //	asm	nop				
00CB2:      	nop
            ; //_AE0CFD6DA_2568:;				
            _AE0CFD6DA_2568:
            ; //	asm clr io[0x09].b14;			
00CB3:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2569:;				
            _AE0CFD6DA_2569:
            ; //	asm	nop				
00CB4:      	nop
            ; //_AE0CFD6DA_2570:;				
            _AE0CFD6DA_2570:
            ; //	asm	nop				
00CB5:      	nop
            ; //_AE0CFD6DA_2571:;				
            _AE0CFD6DA_2571:
            ; //	asm	nop				
00CB6:      	nop
            ; //_AE0CFD6DA_2572:;				
            _AE0CFD6DA_2572:
            ; //	asm set io[0x09].b14;			
00CB7:      	set io[0x09].b14//
            ; //_AE0CFD6DA_2573:;				
            _AE0CFD6DA_2573:
            ; //	asm	nop				
00CB8:      	nop
            ; //_AE0CFD6DA_2574:;				
            _AE0CFD6DA_2574:
            ; //	asm	nop				
00CB9:      	nop
            ; //_AE0CFD6DA_2575:;				
            _AE0CFD6DA_2575:
            ; //	asm	nop				
00CBA:      	nop
            ; //_AE0CFD6DA_2576:;				
            _AE0CFD6DA_2576:
            ; //	asm	nop				
00CBB:      	nop
            ; //_AE0CFD6DA_2577:;				
            _AE0CFD6DA_2577:
            ; //	asm	nop				
00CBC:      	nop
            ; //_AE0CFD6DA_2578:;				
            _AE0CFD6DA_2578:
            ; //	asm	nop				
00CBD:      	nop
            ; //_AE0CFD6DA_2579:;				
            _AE0CFD6DA_2579:
            ; //	asm	nop				
00CBE:      	nop
            ; //_AE0CFD6DA_2580:;				
            _AE0CFD6DA_2580:
            ; //	asm	nop				
00CBF:      	nop
            ; //_AE0CFD6DA_2581:;				
            _AE0CFD6DA_2581:
            ; //	asm	nop				
00CC0:      	nop
            ; //_AE0CFD6DA_2582:;				
            _AE0CFD6DA_2582:
            ; //	asm	nop				
00CC1:      	nop
            ; //_AE0CFD6DA_2583:;				
            _AE0CFD6DA_2583:
            ; //	asm	nop				
00CC2:      	nop
            ; //_AE0CFD6DA_2584:;				
            _AE0CFD6DA_2584:
            ; //	asm	nop				
00CC3:      	nop
            ; //_AE0CFD6DA_2585:;				
            _AE0CFD6DA_2585:
            ; //	asm clr io[0x09].b14;			
00CC4:      	clr io[0x09].b14//
            ; //_AE0CFD6DA_2586:;				
            _AE0CFD6DA_2586:
            ; //	asm	nop				
00CC5:      	nop
            ; //_AE0CFD6DA_2587:;				
            _AE0CFD6DA_2587:
            ; //	asm	nop				
00CC6:      	nop
            ; //_AE0CFD6DA_2588:;				
            _AE0CFD6DA_2588:
            ; //	asm	nop				
00CC7:      	nop
            ; //_AE0CFD6DA_2589:;				
            _AE0CFD6DA_2589:
            ; //	goto LD63FD439_72;			
00CC8:      	pch =	LD63FD439_72
00CC9:      	ljmp	LD63FD439_72
            ; //LD63FD439_80:;					
            LD63FD439_80:
            ; //_AE0CFD6DA_2590:;				
            _AE0CFD6DA_2590:
            ; //	goto LD63FD439_72;			
00CCA:      	pch =	LD63FD439_72
00CCB:      	ljmp	LD63FD439_72
            ; //	goto LD63FD439_72;			
00CCC:      	pch =	LD63FD439_72
00CCD:      	ljmp	LD63FD439_72
            ; //LD63FD439_73:;					
            LD63FD439_73:
            ; //	sCX	= sAX;				
00CCE:      	AR	= AX
00CCF:      	CX	= AR
            ; //	sAX	= 0x0000;			
00CD0:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00CD1:      	pch	= sfx_CMP_AX_CX_JE
00CD2:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_81;	
00CD3:      	if NZ	jmp LD63FD439_81
            ; //	goto LD63FD439_74;			
00CD4:      	pch =	LD63FD439_74
00CD5:      	ljmp	LD63FD439_74
            ; //LD63FD439_81:;					
            LD63FD439_81:
            ; //	sAX	= 0x0001;			
00CD6:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00CD7:      	pch	= sfx_CMP_AX_CX_JE
00CD8:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_82;	
00CD9:      	if NZ	jmp LD63FD439_82
            ; //	goto LD63FD439_75;			
00CDA:      	pch =	LD63FD439_75
00CDB:      	ljmp	LD63FD439_75
            ; //LD63FD439_82:;					
            LD63FD439_82:
            ; //	sAX	= 0x0003;			
00CDC:      	AX	= 0x03
            ; //	sfx_CMP_AX_CX_JE();			
00CDD:      	pch	= sfx_CMP_AX_CX_JE
00CDE:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_83;	
00CDF:      	if NZ	jmp LD63FD439_83
            ; //	goto LD63FD439_76;			
00CE0:      	pch =	LD63FD439_76
00CE1:      	ljmp	LD63FD439_76
            ; //LD63FD439_83:;					
            LD63FD439_83:
            ; //	sAX	= 0x0002;			
00CE2:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
00CE3:      	pch	= sfx_CMP_AX_CX_JE
00CE4:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_84;	
00CE5:      	if NZ	jmp LD63FD439_84
            ; //	goto LD63FD439_77;			
00CE6:      	pch =	LD63FD439_77
00CE7:      	ljmp	LD63FD439_77
            ; //LD63FD439_84:;					
            LD63FD439_84:
            ; //	sAX	= 0x0005;			
00CE8:      	AX	= 0x05
            ; //	sfx_CMP_AX_CX_JE();			
00CE9:      	pch	= sfx_CMP_AX_CX_JE
00CEA:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_85;	
00CEB:      	if NZ	jmp LD63FD439_85
            ; //	goto LD63FD439_78;			
00CEC:      	pch =	LD63FD439_78
00CED:      	ljmp	LD63FD439_78
            ; //LD63FD439_85:;					
            LD63FD439_85:
            ; //	sAX	= 0x0004;			
00CEE:      	AX	= 0x04
            ; //	sfx_CMP_AX_CX_JE();			
00CEF:      	pch	= sfx_CMP_AX_CX_JE
00CF0:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_86;	
00CF1:      	if NZ	jmp LD63FD439_86
            ; //	goto LD63FD439_79;			
00CF2:      	pch =	LD63FD439_79
00CF3:      	ljmp	LD63FD439_79
            ; //LD63FD439_86:;					
            LD63FD439_86:
            ; //	goto	LD63FD439_80;			
00CF4:      	pch =	LD63FD439_80
00CF5:      	ljmp	LD63FD439_80
            ; //LD63FD439_72:;					
            LD63FD439_72:
            ; //	goto LD63FD439_70;			
00CF6:      	pch =	LD63FD439_70
00CF7:      	ljmp	LD63FD439_70
            ; //LD63FD439_69:;					
            LD63FD439_69:
            ; //_AE0CFD6DA_2591:;				
            _AE0CFD6DA_2591:
            ; //LD63FD439_66:;					
            LD63FD439_66:
            ; //_AE0CFD6DA_2592:;				
            _AE0CFD6DA_2592:
            ; //	return;					
00CF8:      	AR	= 1
00CF9:      	BP	+= AR
00CFA:      	pop	AR
00CFB:      	rm[BP_SAVE]	= AR
00CFC:      	rets
            ; //_WS_TRSF_color_setE1CC300C_end:;		
            _WS_TRSF_color_setE1CC300C_end:
            ; //_AE0CFD6DA_2593:;				
            _AE0CFD6DA_2593:
            ; //}
            ; //
            ; //void _WS_RefreshAD7B99B1()			
            _WS_RefreshAD7B99B1:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00CFD:      	AR	= rm[BP_SAVE]
00CFE:      	push	AR
00CFF:      	AR	= BP
00D00:      	rm[BP_SAVE]	= AR
00D01:      	AR	 = -1
00D02:      	BP	+= AR
            ; //_AE0CFD6DA_2594:;				
            _AE0CFD6DA_2594:
            ; //_AE0CFD6DA_2595:;				
            _AE0CFD6DA_2595:
            ; //	_i_1_2+0	= 0x00;			
00D03:      	I1	= rm[BP_SAVE]
00D04:      	AR	= 0x00
00D05:      	rm[I1]	= AR
            ; //LD63FD439_88:;					
            LD63FD439_88:
            ; //	sSI	= (int)&_i_1_2;			
00D06:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00D07:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00D08:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00D09:      	pch	= sfx_CMP_AX_CX_JBE
00D0A:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_92;	
00D0B:      	if ZR	jmp LD63FD439_92
            ; //	goto	LD63FD439_90;			
00D0C:      	pch =	LD63FD439_90
00D0D:      	ljmp	LD63FD439_90
            ; //LD63FD439_92:;					
            LD63FD439_92:
            ; //	goto LD63FD439_89;			
00D0E:      	pch =	LD63FD439_89
00D0F:      	ljmp	LD63FD439_89
            ; //LD63FD439_91:;					
            LD63FD439_91:
            ; //	sSI	= (int)&_i_1_2;			
00D10:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00D11:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00D12:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00D13:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00D14:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00D15:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_88;			
00D16:      	pch =	LD63FD439_88
00D17:      	ljmp	LD63FD439_88
            ; //LD63FD439_89:;					
            LD63FD439_89:
            ; //	
            ; //_AE0CFD6DA_2596:;				
            _AE0CFD6DA_2596:
            ; //_AE0CFD6DA_2597:;				
            _AE0CFD6DA_2597:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00D18:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00D19:      	push	AX
            ; //	sSI	= (int)&_i_1_2;			
00D1A:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00D1B:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
00D1C:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
00D1D:      	pch	= sfx_IMUL_AX_CX
00D1E:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00D1F:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00D20:      	AR	= CX
00D21:      	AX	+= AR
            ; //	sSI	= sAX;				
00D22:      	AR	= AX
00D23:      	I1	= AR
            ; //	sAX	= *(__int16*)sSI++;		
00D24:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00D25:      	DX	= rm[I1--]
            ; //	PUSH(sAX);				
00D26:      	push	AX
            ; //	_WS_Send24bits851C5C55(STACK[sSP + 0]);	
00D27:      	pch	= _WS_Send24bits851C5C55
00D28:      	lcall	_WS_Send24bits851C5C55
            ; //	RESTORESP(1);				
00D29:      	pop	AR
            ; //	goto LD63FD439_91;			
00D2A:      	pch =	LD63FD439_91
00D2B:      	ljmp	LD63FD439_91
            ; //LD63FD439_90:;					
            LD63FD439_90:
            ; //_AE0CFD6DA_2598:;				
            _AE0CFD6DA_2598:
            ; //_AE0CFD6DA_2599:;				
            _AE0CFD6DA_2599:
            ; //	asm clr io[0x09].b14;			
00D2C:      	clr io[0x09].b14//
            ; //LD63FD439_87:;					
            LD63FD439_87:
            ; //_AE0CFD6DA_2600:;				
            _AE0CFD6DA_2600:
            ; //	return;					
00D2D:      	AR	= 1
00D2E:      	BP	+= AR
00D2F:      	pop	AR
00D30:      	rm[BP_SAVE]	= AR
00D31:      	rets
            ; //_WS_RefreshAD7B99B1_end:;			
            _WS_RefreshAD7B99B1_end:
            ; //_AE0CFD6DA_2601:;				
            _AE0CFD6DA_2601:
            ; //}
            ; //
            ; //void _WS_Key_RGBC5B96B6D()			
            _WS_Key_RGBC5B96B6D:
            ; //{
            ; //_AE0CFD6DA_2602:;				
            _AE0CFD6DA_2602:
            ; //	
            ; //_AE0CFD6DA_2603:;				
            _AE0CFD6DA_2603:
            ; //	asm I1 = LD63FD439_94+0;		
00D32:      	I1 = LD63FD439_94+0//
            ; //	sAX	= *(__int16*)sSI;		
00D33:      	AX	= rm[I1]
            ; //	goto LD63FD439_96;			
00D34:      	pch =	LD63FD439_96
00D35:      	ljmp	LD63FD439_96
            ; //LD63FD439_97:;					
            LD63FD439_97:
            ; //_AE0CFD6DA_2604:;				
            _AE0CFD6DA_2604:
            ; //_AE0CFD6DA_2605:;				
            _AE0CFD6DA_2605:
            ; //	sAX	= 0x0000;			
00D36:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D37:      	push	AX
            ; //	sAX	= 0x0003;			
00D38:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D39:      	push	AX
            ; //	sAX	= 0x0000;			
00D3A:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D3B:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D3C:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D3D:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D3E:      	AR	= 3
00D3F:      	BP	+= AR
            ; //_AE0CFD6DA_2606:;				
            _AE0CFD6DA_2606:
            ; //_AE0CFD6DA_2607:;				
            _AE0CFD6DA_2607:
            ; //	_WS_RefreshAD7B99B1();			
00D40:      	pch	= _WS_RefreshAD7B99B1
00D41:      	lcall	_WS_RefreshAD7B99B1
            ; //_AE0CFD6DA_2608:;				
            _AE0CFD6DA_2608:
            ; //_AE0CFD6DA_2609:;				
            _AE0CFD6DA_2609:
            ; //	sAX	= 0x0000;			
00D42:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D43:      	push	AX
            ; //	sAX	= 0x0003;			
00D44:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D45:      	push	AX
            ; //	sAX	= 0x0000;			
00D46:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D47:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D48:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D49:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D4A:      	AR	= 3
00D4B:      	BP	+= AR
            ; //_AE0CFD6DA_2610:;				
            _AE0CFD6DA_2610:
            ; //_AE0CFD6DA_2611:;				
            _AE0CFD6DA_2611:
            ; //	_WS_RefreshAD7B99B1();			
00D4C:      	pch	= _WS_RefreshAD7B99B1
00D4D:      	lcall	_WS_RefreshAD7B99B1
            ; //_AE0CFD6DA_2612:;				
            _AE0CFD6DA_2612:
            ; //	goto LD63FD439_95;			
00D4E:      	pch =	LD63FD439_95
00D4F:      	ljmp	LD63FD439_95
            ; //LD63FD439_98:;					
            LD63FD439_98:
            ; //_AE0CFD6DA_2613:;				
            _AE0CFD6DA_2613:
            ; //_AE0CFD6DA_2614:;				
            _AE0CFD6DA_2614:
            ; //	sAX	= 0x0000;			
00D50:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D51:      	push	AX
            ; //	sAX	= 0x0003;			
00D52:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D53:      	push	AX
            ; //	sAX	= 0x0000;			
00D54:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D55:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D56:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D57:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D58:      	AR	= 3
00D59:      	BP	+= AR
            ; //_AE0CFD6DA_2615:;				
            _AE0CFD6DA_2615:
            ; //_AE0CFD6DA_2616:;				
            _AE0CFD6DA_2616:
            ; //	_WS_RefreshAD7B99B1();			
00D5A:      	pch	= _WS_RefreshAD7B99B1
00D5B:      	lcall	_WS_RefreshAD7B99B1
            ; //_AE0CFD6DA_2617:;				
            _AE0CFD6DA_2617:
            ; //_AE0CFD6DA_2618:;				
            _AE0CFD6DA_2618:
            ; //	sAX	= 0x001F;			
00D5C:      	AX	= 0x1F
            ; //	PUSH(sAX);				
00D5D:      	push	AX
            ; //	sAX	= 0x0006;			
00D5E:      	AX	= 0x06
            ; //	PUSH(sAX);				
00D5F:      	push	AX
            ; //	sAX	= 0x0004;			
00D60:      	AX	= 0x04
            ; //	PUSH(sAX);				
00D61:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D62:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D63:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D64:      	AR	= 3
00D65:      	BP	+= AR
            ; //_AE0CFD6DA_2619:;				
            _AE0CFD6DA_2619:
            ; //_AE0CFD6DA_2620:;				
            _AE0CFD6DA_2620:
            ; //	_WS_RefreshAD7B99B1();			
00D66:      	pch	= _WS_RefreshAD7B99B1
00D67:      	lcall	_WS_RefreshAD7B99B1
            ; //_AE0CFD6DA_2621:;				
            _AE0CFD6DA_2621:
            ; //	goto LD63FD439_95;			
00D68:      	pch =	LD63FD439_95
00D69:      	ljmp	LD63FD439_95
            ; //LD63FD439_99:;					
            LD63FD439_99:
            ; //_AE0CFD6DA_2622:;				
            _AE0CFD6DA_2622:
            ; //_AE0CFD6DA_2623:;				
            _AE0CFD6DA_2623:
            ; //	sAX	= 0x0000;			
00D6A:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D6B:      	push	AX
            ; //	sAX	= 0x0003;			
00D6C:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D6D:      	push	AX
            ; //	sAX	= 0x0000;			
00D6E:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D6F:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D70:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D71:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D72:      	AR	= 3
00D73:      	BP	+= AR
            ; //_AE0CFD6DA_2624:;				
            _AE0CFD6DA_2624:
            ; //_AE0CFD6DA_2625:;				
            _AE0CFD6DA_2625:
            ; //	_WS_RefreshAD7B99B1();			
00D74:      	pch	= _WS_RefreshAD7B99B1
00D75:      	lcall	_WS_RefreshAD7B99B1
            ; //_AE0CFD6DA_2626:;				
            _AE0CFD6DA_2626:
            ; //_AE0CFD6DA_2627:;				
            _AE0CFD6DA_2627:
            ; //	sAX	= 0xFF00;			
00D76:      	AX	= 0xFF00
            ; //	PUSH(sAX);				
00D78:      	push	AX
            ; //	sAX	= 0x000A;			
00D79:      	AX	= 0x0A
            ; //	PUSH(sAX);				
00D7A:      	push	AX
            ; //	sAX	= 0x0007;			
00D7B:      	AX	= 0x07
            ; //	PUSH(sAX);				
00D7C:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D7D:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D7E:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D7F:      	AR	= 3
00D80:      	BP	+= AR
            ; //_AE0CFD6DA_2628:;				
            _AE0CFD6DA_2628:
            ; //_AE0CFD6DA_2629:;				
            _AE0CFD6DA_2629:
            ; //	_WS_RefreshAD7B99B1();			
00D81:      	pch	= _WS_RefreshAD7B99B1
00D82:      	lcall	_WS_RefreshAD7B99B1
            ; //_AE0CFD6DA_2630:;				
            _AE0CFD6DA_2630:
            ; //	goto LD63FD439_95;			
00D83:      	pch =	LD63FD439_95
00D84:      	ljmp	LD63FD439_95
            ; //	goto LD63FD439_95;			
00D85:      	pch =	LD63FD439_95
00D86:      	ljmp	LD63FD439_95
            ; //LD63FD439_96:;					
            LD63FD439_96:
            ; //	sCX	= sAX;				
00D87:      	AR	= AX
00D88:      	CX	= AR
            ; //	sAX	= 0x0000;			
00D89:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_U_JE();			
00D8A:      	pch	= sfx_CMP_AX_CX_U_JE
00D8B:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_100;	
00D8C:      	if NZ	jmp LD63FD439_100
            ; //	goto LD63FD439_97;			
00D8D:      	pch =	LD63FD439_97
00D8E:      	ljmp	LD63FD439_97
            ; //LD63FD439_100:;					
            LD63FD439_100:
            ; //	sAX	= 0x0001;			
00D8F:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_U_JE();			
00D90:      	pch	= sfx_CMP_AX_CX_U_JE
00D91:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_101;	
00D92:      	if NZ	jmp LD63FD439_101
            ; //	goto LD63FD439_98;			
00D93:      	pch =	LD63FD439_98
00D94:      	ljmp	LD63FD439_98
            ; //LD63FD439_101:;					
            LD63FD439_101:
            ; //	sAX	= 0x0002;			
00D95:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_U_JE();			
00D96:      	pch	= sfx_CMP_AX_CX_U_JE
00D97:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_102;	
00D98:      	if NZ	jmp LD63FD439_102
            ; //	goto LD63FD439_99;			
00D99:      	pch =	LD63FD439_99
00D9A:      	ljmp	LD63FD439_99
            ; //LD63FD439_102:;					
            LD63FD439_102:
            ; //	goto	LD63FD439_95;			
00D9B:      	pch =	LD63FD439_95
00D9C:      	ljmp	LD63FD439_95
            ; //LD63FD439_95:;					
            LD63FD439_95:
            ; //_AE0CFD6DA_2631:;				
            _AE0CFD6DA_2631:
            ; //	asm I1 = LD63FD439_94+0;		
00D9D:      	I1 = LD63FD439_94+0//
            ; //	sAX	= *(__int16*)sSI;		
00D9E:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_94;		
00D9F:      	I1	= LD63FD439_94
            ; //	PUSH(sAX);				
00DA0:      	push	AX
            ; //	sAX	= 0x0001;			
00DA1:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
00DA2:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
00DA3:      	AR	= AX
00DA4:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
00DA5:      	rm[I1]	= CX
            ; //	sAX	= POP();			
00DA6:      	pop	AX
            ; //_AE0CFD6DA_2632:;				
            _AE0CFD6DA_2632:
            ; //	asm I1 = LD63FD439_94+0;		
00DA7:      	I1 = LD63FD439_94+0//
            ; //	sAX	= *(__int16*)sSI;		
00DA8:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
00DA9:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JA();			
00DAA:      	pch	= sfx_CMP_AX_CX_JA
00DAB:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_104;	
00DAC:      	if ZR	jmp LD63FD439_104
            ; //	goto	LD63FD439_103;			
00DAD:      	pch =	LD63FD439_103
00DAE:      	ljmp	LD63FD439_103
            ; //LD63FD439_104:;					
            LD63FD439_104:
            ; //_AE0CFD6DA_2633:;				
            _AE0CFD6DA_2633:
            ; //	LD63FD439_94+0	= 0x00;			
00DAF:      	AR	= 0x00
00DB0:      	rm[LD63FD439_94+0]	= AR
            ; //LD63FD439_103:;					
            LD63FD439_103:
            ; //_AE0CFD6DA_2634:;				
            _AE0CFD6DA_2634:
            ; //_AE0CFD6DA_2635:;				
            _AE0CFD6DA_2635:
            ; //_AE0CFD6DA_2636:;				
            _AE0CFD6DA_2636:
            ; //	sAX	= 0x0032;			
00DB1:      	AX	= 0x32
            ; //	PUSH(sAX);				
00DB2:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
00DB3:      	pch	= _delay6F9F34ED
00DB4:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
00DB5:      	pop	AR
            ; //LD63FD439_93:;					
            LD63FD439_93:
            ; //_AE0CFD6DA_2637:;				
            _AE0CFD6DA_2637:
            ; //	return;					
00DB6:      	rets
            ; //_WS_Key_RGBC5B96B6D_end:;			
            _WS_Key_RGBC5B96B6D_end:
            ; //_AE0CFD6DA_2638:;				
            _AE0CFD6DA_2638:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_WS2811_02F950F9_s(void)	
            ginit_code_WS2811_02F950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+0;
00DB7:      	P1 = #ginit_seg_WS2811_02F950F9_s+0//
            ; //	asm I1 = LD63FD439_37;			
00DBA:      	I1 = LD63FD439_37//
            ; //	sCX = 1;				
00DBB:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00DBC:      	pch	= sfx_GLOBALINIT
00DBD:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+1;
00DBE:      	P1 = #ginit_seg_WS2811_02F950F9_s+1//
            ; //	asm I1 = LD63FD439_94;			
00DC1:      	I1 = LD63FD439_94//
            ; //	sCX = 1;				
00DC2:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00DC3:      	pch	= sfx_GLOBALINIT
00DC4:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00DC5:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_WS2811_02F950F9_s[2] = {	
            ginit_seg_WS2811_02F950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
00DC6:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00DC7:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> Start=========================
            ; global.c Code Start!!;
            VarRM[0:4095]={
             _sub_vol980B1B83,_ticksA7263C09[2] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _RampUpFF7996DA();
            ; //rjmp void _RampDown1D382EDA();
            ; //rjmp void _InitialDA4A7CC4();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _RampUpFF7996DA()			
            _RampUpFF7996DA:
            ; //{
            ; //_AE0CFD6DA_2639:;				
            _AE0CFD6DA_2639:
            ; //	
            ; //_AE0CFD6DA_2640:;				
            _AE0CFD6DA_2640:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00DC8:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00DC9:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
00DCA:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
00DCB:      	AX = AX & AR//
            ; //	sCX	= 0x003F;			
00DCC:      	CX	= 0x3F
            ; //	sfx_CMP_AX_CX_JE();			
00DCD:      	pch	= sfx_CMP_AX_CX_JE
00DCE:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_110;	
00DCF:      	if ZR	jmp L0E8FA404_110
            ; //	goto	L0E8FA404_109;			
00DD0:      	jmp	L0E8FA404_109
            ; //L0E8FA404_110:;					
            L0E8FA404_110:
            ; //_AE0CFD6DA_2641:;				
            _AE0CFD6DA_2641:
            ; //	sAX	= 0x0000;			
00DD1:      	AX	= 0x00
            ; //	goto L0E8FA404_108;			
00DD2:      	jmp	L0E8FA404_108
            ; //L0E8FA404_109:;					
            L0E8FA404_109:
            ; //_AE0CFD6DA_2642:;				
            _AE0CFD6DA_2642:
            ; //_AE0CFD6DA_2643:;				
            _AE0CFD6DA_2643:
            ; //_AE0CFD6DA_2644:;				
            _AE0CFD6DA_2644:
            ; //	_GetTickCount18DC070C();		
00DD3:      	pch	= _GetTickCount18DC070C
00DD4:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00DD5:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
00DD6:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00DD7:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00DD8:      	AR	= CX
00DD9:      	AX	= AX - AR
00DDA:      	AR	= BX
00DDB:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
00DDC:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
00DDD:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
00DDE:      	pch	= sfx_CMPLONG_JA
00DDF:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_112;	
00DE0:      	if ZR	jmp L0E8FA404_112
            ; //	goto	L0E8FA404_111;			
00DE1:      	jmp	L0E8FA404_111
            ; //L0E8FA404_112:;					
            L0E8FA404_112:
            ; //	
            ; //_AE0CFD6DA_2645:;				
            _AE0CFD6DA_2645:
            ; //_AE0CFD6DA_2646:;				
            _AE0CFD6DA_2646:
            ; //	_GetTickCount18DC070C();		
00DE2:      	pch	= _GetTickCount18DC070C
00DE3:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00DE4:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
00DE5:      	rm[I1++]	= AX
00DE6:      	rm[I1--]	= DX
            ; //_AE0CFD6DA_2647:;				
            _AE0CFD6DA_2647:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00DE7:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00DE8:      	AX	= rm[I1]
            ; //	sAX++;					
00DE9:      	AX++
            ; //	*(__int16*)sSI	= sAX;			
00DEA:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
00DEB:      	AR	= AX
00DEC:      	io[0x3C]	= AR
            ; //L0E8FA404_111:;					
            L0E8FA404_111:
            ; //_AE0CFD6DA_2648:;				
            _AE0CFD6DA_2648:
            ; //_AE0CFD6DA_2649:;				
            _AE0CFD6DA_2649:
            ; //	sAX	= 0x0001;			
00DED:      	AX	= 0x01
            ; //	goto L0E8FA404_108;			
00DEE:      	jmp	L0E8FA404_108
            ; //L0E8FA404_108:;					
            L0E8FA404_108:
            ; //_AE0CFD6DA_2650:;				
            _AE0CFD6DA_2650:
            ; //	return;					
00DEF:      	rets
            ; //_RampUpFF7996DA_end:;				
            _RampUpFF7996DA_end:
            ; //_AE0CFD6DA_2651:;				
            _AE0CFD6DA_2651:
            ; //}
            ; //
            ; //rjmp void _RampDown1D382EDA()			
            _RampDown1D382EDA:
            ; //{
            ; //_AE0CFD6DA_2652:;				
            _AE0CFD6DA_2652:
            ; //	
            ; //_AE0CFD6DA_2653:;				
            _AE0CFD6DA_2653:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00DF0:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00DF1:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
00DF2:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
00DF3:      	AX = AX & AR//
            ; //	sCX	= 0x0000;			
00DF4:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00DF5:      	pch	= sfx_CMP_AX_CX_JE
00DF6:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_115;	
00DF7:      	if ZR	jmp L0E8FA404_115
            ; //	goto	L0E8FA404_114;			
00DF8:      	jmp	L0E8FA404_114
            ; //L0E8FA404_115:;					
            L0E8FA404_115:
            ; //_AE0CFD6DA_2654:;				
            _AE0CFD6DA_2654:
            ; //	sAX	= 0x0000;			
00DF9:      	AX	= 0x00
            ; //	goto L0E8FA404_113;			
00DFA:      	jmp	L0E8FA404_113
            ; //L0E8FA404_114:;					
            L0E8FA404_114:
            ; //_AE0CFD6DA_2655:;				
            _AE0CFD6DA_2655:
            ; //_AE0CFD6DA_2656:;				
            _AE0CFD6DA_2656:
            ; //_AE0CFD6DA_2657:;				
            _AE0CFD6DA_2657:
            ; //	_GetTickCount18DC070C();		
00DFB:      	pch	= _GetTickCount18DC070C
00DFC:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00DFD:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
00DFE:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00DFF:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00E00:      	AR	= CX
00E01:      	AX	= AX - AR
00E02:      	AR	= BX
00E03:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
00E04:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
00E05:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
00E06:      	pch	= sfx_CMPLONG_JA
00E07:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_117;	
00E08:      	if ZR	jmp L0E8FA404_117
            ; //	goto	L0E8FA404_116;			
00E09:      	jmp	L0E8FA404_116
            ; //L0E8FA404_117:;					
            L0E8FA404_117:
            ; //	
            ; //_AE0CFD6DA_2658:;				
            _AE0CFD6DA_2658:
            ; //_AE0CFD6DA_2659:;				
            _AE0CFD6DA_2659:
            ; //	_GetTickCount18DC070C();		
00E0A:      	pch	= _GetTickCount18DC070C
00E0B:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00E0C:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
00E0D:      	rm[I1++]	= AX
00E0E:      	rm[I1--]	= DX
            ; //_AE0CFD6DA_2660:;				
            _AE0CFD6DA_2660:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00E0F:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00E10:      	AX	= rm[I1]
            ; //	sAX--;					
00E11:      	AX--
            ; //	*(__int16*)sSI	= sAX;			
00E12:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
00E13:      	AR	= AX
00E14:      	io[0x3C]	= AR
            ; //L0E8FA404_116:;					
            L0E8FA404_116:
            ; //_AE0CFD6DA_2661:;				
            _AE0CFD6DA_2661:
            ; //_AE0CFD6DA_2662:;				
            _AE0CFD6DA_2662:
            ; //	sAX	= 0x0001;			
00E15:      	AX	= 0x01
            ; //	goto L0E8FA404_113;			
00E16:      	jmp	L0E8FA404_113
            ; //L0E8FA404_113:;					
            L0E8FA404_113:
            ; //_AE0CFD6DA_2663:;				
            _AE0CFD6DA_2663:
            ; //	return;					
00E17:      	rets
            ; //_RampDown1D382EDA_end:;				
            _RampDown1D382EDA_end:
            ; //_AE0CFD6DA_2664:;				
            _AE0CFD6DA_2664:
            ; //}
            ; //
            ; //rjmp void _InitialDA4A7CC4()			
            _InitialDA4A7CC4:
            ; //{
            ; //_AE0CFD6DA_2665:;				
            _AE0CFD6DA_2665:
            ; //	
            ; //_AE0CFD6DA_2666:;				
            _AE0CFD6DA_2666:
            ; //	sAX	= 0x003F;			
00E18:      	AX	= 0x3F
            ; //_AE0CFD6DA_2667:;				
            _AE0CFD6DA_2667:
            ; //	asm	AR = AX				
00E19:      	AR = AX
            ; //_AE0CFD6DA_2668:;				
            _AE0CFD6DA_2668:
            ; //	asm	FLTG = AR			
00E1A:      	FLTG = AR
            ; //	
            ; //_AE0CFD6DA_2669:;				
            _AE0CFD6DA_2669:
            ; //	sAX	= 0x1FFF;			
00E1B:      	AX	= 0x1FFF
            ; //_AE0CFD6DA_2670:;				
            _AE0CFD6DA_2670:
            ; //	asm	AR = AX				
00E1D:      	AR = AX
            ; //_AE0CFD6DA_2671:;				
            _AE0CFD6DA_2671:
            ; //	asm	FLTP = AR			
00E1E:      	FLTP = AR
            ; //	
            ; //_AE0CFD6DA_2672:;				
            _AE0CFD6DA_2672:
            ; //	sAX	= 0x0008;			
00E1F:      	AX	= 0x08
            ; //_AE0CFD6DA_2673:;				
            _AE0CFD6DA_2673:
            ; //	asm	AR = AX				
00E20:      	AR = AX
            ; //_AE0CFD6DA_2674:;				
            _AE0CFD6DA_2674:
            ; //	asm	CBL = AR			
00E21:      	CBL = AR
            ; //_AE0CFD6DA_2675:;				
            _AE0CFD6DA_2675:
            ; //	io[0x67]	= 0x0007;		
00E22:      	AR	= 0x07
00E23:      	io[0x67]	= AR
            ; //_AE0CFD6DA_2676:;				
            _AE0CFD6DA_2676:
            ; //	io[0x06]	= 0xC004;		
00E24:      	AR	= 0xC004
00E26:      	io[0x06]	= AR
            ; //_AE0CFD6DA_2677:;				
            _AE0CFD6DA_2677:
            ; //	io[0x05]	= 0x0000;		
00E27:      	AR	= 0x00
00E28:      	io[0x05]	= AR
            ; //_AE0CFD6DA_2678:;				
            _AE0CFD6DA_2678:
            ; //	io[0x09]	= 0x0000;		
00E29:      	AR	= 0x00
00E2A:      	io[0x09]	= AR
            ; //_AE0CFD6DA_2679:;				
            _AE0CFD6DA_2679:
            ; //	asm set io[0x00].b7;			
00E2B:      	set io[0x00].b7//
            ; //_AE0CFD6DA_2680:;				
            _AE0CFD6DA_2680:
            ; //	asm set io[0x01].b1;			
00E2C:      	set io[0x01].b1//
            ; //L0E8FA404_118:;					
            L0E8FA404_118:
            ; //_AE0CFD6DA_2681:;				
            _AE0CFD6DA_2681:
            ; //	return;					
00E2D:      	rets
            ; //_InitialDA4A7CC4_end:;				
            _InitialDA4A7CC4_end:
            ; //_AE0CFD6DA_2682:;				
            _AE0CFD6DA_2682:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_global_6037E6D5_s(void)	
            ginit_code_global_6037E6D5_s:
            ; //{
            ; //	return;					
00E2E:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> Start=========================
            ; sub3play.c Code Start!!;
            VarRM[0:4095]={
             bts_ch0_get_ix[2],PCMYIN_PTR,PCMYOU_PTR,PCMIN,SampleCh0Rate,BaseOn512#PCMY[512],SUBFLTI[4],SUBFLTA
            ,SUBFLTP,SUBFLTG 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _ClearRenderBufB079D01D();
            ; //rjmp void _Sub3Initial96BE24F3();
            ; //rjmp void _WaitPCM_Empty_size53398B9D();
            ; //rjmp void _Sub3ZeroFillABFF23AA();
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1);
            ; //naked rjmp void Sbb_Ch0GetBts();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _ClearRenderBufB079D01D()		
            _ClearRenderBufB079D01D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00E2F:      	AR	= rm[BP_SAVE]
00E30:      	push	AR
00E31:      	AR	= BP
00E32:      	rm[BP_SAVE]	= AR
00E33:      	AR	 = -1
00E34:      	BP	+= AR
            ; //_AE0CFD6DA_2683:;				
            _AE0CFD6DA_2683:
            ; //	
            ; //_AE0CFD6DA_2684:;				
            _AE0CFD6DA_2684:
            ; //	asm AX = PCMY+0;			
00E35:      	AX = PCMY+0//
            ; //_AE0CFD6DA_2685:;				
            _AE0CFD6DA_2685:
            ; //	asm	AR = AX				
00E37:      	AR = AX
            ; //_AE0CFD6DA_2686:;				
            _AE0CFD6DA_2686:
            ; //	asm	I0 = AR				
00E38:      	I0 = AR
            ; //_AE0CFD6DA_2687:;				
            _AE0CFD6DA_2687:
            ; //	_i_1_2+0	= 0x0200;		
00E39:      	I1	= rm[BP_SAVE]
00E3A:      	AR	= 0x0200
00E3C:      	rm[I1]	= AR
            ; //LFB78B58C_122:;					
            LFB78B58C_122:
            ; //_AE0CFD6DA_2688:;				
            _AE0CFD6DA_2688:
            ; //	sSI	= (int)&_i_1_2;			
00E3D:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E3E:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00E3F:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00E40:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00E41:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
00E42:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
00E43:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_123;	
00E44:      	if NZ	jmp LFB78B58C_123
            ; //	goto	LFB78B58C_121;			
00E45:      	jmp	LFB78B58C_121
            ; //LFB78B58C_123:;					
            LFB78B58C_123:
            ; //	
            ; //_AE0CFD6DA_2689:;				
            _AE0CFD6DA_2689:
            ; //	sAX	= 0x0000;			
00E46:      	AX	= 0x00
            ; //_AE0CFD6DA_2690:;				
            _AE0CFD6DA_2690:
            ; //	asm	rm[I0++] = AX			
00E47:      	rm[I0++] = AX
            ; //	goto LFB78B58C_122;			
00E48:      	jmp	LFB78B58C_122
            ; //LFB78B58C_121:;					
            LFB78B58C_121:
            ; //LFB78B58C_120:;					
            LFB78B58C_120:
            ; //_AE0CFD6DA_2691:;				
            _AE0CFD6DA_2691:
            ; //	return;					
00E49:      	AR	= 1
00E4A:      	BP	+= AR
00E4B:      	pop	AR
00E4C:      	rm[BP_SAVE]	= AR
00E4D:      	rets
            ; //_ClearRenderBufB079D01D_end:;			
            _ClearRenderBufB079D01D_end:
            ; //_AE0CFD6DA_2692:;				
            _AE0CFD6DA_2692:
            ; //}
            ; //
            ; //rjmp void _Sub3Initial96BE24F3()		
            _Sub3Initial96BE24F3:
            ; //{
            ; //_AE0CFD6DA_2693:;				
            _AE0CFD6DA_2693:
            ; //_AE0CFD6DA_2694:;				
            _AE0CFD6DA_2694:
            ; //	asm	dsi				
00E4E:      	dsi
            ; //_AE0CFD6DA_2695:;				
            _AE0CFD6DA_2695:
            ; //	asm	nop				
00E4F:      	nop
            ; //	
            ; //_AE0CFD6DA_2696:;				
            _AE0CFD6DA_2696:
            ; //_AE0CFD6DA_2697:;				
            _AE0CFD6DA_2697:
            ; //	_ClearRenderBufB079D01D();		
00E50:      	pch	= _ClearRenderBufB079D01D
00E51:      	lcall	_ClearRenderBufB079D01D
            ; //_AE0CFD6DA_2698:;				
            _AE0CFD6DA_2698:
            ; //	asm	AR = PASR,0			
00E52:      	AR = PASR,0
            ; //_AE0CFD6DA_2699:;				
            _AE0CFD6DA_2699:
            ; //	asm AX = PCMY+0;			
00E53:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
00E55:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00E56:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2700:;				
            _AE0CFD6DA_2700:
            ; //	asm AX = PCMY+0;			
00E57:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
00E59:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00E5A:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2701:;				
            _AE0CFD6DA_2701:
            ; //	io[0x3B]	= 0x0000;		
00E5B:      	AR	= 0x00
00E5C:      	io[0x3B]	= AR
            ; //_AE0CFD6DA_2702:;				
            _AE0CFD6DA_2702:
            ; //_AE0CFD6DA_2703:;				
            _AE0CFD6DA_2703:
            ; //	Subb3_Init();				
00E5D:      	pch	= Subb3_Init
00E5E:      	lcall	Subb3_Init
            ; //LFB78B58C_124:;					
            LFB78B58C_124:
            ; //_AE0CFD6DA_2704:;				
            _AE0CFD6DA_2704:
            ; //	return;					
00E5F:      	rets
            ; //_Sub3Initial96BE24F3_end:;			
            _Sub3Initial96BE24F3_end:
            ; //_AE0CFD6DA_2705:;				
            _AE0CFD6DA_2705:
            ; //}
            ; //
            ; //rjmp void _WaitPCM_Empty_size53398B9D()		
            _WaitPCM_Empty_size53398B9D:
            ; //{
            ; //	__int16 _x_1_2;
            ; //						
00E60:      	AR	= rm[BP_SAVE]
00E61:      	push	AR
00E62:      	AR	= BP
00E63:      	rm[BP_SAVE]	= AR
00E64:      	AR	 = -1
00E65:      	BP	+= AR
            ; //_AE0CFD6DA_2706:;				
            _AE0CFD6DA_2706:
            ; //_AE0CFD6DA_2707:;				
            _AE0CFD6DA_2707:
            ; //	asm I1 = PCMYOU_PTR+0;			
00E66:      	I1 = PCMYOU_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
00E67:      	AX	= rm[I1]
            ; //	asm I1 = PCMYIN_PTR+0;			
00E68:      	I1 = PCMYIN_PTR+0//
            ; //	sCX	= *(__int16*)sSI;		
00E69:      	CX	= rm[I1]
            ; //	sAX	= sAX - sCX;			
00E6A:      	AR	= CX
00E6B:      	AX	-= AR
            ; //	
            ; //	sSI	= (int)&_x_1_2;			
00E6C:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00E6D:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2708:;				
            _AE0CFD6DA_2708:
            ; //	sSI	= (int)&_x_1_2;			
00E6E:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E6F:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
00E70:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JL();			
00E71:      	pch	= sfx_CMP_AX_CX_JL
00E72:      	lcall	sfx_CMP_AX_CX_JL
            ; //	if(__je__)	goto LFB78B58C_127;	
00E73:      	if ZR	jmp LFB78B58C_127
            ; //	goto	LFB78B58C_126;			
00E74:      	jmp	LFB78B58C_126
            ; //LFB78B58C_127:;					
            LFB78B58C_127:
            ; //	
            ; //_AE0CFD6DA_2709:;				
            _AE0CFD6DA_2709:
            ; //	sAX	= 0x01FF;			
00E75:      	AX	= 0x01FF
            ; //	sSI	= (int)&_x_1_2;			
00E77:      	I1	= rm[BP_SAVE]
            ; //	sCX	= *(__int16*)sSI;		
00E78:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
00E79:      	AR	= CX
00E7A:      	AX	&= AR
            ; //	sSI	= (int)&_x_1_2;			
00E7B:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00E7C:      	rm[I1]	= AX
            ; //LFB78B58C_126:;					
            LFB78B58C_126:
            ; //_AE0CFD6DA_2710:;				
            _AE0CFD6DA_2710:
            ; //_AE0CFD6DA_2711:;				
            _AE0CFD6DA_2711:
            ; //	sSI	= (int)&_x_1_2;			
00E7D:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E7E:      	AX	= rm[I1]
            ; //	sCX	= 0x0121;			
00E7F:      	CX	= 0x0121
            ; //	sAX	= sAX - sCX;			
00E81:      	AR	= CX
00E82:      	AX	-= AR
            ; //	sSI	= (int)&_x_1_2;			
00E83:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00E84:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2712:;				
            _AE0CFD6DA_2712:
            ; //	sSI	= (int)&_x_1_2;			
00E85:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E86:      	AX	= rm[I1]
            ; //	goto LFB78B58C_125;			
00E87:      	jmp	LFB78B58C_125
            ; //LFB78B58C_125:;					
            LFB78B58C_125:
            ; //_AE0CFD6DA_2713:;				
            _AE0CFD6DA_2713:
            ; //	return;					
00E88:      	AR	= 1
00E89:      	BP	+= AR
00E8A:      	pop	AR
00E8B:      	rm[BP_SAVE]	= AR
00E8C:      	rets
            ; //_WaitPCM_Empty_size53398B9D_end:;		
            _WaitPCM_Empty_size53398B9D_end:
            ; //_AE0CFD6DA_2714:;				
            _AE0CFD6DA_2714:
            ; //}
            ; //
            ; //rjmp void _Sub3ZeroFillABFF23AA()		
            _Sub3ZeroFillABFF23AA:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00E8D:      	AR	= rm[BP_SAVE]
00E8E:      	push	AR
00E8F:      	AR	= BP
00E90:      	rm[BP_SAVE]	= AR
00E91:      	AR	 = -1
00E92:      	BP	+= AR
            ; //_AE0CFD6DA_2715:;				
            _AE0CFD6DA_2715:
            ; //_AE0CFD6DA_2716:;				
            _AE0CFD6DA_2716:
            ; //	asm	push CBL			
00E93:      	push CBL
            ; //_AE0CFD6DA_2717:;				
            _AE0CFD6DA_2717:
            ; //	io[0x3B]	= 0x0009;		
00E94:      	AR	= 0x09
00E95:      	io[0x3B]	= AR
            ; //	
            ; //_AE0CFD6DA_2718:;				
            _AE0CFD6DA_2718:
            ; //	asm I1 = PCMYIN_PTR+0;			
00E96:      	I1 = PCMYIN_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
00E97:      	AX	= rm[I1]
            ; //_AE0CFD6DA_2719:;				
            _AE0CFD6DA_2719:
            ; //	asm	AR = AX				
00E98:      	AR = AX
            ; //_AE0CFD6DA_2720:;				
            _AE0CFD6DA_2720:
            ; //	asm	I0 = AR				
00E99:      	I0 = AR
            ; //_AE0CFD6DA_2721:;				
            _AE0CFD6DA_2721:
            ; //	_i_1_2+0	= 0x0120;		
00E9A:      	I1	= rm[BP_SAVE]
00E9B:      	AR	= 0x0120
00E9D:      	rm[I1]	= AR
            ; //LFB78B58C_130:;					
            LFB78B58C_130:
            ; //_AE0CFD6DA_2722:;				
            _AE0CFD6DA_2722:
            ; //	sSI	= (int)&_i_1_2;			
00E9E:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E9F:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00EA0:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00EA1:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00EA2:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
00EA3:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
00EA4:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_131;	
00EA5:      	if NZ	jmp LFB78B58C_131
            ; //	goto	LFB78B58C_129;			
00EA6:      	jmp	LFB78B58C_129
            ; //LFB78B58C_131:;					
            LFB78B58C_131:
            ; //	
            ; //_AE0CFD6DA_2723:;				
            _AE0CFD6DA_2723:
            ; //	sAX	= 0x0000;			
00EA7:      	AX	= 0x00
            ; //_AE0CFD6DA_2724:;				
            _AE0CFD6DA_2724:
            ; //	asm	rm[I0++] = AX			
00EA8:      	rm[I0++] = AX
            ; //	goto LFB78B58C_130;			
00EA9:      	jmp	LFB78B58C_130
            ; //LFB78B58C_129:;					
            LFB78B58C_129:
            ; //_AE0CFD6DA_2725:;				
            _AE0CFD6DA_2725:
            ; //_AE0CFD6DA_2726:;				
            _AE0CFD6DA_2726:
            ; //	get_I0();				
00EAA:      	push	I0
00EAB:      	pop	AX
            ; //	asm I1 = PCMYIN_PTR+0;			
00EAC:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00EAD:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2727:;				
            _AE0CFD6DA_2727:
            ; //	asm	pop CBL				
00EAE:      	pop CBL
            ; //LFB78B58C_128:;					
            LFB78B58C_128:
            ; //_AE0CFD6DA_2728:;				
            _AE0CFD6DA_2728:
            ; //	return;					
00EAF:      	AR	= 1
00EB0:      	BP	+= AR
00EB1:      	pop	AR
00EB2:      	rm[BP_SAVE]	= AR
00EB3:      	rets
            ; //_Sub3ZeroFillABFF23AA_end:;			
            _Sub3ZeroFillABFF23AA_end:
            ; //_AE0CFD6DA_2729:;				
            _AE0CFD6DA_2729:
            ; //}
            ; //
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1)
            _Sub3Play422CAD6D:
            ; //{						
00EB4:      	AR	= rm[BP_SAVE]
00EB5:      	push	AR
00EB6:      	AR	= BP
00EB7:      	rm[BP_SAVE]	= AR
            ; //_AE0CFD6DA_2730:;				
            _AE0CFD6DA_2730:
            ; //	
            ; //_AE0CFD6DA_2731:;				
            _AE0CFD6DA_2731:
            ; //	sSI	= (int)&_sdata_0_4_0;		
00EB8:      	AR	= 2
00EB9:      	I1	= rm[BP_SAVE]
00EBA:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI++;		
00EBB:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00EBC:      	DX	= rm[I1--]
            ; //	asm I1 = bts_ch0_get_ix+0;		
00EBD:      	I1 = bts_ch0_get_ix+0//
            ; //	sfx_STORSILONG();			
00EBE:      	rm[I1++]	= AX
00EBF:      	rm[I1--]	= DX
            ; //_AE0CFD6DA_2732:;				
            _AE0CFD6DA_2732:
            ; //_AE0CFD6DA_2733:;				
            _AE0CFD6DA_2733:
            ; //	_Sub3Initial96BE24F3();			
00EC0:      	pch	= _Sub3Initial96BE24F3
00EC1:      	lcall	_Sub3Initial96BE24F3
            ; //_AE0CFD6DA_2734:;				
            _AE0CFD6DA_2734:
            ; //	asm AX = SUBFLTI+0;			
00EC2:      	AX = SUBFLTI+0//
            ; //	PUSH(sAX);				
00EC3:      	push	AX
            ; //	sAX	= 0x0000;			
00EC4:      	AX	= 0x00
            ; //	sSI	= POP();			
00EC5:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00EC6:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2735:;				
            _AE0CFD6DA_2735:
            ; //	asm AX = SUBFLTI+1;			
00EC7:      	AX = SUBFLTI+1//
            ; //	PUSH(sAX);				
00EC8:      	push	AX
            ; //	sAX	= 0x0000;			
00EC9:      	AX	= 0x00
            ; //	sSI	= POP();			
00ECA:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00ECB:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2736:;				
            _AE0CFD6DA_2736:
            ; //	asm AX = SUBFLTI+2;			
00ECC:      	AX = SUBFLTI+2//
            ; //	PUSH(sAX);				
00ECD:      	push	AX
            ; //	sAX	= 0x0000;			
00ECE:      	AX	= 0x00
            ; //	sSI	= POP();			
00ECF:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00ED0:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2737:;				
            _AE0CFD6DA_2737:
            ; //	asm AX = SUBFLTI+3;			
00ED1:      	AX = SUBFLTI+3//
            ; //	PUSH(sAX);				
00ED2:      	push	AX
            ; //	sAX	= 0x0000;			
00ED3:      	AX	= 0x00
            ; //	sSI	= POP();			
00ED4:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00ED5:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2738:;				
            _AE0CFD6DA_2738:
            ; //	sAX	= 0x0000;			
00ED6:      	AX	= 0x00
            ; //	asm I1 = SUBFLTA+0;			
00ED7:      	I1 = SUBFLTA+0//
            ; //	*(__int16*)sSI	= sAX			
00ED8:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2739:;				
            _AE0CFD6DA_2739:
            ; //	asm I1 = SampleCh0Rate+0;		
00ED9:      	I1 = SampleCh0Rate+0//
            ; //	sAX	= *(__int16*)sSI;		
00EDA:      	AX	= rm[I1]
            ; //	asm I1 = SUBFLTP+0;			
00EDB:      	I1 = SUBFLTP+0//
            ; //	*(__int16*)sSI	= sAX			
00EDC:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2740:;				
            _AE0CFD6DA_2740:
            ; //	sAX	= 0x003F;			
00EDD:      	AX	= 0x3F
            ; //	asm I1 = SUBFLTG+0;			
00EDE:      	I1 = SUBFLTG+0//
            ; //	*(__int16*)sSI	= sAX			
00EDF:      	rm[I1]	= AX
            ; //_AE0CFD6DA_2741:;				
            _AE0CFD6DA_2741:
            ; //	asm	set io[INTENA].b0		
00EE0:      	set io[INTENA].b0
            ; //_AE0CFD6DA_2742:;				
            _AE0CFD6DA_2742:
            ; //	asm	eni				
00EE1:      	eni
            ; //LFB78B58C_132:;					
            LFB78B58C_132:
            ; //_AE0CFD6DA_2743:;				
            _AE0CFD6DA_2743:
            ; //	return;					
00EE2:      	pop	AR
00EE3:      	rm[BP_SAVE]	= AR
00EE4:      	rets
            ; //_Sub3Play422CAD6D_end:;				
            _Sub3Play422CAD6D_end:
            ; //_AE0CFD6DA_2744:;				
            _AE0CFD6DA_2744:
            ; //}
            ; //
            ; //naked rjmp void Sbb_Ch0GetBts()			
            Sbb_Ch0GetBts:
            ; //{
            ; //_AE0CFD6DA_2745:;				
            _AE0CFD6DA_2745:
            ; //_AE0CFD6DA_2746:;				
            _AE0CFD6DA_2746:
            ; //	asm	push I1				
00EE5:      	push I1
            ; //_AE0CFD6DA_2747:;				
            _AE0CFD6DA_2747:
            ; //	asm	push P1				
00EE6:      	push P1
            ; //_AE0CFD6DA_2748:;				
            _AE0CFD6DA_2748:
            ; //	asm	push AX				
00EE7:      	push AX
            ; //_AE0CFD6DA_2749:;				
            _AE0CFD6DA_2749:
            ; //	asm	push BX				
00EE8:      	push BX
            ; //_AE0CFD6DA_2750:;				
            _AE0CFD6DA_2750:
            ; //	asm	push CX				
00EE9:      	push CX
            ; //_AE0CFD6DA_2751:;				
            _AE0CFD6DA_2751:
            ; //	asm	push DX				
00EEA:      	push DX
            ; //_AE0CFD6DA_2752:;				
            _AE0CFD6DA_2752:
            ; //	asm	AR = P1.hh			
00EEB:      	AR = P1.hh
            ; //_AE0CFD6DA_2753:;				
            _AE0CFD6DA_2753:
            ; //	asm	push AR				
00EEC:      	push AR
            ; //	
            ; //_AE0CFD6DA_2754:;				
            _AE0CFD6DA_2754:
            ; //_AE0CFD6DA_2755:;				
            _AE0CFD6DA_2755:
            ; //_AE0CFD6DA_2756:;				
            _AE0CFD6DA_2756:
            ; //	asm I1 = bts_ch0_get_ix+0;		
00EED:      	I1 = bts_ch0_get_ix+0//
            ; //	sAX	= *(__int16*)sSI++;		
00EEE:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00EEF:      	DX	= rm[I1--]
            ; //	sSI	= (int)&bts_ch0_get_ix[0];	
00EF0:      	I1	= bts_ch0_get_ix
            ; //	PUSH(sAX);				
00EF1:      	push	AX
            ; //	PUSH(sDX);				
00EF2:      	push	DX
            ; //	sfx_GETSILONG_BXCX();			
00EF3:      	CX	= rm[I1++]
00EF4:      	BX	= rm[I1--]
            ; //	sAX = 0x0001;				
00EF5:      	AX	= 0x01
            ; //	sDX = 0x0000;				
00EF6:      	DX	= 0x00
            ; //	sfx_ADDLONG_BXCX_DXAX();		
00EF7:      	AR	= AX
00EF8:      	CX	= CX + AR
00EF9:      	AR	= DX
00EFA:      	BX	= BX + AR + C
            ; //	sfx_STORSILONG_BXCX();			
00EFB:      	rm[I1++]	= CX
00EFC:      	rm[I1--]	= BX
            ; //	sDX	= POP();			
00EFD:      	pop	DX
            ; //	sAX	= POP();			
00EFE:      	pop	AX
            ; //	_lptr_read(STACK[sSP + 0], STACK[sSP + 1]);
00EFF:      	pch	= _lptr_read
00F00:      	lcall	_lptr_read
            ; //	vXCHG(STACK[sSP + 0]);			
00F01:      	AR	= AX
00F02:      	AX	= xchg AR
            ; //_AE0CFD6DA_2757:;				
            _AE0CFD6DA_2757:
            ; //	asm	pop AR				
00F03:      	pop AR
            ; //_AE0CFD6DA_2758:;				
            _AE0CFD6DA_2758:
            ; //	asm	P1.hh = AR			
00F04:      	P1.hh = AR
            ; //_AE0CFD6DA_2759:;				
            _AE0CFD6DA_2759:
            ; //	asm	AR = AX				
00F05:      	AR = AX
            ; //	
            ; //_AE0CFD6DA_2760:;				
            _AE0CFD6DA_2760:
            ; //	asm	pop DX				
00F06:      	pop DX
            ; //_AE0CFD6DA_2761:;				
            _AE0CFD6DA_2761:
            ; //	asm	pop CX				
00F07:      	pop CX
            ; //_AE0CFD6DA_2762:;				
            _AE0CFD6DA_2762:
            ; //	asm	pop BX				
00F08:      	pop BX
            ; //_AE0CFD6DA_2763:;				
            _AE0CFD6DA_2763:
            ; //	asm	pop AX				
00F09:      	pop AX
            ; //_AE0CFD6DA_2764:;				
            _AE0CFD6DA_2764:
            ; //	asm	pop P1				
00F0A:      	pop P1
            ; //_AE0CFD6DA_2765:;				
            _AE0CFD6DA_2765:
            ; //	asm	pop I1				
00F0B:      	pop I1
            ; //LFB78B58C_133:;					
            LFB78B58C_133:
            ; //_AE0CFD6DA_2766:;				
            _AE0CFD6DA_2766:
            ; //	return;					
00F0C:      	rets
            ; //Sbb_Ch0GetBts_end:;				
            Sbb_Ch0GetBts_end:
            ; //_AE0CFD6DA_2767:;				
            _AE0CFD6DA_2767:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3play_8ED4FA41_s(void)	
            ginit_code_sub3play_8ED4FA41_s:
            ; //{
            ; //	return;					
00F0D:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> Start=========================
            
            
            ; ~~ IO for DSP
            
            
            ; ~~ --------------------------
            ; void ClrWatchDog(void)
            ;~ ClrWatchDog:
            	;~ io[0x1D]=	AR
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void dsi(void)
            ;~ dsi:
            	;~ clr		io[STATUS].b7
            	;~ nop
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void eni(void)
            ;~ eni:
            	;~ set		io[STATUS].b7
            	;~ rets
            
            
            ; ~~ --------------------------
            ; int get_SATV(long value)
            get_SATV:
00F0E:      	AR=		BP
00F0F:      	AR=		AR + 1		; ~~ value
00F10:      	I1=		AR
00F11:      	AR=		SATV
00F12:      	AR=		rm[I1++]
00F13:      	SATV=		AR
00F14:      	AR=		rm[I1++]
00F15:      	SATV=		AR
00F16:      	AR=		SATV
00F17:      	AX=		AR
00F18:      	rets
            
            #ifdef _MSPEECHDSP_
            
            set_ADPHD:
            get_ADPHD:
            set_ADPDAT:
            get_ADPDAT:
            	AX=		0
            	rets
            
            #else
            
            
            ; ~~ --------------------------
            ; void set_ADPHD(int value)
            set_ADPHD:
00F19:      	AR=		BP
00F1A:      	AR=		AR + 1		; ~~ value
00F1B:      	I1=		AR
00F1C:      	ADPHD=		rm[I1]
00F1D:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPHD(void)
            get_ADPHD:
00F1E:      	AR=		ADPHD
00F1F:      	AX=		AR
00F20:      	rets
            
            
            ; ~~ --------------------------
            ; void set_ADPDAT(int value)
            set_ADPDAT:
00F21:      	AR=		BP
00F22:      	AR=		AR + 1		; ~~ value
00F23:      	I1=		AR
00F24:      	ADPDAT=		rm[I1]
00F25:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPDAT(void)
            get_ADPDAT:
00F26:      	AR=		ADPDAT
00F27:      	AX=		AR
00F28:      	rets
            
            #endif
            
            
            
            ; ~~ --------------------------
            ; int get_ADPPCM(void)
            get_FLTI:
            get_ADPPCM:
00F29:      	AR=		ADPPCM
00F2A:      	AX=		AR
00F2B:      	rets
            
            
            ; ~~ --------------------------
            ; int get_CBL(void)
            get_CBL:
00F2C:      	AR=		CBL
00F2D:      	AX=		AR
00F2E:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTO(void)
            get_FLTO:
00F2F:      	AR=		FLTO
00F30:      	AX=		AR
00F31:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTA(void)
            get_FLTA:
00F32:      	AR=		FLTA
00F33:      	AX=		AR
00F34:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTP(void)
            get_FLTP:
00F35:      	AR=		FLTP
00F36:      	AX=		AR
00F37:      	rets
            
            ; ///////////////////////////////////////////////////////////////////////////
            ; ///////////////////////////////////////////////////////////////////////////
            
            ; ~~ --------------------------
            ; void set_UART(void)
            set_UART:
00F38:      	set		io[STATUS].b5
00F39:      	rets
            
            ; ~~ --------------------------
            ; void clr_UART(void)
            clr_UART:
00F3A:      	clr		io[STATUS].b5
00F3B:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIM(void)
            set_SPIM:
00F3C:      	set		io[STATUS].b8
00F3D:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIM(void)
            clr_SPIM:
00F3E:      	clr		io[STATUS].b8
00F3F:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIS(void)
            set_SPIS:
00F40:      	set		io[STATUS].b9
00F41:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIS(void)
            clr_SPIS:
00F42:      	clr		io[STATUS].b9
00F43:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_IntPrWR:
00F44:      	set		io[STATUS].b11
00F45:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_IntPrWR:
00F46:      	clr		io[STATUS].b11
00F47:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_SD:
00F48:      	set		io[STATUS].b12
00F49:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_SD:
00F4A:      	clr		io[STATUS].b12
00F4B:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVWR(void)
            set_IntVWR:
00F4C:      	set		io[STATUS].b13
00F4D:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntVWR(void)
            clr_IntVWR:
00F4E:      	clr		io[STATUS].b13
00F4F:      	rets
            
            ; ~~ --------------------------
            ; void set_INTENA(int value)
            set_INTENA:
00F50:      	AR=		BP
00F51:      	AR=		AR + 1		; ~~ value
00F52:      	I1=		AR
00F53:      	AR=		rm[I1]
00F54:      	io[INTENA]=	AR
00F55:      	rets
            
            ; ~~ --------------------------
            ; int get_INTENA(int value)
            get_INTENA:
00F56:      	AR=		io[INTENA]
00F57:      	AX=		AR
00F58:      	rets
            
            ; ~~ --------------------------
            ; void set_INTREQ(int value)
            set_INTREQ:
00F59:      	AR=		BP
00F5A:      	AR=		AR + 1		; ~~ value
00F5B:      	I1=		AR
00F5C:      	AR=		rm[I1]
00F5D:      	io[INTREQ]	=AR
00F5E:      	rets
            
            ; ~~ --------------------------
            ; int get_INTREQ(int value)
            get_INTREQ:
00F5F:      	AR=		io[INTREQ]
00F60:      	AX=		AR
00F61:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVect(int value)
            set_IntVect:
00F62:      	AR=		BP
00F63:      	AR=		AR + 1		; ~~ value
00F64:      	I1=		AR
00F65:      	AR=		rm[I1]
00F66:      	io[IntVect]	=AR
00F67:      	rets
            
            ; ~~ --------------------------
            ; int get_IntVect(int value)
            get_IntVect:
00F68:      	AR=		io[IntVect]
00F69:      	AX=		AR
00F6A:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PA(int value)
            get_IOC_PA:
00F6B:      	AR=		io[IOC_PA]
00F6C:      	AX=		AR
00F6D:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PB(int value)
            get_IOC_PB:
00F6E:      	AR=		io[IOC_PB]
00F6F:      	AX=		AR
00F70:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PC(int value)
            get_IOC_PC:
00F71:      	AR=		io[IOC_PC]
00F72:      	AX=		AR
00F73:      	rets
            
            ; ~~ --------------------------
            ; int get_PortA(int value)
            get_PortA:
00F74:      	AR=		io[PortA]
00F75:      	AX=		AR
00F76:      	rets
            
            ; ~~ --------------------------
            ; int get_PortB(int value)
            get_PortB:
00F77:      	AR=		io[PortB]
00F78:      	AX=		AR
00F79:      	rets
            
            
            ; ~~ --------------------------
            ; int get_PortC(int value)
            get_PortC:
00F7A:      	AR=		io[PortC]
00F7B:      	AX=		AR
00F7C:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_CTL(int value)
            set_SPI_CTL:
00F7D:      	AR=		BP
00F7E:      	AR=		AR + 1		; ~~ value
00F7F:      	I1=		AR
00F80:      	AR=		rm[I1]
00F81:      	io[SPI_CTL]=	AR
00F82:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_CTL(int value)
            get_SPI_CTL:
00F83:      	AR=		io[SPI_CTL]
00F84:      	AX=		AR
00F85:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_DAT(int value)
            set_SPI_DAT:
00F86:      	AR=		BP
00F87:      	AR=		AR + 1		; ~~ value
00F88:      	I1=		AR
00F89:      	AR=		rm[I1]
00F8A:      	io[SPI_DAT]=	AR
00F8B:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_DAT(int value)
            get_SPI_DAT:
00F8C:      	AR=		io[SPI_DAT]
00F8D:      	AX=		AR
00F8E:      	rets
            
            
            ; ~~ --------------------------
            ; void set_MISC(int value)
            set_MISC:
00F8F:      	AR=		BP
00F90:      	AR=		AR + 1		; ~~ value
00F91:      	I1=		AR
00F92:      	AR=		rm[I1]
            	;~ io[0x1C]	=AR
00F93:      	rets
            
            ; ~~ --------------------------
            ; int get_MISC(int value)
            get_MISC:
00F94:      	AR=		io[MISC]
00F95:      	AX=		AR
00F96:      	rets
            
            ; ~~ --------------------------
            ; int get_Real_T(int value)
            get_Real_T:
            	;~ AR=		io[0x1D]
00F97:      	AX=		AR
00F98:      	rets
            
            
            ; ~~ --------------------------
            ; int get_MACOP(void)
            get_MACOP:
00F99:      	AR=		MACOP
00F9A:      	AX=		AR
00F9B:      	rets
            
            
            ; ~~ --------------------------
            ; void set_INTMASK(int value)
            ; set_INTMASK:
            	; AR=			BP
            	; AR=			AR + 1		; ~~ value
            	; I1=			AR
            	; AR=			rm[I1]
            	; io[INTMASK]=AR
            	; rets
            
            ; ~~ --------------------------
            ; int get_INTMASK(int value)
            ; get_INTMASK:
            	; AR=			io[INTMASK]
            	; AX=			AR
            	; rets
            
            ; ~~ --------------------------
            ; int vXCHG(int value)
            vXCHG:
00F9C:      	AR=		BP
00F9D:      	AR=		AR + 1
00F9E:      	I1=		AR
00F9F:      	AR=		rm[I1]
00FA0:      	xchg		AR
00FA1:      	AX=		AR
00FA2:      	rets
            
            ; ~~ --------------------------
            ; void cpuHalt(void)
            cpuHalt:
00FA3:      	halt
            
            
            #ifdef _MFDSP_
            
            ; ~~ --------------------------
            ; void setSystemSpeed(int value)
            set_SystemSpeed:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPEED]=	AR
            	rets
            
            
            ; ~~ --------------------------
            ; void set_SD_CTL(int value)
            set_SD_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_CTL(int value)
            get_SD_CTL:
            	AR=		io[SD_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_DAT(int value)
            set_SD_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_DAT(void)
            get_SD_DAT:
            	AR=		io[SD_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_RSP(int value)
            set_SD_RSP:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_RSP]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_RSP(int value)
            get_SD_RSP:
            	AR=		io[SD_RSP]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_CTL(int value)
            set_UART_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_CTL(int value)
            get_UART_CTL:
            	AR=		io[UART_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_DAT(int value)
            set_UART_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_DAT(int value)
            get_UART_DAT:
            	AR=		io[UART_DAT]
            	AX=		AR
            	rets
            
            
            ; By Tsao	20161103
            
            ; ~~ --------------------------
            ; void set_ADH_CFG0(int value)
            set_ADH_CFG0:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG0]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG0(void)
            get_ADH_CFG0:
            	AR=		io[ADH_CFG0]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_ADH_CFG1(int value)
            set_ADH_CFG1:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG1]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG1(void)
            get_ADH_CFG1:
            	AR=		io[ADH_CFG1]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_DO(void)
            get_ADH_DO:
            	AR=		io[ADH_DO]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_CTL(int value)
            set_SPIS_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_CTL(int value)
            get_SPIS_CTL:
            	AR=		io[SPIS_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_DAT(int value)
            set_SPIS_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_DAT(int value)
            get_SPIS_DAT:
            	AR=		io[SPIS_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_GreenMode(int value)
            set_GreenMode:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[GREEN]=	AR
            	rets
            
            ; ~~ --------------------------
            ; void cpuStall(int value)
            cpuStall:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SLEEP]=	AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_CTL:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_CTL]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_CTL:
            	AR=		io[SPI_DMA_CTL]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_RADR:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_RADR]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_RADR:
            	AR=		io[SPI_DMA_RADR]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_DMANUM:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[0x55]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_DMANUM:
            	AR=		io[SPI_DMA_DMANUM]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            #endif
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_I0:
00FA4:      	AX=		rm[I0]
00FA5:      	rets
            
            read_I0P:
00FA6:      	AX=		rm[I0++]
00FA7:      	rets
            
            read_I0P2:
00FA8:      	AX=		rm[I0++2]
00FA9:      	rets
            
            read_I0M:
00FAA:      	AX=		rm[I0--]
00FAB:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_I0:
00FAC:      	AR=		I0
00FAD:      	AX=		AR
00FAE:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_P0:
00FAF:      	AX=		pm[P0]
00FB0:      	rets
            
            read_P0P:
00FB1:      	AX=		pm[P0++]
00FB2:      	rets
            
            read_P0M:
00FB3:      	AX=		pm[P0--]
00FB4:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_P0:
00FB5:      	AR=		P0
00FB6:      	AX=		AR
00FB7:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            FA:
00FB8:      	AX=		1
00FB9:      	if FA jmp	@fa_label_1504
00FBA:      	AX=		0
            @fa_label_1504:
00FBB:      	rets
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> Start=========================
            _lptr_read:
00FBC:      	AR=		DX
00FBD:      	test		AR.b11
00FBE:      	if ZR jmp	@_lptr_read_label_1510
            
00FBF:      	P1.hh=		AR
00FC0:      	AR=		AX
00FC1:      	P1=		AR
00FC2:      	AX=		pm[P1]
00FC3:      	P1.hh=		0
00FC4:      	rets
            
            @_lptr_read_label_1510:
            
00FC5:      	AR=		AX
00FC6:      	I1=		AR
00FC7:      	AX=		rm[I1]
00FC8:      	rets
            
            
            _lptr_read32:
00FC9:      	AR=		DX
00FCA:      	test		AR.b11
00FCB:      	if ZR jmp	@_lptr_read_label_1510_32
            
00FCC:      	P1.hh=		AR
00FCD:      	AR=		AX
00FCE:      	P1=		AR
00FCF:      	AX=		pm[P1++]
00FD0:      	DX=		pm[P1]
00FD1:      	P1.hh=		0
00FD2:      	rets
            
            @_lptr_read_label_1510_32:
            
00FD3:      	AR=		AX
00FD4:      	I1=		AR
00FD5:      	AX=		rm[I1++]
00FD6:      	DX=		rm[I1]
00FD7:      	rets
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> Start=========================
            
            
            _ClearTickCount5DDE4003:
            #ifdef _MFDSP_
            	set		io[MISC].b8
            #else
00FD8:      	set		io[MISC].b7
            #endif
00FD9:      	set		io[MISC].b15
            	
00FDA:      	io[REAL_T]=	AR
00FDB:      	AR=		io[REAL_T]
00FDC:      	AR=		io[REAL_T]
00FDD:      	io[REAL_T]=	AR
00FDE:      	rets
            
            ; -----------------------------------------------
            
            _GetTickCount18DC070C:
00FDF:      	AX=		0xFFF0
            @gettickcount_loop_1000:
00FE1:      	io[ClrWDT]=	AR
00FE2:      	AR=		io[REAL_T]
00FE3:      	AR=		AR & AX
00FE4:      	SF=		AR - AX
00FE5:      	if ZR jmp	@gettickcount_loop_1000
00FE6:      	AX=		AR
00FE7:      	AR=		io[REAL_T]
00FE8:      	DX=		AR
00FE9:      	rets
            
            	
            ; -----------------------------------------------
            ; void delay(int ms)
            ;
            ; in:
            ;     BP + 1 - int ms
            ;
            ; -----------------------------------------------
            _delay6F9F34ED:
            ; {
00FEA:      	AR=		BP
00FEB:      	AR=		AR + 1		; ~~ port
00FEC:      	I1=		AR
            
            	; unsigned long tick;
            	; unsigned long msr;
            
            	; ~~ 1ms = 32768 ticks
            
            	; msr = (unsigned long)ms << 15;
00FED:      		R0=		0
00FEE:      		R1=		rm[I1]
00FEF:      		clr		C
00FF0:      		src		R1, 1
00FF1:      		src		R0, 1
            	
            	; tick = GetTickCount();
00FF2:      		call		_GetTickCount18DC070C
00FF3:      		AR=		AX
00FF4:      		CX=		AR
00FF5:      		AR=		DX
00FF6:      		BX=		AR
            	
            	; while((GetTickCount() - tick) < msr);
            	@delay_loop_1024:
00FF7:      		call		_GetTickCount18DC070C
00FF8:      		AR=		CX
00FF9:      		AX=		AX - AR
00FFA:      		AR=		BX
00FFB:      		DX=		DX - AR + C - 1
00FFC:      		AR=		R0
00FFD:      		AX=		AX - AR
00FFE:      		AR=		R1
00FFF:      		DX=		DX - AR + C - 1
01000:      		AR=		0
01001:      		AR=		AR - 0 + C - 1
01002:      		if AN jmp	@delay_loop_1024
            
01003:      	rets
            ; }
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> Start=========================
            ; .\lib\libsubb3\sub3_cshell.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3_cshell_257767F9_s(void)
            ginit_code_sub3_cshell_257767F9_s:
            ; //{
            ; //	return;					
01004:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //	nop
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> End=========================
            
            ;
            #LINKOBJ ".\LIB\LIBSUBB3\SBB3_CH0DECV05.OBJ"
            ;
            
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> Start=========================
            
            
            #ifdef _MSPEECHDSP_
            
            Subb3_Init:
            	PCH=            SDSP_Sbb3_Ch0InitV05
            	lcall           SDSP_Sbb3_Ch0InitV05
            	rets
            
            Subb3_Dec:
            	PCH=		SDSP_Sbb3_Ch0decV05
            	lcall		SDSP_Sbb3_Ch0decV05
                    AX=		0
                    if NZ jmp	@sdsp_sbb2_ch0dec_a
                    AX=		1
            @sdsp_sbb2_ch0dec_a:
            	rets
            	
            #else
            
            Subb3_Init:
03350:      	PCH=            Sbb3_Ch0InitV05
03351:      	lcall           Sbb3_Ch0InitV05
03352:      	rets
            
            Subb3_Dec:
03353:      	PCH=		Sbb3_Ch0decV05
03354:      	lcall		Sbb3_Ch0decV05
03355:              AX=		0
03356:              if NZ jmp	@sdsp_sbb2_ch0dec_a
03357:              AX=		1
            @sdsp_sbb2_ch0dec_a:
03358:      	rets
            	
            #endif
            
            
            
            	
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> End=========================
            
            ;=========================Include <DEPS\D58805FB_GINIT.S.CODE.ASM> Start=========================
            ; D58805FB_ginit.s.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code(void)			
            ginit_code:
            ; //{
            ; //	ginit_code_655_99B6FC89_s();		
03359:      	pch	= ginit_code_655_99B6FC89_s
0335A:      	lcall	ginit_code_655_99B6FC89_s
            ; //	ginit_code_WS2811_02F950F9_s();		
0335B:      	pch	= ginit_code_WS2811_02F950F9_s
0335C:      	lcall	ginit_code_WS2811_02F950F9_s
            ; //	ginit_code_global_6037E6D5_s();		
0335D:      	pch	= ginit_code_global_6037E6D5_s
0335E:      	lcall	ginit_code_global_6037E6D5_s
            ; //	ginit_code_sub3play_8ED4FA41_s();	
0335F:      	pch	= ginit_code_sub3play_8ED4FA41_s
03360:      	lcall	ginit_code_sub3play_8ED4FA41_s
            ; //	ginit_code_sub3_cshell_257767F9_s();	
03361:      	pch	= ginit_code_sub3_cshell_257767F9_s
03362:      	lcall	ginit_code_sub3_cshell_257767F9_s
            ; //	return;					
03363:      	rets
            ; //}
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\D58805FB_GINIT.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> Start=========================
            
            
            ; ~~ CRT0 support functions
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GLOBALINIT(void)
            ; void sfx_LOCALINIT(void)
            ;
            ; in:
            ;     I1	- pointer to SRAM initial value
            ;     P1	- pointer to PROM initial data
            ;     CX	- total count (word)
            ;
            ; out:
            ;     none
            ;
            ; --------------------------------------------
            sfx_GLOBALINIT:
            sfx_LOCALINIT:
03364:      	P1.hh=		0
03365:      	jmp		@glinit_label_1409
            @glinit_loop_1409:
03366:      	AR=		pm[P1++]
03367:      	rm[I1++]=	AR
            @glinit_label_1409:
03368:      	loop		@glinit_loop_1409
03369:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MUL_AX_CX(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MUL_AX_CX:
            
0336A:      	AR=		AX
0336B:      	MX=		AR
0336C:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0336D:      	MACOP=		3
0336E:      	MR=		MX * AR
            #endif
            
0336F:      	AR=		MR0
03370:      	AX=		AR
03371:      	AR=		MR1
03372:      	DX=		AR
03373:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMUL_AX_CX(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMUL_AX_CX:
            
03374:      	AR=		AX
03375:      	MX=		AR
03376:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
03377:      	MACOP=		0
03378:      	MR=		MX * AR
            #endif
            
03379:      	AR=		MR0
0337A:      	AX=		AR
0337B:      	AR=		MR1
0337C:      	DX=		AR
0337D:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMULLONG(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMULLONG:
0337E:      	AR=		rm[BP_SAVE]
0337F:      	push		AR
03380:      	AR=		BP
03381:      	rm[BP_SAVE]=	AR
03382:      	AR=		AR - 3
03383:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
03384:      	AR=		CX
03385:      	MX=		AR
03386:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03387:      	MACOP=		3		; unsigned
03388:      	MR=		MX * AR
            #endif
            
03389:      	I1=		rm[BP_SAVE]
0338A:      	AR=		2
0338B:      	I1=		I1 - AR
0338C:      	rm[I1++]=	MR0
0338D:      	rm[I1++]=	MR1
0338E:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
0338F:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUS
            #else
03390:      	MACOP=		1		; mx:unsigned / my:signed
03391:      	MR=		MX * AR
            #endif
            
03392:      	AR=		rm[I1]
03393:      	AR=		AR + MR0
03394:      	rm[I1++]=	AR
03395:      	AR=		rm[I1]
03396:      	AR=		AR + MR1 + C
03397:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
03398:      	AR=		BX
03399:      	MX=		AR
0339A:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULSU
            #else
0339B:      	MACOP=		2		; mx:signed / my:unsigned
0339C:      	MR=		MX * AR
            #endif
            
0339D:      	AR=		rm[I1]
0339E:      	AR=		AR + MR0
0339F:      	rm[I1++]=	AR
033A0:      	AR=		rm[I1]
033A1:      	AR=		AR + MR1 + C
033A2:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
033A3:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
033A4:      	MACOP=		0		; mx:signed / my:signed
033A5:      	MR=		MX * AR
            #endif
            
033A6:      	AR=		rm[I1]
033A7:      	AR=		AR + MR0
033A8:      	rm[I1]=		AR
            
033A9:      	I1=		rm[BP_SAVE]
033AA:      	CX=		rm[I1--]
033AB:      	DX=		rm[I1--]
033AC:      	AX=		rm[I1]
            
033AD:      	AR=		3
033AE:      	BP=		BP + AR
033AF:      	pop		AR
033B0:      	rm[BP_SAVE]=	AR
            
033B1:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MULLONG(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MULLONG:
033B2:      	AR=		rm[BP_SAVE]
033B3:      	push		AR
033B4:      	AR=		BP
033B5:      	rm[BP_SAVE]=	AR
033B6:      	AR=		AR - 3
033B7:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
033B8:      	AR=		CX
033B9:      	MX=		AR
033BA:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033BB:      	MACOP=		3		; unsigned
033BC:      	MR=		MX * AR
            #endif
            
033BD:      	I1=		rm[BP_SAVE]
033BE:      	AR=		2
033BF:      	I1=		I1 - AR
033C0:      	rm[I1++]=	MR0
033C1:      	rm[I1++]=	MR1
033C2:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
033C3:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033C4:      	MR=		MX * AR
            #endif
            
033C5:      	AR=		rm[I1]
033C6:      	AR=		AR + MR0
033C7:      	rm[I1++]=	AR
033C8:      	AR=		rm[I1]
033C9:      	AR=		AR + MR1 + C
033CA:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
033CB:      	AR=		BX
033CC:      	MX=		AR
033CD:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033CE:      	MR=		MX * AR
            #endif
            
033CF:      	AR=		rm[I1]
033D0:      	AR=		AR + MR0
033D1:      	rm[I1++]=	AR
033D2:      	AR=		rm[I1]
033D3:      	AR=		AR + MR1 + C
033D4:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
033D5:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
033D6:      	MR=		MX * AR
            #endif
            
033D7:      	AR=		rm[I1]
033D8:      	AR=		AR + MR0
033D9:      	rm[I1]=		AR
            
033DA:      	I1=		rm[BP_SAVE]
033DB:      	CX=		rm[I1--]
033DC:      	DX=		rm[I1--]
033DD:      	AX=		rm[I1]
            
033DE:      	AR=		3
033DF:      	BP=		BP + AR
033E0:      	pop		AR
033E1:      	rm[BP_SAVE]=	AR
            
033E2:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIV_AX_CX(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIV_AX_CX:
            	; unsigned int reste = 0;
033E3:      		DX=		0
            	; unsigned char count = 16;
033E4:      		R0=		16
            	; BOOL c;
            
            	; do
            	@divword_loop_1824:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
033E5:      			slz		AX, 1
            		; reste <<= 1;
033E6:      			slc		DX, 1
            
            		; if (c)
            		; {
            			; reste |= 1;
            		; }
            		@divword_label_1822:
            
            		; if (reste >= y)
033E7:      			AR=		DX
033E8:      			AR-=		CX
033E9:      			AR=		0
033EA:      			AR=		AR - 0 + C - 1
033EB:      			if AN jmp	@divword_label_1823
            		; {
            			; reste -= y;
033EC:      				AR=		CX
033ED:      				DX=		DX - AR
            			; ~~ x <- (result = 1)
            			; x |= 1;
033EE:      				set		AX.b0
            		; }
            		@divword_label_1823:
            
033EF:      		R0--
033F0:      		if NZ jmp	@divword_loop_1824
            	; }while (--count);
            
            	; return x;
033F1:      		rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIV_AX_CX(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIV_AX_CX:
            
            	; register int r;
            
            	; r = sfx_DIV_AX_CX((x < 0 ? -x : x), (y < 0 ? -y : y));
033F2:      		R1=		0
033F3:      		AR=		0
033F4:      		test		AX.b15
033F5:      		if ZR jmp	@divsword_label_1833
033F6:      			AX=		AR - AX
033F7:      			set		R1.b0
            		@divsword_label_1833:
033F8:      		test		CX.b15
033F9:      		if ZR jmp	@divsword_label_1834
033FA:      			CX=		AR - CX
033FB:      			set		R1.b1
            		@divsword_label_1834:
033FC:      		call		sfx_DIV_AX_CX
            
            	; if ((x < 0) ^ (y < 0))
033FD:      		AR=		R1
033FE:      		slz		AR, 1
033FF:      		AR^=		R1
03400:      		test		AR.b1
03401:      		if ZR jmp	@divsword_label_1835
            	; {
            		; return (0 - r);
03402:      			AR=		0
03403:      			AX=		AR - AX
03404:      			DX=		AR - DX
            
            	; }
            	@divsword_label_1835:
            
            	; return r;
03405:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIVLONG(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIVLONG:
            	; unsigned long reste = 0L;
03406:      		R0=		0	; L
03407:      		R1=		0	; H
            	; unsigned char count = 32;
03408:      		R2=		32
            	; BOOL c;
            
            	; do
            	@divulong_loop_1723:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
03409:      			slz		AX, 1
0340A:      			slc		DX, 1
            		; reste <<= 1;
0340B:      			slc		R0, 1
0340C:      			slc		R1, 1
            
            		; if (c)
            		; {
            			; reste |= 1L;
            		; }
            		@divulong_label_1726:
            
            		; if (reste >= y)
0340D:      			AR=		R0
0340E:      			AR-=		CX
0340F:      			AR=		R1
03410:      			AR=		AR - BX + C - 1
03411:      			if AN jmp	@divulong_label_1734
            		; {
            			; reste -= y;
03412:      				AR=		CX
03413:      				R0=		R0 - AR
03414:      				AR=		BX
03415:      				R1=		R1 - AR + C - 1
            			; ~~ x <- (result = 1)
            			; x |= 1L;
03416:      				set		AX.b0
            		; }
            		@divulong_label_1734:
            
03417:      		R2--
03418:      		if NZ jmp	@divulong_loop_1723
            	; }while (--count);
            
            	; return x;
03419:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIVLONG(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     BX:DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIVLONG:
            	; long r;
            
            	; r = divulong((x < 0 ? -x : x), (y < 0 ? -y : y));
0341A:      		R3=		0
0341B:      		AR=		0
0341C:      		test		DX.b15
0341D:      		if ZR jmp	@divslong_label_1759
0341E:      			AX=		AR - AX
0341F:      			DX=		AR - DX + C - 1
03420:      			set		R3.b0
            		@divslong_label_1759:
03421:      		test		BX.b15
03422:      		if ZR jmp	@divslong_label_1800
03423:      			CX=		AR - CX
03424:      			BX=		AR - BX + C - 1
03425:      			set		R3.b1
            		@divslong_label_1800:
03426:      		call		sfx_DIVLONG
            
            	; if ((x < 0) ^ (y < 0))
03427:      		AR=		R3
03428:      		slz		AR, 1
03429:      		AR^=		R3
0342A:      		test		AR.b1
0342B:      		if ZR jmp	@divslong_label_1807
            	; {
            		; return -r;
0342C:      			AR=		0
0342D:      			AX=		AR - AX
0342E:      			DX=		AR - DX + C - 1
0342F:      			R0=		AR - R0
03430:      			R1=		AR - R1 + C - 1
            
            	; }
            	@divslong_label_1807:
            
            	; return r;
03431:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MOD_AX_CX(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_MOD_AX_CX:
03432:      	call		sfx_DIV_AX_CX
03433:      	AR=		DX
03434:      	AX=		AR
03435:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMOD_AX_CX(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMOD_AX_CX:
03436:      	call		sfx_IDIV_AX_CX
03437:      	AR=		DX
03438:      	AX=		AR
03439:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MODLONG(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_MODLONG:
0343A:      	call		sfx_DIVLONG
0343B:      	AR=		R0
0343C:      	AX=		AR
0343D:      	AR=		R1
0343E:      	DX=		AR
0343F:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMODLONG(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMODLONG:
03440:      	call		sfx_IDIVLONG
03441:      	AR=		R0
03442:      	AX=		AR
03443:      	AR=		R1
03444:      	DX=		AR
03445:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG:
            	; AR=		CX
            	; AX=		AX + AR
            	; AR=		BX
            	; DX=		DX + AR + C
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG_BXCX_DXAX(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG_BXCX_DXAX:
            	; AR=		AX
            	; CX=		CX + AR
            	; AR=		DX
            	; BX=		BX + AR + C
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBLONG(void)
            ;
            ; note:
            ;     signed sub
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SUBLONG:
            	; AR=		CX
            	; AX=		AX - AR
            	; AR=		BX
            	; DX=		DX - AR + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDDIOFS(void)
            ;
            ; note:
            ;     add P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDDIOFS:
03446:      	AR=		AX
03447:      	P1=		P1 + AR
03448:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDSIOFS(void)
            ;
            ; note:
            ;     add I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDSIOFS:
03449:      	AR=		AX
0344A:      	I1=		I1 + AR
0344B:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDAXOFS(void)
            ;
            ; note:
            ;     add AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_ADDAXOFS:
0344C:      	AR=		CX
0344D:      	AX=		AX + AR
0344E:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBDIOFS(void)
            ;
            ; note:
            ;     sub P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBDIOFS:
0344F:      	AR=		AX
03450:      	P1=		P1 - AR
03451:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBSIOFS(void)
            ;
            ; note:
            ;     sub I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBSIOFS:
03452:      	AR=		AX
03453:      	I1=		I1 - AR
03454:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBAXOFS(void)
            ;
            ; note:
            ;     sub AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_SUBAXOFS:
03455:      	AR=		CX
03456:      	AX=		AX + AR
03457:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_DXAX(void)
            ;
            ; note:
            ;     load long data from PROM to DX:AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG:
            ; sfx_GETDILONG_DXAX:
            	; AX=		pm[P1++]
            	; DX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_BXCX(void)
            ;
            ; note:
            ;     load long data from PROM to BX:CX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG_BXCX:
            	; CX=		pm[P1++]
            	; BX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_DXAX(void)
            ; void sfx_GETSILONG_DXAX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to DX:AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG:
            ; sfx_GETSILONG_D:
            ; sfx_GETSILONG_DXAX:
            ; sfx_GETSILONG_DXAX_D:
            	; AX=		rm[I1++]
            	; DX=		rm[I1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_BXCX(void)
            ; void sfx_GETSILONG_BXCX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to BX:CX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG_BXCX:
            ; sfx_GETSILONG_BXCX_D:
            	; CX=		rm[I1++]
            	; BX=		rm[I1--]
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ANDLONG(void)
            ;
            ; note:
            ;     AND two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ANDLONG:
            	; AR=		CX
            	; AX=		AX & AR
            	; AR=		BX
            	; DX=		DX & AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ORLONG(void)
            ;
            ; note:
            ;     OR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ORLONG:
            	; AR=		CX
            	; AX=		AX | AR
            	; AR=		BX
            	; DX=		DX | AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XORLONG(void)
            ;
            ; note:
            ;     XOR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_XORLONG:
            	; AR=		CX
            	; AX=		AX ^ AR
            	; AR=		BX
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHL_AX_CX(void)
            ;
            ; note:
            ;     left shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHL_AX_CX:
            	; jmp		@shlac_label_1653
            ; @shlac_loop_1653:
            	; slz		AX, 1
            ; @shlac_label_1653:
            	; loop		@shlac_loop_1653
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SHLLONG(void)
            ;
            ; note:
            ;     left shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHLLONG:
            	; jmp		@shllong_label_1653
            ; @shllong_loop_1653:
            	; slz		AX, 1
            	; slc		DX, 1
            ; @shllong_label_1653:
            	; loop		@shllong_loop_1653
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX_CX(void)
            ;
            ; note:
            ;     unsigned right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX_CX:
            	; jmp		@shrac_label_1657
            ; @shrac_loop_1657:
            	; clr		C
            	; src		AX, 1
            ; @shrac_label_1657:
            	; loop		@shrac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX_CX(void)
            ;
            ; note:
            ;     signed right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX_CX:
            	; jmp		@sarac_label_1657
            ; @sarac_loop_1657:
            	; sra		AX, 1
            ; @sarac_label_1657:
            	; loop		@sarac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SARLONG(void)
            ;
            ; note:
            ;     signed right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SARLONG:
            	; jmp		@sarlong_label_1657
            ; @sarlong_loop_1657:
            	; sra		DX, 1
            	; src		AX, 1
            ; @sarlong_label_1657:
            	; loop		@sarlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHRLONG(void)
            ;
            ; note:
            ;     unsigned right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- ulong data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHRLONG:
            	; jmp		@shrlong_label_1657
            ; @shrlong_loop_1657:
            	; clr		C
            	; src		DX, 1
            	; src		AX, 1
            ; @shrlong_label_1657:
            	; loop		@shrlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX(void)
            ;
            ; note:
            ;     unsigned right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX:
            	; clr		C
            	; src		AX, 1
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX(void)
            ;
            ; note:
            ;     signed right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX:
            	; sra		AX, 1
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG(void)
            ; void sfx_STORSILONG_D(void)		; for function's parameter
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG:
            ; sfx_STORSILONG_D:
            	; rm[I1++]=	AX
            	; rm[I1--]=	DX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG_BXCX(void)
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG_BXCX:
            	; rm[I1++]=	CX
            	; rm[I1--]=	BX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG:
03458:      	pm[P1++]=	AX
03459:      	pm[P1--]=	DX
0345A:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG_BXCX:
0345B:      	pm[P1++]=	CX
0345C:      	pm[P1--]=	BX
0345D:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CX to BX
            ;
            ; in:
            ;     CX	- signed short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_CX:
            ; sfx_INT2ULONG_CX:
            	; BX=		0
            	; test		CX.b15
            	; if ZR jmp	@i2lcx_label_1756
            	; BX=		-1
            ; @i2lcx_label_1756:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_CX(void)
            ;
            ; note:
            ;     convert short unsigned value CX to long (BX:CX)
            ;
            ; in:
            ;     CX	- unsigned short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_CX:
            ; sfx_UINT2ULONG_CX:
            	; BX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CL to BX:CH
            ;
            ; in:
            ;     CX	- signed char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_CX:
0345E:      	BX=		0
0345F:      	CX.h=		0
03460:      	test		CX.b7
03461:      	if ZR jmp	@c2lcx_label_1800
03462:      	CX.h=		0xFF
03463:      	BX=		-1
            @c2lcx_label_1800:
03464:      	rets
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_CX(void)
            ;
            ; note:
            ;     convert unsigned char value CL to long (BX:CX)
            ;
            ; in:
            ;     CL	- unsigned char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_CX:
            	; CX.h=		0
            	; BX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AX to DX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_AX:
            ; sfx_INT2ULONG_AX:
            	; DX=		0
            	; test		AX.b15
            	; if ZR jmp	@i2lax_label_1756
            	; DX=		-1
            ; @i2lax_label_1756:
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_AX(void)
            ;
            ; note:
            ;     convert short unsigned value AX to long (DX:AX)
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_AX:
            ; sfx_UINT2ULONG_AX:
            	; DX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AL to DX:AH
            ;
            ; in:
            ;     AX	- signed char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_AX:
03465:      	DX=		0
03466:      	AX.h=		0
03467:      	test		AX.b7
03468:      	if ZR jmp	@c2lax_label_1800
03469:      	AX.h=		0xFF
0346A:      	DX=		-1
            @c2lax_label_1800:
0346B:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_AX(void)
            ;
            ; note:
            ;     convert unsigned char value AL to long (DX:AX)
            ;
            ; in:
            ;     AL	- unsigned char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_AX:
            	; AX.h=		0
            	; DX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CALL_BY_AX(void)
            ;
            ; note:
            ;     call sub routine in AX (address)
            ;
            ; in:
            ;     AX	- sub routine address
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_CALL_BY_AX:
            	; AR=		AX
            	; P1=		AR
            	; P1.hh=		0
            	; fjmp		pm[P1]
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHG_AX_CX(void)
            ;
            ; note:
            ;     exchange AX CX value
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; result:
            ;     AX <-> CX
            ;
            ; --------------------------------------------
            ; sfx_XCHG_AX_CX:
            	; push		AX
            	; push		CX
            	; pop		AX
            	; pop		CX
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHGLONG(void)
            ;
            ; note:
            ;     exchange DX:AX BX:CX value
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; result:
            ;     DX:AX <-> BX:CX
            ;
            ; --------------------------------------------
            sfx_XCHGLONG:
0346C:      	push		AX
0346D:      	push		CX
0346E:      	pop		AX
0346F:      	pop		CX
03470:      	push		DX
03471:      	push		BX
03472:      	pop		DX
03473:      	pop		BX
03474:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEG_AX(void)
            ;
            ; note:
            ;     negative AX
            ;
            ; in:
            ;     AX	- operator 1
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEG_AX:
            	; AR=		0
            	; AX=		AR - AX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEGLONG(void)
            ;
            ; note:
            ;     negative DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEGLONG:
            	; AR=		0
            	; AX=		AR - AX
            	; DX=		AR - DX + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOT_AX(void)
            ;
            ; note:
            ;     not AX
            ;
            ; in:
            ;     AX	- operator
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOT_AX:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOTLONG(void)
            ;
            ; note:
            ;     not DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOTLONG:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOT_AX(void)
            ;
            ; note:
            ;     logical NOT
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_LOGNOT_AX:
            	;; x86 code
            	;;   neg AX
            	;;   sbb AX,AX
            	;;   inc AX
            	; AR=		0
            	; AR=		AR - AX
            	; AX=		AR
            	; AX=		AR - AX + C - 1
            	; AX++
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOTLONG(void)
            ;
            ; note:
            ;     logical NOT (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            sfx_LOGNOTLONG:
            	; x86 code
            	;   neg AX
            	;   sbb AX,AX
            	;   inc AX
03475:      	AR=		DX
03476:      	DX=		0
03477:      	AR=		AR | AX
03478:      	AX=		1
03479:      	if ZR jmp	@longnotl_label_1120
0347A:      	AX=		0
            @longnotl_label_1120:
0347B:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOL_AX(void)
            ;
            ; note:
            ;     logical BOOL
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOL_AX:
            	;; x86 code
            	;;   neg ax
            	;;   sbb ax,ax
            	;;   neg ax
            	; AR=		AX
            	; AX=		0
            	; if ZR jmp	@boolax_label_1758
            	; AX=		1
            ; @boolax_label_1758:
            	; rets
            	
            	; AR=		-1
            	; AR=		AR + AX
            	; AX=		0
            	; AX += C
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOLLONG(void)
            ;
            ; note:
            ;     logical BOOL (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOLLONG:
            	; AR=		DX
            	; DX=		0
            	; AR=		AR | AX
            	; AX=		0
            	; if ZR jmp	@boollong_label_1801
            	; AX=		1
            ; @boollong_label_1801:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INITSISTOR(void)
            ;
            ; note:
            ;     for used in global/local variable initial
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     I1 + 1
            ;
            ; --------------------------------------------
            ; sfx_INITSISTOR:
            	; rm[I1++]=	AX
            	; rets
            
            ; --------------------------------------------
            
            ; sfx_INITSISTORLONG:
            	; rm[I1++]=	AX
            	; rm[I1++]=	DX
            	; rets
            
            
            ; ~~ condition assistant functions ~~
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; JNE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            sfx_CMP_AX_CX_U_JNE:
0347C:      	DX=		0
0347D:      	BX=		0
            sfx_CMPLONG_JNE:
0347E:      	AR=		CX
0347F:      	AX=		AX - AR
03480:      	AR=		BX
03481:      	AR=		DX - AR + C - 1
03482:      	AR=		AR | AX
03483:      	if EQ jmp	@sfx_cl_jne_f
03484:      	set		Z		; true
03485:      	rets
            @sfx_cl_jne_f:
03486:      	clr		Z		; false
03487:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JNE:
03488:      	DX=		0
03489:      	BX=		0
            sfx_CMPLONG_BCDA_JNE:
0348A:      	AR=		AX
0348B:      	CX=		CX - AR
0348C:      	AR=		DX
0348D:      	AR=		BX - AR + C - 1
0348E:      	AR=		AR | CX
0348F:      	if EQ jmp	@sfx_clbcda_jne_f
03490:      	set		Z		; true
03491:      	rets
            @sfx_clbcda_jne_f:
03492:      	clr		Z		; false
03493:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JNE:
03494:      	AR=		CX
03495:      	SF=		AX - AR
03496:      	if EQ jmp	@sfx_ac_jne_f
03497:      	set		Z
03498:      	rets
            @sfx_ac_jne_f:
03499:      	clr		Z
0349A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JNE:
0349B:      	AR=		AX
0349C:      	SF=		CX - AR
0349D:      	if EQ jmp	@sfx_ca_jne_f
0349E:      	set		Z
0349F:      	rets
            @sfx_ca_jne_f:
034A0:      	clr		Z
034A1:      	rets
            
            
            
            ; JE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            
            
            sfx_CMP_AX_CX_U_JE:
034A2:      	DX=		0
034A3:      	BX=		0
            sfx_CMPLONG_JE:
034A4:      	AR=		CX
034A5:      	AX=		AX - AR
034A6:      	AR=		BX
034A7:      	AR=		DX - AR + C - 1
034A8:      	AR=		AR | AX
034A9:      	if NE jmp	@sfx_cl_jz_f
034AA:      	set		Z		; true
034AB:      	rets
            @sfx_cl_jz_f:
034AC:      	clr		Z		; false
034AD:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JE:
034AE:      	DX=		0
034AF:      	BX=		0
            sfx_CMPLONG_BCDA_JE:
034B0:      	AR=		AX
034B1:      	CX=		CX - AR
034B2:      	AR=		DX
034B3:      	AR=		BX - AR + C - 1
034B4:      	AR=		AR | CX
034B5:      	if NE jmp	@sfx_clbcda_jz_f
034B6:      	set		Z		; true
034B7:      	rets
            @sfx_clbcda_jz_f:
034B8:      	clr		Z		; false
034B9:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JE:
034BA:      	AR=		CX
034BB:      	SF=		AX - AR
034BC:      	if NE jmp	@sfx_ac_je_f
034BD:      	set		Z
034BE:      	rets
            @sfx_ac_je_f:
034BF:      	clr		Z
034C0:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JE:
034C1:      	AR=		AX
034C2:      	SF=		CX - AR
034C3:      	if NE jmp	@sfx_ca_je_f
034C4:      	set		Z
034C5:      	rets
            @sfx_ca_je_f:
034C6:      	clr		Z
034C7:      	rets
            
            
            
            ; JG group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; A - above (unsigned)
            ; G - greater (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JA:
            sfx_CMP_AX_CX_JA:
034C8:      	DX=		0
034C9:      	BX=		0
            sfx_CMPLONG_JG:
034CA:      	AR=		CX
034CB:      	AX=		AX - AR
034CC:      	AR=		BX
034CD:      	AR=		DX - AR + C - 1
034CE:      	if AN jmp	@sfx_cl_jg_f
            
            	; exclude EQU condition
034CF:      	AR=		AR | AX
034D0:      	if ZR jmp	@sfx_cl_jg_f
            
034D1:      	set		Z		; true
034D2:      	rets
            @sfx_cl_jg_f:
034D3:      	clr		Z		; false
034D4:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JA:
034D5:      	AR=		CX
034D6:      	AX=		AX - AR
034D7:      	AR=		BX
034D8:      	DX=		DX - AR + C - 1
034D9:      	AR=		0
034DA:      	AR=		AR - 0 + C - 1
034DB:      	if AN jmp	@sfx_cl_jg_f
            
034DC:      	AR=		AR | DX		; exclude EQU condition
034DD:      	AR=		AR | AX
034DE:      	if ZR jmp	@sfx_cl_jg_f
            
034DF:      	set		Z		; true
034E0:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JA:
            sfx_CMP_CX_AX_JA:
034E1:      	DX=		0
034E2:      	BX=		0
            sfx_CMPLONG_BCDA_JG:
034E3:      	AR=		AX
034E4:      	CX=		CX - AR
034E5:      	AR=		DX
034E6:      	AR=		BX - AR + C - 1
034E7:      	if AN jmp	@sfx_clbcda_jg_f
            
034E8:      	AR=		AR | CX		; exclude EQU condition
034E9:      	if ZR jmp	@sfx_clbcda_jg_f
            
034EA:      	set		Z		; true
034EB:      	rets
            @sfx_clbcda_jg_f:
034EC:      	clr		Z		; false
034ED:      	rets
            
            ; ~~---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JA:
034EE:      	AR=		AX
034EF:      	CX=		CX - AR
034F0:      	AR=		DX
034F1:      	BX=		BX - AR + C - 1
034F2:      	AR=		0
034F3:      	AR=		AR - 0 + C - 1
034F4:      	if AN jmp	@sfx_clbcda_jg_f
            
034F5:      	AR=		AR | BX		; exclude EQU condition
034F6:      	AR=		AR | CX
034F7:      	if ZR jmp	@sfx_clbcda_jg_f
            
034F8:      	set		Z		; true
034F9:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JG:
034FA:      	AR=		CX
034FB:      	SF=		AX - AR
034FC:      	if LE jmp	@sfx_cmp_ac_jg_f
034FD:      	set		Z
034FE:      	rets
            @sfx_cmp_ac_jg_f:
034FF:      	clr		Z
03500:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JG:
03501:      	AR=		AX
03502:      	SF=		CX - AR
03503:      	if LE jmp	@sfx_cmp_ca_jg_f
03504:      	set		Z
03505:      	rets
            @sfx_cmp_ca_jg_f:
03506:      	clr		Z
03507:      	rets
            
            
            ; JGE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JAE:
            sfx_CMP_AX_CX_JAE:
03508:      	DX=		0
03509:      	BX=		0
            sfx_CMPLONG_JGE:
0350A:      	AR=		CX
0350B:      	AX=		AX - AR
0350C:      	AR=		BX
0350D:      	DX=		DX - AR + C - 1
0350E:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
            
0350F:      	set		Z		; true
03510:      	rets
            @sfx_cl_jge_f:
03511:      	clr		Z		; false
03512:      	rets
            
            ; ~~-----------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JAE:
03513:      	AR=		CX
03514:      	AX=		AX - AR
03515:      	AR=		BX
03516:      	DX=		DX - AR + C - 1
03517:      	AR=		0
03518:      	AR=		AR - 0 + C - 1
03519:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
0351A:      	set		Z		; true
0351B:      	rets
            
            ; ---------
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JAE:
            sfx_CMP_CX_AX_JAE:
0351C:      	DX=		0
0351D:      	BX=		0
            sfx_CMPLONG_BCDA_JGE:
0351E:      	AR=		AX
0351F:      	CX=		CX - AR
03520:      	AR=		DX
03521:      	BX=		BX - AR + C - 1
03522:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
            
03523:      	set		Z		; true
03524:      	rets
            @sfx_clbcda_jge_f:
03525:      	clr		Z		; false
03526:      	rets
            
            ; ---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JAE:
03527:      	AR=		AX
03528:      	CX=		CX - AR
03529:      	AR=		DX
0352A:      	BX=		BX - AR + C - 1
0352B:      	AR=		0
0352C:      	AR=		AR - 0 + C - 1
0352D:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
0352E:      	set		Z		; true
0352F:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JGE:
03530:      	AR=		CX
03531:      	SF=		AX - AR
03532:      	if AN jmp	@sfx_cmp_ac_jge_f
03533:      	set		Z
03534:      	rets
            @sfx_cmp_ac_jge_f:
03535:      	clr		Z
03536:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JGE:
03537:      	AR=		AX
03538:      	SF=		CX - AR
03539:      	if AN jmp	@sfx_cmp_ca_jge_f
0353A:      	set		Z
0353B:      	rets
            @sfx_cmp_ca_jge_f:
0353C:      	clr		Z
0353D:      	rets
            
            
            ; JL group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; B - below (unsigned)
            ; L - less (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JB:
            sfx_CMP_AX_CX_JB:
0353E:      	DX=		0
0353F:      	BX=		0
            sfx_CMPLONG_JL:
03540:      	AR=		CX
03541:      	AX=		AX - AR
03542:      	AR=		BX
03543:      	AR=		DX - AR + C - 1
03544:      	if AN jmp	@sfx_cl_jl_chk
            
            @sfx_cl_jl_f:
03545:      	clr		Z		; false
03546:      	rets
            
            @sfx_cl_jl_chk:
03547:      	AR=		AR | AX		; exclude EQU condition
03548:      	if ZR jmp	@sfx_cl_jl_f
03549:      	set		Z
0354A:      	rets
            
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JB:
0354B:      	AR=		CX
0354C:      	AX=		AX - AR
0354D:      	AR=		BX
0354E:      	DX=		DX - AR + C - 1
0354F:      	AR=		0
03550:      	AR=		AR - 0 + C - 1
03551:      	if AN jmp	@sfx_cl_jb_chk
            
            @sfx_cl_jb_f:
03552:      	clr		Z		; false
03553:      	rets
            
            @sfx_cl_jb_chk:
03554:      	AR=		AR | DX
03555:      	AR=		AR | AX		; exclude EQU condition
03556:      	if ZR jmp	@sfx_cl_jb_f
03557:      	set		Z
03558:      	rets
            
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JB:
            sfx_CMP_CX_AX_JB:
03559:      	DX=		0
0355A:      	BX=		0
            sfx_CMPLONG_BCDA_JL:
0355B:      	AR=		AX
0355C:      	CX=		CX - AR
0355D:      	AR=		DX
0355E:      	AR=		BX - AR + C - 1
0355F:      	if AN jmp	@sfx_clbcda_jl_chk
            
            @sfx_clbcda_jl_f:
03560:      	clr		Z		; false
03561:      	rets
            
            @sfx_clbcda_jl_chk:
03562:      	AR=		AR | CX		; exclude EQU condition
03563:      	if ZR jmp	@sfx_clbcda_jl_f
03564:      	set		Z		; true
03565:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JB:
03566:      	AR=		AX
03567:      	CX=		CX - AR
03568:      	AR=		DX
03569:      	BX=		BX - AR + C - 1
0356A:      	AR=		0
0356B:      	AR=		AR - 0 + C - 1
0356C:      	if AN jmp	@sfx_clbcda_jb_chk
            
            @sfx_clbcda_jb_f:
0356D:      	clr		Z		; false
0356E:      	rets
            
            @sfx_clbcda_jb_chk:
0356F:      	AR=		AR | CX
03570:      	AR=		AR | BX
03571:      	if ZR jmp	@sfx_clbcda_jb_f
03572:      	set		Z		; true
03573:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JL:
03574:      	AR=		CX
03575:      	SF=		AX - AR
03576:      	if GE jmp	@sfx_cmp_ac_jl_f
03577:      	set		Z
03578:      	rets
            @sfx_cmp_ac_jl_f:
03579:      	clr		Z
0357A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JL:
0357B:      	AR=		AX
0357C:      	SF=		CX - AR
0357D:      	if GE jmp	@sfx_cmp_ca_jl_f
0357E:      	set		Z
0357F:      	rets
            @sfx_cmp_ca_jl_f:
03580:      	clr		Z
03581:      	rets
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JBE:
            sfx_CMP_AX_CX_JBE:
03582:      	DX=		0
03583:      	BX=		0
            sfx_CMPLONG_JLE:
03584:      	AR=		CX
03585:      	AX=		AX - AR
03586:      	AR=		BX
03587:      	AR=		DX - AR + C - 1
03588:      	if AN jmp	@sfx_cl_jle_t
            
03589:      	AR=		AR | AX		; include EQU condition
0358A:      	if ZR jmp	@sfx_cl_jle_t
            
0358B:      	clr		Z		; false
0358C:      	rets
            @sfx_cl_jle_t:
0358D:      	set		Z		; true
0358E:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JBE:
0358F:      	AR=		CX
03590:      	AX=		AX - AR
03591:      	AR=		BX
03592:      	DX=		DX - AR + C - 1
03593:      	AR=		0
03594:      	AR=		AR - 0 + C - 1
03595:      	if AN jmp	@sfx_cl_jle_t
            
03596:      	AR=		AR | DX
03597:      	AR=		AR | AX
03598:      	if ZR jmp	@sfx_cl_jle_t
            
03599:      	clr		Z		; false
0359A:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JBE:
            sfx_CMP_CX_AX_JBE:
0359B:      	DX=		0
0359C:      	BX=		0
            sfx_CMPLONG_BCDA_JLE:
0359D:      	AR=		AX
0359E:      	CX=		CX - AR
0359F:      	AR=		DX
035A0:      	AR=		BX - AR + C - 1
035A1:      	if AN jmp	@sfx_clbcda_jle_t
            
035A2:      	AR=		AR | CX		; include EQU condition
035A3:      	if ZR jmp	@sfx_clbcda_jle_t
            
035A4:      	clr		Z		; false
035A5:      	rets
            @sfx_clbcda_jle_t:
035A6:      	set		Z		; true
035A7:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JBE:
035A8:      	AR=		AX
035A9:      	CX=		CX - AR
035AA:      	AR=		DX
035AB:      	BX=		BX - AR + C - 1
035AC:      	AR=		0
035AD:      	AR=		AR - 0 + C - 1
035AE:      	if AN jmp	@sfx_clbcda_jle_t
            
035AF:      	AR=		AR | BX
035B0:      	AR=		AR | CX
035B1:      	if ZR jmp	@sfx_clbcda_jle_t
            
035B2:      	clr		Z		; false
035B3:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JLE:
035B4:      	AR=		CX
035B5:      	SF=		AX - AR
035B6:      	if LE jmp	@sfx_cmp_ac_jl_t
035B7:      	clr		Z
035B8:      	rets
            @sfx_cmp_ac_jl_t:
035B9:      	set		Z
035BA:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JLE:
035BB:      	AR=		AX
035BC:      	SF=		CX - AR
035BD:      	if LE jmp	@sfx_cmp_ca_jl_t
035BE:      	clr		Z
035BF:      	rets
            @sfx_cmp_ca_jl_t:
035C0:      	set		Z
035C1:      	rets
            
            
            ; ~!~ bit-field support
            
            @sfx_ortable_0:
035C2:      	DW 0xFFFE
            @sfx_ortable_1:
035C3:      	DW 0xFFFC
            @sfx_ortable_2:
035C4:      	DW 0xFFF8
            @sfx_ortable_3:
035C5:      	DW 0xFFF0
            @sfx_ortable_4:
035C6:      	DW 0xFFE0
            @sfx_ortable_5:
035C7:      	DW 0xFFC0
            @sfx_ortable_6:
035C8:      	DW 0xFF80
            @sfx_ortable_7:
035C9:      	DW 0xFF00
            @sfx_ortable_8:
035CA:      	DW 0xFE00
            @sfx_ortable_9:
035CB:      	DW 0xFC00
            @sfx_ortable_10:
035CC:      	DW 0xF800
            @sfx_ortable_11:
035CD:      	DW 0xF000
            @sfx_ortable_12:
035CE:      	DW 0xE000
            @sfx_ortable_13:
035CF:      	DW 0xC000
            @sfx_ortable_14:
035D0:      	DW 0x8000
            
            ; ~!~
            
            @sfx_orhigh:
035D1:      	AR=		pm[P1]
035D2:      	DX=		DX | AR
035D3:      	rets
            
            @sfx_orhigh_dx:
035D4:      	DX=		-1
            @sfx_orlow:
035D5:      	AR=		pm[P1]
035D6:      	AX=		AX | AR
            @sfx_sextw_rets:
035D7:      	rets
            
            ; ~!~ signed short
            
            sfx_SignExtW0:
035D8:      	P1=		#@sfx_ortable_0
035DB:      	test		AX.b0
035DC:      	if ZR jmp	@sfx_sextw_rets
035DD:      	jmp		@sfx_orlow
            
            sfx_SignExtW1:
035DE:      	P1=		#@sfx_ortable_1
035E1:      	test		AX.b1
035E2:      	if ZR jmp	@sfx_sextw_rets
035E3:      	jmp		@sfx_orlow
            
            sfx_SignExtW2:
035E4:      	P1=		#@sfx_ortable_2
035E7:      	test		AX.b2
035E8:      	if ZR jmp	@sfx_sextw_rets
035E9:      	jmp		@sfx_orlow
            
            sfx_SignExtW3:
035EA:      	P1=		#@sfx_ortable_3
035ED:      	test		AX.b3
035EE:      	if ZR jmp	@sfx_sextw_rets
035EF:      	jmp		@sfx_orlow
            
            sfx_SignExtW4:
035F0:      	P1=		#@sfx_ortable_4
035F3:      	test		AX.b4
035F4:      	if ZR jmp	@sfx_sextw_rets
035F5:      	jmp		@sfx_orlow
            
            sfx_SignExtW5:
035F6:      	P1=		#@sfx_ortable_5
035F9:      	test		AX.b5
035FA:      	if ZR jmp	@sfx_sextw_rets
035FB:      	jmp		@sfx_orlow
            
            sfx_SignExtW6:
035FC:      	P1=		#@sfx_ortable_6
035FF:      	test		AX.b6
03600:      	if ZR jmp	@sfx_sextw_rets
03601:      	jmp		@sfx_orlow
            
            sfx_SignExtW7:
03602:      	P1=		#@sfx_ortable_7
03605:      	test		AX.b7
03606:      	if ZR jmp	@sfx_sextw_rets
03607:      	jmp		@sfx_orlow
            
            sfx_SignExtW8:
03608:      	P1=		#@sfx_ortable_8
0360B:      	test		AX.b8
0360C:      	if ZR jmp	@sfx_sextw_rets
0360D:      	jmp		@sfx_orlow
            
            sfx_SignExtW9:
0360E:      	P1=		#@sfx_ortable_9
03611:      	test		AX.b9
03612:      	if ZR jmp	@sfx_sextw_rets
03613:      	jmp		@sfx_orlow
            
            sfx_SignExtW10:
03614:      	P1=		#@sfx_ortable_10
03617:      	test		AX.b10
03618:      	if ZR jmp	@sfx_sextw_rets
03619:      	jmp		@sfx_orlow
            
            sfx_SignExtW11:
0361A:      	P1=		#@sfx_ortable_11
0361D:      	test		AX.b11
0361E:      	if ZR jmp	@sfx_sextw_rets
0361F:      	jmp		@sfx_orlow
            
            sfx_SignExtW12:
03620:      	P1=		#@sfx_ortable_12
03623:      	test		AX.b12
03624:      	if ZR jmp	@sfx_sextw_rets
03625:      	jmp		@sfx_orlow
            
            sfx_SignExtW13:
03626:      	P1=		#@sfx_ortable_13
03629:      	test		AX.b13
0362A:      	if ZR jmp	@sfx_sextw_rets
0362B:      	jmp		@sfx_orlow
            
            sfx_SignExtW14:
0362C:      	P1=		#@sfx_ortable_14
0362F:      	test		AX.b14
03630:      	if ZR jmp	@sfx_sextw_rets
03631:      	jmp		@sfx_orlow
            
            ; ~!~ signed long
            
            sfx_SignExtL0:
03632:      	P1=		#@sfx_ortable_0
03635:      	test		AX.b0
03636:      	if ZR jmp	@sfx_sextw_rets
03637:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL1:
03638:      	P1=		#@sfx_ortable_1
0363B:      	test		AX.b1
0363C:      	if ZR jmp	@sfx_sextw_rets
0363D:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL2:
0363E:      	P1=		#@sfx_ortable_2
03641:      	test		AX.b2
03642:      	if ZR jmp	@sfx_sextw_rets
03643:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL3:
03644:      	P1=		#@sfx_ortable_3
03647:      	test		AX.b3
03648:      	if ZR jmp	@sfx_sextw_rets
03649:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL4:
0364A:      	P1=		#@sfx_ortable_4
0364D:      	test		AX.b4
0364E:      	if ZR jmp	@sfx_sextw_rets
0364F:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL5:
03650:      	P1=		#@sfx_ortable_5
03653:      	test		AX.b5
03654:      	if ZR jmp	@sfx_sextw_rets
03655:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL6:
03656:      	P1=		#@sfx_ortable_6
03659:      	test		AX.b6
0365A:      	if ZR jmp	@sfx_sextw_rets
0365B:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL7:
0365C:      	P1=		#@sfx_ortable_7
0365F:      	test		AX.b7
03660:      	if ZR jmp	@sfx_sextw_rets
03661:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL8:
03662:      	P1=		#@sfx_ortable_8
03665:      	test		AX.b8
03666:      	if ZR jmp	@sfx_sextw_rets
03667:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL9:
03668:      	P1=		#@sfx_ortable_9
0366B:      	test		AX.b9
0366C:      	if ZR jmp	@sfx_sextw_rets
0366D:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL10:
0366E:      	P1=		#@sfx_ortable_10
03671:      	test		AX.b10
03672:      	if ZR jmp	@sfx_sextw_rets
03673:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL11:
03674:      	P1=		#@sfx_ortable_11
03677:      	test		AX.b11
03678:      	if ZR jmp	@sfx_sextw_rets
03679:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL12:
0367A:      	P1=		#@sfx_ortable_12
0367D:      	test		AX.b12
0367E:      	if ZR jmp	@sfx_sextw_rets
0367F:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL13:
03680:      	P1=		#@sfx_ortable_13
03683:      	test		AX.b13
03684:      	if ZR jmp	@sfx_sextw_rets
03685:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL14:
03686:      	P1=		#@sfx_ortable_14
03689:      	test		AX.b14
0368A:      	if ZR jmp	@sfx_sextw_rets
0368B:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL15:
0368C:      	test		AX.b15
0368D:      	if ZR jmp	@sfx_sextw_rets
0368E:      	DX=		-1
0368F:      	rets
            
            sfx_SignExtL16:
03690:      	P1=		#@sfx_ortable_0
03693:      	test		DX.b0
03694:      	if ZR jmp	@sfx_sextw_rets
03695:      	jmp		@sfx_orhigh
            
            sfx_SignExtL17:
03696:      	P1=		#@sfx_ortable_1
03699:      	test		DX.b1
0369A:      	if ZR jmp	@sfx_sextw_rets
0369B:      	jmp		@sfx_orhigh
            
            sfx_SignExtL18:
0369C:      	P1=		#@sfx_ortable_2
0369F:      	test		DX.b2
036A0:      	if ZR jmp	@sfx_sextw_rets
036A1:      	jmp		@sfx_orhigh
            
            sfx_SignExtL19:
036A2:      	P1=		#@sfx_ortable_3
036A5:      	test		DX.b3
036A6:      	if ZR jmp	@sfx_sextw_rets
036A7:      	jmp		@sfx_orhigh
            
            sfx_SignExtL20:
036A8:      	P1=		#@sfx_ortable_4
036AB:      	test		DX.b4
036AC:      	if ZR jmp	@sfx_sextw_rets
036AD:      	jmp		@sfx_orhigh
            
            sfx_SignExtL21:
036AE:      	P1=		#@sfx_ortable_5
036B1:      	test		DX.b5
036B2:      	if ZR jmp	@sfx_sextw_rets
036B3:      	jmp		@sfx_orhigh
            
            sfx_SignExtL22:
036B4:      	P1=		#@sfx_ortable_6
036B7:      	test		DX.b6
036B8:      	if ZR jmp	@sfx_sextw_rets
036B9:      	jmp		@sfx_orhigh
            
            sfx_SignExtL23:
036BA:      	P1=		#@sfx_ortable_7
036BD:      	test		DX.b7
036BE:      	if ZR jmp	@sfx_sextw_rets
036BF:      	jmp		@sfx_orhigh
            
            sfx_SignExtL24:
036C0:      	P1=		#@sfx_ortable_8
036C3:      	test		DX.b8
036C4:      	if ZR jmp	@sfx_sextw_rets
036C5:      	jmp		@sfx_orhigh
            
            sfx_SignExtL25:
036C6:      	P1=		#@sfx_ortable_9
036C9:      	test		DX.b9
036CA:      	if ZR jmp	@sfx_sextw_rets
036CB:      	jmp		@sfx_orhigh
            
            sfx_SignExtL26:
036CC:      	P1=		#@sfx_ortable_10
036CF:      	test		DX.b10
036D0:      	if ZR jmp	@sfx_sextw_rets
036D1:      	jmp		@sfx_orhigh
            
            sfx_SignExtL27:
036D2:      	P1=		#@sfx_ortable_11
036D5:      	test		DX.b11
036D6:      	if ZR jmp	@sfx_sextw_rets
036D7:      	jmp		@sfx_orhigh
            
            sfx_SignExtL28:
036D8:      	P1=		#@sfx_ortable_12
036DB:      	test		DX.b12
036DC:      	if ZR jmp	@sfx_sextw_rets
036DD:      	jmp		@sfx_orhigh
            
            sfx_SignExtL29:
036DE:      	P1=		#@sfx_ortable_13
036E1:      	test		DX.b13
036E2:      	if ZR jmp	@sfx_sextw_rets
036E3:      	jmp		@sfx_orhigh
            
            sfx_SignExtL30:
036E4:      	P1=		#@sfx_ortable_14
036E7:      	test		DX.b14
036E8:      	if ZR jmp	@sfx_sextw_rets
036E9:      	jmp		@sfx_orhigh
            
            
            ; ~.~--------------------
            ; I1, AX
            
            sfx_REPMOV_SS:
            @sfx_repmov_ss_loop_1804:
036EA:      	push		I1
036EB:      	AR=		AX
036EC:      	I1=		AR
036ED:      	AR=		rm[I1]
036EE:      	pop		I1
036EF:      	rm[I1++]=	AR
036F0:      	AX++
036F1:      	loop		@sfx_repmov_ss_loop_1804
036F2:      	rets
            
            ; ~~
            
            sfx_REPMOV_SR:
036F3:      	AR=		AX
036F4:      	P1=		AR
            @sfx_repmov_sr_loop_1804:
036F5:      	rm[I1++]=	pm[P1++]
036F6:      	loop		@sfx_repmov_sr_loop_1804
036F7:      	rets
            
            
            ; ~~
            
            sfx_REPMOV_RS:
036F8:      	AR=		AX
036F9:      	I1=		AR
            @sfx_repmov_rs_loop_1804:
036FA:      	AR=		rm[I1++]
036FB:      	pm[P1++]=	AR
036FC:      	loop		@sfx_repmov_rs_loop_1804
036FD:      	rets
            
            ; ~~
            
            sfx_REPMOV_RR:
            @sfx_repmov_rr_loop_1804:
036FE:      	push		P1
036FF:      	AR=		AX
03700:      	P1=		AR
03701:      	AR=		pm[P1]
03702:      	pop		P1
03703:      	pm[P1++]=	AR
03704:      	AX++
03705:      	loop		@sfx_repmov_rr_loop_1804
03706:      	rets
            
            ; ~~
            
            ; sfx_CHECKZERO:
            	; AR=		AX
            	; rets
            
            ; ~~
            
            ; sfx_CHECKZEROLONG:
            	; AR=		AX
            	; AR=		AR | DX
            	; rets
            
            ; ~~
            
            
            #ifdef PRAM_BANK
            
            ;  ~~ simple link list for PRAM allocate
            
            ;  +---------+---------+
            ;  | field 0 | field 1 |
            ;  +---------+---------+
            ;  |   PROM  |  next   |
            ;  +---------+---------+
            
            sfx_DynFastCallInit:
            ; {
            	P1.hh=		PRAM_BANK
            	P1=		PRAM_OFFSET
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	rets
            ; }
            
            
            ; ~~ for C / ASM progam compatible used
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            ; bool sfx_DynFindPrg(PRGADR)
            ;
            ; in:
            ;    P1		- function start address
            ;
            ; out:
            ;     Z		- found, P0 = program entry address at PRAM
            ;     NZ	- not found, P0 = free space (list) start at PRAM
            ; ----------------------------------------------------------------
            
            sfx_DynFindPrg:
            ; {
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfp_loop_1320:
            	AR=		pm[P0++]	; program address
            	if ZR jmp	@sfxdfp_label_1321
            	SF=		AR - P1
            	if NE jmp	@sfxdfp_label_1323
            	
            	P0++
            	set		Z
            	rets
            
            @sfxdfp_label_1323:
            	AR=		pm[P0]		; next
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfp_label_1655
            	P0=		AR
            	jmp		@sfxdfp_loop_1320
            
            @sfxdfp_label_1321:
            	P0--				; list
            	clr		Z
            	rets
            	
            @sfxdfp_label_1655:
            ; ~~ list broken...
            	P0=		PRAM_OFFSET
            	clr		Z
            	rets
            ; }
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free link start
            ; AX = function end address
            
            
            sfx_DynBooking:
            ; {
            	; check if PRG to big to fit in PRAM
            
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	; ~~ can not cache PRG (total PRAM_SIZE) ??
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdb_label_1345
            
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdb_label_1349
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdb_label_1349:
            	; create link list
            
            	AR=		P1
            	pm[P0++]=	AR		; PRG
            	AR=		P0
            	AR=		AR - 3		; remove 1 list and 1 next
            	CX=		CX + AR
            	pm[P0++]=	CX		; next
            
            	push		P1
            	P1=		#@sfxdfc_label_1840
            	AR=		pm[P1]		; inst -> P1.hh = 0
            	pm[P0++]=	AR
            	AR=		CX
            	P1=		AR
            	P1.hh=		PRAM_BANK
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	pop		P1
            	
            	set		Z
            	rets
            
            @sfxdb_label_1345:
            	P0.hh=		0
            	clr		Z
            	rets
            ; }
            
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free PRG entry
            ; AX = function end address
            
            sfx_DynCache:
            	push		P0
            	AR=		AX
            	AR=		AR - P1
            	CX=		AR
            	jmp		@sfxdynch_label_1650
            @sfxdynch_loop_1650:
            	AR=		pm[P1++]
            	pm[P0++]=	AR
            @sfxdynch_label_1650:
            	loop		@sfxdynch_loop_1650
            	pop		P0
            	P0--
            	rets
            
            ; --------------------------------------------------------
            
            
            ; ~~ for C
            
            ; P1 = function start address
            ; AX = function end address
            
            sfx_DynFastCall:
            ; {
            	; look up function entry by prom address (P1)
            
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfc_label_1759:
            	AR=		pm[P0++]		; next
            	if ZR jmp	@sfxdfc_label_1758
            	SF=		AR - P1
            	if EQ jmp	@sfxdfc_label_1722
            	AR=		pm[P0]
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfc_label_2035
            	P0=		AR
            	jmp		@sfxdfc_label_1759
            
            @sfxdfc_label_2035:
            	P0=		PRAM_OFFSET + 1
            
            ; -----
            
            @sfxdfc_label_1758:
            
            	; look for remain free space
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	P0--
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdfc_label_1840
            	
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdfc_label_1817
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdfc_label_1817:
            
            	; copy program to pram
            
            	; ~~ PROM field
            		AR=		P1
            		pm[P0++]=	AR
            	; ~~ next field
            		AR=		P0
            		AR=		AR - 3		; remove 1 list and 1 next
            		CX=		CX + AR
            		pm[P0++]=	CX		; next
            
            	; ~~ booking
            		push		P1
            		P1=		#@sfxdfc_label_1840
            		AR=		pm[P1]		; inst -> P1.hh = 0
            		pm[P0++]=	AR
            		AR=		CX
            		P1=		AR
            		P1.hh=		PRAM_BANK
            		AR=		0
            		pm[P1++]=	AR
            		pm[P1]=		AR
            		P1.hh=		0
            		pop		P1
            
            	; copy instruction  "P0.hh = 0"
            		push		P0		; save exec address
            	@sfxdfc_loop_1829:
            		AR=		pm[P1++]
            		pm[P0++]=	AR
            		AR=		P0
            		SF=		AR - CX
            		if AN jmp	@sfxdfc_loop_1829
            		pop		P0
            		P0--
            		fjmp		pm[P0]
            
            @sfxdfc_label_1722:
            	P0++			; program entry
            	fjmp		pm[P0]
            
            @sfxdfc_label_1840:
            	P0.hh=		0
            
            @sfxdfc_label_1733:
            	; free space too small, direct run
            	fjmp		pm[P1]
            ; }
            
            
            
            
            #endif
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> End=========================
            
            
            
            // .code segment
            
            WAKEUP_PROC:
03707:      	PCH=	SYS_PROG_ENTRY
03708:      	ljmp	SYS_PROG_ENTRY
            
            IntVectTable:
03709:      	DW #EMPTY_INTENTRY
0370A:      	DW #EMPTY_INTENTRY
0370B:      	DW #EMPTY_INTENTRY
0370C:      	DW #EMPTY_INTENTRY
0370D:      	DW #EMPTY_INTENTRY
0370E:      	DW #EMPTY_INTENTRY
            
            // .code ends
            ;;FDSP-IDE V2.53
            _SYSTEM_MAIN_PROGRAM_END_ADDRESS: 
