            ;=========================Include <OPTION.INC> Start=========================
            //--------------------------------------------------------------------------------------------------
            // TRITAN FDSP-IDE Option define file.
            // WARNING! All changes made in this file will be lost when recompiling.
            //--------------------------------------------------------------------------------------------------
            // Part number    : TRSF16127A
            // Option version : 2.2
            // Base Information--------------------------------------------------------------------------------
            #define       _OPT_TRSF16127A_                
            #define       _OPT_PROMSize_                0x20000   //PROM Size
            #define       _OPT_SRAMSize_                3072      //SRAM Size
            // I/O Configuration--------------------------------------------------------------------------------
            #define       _OPT_EXTReset_EN_             0         //EXT Reset Enable,0:Disable,1:Enable
            #define       _OPT_EXTINT1_EN_              0         //EXTINT1_EN,0:Disable,1:Enable
            #define       _OPT_EXTINT0_EN_              0         //EXTINT0_EN,0:Disable,1:Enable
            #define       _OPT_SpreadSpectrum_          0         //Spread Spectrum Enable,0:Disable,1:Enable
            #define       _OPT_EXTResetPin_             0         //EXT Reset Pin Select,0:PB3,1:PC3
            #define       _OPT_EXTINT1_INV_             0         //EXTINT1_INV,0:Disable,1:Enable
            #define       _OPT_EXTINT0_INV_             0         //EXTINT0_INV,0:Disable,1:Enable
            // Memory Configuration-----------------------------------------------------------------------------
            #define       _OPT_PRAMBank_                0         //PRAM Bank
            #define       _OPT_PRAMSize_                0         //PRAM Size(Words)
            #define       _OPT_WriteSegmentProtection_  0x0FFFF   //Write Segment Protection(0000H~ )
            // System Control Setup-----------------------------------------------------------------------------
            #define       _OPT_Bank0Speed_              11        //Bank0 Speed(MHz)
            #define       _OPT_RTCINT_                  1         //RTC interrupt,0:Disable,1:Enable
            #define       _OPT_RTCinHalt_               0         //RTC LP32K in Halt Mode,0:Disable,1:Enable
            #define       _OPT_LVR_                     2200      //LVR(mv)
            #define       _OPT_WatchDog_                256       //Watch dog(ms)
            #define       _OPT_ICEEnable_               1         //ICE Disable/Enable,0:Disable,1:Enable
            // Audio Configuration------------------------------------------------------------------------------
            #define       _OPT_AudioSamplingRate_       32        //Audio Sampling Rate(KHz)
            #define       _OPT_PWMBit_                  16        //PWM Bit
            #define       _OPT_DACFIFO_                 1         //DAC FIFO,0:Disable,1:Enable
            //--------------------------------------------------------------------------------------------------
            ;=========================Include <OPTION.INC> End=========================
            
            #define DSP_SRAM_SIZE		3072
            #define DSP_VECT_SUPPORT		6
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> Start=========================
            
            ; =====================
            ;      COMMON I/O
            ; =====================
            
            #ifdef _MFDSP_
            
            ; {
            	STATUS          EQU             00H             ;R/W, BIT0: Zero.
            							;R/W, BIT1: Carry.
            							;R/W, BIT2: Overflow.
            							;R/W, BIT3: Negative.
            							;R/W, BIT7: Global Interrupt Enable.
            							;R/W, BIT[12:8]: SD_EN, TRA_EN, ADH_EN, SPIS_EN, SPIM_EN.
            							;R/W, BIT13: Interrupt Vector Table Access Enable.
            							;R/W, BIT14: Filter Buffer Available.
            							;R/W, BIT15: Parser Buffer Available.
            
            	INTENA          EQU             01H             ;R/W, Int Enable.
            	INTREQ          EQU             02H             ;R/W, Int Request.
            	IntVect         EQU             03H             ;R/W, Interrupt Table
            	IOC_PA          EQU             04H             ;R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB          EQU             05H             ;R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PCI         EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PC          EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA           EQU             07H             ;R/W, General input/output port.
            	PortB           EQU             08H             ;R/W, General input/output port.
            	PortCI          EQU             09H             ;R/W, General input/output port.
            	PortC           EQU             09H             ;R/W, General input/output port.
            	INTMASK         EQU             0AH             ;R/W, Int Mask.
            	SPIS_CTL        EQU             0BH             ;R/W, SPI slaver control register.
            	SPIS_DAT        EQU             0CH             ;R/W, SPI slaver data    register.
            	SPI_CTL         EQU             0DH             ;R/W, SPI master control register.
            	SPI_DAT         EQU             0EH             ;R/W, SPI master data    register.
            	SD_CTL          EQU             0FH             ;R/W, SD card interface control register.
            	SD_DAT          EQU             10H             ;R/W, SD card interface data.
            	SD_RSP          EQU             11H             ;R/W, SD card interface response register.
            	UART_CTL        EQU             12H
            	UART_DAT        EQU             13H
            	DPPWM           EQU             14H
            	//------------------------------------
            	PUPD_PA         EQU             15H             ;R/W, PortA  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	DACL            EQU             16H
            	DACR            EQU             17H
            	USB_CTL         EQU             18H
            	USB_DAT         EQU             19H
            	PUPD_PB         EQU             1AH             ;R/W, PortB  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	PUPD_PC         EQU             1BH             ;R/W, PortC  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	MISC            EQU             1CH
            	ClrWDT          EQU             1DH             ;W, Clear Watch-dog reset.
            	Real_T          EQU             1DH             ;R, System Real-Time Counter, base on 31.25us
            	IOP_IX          EQU             1EH             ;W, Programming IO Port index .
            	IOP_DAT         EQU             1FH             ;W, Programming IO Port Data .
            
            	//------------------------------------
            	// Virtual         Program IO Port
            	IOP_Timer1      EQU             00H
            	IOP_Timer2      EQU             01H
            	IOP_RTC32K      EQU             02H
            	IOP_PreScale    EQU             03H
            	IOP_FGREEN32K   EQU             04H
            	IOP_ODEN_PA     EQU             05H
            	IOP_ODEN_PB     EQU             06H
            	IOP_ODEN_PC     EQU             07H
            
            	IOP_TOUCH_CFG   EQU             08H
            	IOP_TOUCH_DAT   EQU             09H
            
            	IOP_CLK_CFG     EQU             0AH
            	IOP_CLK_DAT1    EQU             0BH
            	IOP_CLK_DAT2    EQU             0CH
            	IOP_CUR_PA      EQU             0DH
            	IOP_CUR_PB      EQU             0EH
            	IOP_CUR_PC      EQU             0FH
            
            	//------------------------------------
            	// IO[0x40-0x7F]
            	ADH_CFG0        EQU             40H
            	ADH_CFG1        EQU             41H
            	ADH_CFG2        EQU             42H
            	ADH_CFG3        EQU             43H
            	ADH_DO          EQU             44H
            
            	ADL_CFG         EQU             45H
            
            	TRA_CFG         EQU             46H
            	TRA_DAT         EQU             47H
            
            	I2C_CTL         EQU             48H
            	I2C_DAT         EQU             49H
            	I2C_CMD         EQU             4AH
            	I2C_SR          EQU             4AH             ; same as I2C_CMD
            
            	I80_CTL         EQU             4BH
            	I80_INX         EQU             4CH
            	I80_DAT         EQU             4DH
            	I80_RADR        EQU             4EH
            	I80_DMANUM      EQU             4FH
            
            	SD_DMA_CTL      EQU             50H
            	SD_DMA_RADR     EQU             51H
            	SD_DMA_DMANUM   EQU             52H
            
            	SPI_DMA_CTL     EQU             53H
            	SPI_DMA_RADR    EQU             54H
            	SPI_DMA_DMANUM  EQU             55H
            
            	USB_DMA_CTL     EQU             56H
            	USB_DMA_RADR    EQU             57H
            	USB_DMA_DMANUM  EQU             58H
            
            	SSC             EQU             63H
            	MIC             EQU             64H
            	GREEN           EQU             65H
            	SLEEP           EQU             66H
            	SPEED           EQU             67H
            	PR              EQU             68H
            
            	//------------------------------------
            	IOP_WAKEN_PA    EQU             10H
            	IOP_WAKEN_PB    EQU             11H
            	IOP_WAKEN_PC    EQU             12H
            ; }
            
            #endif
            
            
            
            
            #ifdef _MSPEECHDSP_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            #ifdef _MSPEECHDSP2_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            
            ;-----------------------------------------------------------
            
            #ifdef NO_OPTIMAL_RM
            
            
            #else
            
            #define Optimal_RM	; Optimal RAM function Enable
            
            #endif
            
            
            VarRM[0:127] = {
            BP_SAVE,
            
            }
            
            VarRM[128:511] = {
            
            }
            
            VarRM[512:4095] = {
            
            }
            
            ShareVar = {
            
            }
            
            ;--------------------------------------------------------------------
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> Start=========================
            
            	org	0000h
            RSTB_ENTRY:
00000:      	PCH=		SYS_PROG_ENTRY
00001:      	ljmp		SYS_PROG_ENTRY
            
            
            	org	0004h
            WAKEUP_ENTRY:
00004:      	PCH=		WAKEUP_PROC
00005:      	ljmp		WAKEUP_PROC
            
            
            	org	0100h
            
            
            
            SYS_PROG_ENTRY:
            	; ~~ DSP initial
            
00100:      	dsi
00101:      	nop
00102:      	AR=		@STACKBOTTOM
00104:      	BP=		AR
00105:      	AR=		DSP_SRAM_SIZE
00107:      	AR--
00108:      	CX=		AR
00109:      	I1=		AR
0010A:      	AR=		0
            @clearram_loop_1705:
0010B:      	rm[I1--]=	AR
0010C:      	loop		@clearram_loop_1705
            
0010D:      	io[ClrWDT]=	AR
            
0010E:      	set		io[STATUS].b13
0010F:      	CX=		DSP_VECT_SUPPORT
00110:      	P1=		#IntVectTable
00113:      	jmp		@setintvect_label_1548
            @setintvect_loop_1548:
00114:      	AR=		pm[P1++]
00115:      	io[IntVect]=	AR
            @setintvect_label_1548:
00116:      	loop		@setintvect_loop_1548
            
00117:      	clr		io[STATUS].b13
            
            	; ~~ C code
            
            #ifdef PRAM_BANK
            	PCH=		sfx_DynFastCallInit
            	lcall		sfx_DynFastCallInit
            #endif
            
00118:      	PCH=		ginit_code
00119:      	lcall		ginit_code
            
0011A:      	PCH=		_main
0011B:      	lcall		_main
0011C:      	jmp		SYS_PROG_ENTRY
            
            
            /* ================================================================= */
            // ------------- Interrupt Service Routine--------------------------
            /* ================================================================= */
            
            EMPTY_INTENTRY:
0011D:      	reti
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> End=========================
            
            ;=========================Include <DEPS\655_99B6FC89.S.CODE.ASM> Start=========================
            ; 655.C Code Start!!;
            VarRM[0:4095]={
             LD1B663E8_2,_flagD698DD9D,_TFSF_Color_BufA76B681D[5] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //void _main();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //void _main()					
            _main:
            ; //{
            ; //_A30BB6F62_0:;					
            _A30BB6F62_0:
            ; //	
            ; //_A30BB6F62_1:;					
            _A30BB6F62_1:
            ; //_A30BB6F62_2:;					
            _A30BB6F62_2:
            ; //	_InitialDA4A7CC4();			
0011E:      	pch	= _InitialDA4A7CC4
0011F:      	lcall	_InitialDA4A7CC4
            ; //LD1B663E8_5:;					
            LD1B663E8_5:
            ; //_A30BB6F62_3:;					
            _A30BB6F62_3:
            ; //_A30BB6F62_4:;					
            _A30BB6F62_4:
            ; //	asm	io[ClrWDT] = AR			
00120:      	io[ClrWDT] = AR
            ; //	
            ; //_A30BB6F62_5:;					
            _A30BB6F62_5:
            ; //	sAX	= 0;				
00121:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00122:      	test io[0x08].b2//
            ; //	if(__jz__) goto LD1B663E8_6;		
00123:      	if ZR	jmp LD1B663E8_6
            ; //	sAX	= 1;				
00124:      	AX	= 0x01
            ; //LD1B663E8_6:;					
            LD1B663E8_6:
            ; //	sCX	= 0x0001;			
00125:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00126:      	pch	= sfx_CMP_AX_CX_JE
00127:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_8;	
00128:      	if ZR	jmp LD1B663E8_8
            ; //	goto	LD1B663E8_7;			
00129:      	pch =	LD1B663E8_7
0012A:      	ljmp	LD1B663E8_7
            ; //LD1B663E8_8:;					
            LD1B663E8_8:
            ; //_A30BB6F62_6:;					
            _A30BB6F62_6:
            ; //	asm	nop				
0012B:      	nop
            ; //_A30BB6F62_7:;					
            _A30BB6F62_7:
            ; //	asm	nop				
0012C:      	nop
            ; //_A30BB6F62_8:;					
            _A30BB6F62_8:
            ; //	asm	nop				
0012D:      	nop
            ; //_A30BB6F62_9:;					
            _A30BB6F62_9:
            ; //	asm	nop				
0012E:      	nop
            ; //_A30BB6F62_10:;					
            _A30BB6F62_10:
            ; //	asm	nop				
0012F:      	nop
            ; //_A30BB6F62_11:;					
            _A30BB6F62_11:
            ; //	asm	nop				
00130:      	nop
            ; //_A30BB6F62_12:;					
            _A30BB6F62_12:
            ; //	asm	nop				
00131:      	nop
            ; //_A30BB6F62_13:;					
            _A30BB6F62_13:
            ; //	asm	nop				
00132:      	nop
            ; //_A30BB6F62_14:;					
            _A30BB6F62_14:
            ; //	asm	nop				
00133:      	nop
            ; //_A30BB6F62_15:;					
            _A30BB6F62_15:
            ; //	asm	nop				
00134:      	nop
            ; //_A30BB6F62_16:;					
            _A30BB6F62_16:
            ; //	asm	nop				
00135:      	nop
            ; //_A30BB6F62_17:;					
            _A30BB6F62_17:
            ; //	asm	nop				
00136:      	nop
            ; //_A30BB6F62_18:;					
            _A30BB6F62_18:
            ; //	asm	nop				
00137:      	nop
            ; //_A30BB6F62_19:;					
            _A30BB6F62_19:
            ; //	asm	nop				
00138:      	nop
            ; //_A30BB6F62_20:;					
            _A30BB6F62_20:
            ; //	asm	nop				
00139:      	nop
            ; //_A30BB6F62_21:;					
            _A30BB6F62_21:
            ; //	asm	nop				
0013A:      	nop
            ; //_A30BB6F62_22:;					
            _A30BB6F62_22:
            ; //	asm	nop				
0013B:      	nop
            ; //_A30BB6F62_23:;					
            _A30BB6F62_23:
            ; //	asm	nop				
0013C:      	nop
            ; //_A30BB6F62_24:;					
            _A30BB6F62_24:
            ; //	asm	nop				
0013D:      	nop
            ; //_A30BB6F62_25:;					
            _A30BB6F62_25:
            ; //	asm	nop				
0013E:      	nop
            ; //_A30BB6F62_26:;					
            _A30BB6F62_26:
            ; //	asm	nop				
0013F:      	nop
            ; //_A30BB6F62_27:;					
            _A30BB6F62_27:
            ; //	asm	nop				
00140:      	nop
            ; //_A30BB6F62_28:;					
            _A30BB6F62_28:
            ; //	asm	nop				
00141:      	nop
            ; //_A30BB6F62_29:;					
            _A30BB6F62_29:
            ; //	asm	nop				
00142:      	nop
            ; //_A30BB6F62_30:;					
            _A30BB6F62_30:
            ; //	asm	nop				
00143:      	nop
            ; //_A30BB6F62_31:;					
            _A30BB6F62_31:
            ; //	asm	nop				
00144:      	nop
            ; //_A30BB6F62_32:;					
            _A30BB6F62_32:
            ; //	asm	nop				
00145:      	nop
            ; //_A30BB6F62_33:;					
            _A30BB6F62_33:
            ; //	asm	nop				
00146:      	nop
            ; //_A30BB6F62_34:;					
            _A30BB6F62_34:
            ; //	asm	nop				
00147:      	nop
            ; //_A30BB6F62_35:;					
            _A30BB6F62_35:
            ; //	asm	nop				
00148:      	nop
            ; //_A30BB6F62_36:;					
            _A30BB6F62_36:
            ; //	asm	nop				
00149:      	nop
            ; //_A30BB6F62_37:;					
            _A30BB6F62_37:
            ; //	asm	nop				
0014A:      	nop
            ; //_A30BB6F62_38:;					
            _A30BB6F62_38:
            ; //	asm	nop				
0014B:      	nop
            ; //_A30BB6F62_39:;					
            _A30BB6F62_39:
            ; //	asm	nop				
0014C:      	nop
            ; //_A30BB6F62_40:;					
            _A30BB6F62_40:
            ; //	asm	nop				
0014D:      	nop
            ; //_A30BB6F62_41:;					
            _A30BB6F62_41:
            ; //	asm	nop				
0014E:      	nop
            ; //	
            ; //_A30BB6F62_42:;					
            _A30BB6F62_42:
            ; //	sAX	= 0;				
0014F:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00150:      	test io[0x08].b2//
            ; //	if(__jz__) goto LD1B663E8_9;		
00151:      	if ZR	jmp LD1B663E8_9
            ; //	sAX	= 1;				
00152:      	AX	= 0x01
            ; //LD1B663E8_9:;					
            LD1B663E8_9:
            ; //	sCX	= 0x0001;			
00153:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00154:      	pch	= sfx_CMP_AX_CX_JE
00155:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_11;	
00156:      	if ZR	jmp LD1B663E8_11
            ; //	goto	LD1B663E8_10;			
00157:      	pch =	LD1B663E8_10
00158:      	ljmp	LD1B663E8_10
            ; //LD1B663E8_11:;					
            LD1B663E8_11:
            ; //	
            ; //_A30BB6F62_43:;					
            _A30BB6F62_43:
            ; //	asm I1 = _flagD698DD9D+0;		
00159:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0015A:      	AX	= rm[I1]
            ; //	sfx_CHECKZERO();			
0015B:      	AR	= AX
            ; //	if(__jnz__)	goto LD1B663E8_13;	
0015C:      	if NZ	jmp LD1B663E8_13
            ; //	goto	LD1B663E8_12;			
0015D:      	pch =	LD1B663E8_12
0015E:      	ljmp	LD1B663E8_12
            ; //LD1B663E8_13:;					
            LD1B663E8_13:
            ; //	
            ; //_A30BB6F62_44:;					
            _A30BB6F62_44:
            ; //_A30BB6F62_45:;					
            _A30BB6F62_45:
            ; //	sAX	= 0x0003;			
0015F:      	AX	= 0x03
            ; //	PUSH(sAX);				
00160:      	push	AX
            ; //	sAX	= 0x0005;			
00161:      	AX	= 0x05
            ; //	PUSH(sAX);				
00162:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00163:      	pch	= _WS_TRSF_color_setE1CC300C
00164:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00165:      	pop	AR
00166:      	pop	AR
            ; //_A30BB6F62_46:;					
            _A30BB6F62_46:
            ; //	asm clr io[0x09].b14;			
00167:      	clr io[0x09].b14//
            ; //_A30BB6F62_47:;					
            _A30BB6F62_47:
            ; //	asm I1 = _flagD698DD9D+0;		
00168:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
00169:      	AX	= rm[I1]
            ; //	sfx_NOT_AX();				
0016A:      	AR	= -1
0016B:      	AX	= AX ^ AR
            ; //	asm I1 = _flagD698DD9D+0;		
0016C:      	I1 = _flagD698DD9D+0//
            ; //	*(__int16*)sSI	= sAX			
0016D:      	rm[I1]	= AX
            ; //	goto LD1B663E8_14;			
0016E:      	pch =	LD1B663E8_14
0016F:      	ljmp	LD1B663E8_14
            ; //LD1B663E8_12:;					
            LD1B663E8_12:
            ; //	
            ; //_A30BB6F62_48:;					
            _A30BB6F62_48:
            ; //_A30BB6F62_49:;					
            _A30BB6F62_49:
            ; //	sAX	= 0x0003;			
00170:      	AX	= 0x03
            ; //	PUSH(sAX);				
00171:      	push	AX
            ; //	sAX	= 0x0003;			
00172:      	AX	= 0x03
            ; //	PUSH(sAX);				
00173:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00174:      	pch	= _WS_TRSF_color_setE1CC300C
00175:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00176:      	pop	AR
00177:      	pop	AR
            ; //_A30BB6F62_50:;					
            _A30BB6F62_50:
            ; //	asm clr io[0x09].b14;			
00178:      	clr io[0x09].b14//
            ; //_A30BB6F62_51:;					
            _A30BB6F62_51:
            ; //	asm I1 = _flagD698DD9D+0;		
00179:      	I1 = _flagD698DD9D+0//
            ; //	sAX	= *(__int16*)sSI;		
0017A:      	AX	= rm[I1]
            ; //	sfx_NOT_AX();				
0017B:      	AR	= -1
0017C:      	AX	= AX ^ AR
            ; //	asm I1 = _flagD698DD9D+0;		
0017D:      	I1 = _flagD698DD9D+0//
            ; //	*(__int16*)sSI	= sAX			
0017E:      	rm[I1]	= AX
            ; //LD1B663E8_14:;					
            LD1B663E8_14:
            ; //_A30BB6F62_52:;					
            _A30BB6F62_52:
            ; //LD1B663E8_10:;					
            LD1B663E8_10:
            ; //_A30BB6F62_53:;					
            _A30BB6F62_53:
            ; //LD1B663E8_7:;					
            LD1B663E8_7:
            ; //_A30BB6F62_54:;					
            _A30BB6F62_54:
            ; //	goto LD1B663E8_5;			
0017F:      	pch =	LD1B663E8_5
00180:      	ljmp	LD1B663E8_5
            ; //LD1B663E8_4:;					
            LD1B663E8_4:
            ; //LD1B663E8_3:;					
            LD1B663E8_3:
            ; //_A30BB6F62_55:;					
            _A30BB6F62_55:
            ; //	return;					
00181:      	rets
            ; //_main_end:;					
            _main_end:
            ; //_A30BB6F62_56:;					
            _A30BB6F62_56:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_655_99B6FC89_s(void)	
            ginit_code_655_99B6FC89_s:
            ; //{
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+0;	
00182:      	P1 = #ginit_seg_655_99B6FC89_s+0//
            ; //	asm I1 = LD1B663E8_2;			
00185:      	I1 = LD1B663E8_2//
            ; //	sCX = 1;				
00186:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00187:      	pch	= sfx_GLOBALINIT
00188:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+1;	
00189:      	P1 = #ginit_seg_655_99B6FC89_s+1//
            ; //	asm I1 = _flagD698DD9D;			
0018C:      	I1 = _flagD698DD9D//
            ; //	sCX = 1;				
0018D:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
0018E:      	pch	= sfx_GLOBALINIT
0018F:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00190:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_655_99B6FC89_s[2] = {		
            ginit_seg_655_99B6FC89_s:
            ; //						
            DW 
            ; //	0x0000,					
00191:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00192:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\655_99B6FC89.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> Start=========================
            ; WS2811.c Code Start!!;
            VarRM[0:4095]={
             LD63FD439_15,LD63FD439_72,_LED_Buf98A4A35A[20],_sum6BC8EB73,LD63FD439_28 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4);
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6);
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8);
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6);
            ; //void _WS_RefreshAD7B99B1();
            ; //void _WS_Key_RGBC5B96B6D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4)	
            _WS_Send24bits851C5C55:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00193:      	AR	= rm[BP_SAVE]
00194:      	push	AR
00195:      	AR	= BP
00196:      	rm[BP_SAVE]	= AR
00197:      	AR	 = -1
00198:      	BP	+= AR
            ; //_A30BB6F62_57:;					
            _A30BB6F62_57:
            ; //_A30BB6F62_58:;					
            _A30BB6F62_58:
            ; //	_i_1_2+0	= 0x00;			
00199:      	I1	= rm[BP_SAVE]
0019A:      	AR	= 0x00
0019B:      	rm[I1]	= AR
            ; //LD63FD439_18:;					
            LD63FD439_18:
            ; //	sSI	= (int)&_i_1_2;			
0019C:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
0019D:      	AX	= rm[I1]
            ; //	sCX	= 0x0018;			
0019E:      	CX	= 0x18
            ; //	sfx_CMP_AX_CX_JB();			
0019F:      	pch	= sfx_CMP_AX_CX_JB
001A0:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_22;	
001A1:      	if ZR	jmp LD63FD439_22
            ; //	goto	LD63FD439_20;			
001A2:      	pch =	LD63FD439_20
001A3:      	ljmp	LD63FD439_20
            ; //LD63FD439_22:;					
            LD63FD439_22:
            ; //	goto LD63FD439_19;			
001A4:      	pch =	LD63FD439_19
001A5:      	ljmp	LD63FD439_19
            ; //LD63FD439_21:;					
            LD63FD439_21:
            ; //	sSI	= (int)&_i_1_2;			
001A6:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
001A7:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
001A8:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
001A9:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
001AA:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
001AB:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_18;			
001AC:      	pch =	LD63FD439_18
001AD:      	ljmp	LD63FD439_18
            ; //LD63FD439_19:;					
            LD63FD439_19:
            ; //	
            ; //_A30BB6F62_59:;					
            _A30BB6F62_59:
            ; //	sSI	= (int)&_color_0_4;		
001AE:      	AR	= 2
001AF:      	I1	= rm[BP_SAVE]
001B0:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
001B1:      	AX	= rm[I1]
            ; //	asm AR = 0x0000;			
001B2:      	AR = 0x0000//
            ; //	asm AX = AX & AR;			
001B3:      	AX = AX & AR//
            ; //	sfx_CHECKZERO();			
001B4:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_24;	
001B5:      	if NZ	jmp LD63FD439_24
            ; //	goto	LD63FD439_23;			
001B6:      	pch =	LD63FD439_23
001B7:      	ljmp	LD63FD439_23
            ; //LD63FD439_24:;					
            LD63FD439_24:
            ; //	
            ; //_A30BB6F62_60:;					
            _A30BB6F62_60:
            ; //	asm set io[0x09].b14;			
001B8:      	set io[0x09].b14//
            ; //_A30BB6F62_61:;					
            _A30BB6F62_61:
            ; //	asm	nop				
001B9:      	nop
            ; //_A30BB6F62_62:;					
            _A30BB6F62_62:
            ; //	asm	nop				
001BA:      	nop
            ; //_A30BB6F62_63:;					
            _A30BB6F62_63:
            ; //	asm	nop				
001BB:      	nop
            ; //_A30BB6F62_64:;					
            _A30BB6F62_64:
            ; //	asm	nop				
001BC:      	nop
            ; //_A30BB6F62_65:;					
            _A30BB6F62_65:
            ; //	asm	nop				
001BD:      	nop
            ; //_A30BB6F62_66:;					
            _A30BB6F62_66:
            ; //	asm	nop				
001BE:      	nop
            ; //_A30BB6F62_67:;					
            _A30BB6F62_67:
            ; //	asm	nop				
001BF:      	nop
            ; //_A30BB6F62_68:;					
            _A30BB6F62_68:
            ; //	asm	nop				
001C0:      	nop
            ; //_A30BB6F62_69:;					
            _A30BB6F62_69:
            ; //	asm	nop				
001C1:      	nop
            ; //_A30BB6F62_70:;					
            _A30BB6F62_70:
            ; //	asm	nop				
001C2:      	nop
            ; //_A30BB6F62_71:;					
            _A30BB6F62_71:
            ; //	asm	nop				
001C3:      	nop
            ; //_A30BB6F62_72:;					
            _A30BB6F62_72:
            ; //	asm	nop				
001C4:      	nop
            ; //_A30BB6F62_73:;					
            _A30BB6F62_73:
            ; //	asm clr io[0x09].b14;			
001C5:      	clr io[0x09].b14//
            ; //_A30BB6F62_74:;					
            _A30BB6F62_74:
            ; //	asm	nop				
001C6:      	nop
            ; //_A30BB6F62_75:;					
            _A30BB6F62_75:
            ; //	asm	nop				
001C7:      	nop
            ; //_A30BB6F62_76:;					
            _A30BB6F62_76:
            ; //	asm	nop				
001C8:      	nop
            ; //	goto LD63FD439_25;			
001C9:      	pch =	LD63FD439_25
001CA:      	ljmp	LD63FD439_25
            ; //LD63FD439_23:;					
            LD63FD439_23:
            ; //_A30BB6F62_77:;					
            _A30BB6F62_77:
            ; //	asm set io[0x09].b14;			
001CB:      	set io[0x09].b14//
            ; //LD63FD439_25:;					
            LD63FD439_25:
            ; //_A30BB6F62_78:;					
            _A30BB6F62_78:
            ; //_A30BB6F62_79:;					
            _A30BB6F62_79:
            ; //	asm	nop				
001CC:      	nop
            ; //_A30BB6F62_80:;					
            _A30BB6F62_80:
            ; //	asm	nop				
001CD:      	nop
            ; //_A30BB6F62_81:;					
            _A30BB6F62_81:
            ; //	asm	nop				
001CE:      	nop
            ; //_A30BB6F62_82:;					
            _A30BB6F62_82:
            ; //	asm clr io[0x09].b14;			
001CF:      	clr io[0x09].b14//
            ; //_A30BB6F62_83:;					
            _A30BB6F62_83:
            ; //	asm	nop				
001D0:      	nop
            ; //_A30BB6F62_84:;					
            _A30BB6F62_84:
            ; //	asm	nop				
001D1:      	nop
            ; //_A30BB6F62_85:;					
            _A30BB6F62_85:
            ; //	asm	nop				
001D2:      	nop
            ; //_A30BB6F62_86:;					
            _A30BB6F62_86:
            ; //	asm	nop				
001D3:      	nop
            ; //_A30BB6F62_87:;					
            _A30BB6F62_87:
            ; //	asm	nop				
001D4:      	nop
            ; //_A30BB6F62_88:;					
            _A30BB6F62_88:
            ; //	asm	nop				
001D5:      	nop
            ; //_A30BB6F62_89:;					
            _A30BB6F62_89:
            ; //	asm	nop				
001D6:      	nop
            ; //_A30BB6F62_90:;					
            _A30BB6F62_90:
            ; //	asm	nop				
001D7:      	nop
            ; //_A30BB6F62_91:;					
            _A30BB6F62_91:
            ; //	asm	nop				
001D8:      	nop
            ; //_A30BB6F62_92:;					
            _A30BB6F62_92:
            ; //	asm	nop				
001D9:      	nop
            ; //_A30BB6F62_93:;					
            _A30BB6F62_93:
            ; //	asm	nop				
001DA:      	nop
            ; //_A30BB6F62_94:;					
            _A30BB6F62_94:
            ; //	asm	nop				
001DB:      	nop
            ; //_A30BB6F62_95:;					
            _A30BB6F62_95:
            ; //	sSI	= (int)&_color_0_4;		
001DC:      	AR	= 2
001DD:      	I1	= rm[BP_SAVE]
001DE:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
001DF:      	AX	= rm[I1]
            ; //	asm slz AX, 1;				
001E0:      	slz AX, 1//
            ; //	sSI	= (int)&_color_0_4;		
001E1:      	AR	= 2
001E2:      	I1	= rm[BP_SAVE]
001E3:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
001E4:      	rm[I1]	= AX
            ; //	goto LD63FD439_21;			
001E5:      	pch =	LD63FD439_21
001E6:      	ljmp	LD63FD439_21
            ; //LD63FD439_20:;					
            LD63FD439_20:
            ; //_A30BB6F62_96:;					
            _A30BB6F62_96:
            ; //LD63FD439_17:;					
            LD63FD439_17:
            ; //_A30BB6F62_97:;					
            _A30BB6F62_97:
            ; //	return;					
001E7:      	AR	= 1
001E8:      	BP	+= AR
001E9:      	pop	AR
001EA:      	rm[BP_SAVE]	= AR
001EB:      	rets
            ; //_WS_Send24bits851C5C55_end:;			
            _WS_Send24bits851C5C55_end:
            ; //_A30BB6F62_98:;					
            _A30BB6F62_98:
            ; //}
            ; //
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6)
            _WS_Color_copyADB1DFED:
            ; //{						
001EC:      	AR	= rm[BP_SAVE]
001ED:      	push	AR
001EE:      	AR	= BP
001EF:      	rm[BP_SAVE]	= AR
            ; //_A30BB6F62_99:;					
            _A30BB6F62_99:
            ; //	
            ; //_A30BB6F62_100:;				
            _A30BB6F62_100:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
001F0:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
001F1:      	push	AX
            ; //	sSI	= (int)&_No_0_4;		
001F2:      	AR	= 2
001F3:      	I1	= rm[BP_SAVE]
001F4:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
001F5:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
001F6:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
001F7:      	pch	= sfx_IMUL_AX_CX
001F8:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
001F9:      	pop	CX
            ; //	sAX	= sAX + sCX;			
001FA:      	AR	= CX
001FB:      	AX	+= AR
            ; //	PUSH(sAX);				
001FC:      	push	AX
            ; //	sSI	= (int)&_color_0_6;		
001FD:      	AR	= 3
001FE:      	I1	= rm[BP_SAVE]
001FF:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00200:      	AX	= rm[I1]
            ; //	sfx_UINT2ULONG_AX();			
00201:      	DX	= 0
            ; //	sSI	= POP();			
00202:      	pop	I1
            ; //	sfx_STORSILONG();			
00203:      	rm[I1++]	= AX
00204:      	rm[I1--]	= DX
            ; //LD63FD439_26:;					
            LD63FD439_26:
            ; //_A30BB6F62_101:;				
            _A30BB6F62_101:
            ; //	return;					
00205:      	pop	AR
00206:      	rm[BP_SAVE]	= AR
00207:      	rets
            ; //_WS_Color_copyADB1DFED_end:;			
            _WS_Color_copyADB1DFED_end:
            ; //_A30BB6F62_102:;				
            _A30BB6F62_102:
            ; //}
            ; //
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8)
            _WS_ColorSet_LEDCA3DEB8C:
            ; //{						
00208:      	AR	= rm[BP_SAVE]
00209:      	push	AR
0020A:      	AR	= BP
0020B:      	rm[BP_SAVE]	= AR
            ; //_A30BB6F62_103:;				
            _A30BB6F62_103:
            ; //	
            ; //_A30BB6F62_104:;				
            _A30BB6F62_104:
            ; //	sSI	= (int)&_to_0_6;		
0020C:      	AR	= 3
0020D:      	I1	= rm[BP_SAVE]
0020E:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0020F:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00210:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00211:      	pch	= sfx_CMP_AX_CX_JBE
00212:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_30;	
00213:      	if ZR	jmp LD63FD439_30
            ; //	sAX	= 1;				
00214:      	AX	= 0x01
            ; //	goto	LD63FD439_31;			
00215:      	pch =	LD63FD439_31
00216:      	ljmp	LD63FD439_31
            ; //LD63FD439_30:;					
            LD63FD439_30:
            ; //	sAX	= 0;				
00217:      	AX	= 0x00
            ; //LD63FD439_31:;					
            LD63FD439_31:
            ; //	sfx_CHECKZERO();			
00218:      	AR	= AX
            ; //	if(__jz__)	goto LD63FD439_32;	
00219:      	if ZR	jmp LD63FD439_32
            ; //	goto	LD63FD439_29;			
0021A:      	pch =	LD63FD439_29
0021B:      	ljmp	LD63FD439_29
            ; //LD63FD439_32:;					
            LD63FD439_32:
            ; //	sSI	= (int)&_from_0_4;		
0021C:      	AR	= 2
0021D:      	I1	= rm[BP_SAVE]
0021E:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0021F:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
00220:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JAE();			
00221:      	pch	= sfx_CMP_AX_CX_JAE
00222:      	lcall	sfx_CMP_AX_CX_JAE
            ; //	if(__je__)	goto LD63FD439_33;	
00223:      	if ZR	jmp LD63FD439_33
            ; //	sAX	= 1;				
00224:      	AX	= 0x01
            ; //	goto	LD63FD439_34;			
00225:      	pch =	LD63FD439_34
00226:      	ljmp	LD63FD439_34
            ; //LD63FD439_33:;					
            LD63FD439_33:
            ; //	sAX	= 0;				
00227:      	AX	= 0x00
            ; //LD63FD439_34:;					
            LD63FD439_34:
            ; //LD63FD439_29:;					
            LD63FD439_29:
            ; //	sfx_CHECKZERO();			
00228:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_36;	
00229:      	if NZ	jmp LD63FD439_36
            ; //	goto	LD63FD439_35;			
0022A:      	pch =	LD63FD439_35
0022B:      	ljmp	LD63FD439_35
            ; //LD63FD439_36:;					
            LD63FD439_36:
            ; //	
            ; //_A30BB6F62_105:;				
            _A30BB6F62_105:
            ; //	_to_0_6+0	= 0x03;			
0022C:      	AR	= 3
0022D:      	I1	= rm[BP_SAVE]
0022E:      	I1	+= AR
0022F:      	AR	= 0x03
00230:      	rm[I1]	= AR
            ; //_A30BB6F62_106:;				
            _A30BB6F62_106:
            ; //	_from_0_4+0	= 0x00;			
00231:      	AR	= 2
00232:      	I1	= rm[BP_SAVE]
00233:      	I1	+= AR
00234:      	AR	= 0x00
00235:      	rm[I1]	= AR
            ; //LD63FD439_35:;					
            LD63FD439_35:
            ; //_A30BB6F62_107:;				
            _A30BB6F62_107:
            ; //_A30BB6F62_108:;				
            _A30BB6F62_108:
            ; //	sAX	= 0xFFFF;			
00236:      	AX	= 0xFFFF
            ; //	sSI	= (int)&_color_0_8;		
00238:      	AR	= 4
00239:      	I1	= rm[BP_SAVE]
0023A:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
0023B:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
0023C:      	AR	= CX
0023D:      	AX	&= AR
            ; //	sSI	= (int)&_color_0_8;		
0023E:      	AR	= 4
0023F:      	I1	= rm[BP_SAVE]
00240:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00241:      	rm[I1]	= AX
            ; //_A30BB6F62_109:;				
            _A30BB6F62_109:
            ; //	sSI	= (int)&_from_0_4;		
00242:      	AR	= 2
00243:      	I1	= rm[BP_SAVE]
00244:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00245:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
00246:      	AR	= 3
00247:      	I1	= rm[BP_SAVE]
00248:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
00249:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JA();			
0024A:      	pch	= sfx_CMP_AX_CX_JA
0024B:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_38;	
0024C:      	if ZR	jmp LD63FD439_38
            ; //	goto	LD63FD439_37;			
0024D:      	pch =	LD63FD439_37
0024E:      	ljmp	LD63FD439_37
            ; //LD63FD439_38:;					
            LD63FD439_38:
            ; //	
            ; //_A30BB6F62_110:;				
            _A30BB6F62_110:
            ; //	sSI	= (int)&_from_0_4;		
0024F:      	AR	= 2
00250:      	I1	= rm[BP_SAVE]
00251:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00252:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_28;		
00253:      	I1	= LD63FD439_28
            ; //	*(__int16*)sSI	= sAX			
00254:      	rm[I1]	= AX
            ; //_A30BB6F62_111:;				
            _A30BB6F62_111:
            ; //	sSI	= (int)&_to_0_6;		
00255:      	AR	= 3
00256:      	I1	= rm[BP_SAVE]
00257:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00258:      	AX	= rm[I1]
            ; //	sSI	= (int)&_from_0_4;		
00259:      	AR	= 2
0025A:      	I1	= rm[BP_SAVE]
0025B:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
0025C:      	rm[I1]	= AX
            ; //_A30BB6F62_112:;				
            _A30BB6F62_112:
            ; //	asm I1 = LD63FD439_28+0;		
0025D:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
0025E:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
0025F:      	AR	= 3
00260:      	I1	= rm[BP_SAVE]
00261:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00262:      	rm[I1]	= AX
            ; //LD63FD439_37:;					
            LD63FD439_37:
            ; //_A30BB6F62_113:;				
            _A30BB6F62_113:
            ; //_A30BB6F62_114:;				
            _A30BB6F62_114:
            ; //	sSI	= (int)&_from_0_4;		
00263:      	AR	= 2
00264:      	I1	= rm[BP_SAVE]
00265:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00266:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_28;		
00267:      	I1	= LD63FD439_28
            ; //	*(__int16*)sSI	= sAX			
00268:      	rm[I1]	= AX
            ; //LD63FD439_39:;					
            LD63FD439_39:
            ; //	asm I1 = LD63FD439_28+0;		
00269:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
0026A:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
0026B:      	AR	= 3
0026C:      	I1	= rm[BP_SAVE]
0026D:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
0026E:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JLE();			
0026F:      	pch	= sfx_CMP_AX_CX_JLE
00270:      	lcall	sfx_CMP_AX_CX_JLE
            ; //	if(__je__)	goto LD63FD439_43;	
00271:      	if ZR	jmp LD63FD439_43
            ; //	goto	LD63FD439_41;			
00272:      	pch =	LD63FD439_41
00273:      	ljmp	LD63FD439_41
            ; //LD63FD439_43:;					
            LD63FD439_43:
            ; //	goto LD63FD439_40;			
00274:      	pch =	LD63FD439_40
00275:      	ljmp	LD63FD439_40
            ; //LD63FD439_42:;					
            LD63FD439_42:
            ; //	asm I1 = LD63FD439_28+0;		
00276:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
00277:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_28;		
00278:      	I1	= LD63FD439_28
            ; //	PUSH(sAX);				
00279:      	push	AX
            ; //	sAX	= 0x0001;			
0027A:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
0027B:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
0027C:      	AR	= AX
0027D:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
0027E:      	rm[I1]	= CX
            ; //	sAX	= POP();			
0027F:      	pop	AX
            ; //	goto LD63FD439_39;			
00280:      	pch =	LD63FD439_39
00281:      	ljmp	LD63FD439_39
            ; //LD63FD439_40:;					
            LD63FD439_40:
            ; //	
            ; //_A30BB6F62_115:;				
            _A30BB6F62_115:
            ; //_A30BB6F62_116:;				
            _A30BB6F62_116:
            ; //	sSI	= (int)&_color_0_8;		
00282:      	AR	= 4
00283:      	I1	= rm[BP_SAVE]
00284:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00285:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
00286:      	push	AX
            ; //	asm I1 = LD63FD439_28+0;		
00287:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
00288:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
00289:      	push	AX
            ; //	_WS_Color_copyADB1DFED(STACK[sSP + 0], STACK[sSP + 1]);
0028A:      	pch	= _WS_Color_copyADB1DFED
0028B:      	lcall	_WS_Color_copyADB1DFED
            ; //	RESTORESP(2);				
0028C:      	pop	AR
0028D:      	pop	AR
            ; //	goto LD63FD439_42;			
0028E:      	pch =	LD63FD439_42
0028F:      	ljmp	LD63FD439_42
            ; //LD63FD439_41:;					
            LD63FD439_41:
            ; //_A30BB6F62_117:;				
            _A30BB6F62_117:
            ; //LD63FD439_27:;					
            LD63FD439_27:
            ; //_A30BB6F62_118:;				
            _A30BB6F62_118:
            ; //	return;					
00290:      	pop	AR
00291:      	rm[BP_SAVE]	= AR
00292:      	rets
            ; //_WS_ColorSet_LEDCA3DEB8C_end:;			
            _WS_ColorSet_LEDCA3DEB8C_end:
            ; //_A30BB6F62_119:;				
            _A30BB6F62_119:
            ; //}
            ; //
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6)
            _WS_TRSF_color_setE1CC300C:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00293:      	AR	= rm[BP_SAVE]
00294:      	push	AR
00295:      	AR	= BP
00296:      	rm[BP_SAVE]	= AR
00297:      	AR	 = -1
00298:      	BP	+= AR
            ; //_A30BB6F62_120:;				
            _A30BB6F62_120:
            ; //_A30BB6F62_121:;				
            _A30BB6F62_121:
            ; //	_i_1_2+0	= 0x00;			
00299:      	I1	= rm[BP_SAVE]
0029A:      	AR	= 0x00
0029B:      	rm[I1]	= AR
            ; //LD63FD439_45:;					
            LD63FD439_45:
            ; //	sSI	= (int)&_i_1_2;			
0029C:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
0029D:      	AX	= rm[I1]
            ; //	sSI	= (int)&_Led_num_0_6;		
0029E:      	AR	= 3
0029F:      	I1	= rm[BP_SAVE]
002A0:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
002A1:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JB();			
002A2:      	pch	= sfx_CMP_AX_CX_JB
002A3:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_49;	
002A4:      	if ZR	jmp LD63FD439_49
            ; //	goto	LD63FD439_47;			
002A5:      	pch =	LD63FD439_47
002A6:      	ljmp	LD63FD439_47
            ; //LD63FD439_49:;					
            LD63FD439_49:
            ; //	goto LD63FD439_46;			
002A7:      	pch =	LD63FD439_46
002A8:      	ljmp	LD63FD439_46
            ; //LD63FD439_48:;					
            LD63FD439_48:
            ; //	sSI	= (int)&_i_1_2;			
002A9:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002AA:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
002AB:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
002AC:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
002AD:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
002AE:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_45;			
002AF:      	pch =	LD63FD439_45
002B0:      	ljmp	LD63FD439_45
            ; //LD63FD439_46:;					
            LD63FD439_46:
            ; //	
            ; //_A30BB6F62_122:;				
            _A30BB6F62_122:
            ; //	sSI	= (int)&_color_0_4;		
002B1:      	AR	= 2
002B2:      	I1	= rm[BP_SAVE]
002B3:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002B4:      	AX	= rm[I1]
            ; //	goto LD63FD439_51;			
002B5:      	pch =	LD63FD439_51
002B6:      	ljmp	LD63FD439_51
            ; //LD63FD439_52:;					
            LD63FD439_52:
            ; //_A30BB6F62_123:;				
            _A30BB6F62_123:
            ; //	asm set io[0x09].b14;			
002B7:      	set io[0x09].b14//
            ; //_A30BB6F62_124:;				
            _A30BB6F62_124:
            ; //	asm	nop				
002B8:      	nop
            ; //_A30BB6F62_125:;				
            _A30BB6F62_125:
            ; //	asm	nop				
002B9:      	nop
            ; //_A30BB6F62_126:;				
            _A30BB6F62_126:
            ; //	asm	nop				
002BA:      	nop
            ; //_A30BB6F62_127:;				
            _A30BB6F62_127:
            ; //	asm	nop				
002BB:      	nop
            ; //_A30BB6F62_128:;				
            _A30BB6F62_128:
            ; //	asm	nop				
002BC:      	nop
            ; //_A30BB6F62_129:;				
            _A30BB6F62_129:
            ; //	asm	nop				
002BD:      	nop
            ; //_A30BB6F62_130:;				
            _A30BB6F62_130:
            ; //	asm	nop				
002BE:      	nop
            ; //_A30BB6F62_131:;				
            _A30BB6F62_131:
            ; //	asm	nop				
002BF:      	nop
            ; //_A30BB6F62_132:;				
            _A30BB6F62_132:
            ; //	asm	nop				
002C0:      	nop
            ; //_A30BB6F62_133:;				
            _A30BB6F62_133:
            ; //	asm	nop				
002C1:      	nop
            ; //_A30BB6F62_134:;				
            _A30BB6F62_134:
            ; //	asm	nop				
002C2:      	nop
            ; //_A30BB6F62_135:;				
            _A30BB6F62_135:
            ; //	asm	nop				
002C3:      	nop
            ; //_A30BB6F62_136:;				
            _A30BB6F62_136:
            ; //	asm clr io[0x09].b14;			
002C4:      	clr io[0x09].b14//
            ; //_A30BB6F62_137:;				
            _A30BB6F62_137:
            ; //	asm	nop				
002C5:      	nop
            ; //_A30BB6F62_138:;				
            _A30BB6F62_138:
            ; //	asm	nop				
002C6:      	nop
            ; //_A30BB6F62_139:;				
            _A30BB6F62_139:
            ; //	asm	nop				
002C7:      	nop
            ; //_A30BB6F62_140:;				
            _A30BB6F62_140:
            ; //	asm set io[0x09].b14;			
002C8:      	set io[0x09].b14//
            ; //_A30BB6F62_141:;				
            _A30BB6F62_141:
            ; //	asm	nop				
002C9:      	nop
            ; //_A30BB6F62_142:;				
            _A30BB6F62_142:
            ; //	asm	nop				
002CA:      	nop
            ; //_A30BB6F62_143:;				
            _A30BB6F62_143:
            ; //	asm	nop				
002CB:      	nop
            ; //_A30BB6F62_144:;				
            _A30BB6F62_144:
            ; //	asm	nop				
002CC:      	nop
            ; //_A30BB6F62_145:;				
            _A30BB6F62_145:
            ; //	asm	nop				
002CD:      	nop
            ; //_A30BB6F62_146:;				
            _A30BB6F62_146:
            ; //	asm	nop				
002CE:      	nop
            ; //_A30BB6F62_147:;				
            _A30BB6F62_147:
            ; //	asm	nop				
002CF:      	nop
            ; //_A30BB6F62_148:;				
            _A30BB6F62_148:
            ; //	asm	nop				
002D0:      	nop
            ; //_A30BB6F62_149:;				
            _A30BB6F62_149:
            ; //	asm	nop				
002D1:      	nop
            ; //_A30BB6F62_150:;				
            _A30BB6F62_150:
            ; //	asm	nop				
002D2:      	nop
            ; //_A30BB6F62_151:;				
            _A30BB6F62_151:
            ; //	asm	nop				
002D3:      	nop
            ; //_A30BB6F62_152:;				
            _A30BB6F62_152:
            ; //	asm	nop				
002D4:      	nop
            ; //_A30BB6F62_153:;				
            _A30BB6F62_153:
            ; //	asm clr io[0x09].b14;			
002D5:      	clr io[0x09].b14//
            ; //_A30BB6F62_154:;				
            _A30BB6F62_154:
            ; //	asm	nop				
002D6:      	nop
            ; //_A30BB6F62_155:;				
            _A30BB6F62_155:
            ; //	asm	nop				
002D7:      	nop
            ; //_A30BB6F62_156:;				
            _A30BB6F62_156:
            ; //	asm	nop				
002D8:      	nop
            ; //_A30BB6F62_157:;				
            _A30BB6F62_157:
            ; //	asm set io[0x09].b14;			
002D9:      	set io[0x09].b14//
            ; //_A30BB6F62_158:;				
            _A30BB6F62_158:
            ; //	asm	nop				
002DA:      	nop
            ; //_A30BB6F62_159:;				
            _A30BB6F62_159:
            ; //	asm	nop				
002DB:      	nop
            ; //_A30BB6F62_160:;				
            _A30BB6F62_160:
            ; //	asm	nop				
002DC:      	nop
            ; //_A30BB6F62_161:;				
            _A30BB6F62_161:
            ; //	asm	nop				
002DD:      	nop
            ; //_A30BB6F62_162:;				
            _A30BB6F62_162:
            ; //	asm	nop				
002DE:      	nop
            ; //_A30BB6F62_163:;				
            _A30BB6F62_163:
            ; //	asm	nop				
002DF:      	nop
            ; //_A30BB6F62_164:;				
            _A30BB6F62_164:
            ; //	asm	nop				
002E0:      	nop
            ; //_A30BB6F62_165:;				
            _A30BB6F62_165:
            ; //	asm	nop				
002E1:      	nop
            ; //_A30BB6F62_166:;				
            _A30BB6F62_166:
            ; //	asm	nop				
002E2:      	nop
            ; //_A30BB6F62_167:;				
            _A30BB6F62_167:
            ; //	asm	nop				
002E3:      	nop
            ; //_A30BB6F62_168:;				
            _A30BB6F62_168:
            ; //	asm	nop				
002E4:      	nop
            ; //_A30BB6F62_169:;				
            _A30BB6F62_169:
            ; //	asm	nop				
002E5:      	nop
            ; //_A30BB6F62_170:;				
            _A30BB6F62_170:
            ; //	asm clr io[0x09].b14;			
002E6:      	clr io[0x09].b14//
            ; //_A30BB6F62_171:;				
            _A30BB6F62_171:
            ; //	asm	nop				
002E7:      	nop
            ; //_A30BB6F62_172:;				
            _A30BB6F62_172:
            ; //	asm	nop				
002E8:      	nop
            ; //_A30BB6F62_173:;				
            _A30BB6F62_173:
            ; //	asm	nop				
002E9:      	nop
            ; //_A30BB6F62_174:;				
            _A30BB6F62_174:
            ; //	asm set io[0x09].b14;			
002EA:      	set io[0x09].b14//
            ; //_A30BB6F62_175:;				
            _A30BB6F62_175:
            ; //	asm	nop				
002EB:      	nop
            ; //_A30BB6F62_176:;				
            _A30BB6F62_176:
            ; //	asm	nop				
002EC:      	nop
            ; //_A30BB6F62_177:;				
            _A30BB6F62_177:
            ; //	asm	nop				
002ED:      	nop
            ; //_A30BB6F62_178:;				
            _A30BB6F62_178:
            ; //	asm	nop				
002EE:      	nop
            ; //_A30BB6F62_179:;				
            _A30BB6F62_179:
            ; //	asm	nop				
002EF:      	nop
            ; //_A30BB6F62_180:;				
            _A30BB6F62_180:
            ; //	asm	nop				
002F0:      	nop
            ; //_A30BB6F62_181:;				
            _A30BB6F62_181:
            ; //	asm	nop				
002F1:      	nop
            ; //_A30BB6F62_182:;				
            _A30BB6F62_182:
            ; //	asm	nop				
002F2:      	nop
            ; //_A30BB6F62_183:;				
            _A30BB6F62_183:
            ; //	asm	nop				
002F3:      	nop
            ; //_A30BB6F62_184:;				
            _A30BB6F62_184:
            ; //	asm	nop				
002F4:      	nop
            ; //_A30BB6F62_185:;				
            _A30BB6F62_185:
            ; //	asm	nop				
002F5:      	nop
            ; //_A30BB6F62_186:;				
            _A30BB6F62_186:
            ; //	asm	nop				
002F6:      	nop
            ; //_A30BB6F62_187:;				
            _A30BB6F62_187:
            ; //	asm clr io[0x09].b14;			
002F7:      	clr io[0x09].b14//
            ; //_A30BB6F62_188:;				
            _A30BB6F62_188:
            ; //	asm	nop				
002F8:      	nop
            ; //_A30BB6F62_189:;				
            _A30BB6F62_189:
            ; //	asm	nop				
002F9:      	nop
            ; //_A30BB6F62_190:;				
            _A30BB6F62_190:
            ; //	asm	nop				
002FA:      	nop
            ; //_A30BB6F62_191:;				
            _A30BB6F62_191:
            ; //	asm set io[0x09].b14;			
002FB:      	set io[0x09].b14//
            ; //_A30BB6F62_192:;				
            _A30BB6F62_192:
            ; //	asm	nop				
002FC:      	nop
            ; //_A30BB6F62_193:;				
            _A30BB6F62_193:
            ; //	asm	nop				
002FD:      	nop
            ; //_A30BB6F62_194:;				
            _A30BB6F62_194:
            ; //	asm	nop				
002FE:      	nop
            ; //_A30BB6F62_195:;				
            _A30BB6F62_195:
            ; //	asm	nop				
002FF:      	nop
            ; //_A30BB6F62_196:;				
            _A30BB6F62_196:
            ; //	asm	nop				
00300:      	nop
            ; //_A30BB6F62_197:;				
            _A30BB6F62_197:
            ; //	asm	nop				
00301:      	nop
            ; //_A30BB6F62_198:;				
            _A30BB6F62_198:
            ; //	asm	nop				
00302:      	nop
            ; //_A30BB6F62_199:;				
            _A30BB6F62_199:
            ; //	asm	nop				
00303:      	nop
            ; //_A30BB6F62_200:;				
            _A30BB6F62_200:
            ; //	asm	nop				
00304:      	nop
            ; //_A30BB6F62_201:;				
            _A30BB6F62_201:
            ; //	asm	nop				
00305:      	nop
            ; //_A30BB6F62_202:;				
            _A30BB6F62_202:
            ; //	asm	nop				
00306:      	nop
            ; //_A30BB6F62_203:;				
            _A30BB6F62_203:
            ; //	asm	nop				
00307:      	nop
            ; //_A30BB6F62_204:;				
            _A30BB6F62_204:
            ; //	asm clr io[0x09].b14;			
00308:      	clr io[0x09].b14//
            ; //_A30BB6F62_205:;				
            _A30BB6F62_205:
            ; //	asm	nop				
00309:      	nop
            ; //_A30BB6F62_206:;				
            _A30BB6F62_206:
            ; //	asm	nop				
0030A:      	nop
            ; //_A30BB6F62_207:;				
            _A30BB6F62_207:
            ; //	asm	nop				
0030B:      	nop
            ; //_A30BB6F62_208:;				
            _A30BB6F62_208:
            ; //	asm set io[0x09].b14;			
0030C:      	set io[0x09].b14//
            ; //_A30BB6F62_209:;				
            _A30BB6F62_209:
            ; //	asm	nop				
0030D:      	nop
            ; //_A30BB6F62_210:;				
            _A30BB6F62_210:
            ; //	asm	nop				
0030E:      	nop
            ; //_A30BB6F62_211:;				
            _A30BB6F62_211:
            ; //	asm	nop				
0030F:      	nop
            ; //_A30BB6F62_212:;				
            _A30BB6F62_212:
            ; //	asm	nop				
00310:      	nop
            ; //_A30BB6F62_213:;				
            _A30BB6F62_213:
            ; //	asm	nop				
00311:      	nop
            ; //_A30BB6F62_214:;				
            _A30BB6F62_214:
            ; //	asm	nop				
00312:      	nop
            ; //_A30BB6F62_215:;				
            _A30BB6F62_215:
            ; //	asm	nop				
00313:      	nop
            ; //_A30BB6F62_216:;				
            _A30BB6F62_216:
            ; //	asm	nop				
00314:      	nop
            ; //_A30BB6F62_217:;				
            _A30BB6F62_217:
            ; //	asm	nop				
00315:      	nop
            ; //_A30BB6F62_218:;				
            _A30BB6F62_218:
            ; //	asm	nop				
00316:      	nop
            ; //_A30BB6F62_219:;				
            _A30BB6F62_219:
            ; //	asm	nop				
00317:      	nop
            ; //_A30BB6F62_220:;				
            _A30BB6F62_220:
            ; //	asm	nop				
00318:      	nop
            ; //_A30BB6F62_221:;				
            _A30BB6F62_221:
            ; //	asm clr io[0x09].b14;			
00319:      	clr io[0x09].b14//
            ; //_A30BB6F62_222:;				
            _A30BB6F62_222:
            ; //	asm	nop				
0031A:      	nop
            ; //_A30BB6F62_223:;				
            _A30BB6F62_223:
            ; //	asm	nop				
0031B:      	nop
            ; //_A30BB6F62_224:;				
            _A30BB6F62_224:
            ; //	asm	nop				
0031C:      	nop
            ; //_A30BB6F62_225:;				
            _A30BB6F62_225:
            ; //	asm set io[0x09].b14;			
0031D:      	set io[0x09].b14//
            ; //_A30BB6F62_226:;				
            _A30BB6F62_226:
            ; //	asm	nop				
0031E:      	nop
            ; //_A30BB6F62_227:;				
            _A30BB6F62_227:
            ; //	asm	nop				
0031F:      	nop
            ; //_A30BB6F62_228:;				
            _A30BB6F62_228:
            ; //	asm	nop				
00320:      	nop
            ; //_A30BB6F62_229:;				
            _A30BB6F62_229:
            ; //	asm	nop				
00321:      	nop
            ; //_A30BB6F62_230:;				
            _A30BB6F62_230:
            ; //	asm	nop				
00322:      	nop
            ; //_A30BB6F62_231:;				
            _A30BB6F62_231:
            ; //	asm	nop				
00323:      	nop
            ; //_A30BB6F62_232:;				
            _A30BB6F62_232:
            ; //	asm	nop				
00324:      	nop
            ; //_A30BB6F62_233:;				
            _A30BB6F62_233:
            ; //	asm	nop				
00325:      	nop
            ; //_A30BB6F62_234:;				
            _A30BB6F62_234:
            ; //	asm	nop				
00326:      	nop
            ; //_A30BB6F62_235:;				
            _A30BB6F62_235:
            ; //	asm	nop				
00327:      	nop
            ; //_A30BB6F62_236:;				
            _A30BB6F62_236:
            ; //	asm	nop				
00328:      	nop
            ; //_A30BB6F62_237:;				
            _A30BB6F62_237:
            ; //	asm	nop				
00329:      	nop
            ; //_A30BB6F62_238:;				
            _A30BB6F62_238:
            ; //	asm clr io[0x09].b14;			
0032A:      	clr io[0x09].b14//
            ; //_A30BB6F62_239:;				
            _A30BB6F62_239:
            ; //	asm	nop				
0032B:      	nop
            ; //_A30BB6F62_240:;				
            _A30BB6F62_240:
            ; //	asm	nop				
0032C:      	nop
            ; //_A30BB6F62_241:;				
            _A30BB6F62_241:
            ; //	asm	nop				
0032D:      	nop
            ; //_A30BB6F62_242:;				
            _A30BB6F62_242:
            ; //	asm set io[0x09].b14;			
0032E:      	set io[0x09].b14//
            ; //_A30BB6F62_243:;				
            _A30BB6F62_243:
            ; //	asm	nop				
0032F:      	nop
            ; //_A30BB6F62_244:;				
            _A30BB6F62_244:
            ; //	asm	nop				
00330:      	nop
            ; //_A30BB6F62_245:;				
            _A30BB6F62_245:
            ; //	asm	nop				
00331:      	nop
            ; //_A30BB6F62_246:;				
            _A30BB6F62_246:
            ; //	asm	nop				
00332:      	nop
            ; //_A30BB6F62_247:;				
            _A30BB6F62_247:
            ; //	asm	nop				
00333:      	nop
            ; //_A30BB6F62_248:;				
            _A30BB6F62_248:
            ; //	asm	nop				
00334:      	nop
            ; //_A30BB6F62_249:;				
            _A30BB6F62_249:
            ; //	asm	nop				
00335:      	nop
            ; //_A30BB6F62_250:;				
            _A30BB6F62_250:
            ; //	asm	nop				
00336:      	nop
            ; //_A30BB6F62_251:;				
            _A30BB6F62_251:
            ; //	asm	nop				
00337:      	nop
            ; //_A30BB6F62_252:;				
            _A30BB6F62_252:
            ; //	asm	nop				
00338:      	nop
            ; //_A30BB6F62_253:;				
            _A30BB6F62_253:
            ; //	asm	nop				
00339:      	nop
            ; //_A30BB6F62_254:;				
            _A30BB6F62_254:
            ; //	asm	nop				
0033A:      	nop
            ; //_A30BB6F62_255:;				
            _A30BB6F62_255:
            ; //	asm clr io[0x09].b14;			
0033B:      	clr io[0x09].b14//
            ; //_A30BB6F62_256:;				
            _A30BB6F62_256:
            ; //	asm	nop				
0033C:      	nop
            ; //_A30BB6F62_257:;				
            _A30BB6F62_257:
            ; //	asm	nop				
0033D:      	nop
            ; //_A30BB6F62_258:;				
            _A30BB6F62_258:
            ; //	asm	nop				
0033E:      	nop
            ; //_A30BB6F62_259:;				
            _A30BB6F62_259:
            ; //	asm set io[0x09].b14;			
0033F:      	set io[0x09].b14//
            ; //_A30BB6F62_260:;				
            _A30BB6F62_260:
            ; //	asm	nop				
00340:      	nop
            ; //_A30BB6F62_261:;				
            _A30BB6F62_261:
            ; //	asm	nop				
00341:      	nop
            ; //_A30BB6F62_262:;				
            _A30BB6F62_262:
            ; //	asm	nop				
00342:      	nop
            ; //_A30BB6F62_263:;				
            _A30BB6F62_263:
            ; //	asm	nop				
00343:      	nop
            ; //_A30BB6F62_264:;				
            _A30BB6F62_264:
            ; //	asm	nop				
00344:      	nop
            ; //_A30BB6F62_265:;				
            _A30BB6F62_265:
            ; //	asm	nop				
00345:      	nop
            ; //_A30BB6F62_266:;				
            _A30BB6F62_266:
            ; //	asm	nop				
00346:      	nop
            ; //_A30BB6F62_267:;				
            _A30BB6F62_267:
            ; //	asm	nop				
00347:      	nop
            ; //_A30BB6F62_268:;				
            _A30BB6F62_268:
            ; //	asm	nop				
00348:      	nop
            ; //_A30BB6F62_269:;				
            _A30BB6F62_269:
            ; //	asm	nop				
00349:      	nop
            ; //_A30BB6F62_270:;				
            _A30BB6F62_270:
            ; //	asm	nop				
0034A:      	nop
            ; //_A30BB6F62_271:;				
            _A30BB6F62_271:
            ; //	asm	nop				
0034B:      	nop
            ; //_A30BB6F62_272:;				
            _A30BB6F62_272:
            ; //	asm clr io[0x09].b14;			
0034C:      	clr io[0x09].b14//
            ; //_A30BB6F62_273:;				
            _A30BB6F62_273:
            ; //	asm	nop				
0034D:      	nop
            ; //_A30BB6F62_274:;				
            _A30BB6F62_274:
            ; //	asm	nop				
0034E:      	nop
            ; //_A30BB6F62_275:;				
            _A30BB6F62_275:
            ; //	asm	nop				
0034F:      	nop
            ; //_A30BB6F62_276:;				
            _A30BB6F62_276:
            ; //	asm set io[0x09].b14;			
00350:      	set io[0x09].b14//
            ; //_A30BB6F62_277:;				
            _A30BB6F62_277:
            ; //	asm	nop				
00351:      	nop
            ; //_A30BB6F62_278:;				
            _A30BB6F62_278:
            ; //	asm	nop				
00352:      	nop
            ; //_A30BB6F62_279:;				
            _A30BB6F62_279:
            ; //	asm	nop				
00353:      	nop
            ; //_A30BB6F62_280:;				
            _A30BB6F62_280:
            ; //	asm	nop				
00354:      	nop
            ; //_A30BB6F62_281:;				
            _A30BB6F62_281:
            ; //	asm	nop				
00355:      	nop
            ; //_A30BB6F62_282:;				
            _A30BB6F62_282:
            ; //	asm	nop				
00356:      	nop
            ; //_A30BB6F62_283:;				
            _A30BB6F62_283:
            ; //	asm	nop				
00357:      	nop
            ; //_A30BB6F62_284:;				
            _A30BB6F62_284:
            ; //	asm	nop				
00358:      	nop
            ; //_A30BB6F62_285:;				
            _A30BB6F62_285:
            ; //	asm	nop				
00359:      	nop
            ; //_A30BB6F62_286:;				
            _A30BB6F62_286:
            ; //	asm	nop				
0035A:      	nop
            ; //_A30BB6F62_287:;				
            _A30BB6F62_287:
            ; //	asm	nop				
0035B:      	nop
            ; //_A30BB6F62_288:;				
            _A30BB6F62_288:
            ; //	asm	nop				
0035C:      	nop
            ; //_A30BB6F62_289:;				
            _A30BB6F62_289:
            ; //	asm clr io[0x09].b14;			
0035D:      	clr io[0x09].b14//
            ; //_A30BB6F62_290:;				
            _A30BB6F62_290:
            ; //	asm	nop				
0035E:      	nop
            ; //_A30BB6F62_291:;				
            _A30BB6F62_291:
            ; //	asm	nop				
0035F:      	nop
            ; //_A30BB6F62_292:;				
            _A30BB6F62_292:
            ; //	asm	nop				
00360:      	nop
            ; //_A30BB6F62_293:;				
            _A30BB6F62_293:
            ; //	asm set io[0x09].b14;			
00361:      	set io[0x09].b14//
            ; //_A30BB6F62_294:;				
            _A30BB6F62_294:
            ; //	asm	nop				
00362:      	nop
            ; //_A30BB6F62_295:;				
            _A30BB6F62_295:
            ; //	asm	nop				
00363:      	nop
            ; //_A30BB6F62_296:;				
            _A30BB6F62_296:
            ; //	asm	nop				
00364:      	nop
            ; //_A30BB6F62_297:;				
            _A30BB6F62_297:
            ; //	asm	nop				
00365:      	nop
            ; //_A30BB6F62_298:;				
            _A30BB6F62_298:
            ; //	asm	nop				
00366:      	nop
            ; //_A30BB6F62_299:;				
            _A30BB6F62_299:
            ; //	asm	nop				
00367:      	nop
            ; //_A30BB6F62_300:;				
            _A30BB6F62_300:
            ; //	asm	nop				
00368:      	nop
            ; //_A30BB6F62_301:;				
            _A30BB6F62_301:
            ; //	asm	nop				
00369:      	nop
            ; //_A30BB6F62_302:;				
            _A30BB6F62_302:
            ; //	asm	nop				
0036A:      	nop
            ; //_A30BB6F62_303:;				
            _A30BB6F62_303:
            ; //	asm	nop				
0036B:      	nop
            ; //_A30BB6F62_304:;				
            _A30BB6F62_304:
            ; //	asm	nop				
0036C:      	nop
            ; //_A30BB6F62_305:;				
            _A30BB6F62_305:
            ; //	asm	nop				
0036D:      	nop
            ; //_A30BB6F62_306:;				
            _A30BB6F62_306:
            ; //	asm clr io[0x09].b14;			
0036E:      	clr io[0x09].b14//
            ; //_A30BB6F62_307:;				
            _A30BB6F62_307:
            ; //	asm	nop				
0036F:      	nop
            ; //_A30BB6F62_308:;				
            _A30BB6F62_308:
            ; //	asm	nop				
00370:      	nop
            ; //_A30BB6F62_309:;				
            _A30BB6F62_309:
            ; //	asm	nop				
00371:      	nop
            ; //_A30BB6F62_310:;				
            _A30BB6F62_310:
            ; //	asm set io[0x09].b14;			
00372:      	set io[0x09].b14//
            ; //_A30BB6F62_311:;				
            _A30BB6F62_311:
            ; //	asm	nop				
00373:      	nop
            ; //_A30BB6F62_312:;				
            _A30BB6F62_312:
            ; //	asm	nop				
00374:      	nop
            ; //_A30BB6F62_313:;				
            _A30BB6F62_313:
            ; //	asm	nop				
00375:      	nop
            ; //_A30BB6F62_314:;				
            _A30BB6F62_314:
            ; //	asm	nop				
00376:      	nop
            ; //_A30BB6F62_315:;				
            _A30BB6F62_315:
            ; //	asm	nop				
00377:      	nop
            ; //_A30BB6F62_316:;				
            _A30BB6F62_316:
            ; //	asm	nop				
00378:      	nop
            ; //_A30BB6F62_317:;				
            _A30BB6F62_317:
            ; //	asm	nop				
00379:      	nop
            ; //_A30BB6F62_318:;				
            _A30BB6F62_318:
            ; //	asm	nop				
0037A:      	nop
            ; //_A30BB6F62_319:;				
            _A30BB6F62_319:
            ; //	asm	nop				
0037B:      	nop
            ; //_A30BB6F62_320:;				
            _A30BB6F62_320:
            ; //	asm	nop				
0037C:      	nop
            ; //_A30BB6F62_321:;				
            _A30BB6F62_321:
            ; //	asm	nop				
0037D:      	nop
            ; //_A30BB6F62_322:;				
            _A30BB6F62_322:
            ; //	asm	nop				
0037E:      	nop
            ; //_A30BB6F62_323:;				
            _A30BB6F62_323:
            ; //	asm clr io[0x09].b14;			
0037F:      	clr io[0x09].b14//
            ; //_A30BB6F62_324:;				
            _A30BB6F62_324:
            ; //	asm	nop				
00380:      	nop
            ; //_A30BB6F62_325:;				
            _A30BB6F62_325:
            ; //	asm	nop				
00381:      	nop
            ; //_A30BB6F62_326:;				
            _A30BB6F62_326:
            ; //	asm	nop				
00382:      	nop
            ; //_A30BB6F62_327:;				
            _A30BB6F62_327:
            ; //	asm set io[0x09].b14;			
00383:      	set io[0x09].b14//
            ; //_A30BB6F62_328:;				
            _A30BB6F62_328:
            ; //	asm	nop				
00384:      	nop
            ; //_A30BB6F62_329:;				
            _A30BB6F62_329:
            ; //	asm	nop				
00385:      	nop
            ; //_A30BB6F62_330:;				
            _A30BB6F62_330:
            ; //	asm	nop				
00386:      	nop
            ; //_A30BB6F62_331:;				
            _A30BB6F62_331:
            ; //	asm	nop				
00387:      	nop
            ; //_A30BB6F62_332:;				
            _A30BB6F62_332:
            ; //	asm	nop				
00388:      	nop
            ; //_A30BB6F62_333:;				
            _A30BB6F62_333:
            ; //	asm	nop				
00389:      	nop
            ; //_A30BB6F62_334:;				
            _A30BB6F62_334:
            ; //	asm	nop				
0038A:      	nop
            ; //_A30BB6F62_335:;				
            _A30BB6F62_335:
            ; //	asm	nop				
0038B:      	nop
            ; //_A30BB6F62_336:;				
            _A30BB6F62_336:
            ; //	asm	nop				
0038C:      	nop
            ; //_A30BB6F62_337:;				
            _A30BB6F62_337:
            ; //	asm	nop				
0038D:      	nop
            ; //_A30BB6F62_338:;				
            _A30BB6F62_338:
            ; //	asm	nop				
0038E:      	nop
            ; //_A30BB6F62_339:;				
            _A30BB6F62_339:
            ; //	asm	nop				
0038F:      	nop
            ; //_A30BB6F62_340:;				
            _A30BB6F62_340:
            ; //	asm clr io[0x09].b14;			
00390:      	clr io[0x09].b14//
            ; //_A30BB6F62_341:;				
            _A30BB6F62_341:
            ; //	asm	nop				
00391:      	nop
            ; //_A30BB6F62_342:;				
            _A30BB6F62_342:
            ; //	asm	nop				
00392:      	nop
            ; //_A30BB6F62_343:;				
            _A30BB6F62_343:
            ; //	asm	nop				
00393:      	nop
            ; //_A30BB6F62_344:;				
            _A30BB6F62_344:
            ; //	asm set io[0x09].b14;			
00394:      	set io[0x09].b14//
            ; //_A30BB6F62_345:;				
            _A30BB6F62_345:
            ; //	asm	nop				
00395:      	nop
            ; //_A30BB6F62_346:;				
            _A30BB6F62_346:
            ; //	asm	nop				
00396:      	nop
            ; //_A30BB6F62_347:;				
            _A30BB6F62_347:
            ; //	asm	nop				
00397:      	nop
            ; //_A30BB6F62_348:;				
            _A30BB6F62_348:
            ; //	asm	nop				
00398:      	nop
            ; //_A30BB6F62_349:;				
            _A30BB6F62_349:
            ; //	asm	nop				
00399:      	nop
            ; //_A30BB6F62_350:;				
            _A30BB6F62_350:
            ; //	asm	nop				
0039A:      	nop
            ; //_A30BB6F62_351:;				
            _A30BB6F62_351:
            ; //	asm	nop				
0039B:      	nop
            ; //_A30BB6F62_352:;				
            _A30BB6F62_352:
            ; //	asm	nop				
0039C:      	nop
            ; //_A30BB6F62_353:;				
            _A30BB6F62_353:
            ; //	asm	nop				
0039D:      	nop
            ; //_A30BB6F62_354:;				
            _A30BB6F62_354:
            ; //	asm	nop				
0039E:      	nop
            ; //_A30BB6F62_355:;				
            _A30BB6F62_355:
            ; //	asm	nop				
0039F:      	nop
            ; //_A30BB6F62_356:;				
            _A30BB6F62_356:
            ; //	asm	nop				
003A0:      	nop
            ; //_A30BB6F62_357:;				
            _A30BB6F62_357:
            ; //	asm clr io[0x09].b14;			
003A1:      	clr io[0x09].b14//
            ; //_A30BB6F62_358:;				
            _A30BB6F62_358:
            ; //	asm	nop				
003A2:      	nop
            ; //_A30BB6F62_359:;				
            _A30BB6F62_359:
            ; //	asm	nop				
003A3:      	nop
            ; //_A30BB6F62_360:;				
            _A30BB6F62_360:
            ; //	asm	nop				
003A4:      	nop
            ; //_A30BB6F62_361:;				
            _A30BB6F62_361:
            ; //	asm set io[0x09].b14;			
003A5:      	set io[0x09].b14//
            ; //_A30BB6F62_362:;				
            _A30BB6F62_362:
            ; //	asm	nop				
003A6:      	nop
            ; //_A30BB6F62_363:;				
            _A30BB6F62_363:
            ; //	asm	nop				
003A7:      	nop
            ; //_A30BB6F62_364:;				
            _A30BB6F62_364:
            ; //	asm	nop				
003A8:      	nop
            ; //_A30BB6F62_365:;				
            _A30BB6F62_365:
            ; //	asm	nop				
003A9:      	nop
            ; //_A30BB6F62_366:;				
            _A30BB6F62_366:
            ; //	asm	nop				
003AA:      	nop
            ; //_A30BB6F62_367:;				
            _A30BB6F62_367:
            ; //	asm	nop				
003AB:      	nop
            ; //_A30BB6F62_368:;				
            _A30BB6F62_368:
            ; //	asm	nop				
003AC:      	nop
            ; //_A30BB6F62_369:;				
            _A30BB6F62_369:
            ; //	asm	nop				
003AD:      	nop
            ; //_A30BB6F62_370:;				
            _A30BB6F62_370:
            ; //	asm	nop				
003AE:      	nop
            ; //_A30BB6F62_371:;				
            _A30BB6F62_371:
            ; //	asm	nop				
003AF:      	nop
            ; //_A30BB6F62_372:;				
            _A30BB6F62_372:
            ; //	asm	nop				
003B0:      	nop
            ; //_A30BB6F62_373:;				
            _A30BB6F62_373:
            ; //	asm	nop				
003B1:      	nop
            ; //_A30BB6F62_374:;				
            _A30BB6F62_374:
            ; //	asm clr io[0x09].b14;			
003B2:      	clr io[0x09].b14//
            ; //_A30BB6F62_375:;				
            _A30BB6F62_375:
            ; //	asm	nop				
003B3:      	nop
            ; //_A30BB6F62_376:;				
            _A30BB6F62_376:
            ; //	asm	nop				
003B4:      	nop
            ; //_A30BB6F62_377:;				
            _A30BB6F62_377:
            ; //	asm	nop				
003B5:      	nop
            ; //_A30BB6F62_378:;				
            _A30BB6F62_378:
            ; //	asm set io[0x09].b14;			
003B6:      	set io[0x09].b14//
            ; //_A30BB6F62_379:;				
            _A30BB6F62_379:
            ; //	asm	nop				
003B7:      	nop
            ; //_A30BB6F62_380:;				
            _A30BB6F62_380:
            ; //	asm	nop				
003B8:      	nop
            ; //_A30BB6F62_381:;				
            _A30BB6F62_381:
            ; //	asm	nop				
003B9:      	nop
            ; //_A30BB6F62_382:;				
            _A30BB6F62_382:
            ; //	asm	nop				
003BA:      	nop
            ; //_A30BB6F62_383:;				
            _A30BB6F62_383:
            ; //	asm	nop				
003BB:      	nop
            ; //_A30BB6F62_384:;				
            _A30BB6F62_384:
            ; //	asm	nop				
003BC:      	nop
            ; //_A30BB6F62_385:;				
            _A30BB6F62_385:
            ; //	asm	nop				
003BD:      	nop
            ; //_A30BB6F62_386:;				
            _A30BB6F62_386:
            ; //	asm	nop				
003BE:      	nop
            ; //_A30BB6F62_387:;				
            _A30BB6F62_387:
            ; //	asm	nop				
003BF:      	nop
            ; //_A30BB6F62_388:;				
            _A30BB6F62_388:
            ; //	asm	nop				
003C0:      	nop
            ; //_A30BB6F62_389:;				
            _A30BB6F62_389:
            ; //	asm	nop				
003C1:      	nop
            ; //_A30BB6F62_390:;				
            _A30BB6F62_390:
            ; //	asm	nop				
003C2:      	nop
            ; //_A30BB6F62_391:;				
            _A30BB6F62_391:
            ; //	asm clr io[0x09].b14;			
003C3:      	clr io[0x09].b14//
            ; //_A30BB6F62_392:;				
            _A30BB6F62_392:
            ; //	asm	nop				
003C4:      	nop
            ; //_A30BB6F62_393:;				
            _A30BB6F62_393:
            ; //	asm	nop				
003C5:      	nop
            ; //_A30BB6F62_394:;				
            _A30BB6F62_394:
            ; //	asm	nop				
003C6:      	nop
            ; //_A30BB6F62_395:;				
            _A30BB6F62_395:
            ; //	asm set io[0x09].b14;			
003C7:      	set io[0x09].b14//
            ; //_A30BB6F62_396:;				
            _A30BB6F62_396:
            ; //	asm	nop				
003C8:      	nop
            ; //_A30BB6F62_397:;				
            _A30BB6F62_397:
            ; //	asm	nop				
003C9:      	nop
            ; //_A30BB6F62_398:;				
            _A30BB6F62_398:
            ; //	asm	nop				
003CA:      	nop
            ; //_A30BB6F62_399:;				
            _A30BB6F62_399:
            ; //	asm	nop				
003CB:      	nop
            ; //_A30BB6F62_400:;				
            _A30BB6F62_400:
            ; //	asm	nop				
003CC:      	nop
            ; //_A30BB6F62_401:;				
            _A30BB6F62_401:
            ; //	asm	nop				
003CD:      	nop
            ; //_A30BB6F62_402:;				
            _A30BB6F62_402:
            ; //	asm	nop				
003CE:      	nop
            ; //_A30BB6F62_403:;				
            _A30BB6F62_403:
            ; //	asm	nop				
003CF:      	nop
            ; //_A30BB6F62_404:;				
            _A30BB6F62_404:
            ; //	asm	nop				
003D0:      	nop
            ; //_A30BB6F62_405:;				
            _A30BB6F62_405:
            ; //	asm	nop				
003D1:      	nop
            ; //_A30BB6F62_406:;				
            _A30BB6F62_406:
            ; //	asm	nop				
003D2:      	nop
            ; //_A30BB6F62_407:;				
            _A30BB6F62_407:
            ; //	asm	nop				
003D3:      	nop
            ; //_A30BB6F62_408:;				
            _A30BB6F62_408:
            ; //	asm clr io[0x09].b14;			
003D4:      	clr io[0x09].b14//
            ; //_A30BB6F62_409:;				
            _A30BB6F62_409:
            ; //	asm	nop				
003D5:      	nop
            ; //_A30BB6F62_410:;				
            _A30BB6F62_410:
            ; //	asm	nop				
003D6:      	nop
            ; //_A30BB6F62_411:;				
            _A30BB6F62_411:
            ; //	asm	nop				
003D7:      	nop
            ; //_A30BB6F62_412:;				
            _A30BB6F62_412:
            ; //	asm set io[0x09].b14;			
003D8:      	set io[0x09].b14//
            ; //_A30BB6F62_413:;				
            _A30BB6F62_413:
            ; //	asm	nop				
003D9:      	nop
            ; //_A30BB6F62_414:;				
            _A30BB6F62_414:
            ; //	asm	nop				
003DA:      	nop
            ; //_A30BB6F62_415:;				
            _A30BB6F62_415:
            ; //	asm	nop				
003DB:      	nop
            ; //_A30BB6F62_416:;				
            _A30BB6F62_416:
            ; //	asm	nop				
003DC:      	nop
            ; //_A30BB6F62_417:;				
            _A30BB6F62_417:
            ; //	asm	nop				
003DD:      	nop
            ; //_A30BB6F62_418:;				
            _A30BB6F62_418:
            ; //	asm	nop				
003DE:      	nop
            ; //_A30BB6F62_419:;				
            _A30BB6F62_419:
            ; //	asm	nop				
003DF:      	nop
            ; //_A30BB6F62_420:;				
            _A30BB6F62_420:
            ; //	asm	nop				
003E0:      	nop
            ; //_A30BB6F62_421:;				
            _A30BB6F62_421:
            ; //	asm	nop				
003E1:      	nop
            ; //_A30BB6F62_422:;				
            _A30BB6F62_422:
            ; //	asm	nop				
003E2:      	nop
            ; //_A30BB6F62_423:;				
            _A30BB6F62_423:
            ; //	asm	nop				
003E3:      	nop
            ; //_A30BB6F62_424:;				
            _A30BB6F62_424:
            ; //	asm	nop				
003E4:      	nop
            ; //_A30BB6F62_425:;				
            _A30BB6F62_425:
            ; //	asm clr io[0x09].b14;			
003E5:      	clr io[0x09].b14//
            ; //_A30BB6F62_426:;				
            _A30BB6F62_426:
            ; //	asm	nop				
003E6:      	nop
            ; //_A30BB6F62_427:;				
            _A30BB6F62_427:
            ; //	asm	nop				
003E7:      	nop
            ; //_A30BB6F62_428:;				
            _A30BB6F62_428:
            ; //	asm	nop				
003E8:      	nop
            ; //_A30BB6F62_429:;				
            _A30BB6F62_429:
            ; //	asm set io[0x09].b14;			
003E9:      	set io[0x09].b14//
            ; //_A30BB6F62_430:;				
            _A30BB6F62_430:
            ; //	asm	nop				
003EA:      	nop
            ; //_A30BB6F62_431:;				
            _A30BB6F62_431:
            ; //	asm	nop				
003EB:      	nop
            ; //_A30BB6F62_432:;				
            _A30BB6F62_432:
            ; //	asm	nop				
003EC:      	nop
            ; //_A30BB6F62_433:;				
            _A30BB6F62_433:
            ; //	asm	nop				
003ED:      	nop
            ; //_A30BB6F62_434:;				
            _A30BB6F62_434:
            ; //	asm	nop				
003EE:      	nop
            ; //_A30BB6F62_435:;				
            _A30BB6F62_435:
            ; //	asm	nop				
003EF:      	nop
            ; //_A30BB6F62_436:;				
            _A30BB6F62_436:
            ; //	asm	nop				
003F0:      	nop
            ; //_A30BB6F62_437:;				
            _A30BB6F62_437:
            ; //	asm	nop				
003F1:      	nop
            ; //_A30BB6F62_438:;				
            _A30BB6F62_438:
            ; //	asm	nop				
003F2:      	nop
            ; //_A30BB6F62_439:;				
            _A30BB6F62_439:
            ; //	asm	nop				
003F3:      	nop
            ; //_A30BB6F62_440:;				
            _A30BB6F62_440:
            ; //	asm	nop				
003F4:      	nop
            ; //_A30BB6F62_441:;				
            _A30BB6F62_441:
            ; //	asm	nop				
003F5:      	nop
            ; //_A30BB6F62_442:;				
            _A30BB6F62_442:
            ; //	asm clr io[0x09].b14;			
003F6:      	clr io[0x09].b14//
            ; //_A30BB6F62_443:;				
            _A30BB6F62_443:
            ; //	asm	nop				
003F7:      	nop
            ; //_A30BB6F62_444:;				
            _A30BB6F62_444:
            ; //	asm	nop				
003F8:      	nop
            ; //_A30BB6F62_445:;				
            _A30BB6F62_445:
            ; //	asm	nop				
003F9:      	nop
            ; //_A30BB6F62_446:;				
            _A30BB6F62_446:
            ; //	asm set io[0x09].b14;			
003FA:      	set io[0x09].b14//
            ; //_A30BB6F62_447:;				
            _A30BB6F62_447:
            ; //	asm	nop				
003FB:      	nop
            ; //_A30BB6F62_448:;				
            _A30BB6F62_448:
            ; //	asm	nop				
003FC:      	nop
            ; //_A30BB6F62_449:;				
            _A30BB6F62_449:
            ; //	asm	nop				
003FD:      	nop
            ; //_A30BB6F62_450:;				
            _A30BB6F62_450:
            ; //	asm	nop				
003FE:      	nop
            ; //_A30BB6F62_451:;				
            _A30BB6F62_451:
            ; //	asm	nop				
003FF:      	nop
            ; //_A30BB6F62_452:;				
            _A30BB6F62_452:
            ; //	asm	nop				
00400:      	nop
            ; //_A30BB6F62_453:;				
            _A30BB6F62_453:
            ; //	asm	nop				
00401:      	nop
            ; //_A30BB6F62_454:;				
            _A30BB6F62_454:
            ; //	asm	nop				
00402:      	nop
            ; //_A30BB6F62_455:;				
            _A30BB6F62_455:
            ; //	asm	nop				
00403:      	nop
            ; //_A30BB6F62_456:;				
            _A30BB6F62_456:
            ; //	asm	nop				
00404:      	nop
            ; //_A30BB6F62_457:;				
            _A30BB6F62_457:
            ; //	asm	nop				
00405:      	nop
            ; //_A30BB6F62_458:;				
            _A30BB6F62_458:
            ; //	asm	nop				
00406:      	nop
            ; //_A30BB6F62_459:;				
            _A30BB6F62_459:
            ; //	asm clr io[0x09].b14;			
00407:      	clr io[0x09].b14//
            ; //_A30BB6F62_460:;				
            _A30BB6F62_460:
            ; //	asm	nop				
00408:      	nop
            ; //_A30BB6F62_461:;				
            _A30BB6F62_461:
            ; //	asm	nop				
00409:      	nop
            ; //_A30BB6F62_462:;				
            _A30BB6F62_462:
            ; //	asm	nop				
0040A:      	nop
            ; //_A30BB6F62_463:;				
            _A30BB6F62_463:
            ; //	asm set io[0x09].b14;			
0040B:      	set io[0x09].b14//
            ; //_A30BB6F62_464:;				
            _A30BB6F62_464:
            ; //	asm	nop				
0040C:      	nop
            ; //_A30BB6F62_465:;				
            _A30BB6F62_465:
            ; //	asm	nop				
0040D:      	nop
            ; //_A30BB6F62_466:;				
            _A30BB6F62_466:
            ; //	asm	nop				
0040E:      	nop
            ; //_A30BB6F62_467:;				
            _A30BB6F62_467:
            ; //	asm	nop				
0040F:      	nop
            ; //_A30BB6F62_468:;				
            _A30BB6F62_468:
            ; //	asm	nop				
00410:      	nop
            ; //_A30BB6F62_469:;				
            _A30BB6F62_469:
            ; //	asm	nop				
00411:      	nop
            ; //_A30BB6F62_470:;				
            _A30BB6F62_470:
            ; //	asm	nop				
00412:      	nop
            ; //_A30BB6F62_471:;				
            _A30BB6F62_471:
            ; //	asm	nop				
00413:      	nop
            ; //_A30BB6F62_472:;				
            _A30BB6F62_472:
            ; //	asm	nop				
00414:      	nop
            ; //_A30BB6F62_473:;				
            _A30BB6F62_473:
            ; //	asm	nop				
00415:      	nop
            ; //_A30BB6F62_474:;				
            _A30BB6F62_474:
            ; //	asm	nop				
00416:      	nop
            ; //_A30BB6F62_475:;				
            _A30BB6F62_475:
            ; //	asm	nop				
00417:      	nop
            ; //_A30BB6F62_476:;				
            _A30BB6F62_476:
            ; //	asm clr io[0x09].b14;			
00418:      	clr io[0x09].b14//
            ; //_A30BB6F62_477:;				
            _A30BB6F62_477:
            ; //	asm	nop				
00419:      	nop
            ; //_A30BB6F62_478:;				
            _A30BB6F62_478:
            ; //	asm	nop				
0041A:      	nop
            ; //_A30BB6F62_479:;				
            _A30BB6F62_479:
            ; //	asm	nop				
0041B:      	nop
            ; //_A30BB6F62_480:;				
            _A30BB6F62_480:
            ; //	asm set io[0x09].b14;			
0041C:      	set io[0x09].b14//
            ; //_A30BB6F62_481:;				
            _A30BB6F62_481:
            ; //	asm	nop				
0041D:      	nop
            ; //_A30BB6F62_482:;				
            _A30BB6F62_482:
            ; //	asm	nop				
0041E:      	nop
            ; //_A30BB6F62_483:;				
            _A30BB6F62_483:
            ; //	asm	nop				
0041F:      	nop
            ; //_A30BB6F62_484:;				
            _A30BB6F62_484:
            ; //	asm	nop				
00420:      	nop
            ; //_A30BB6F62_485:;				
            _A30BB6F62_485:
            ; //	asm	nop				
00421:      	nop
            ; //_A30BB6F62_486:;				
            _A30BB6F62_486:
            ; //	asm	nop				
00422:      	nop
            ; //_A30BB6F62_487:;				
            _A30BB6F62_487:
            ; //	asm	nop				
00423:      	nop
            ; //_A30BB6F62_488:;				
            _A30BB6F62_488:
            ; //	asm	nop				
00424:      	nop
            ; //_A30BB6F62_489:;				
            _A30BB6F62_489:
            ; //	asm	nop				
00425:      	nop
            ; //_A30BB6F62_490:;				
            _A30BB6F62_490:
            ; //	asm	nop				
00426:      	nop
            ; //_A30BB6F62_491:;				
            _A30BB6F62_491:
            ; //	asm	nop				
00427:      	nop
            ; //_A30BB6F62_492:;				
            _A30BB6F62_492:
            ; //	asm	nop				
00428:      	nop
            ; //_A30BB6F62_493:;				
            _A30BB6F62_493:
            ; //	asm clr io[0x09].b14;			
00429:      	clr io[0x09].b14//
            ; //_A30BB6F62_494:;				
            _A30BB6F62_494:
            ; //	asm	nop				
0042A:      	nop
            ; //_A30BB6F62_495:;				
            _A30BB6F62_495:
            ; //	asm	nop				
0042B:      	nop
            ; //_A30BB6F62_496:;				
            _A30BB6F62_496:
            ; //	asm	nop				
0042C:      	nop
            ; //_A30BB6F62_497:;				
            _A30BB6F62_497:
            ; //	asm set io[0x09].b14;			
0042D:      	set io[0x09].b14//
            ; //_A30BB6F62_498:;				
            _A30BB6F62_498:
            ; //	asm	nop				
0042E:      	nop
            ; //_A30BB6F62_499:;				
            _A30BB6F62_499:
            ; //	asm	nop				
0042F:      	nop
            ; //_A30BB6F62_500:;				
            _A30BB6F62_500:
            ; //	asm	nop				
00430:      	nop
            ; //_A30BB6F62_501:;				
            _A30BB6F62_501:
            ; //	asm	nop				
00431:      	nop
            ; //_A30BB6F62_502:;				
            _A30BB6F62_502:
            ; //	asm	nop				
00432:      	nop
            ; //_A30BB6F62_503:;				
            _A30BB6F62_503:
            ; //	asm	nop				
00433:      	nop
            ; //_A30BB6F62_504:;				
            _A30BB6F62_504:
            ; //	asm	nop				
00434:      	nop
            ; //_A30BB6F62_505:;				
            _A30BB6F62_505:
            ; //	asm	nop				
00435:      	nop
            ; //_A30BB6F62_506:;				
            _A30BB6F62_506:
            ; //	asm	nop				
00436:      	nop
            ; //_A30BB6F62_507:;				
            _A30BB6F62_507:
            ; //	asm	nop				
00437:      	nop
            ; //_A30BB6F62_508:;				
            _A30BB6F62_508:
            ; //	asm	nop				
00438:      	nop
            ; //_A30BB6F62_509:;				
            _A30BB6F62_509:
            ; //	asm	nop				
00439:      	nop
            ; //_A30BB6F62_510:;				
            _A30BB6F62_510:
            ; //	asm clr io[0x09].b14;			
0043A:      	clr io[0x09].b14//
            ; //_A30BB6F62_511:;				
            _A30BB6F62_511:
            ; //	asm	nop				
0043B:      	nop
            ; //_A30BB6F62_512:;				
            _A30BB6F62_512:
            ; //	asm	nop				
0043C:      	nop
            ; //_A30BB6F62_513:;				
            _A30BB6F62_513:
            ; //	asm	nop				
0043D:      	nop
            ; //_A30BB6F62_514:;				
            _A30BB6F62_514:
            ; //	asm set io[0x09].b14;			
0043E:      	set io[0x09].b14//
            ; //_A30BB6F62_515:;				
            _A30BB6F62_515:
            ; //	asm	nop				
0043F:      	nop
            ; //_A30BB6F62_516:;				
            _A30BB6F62_516:
            ; //	asm	nop				
00440:      	nop
            ; //_A30BB6F62_517:;				
            _A30BB6F62_517:
            ; //	asm	nop				
00441:      	nop
            ; //_A30BB6F62_518:;				
            _A30BB6F62_518:
            ; //	asm	nop				
00442:      	nop
            ; //_A30BB6F62_519:;				
            _A30BB6F62_519:
            ; //	asm	nop				
00443:      	nop
            ; //_A30BB6F62_520:;				
            _A30BB6F62_520:
            ; //	asm	nop				
00444:      	nop
            ; //_A30BB6F62_521:;				
            _A30BB6F62_521:
            ; //	asm	nop				
00445:      	nop
            ; //_A30BB6F62_522:;				
            _A30BB6F62_522:
            ; //	asm	nop				
00446:      	nop
            ; //_A30BB6F62_523:;				
            _A30BB6F62_523:
            ; //	asm	nop				
00447:      	nop
            ; //_A30BB6F62_524:;				
            _A30BB6F62_524:
            ; //	asm	nop				
00448:      	nop
            ; //_A30BB6F62_525:;				
            _A30BB6F62_525:
            ; //	asm	nop				
00449:      	nop
            ; //_A30BB6F62_526:;				
            _A30BB6F62_526:
            ; //	asm	nop				
0044A:      	nop
            ; //_A30BB6F62_527:;				
            _A30BB6F62_527:
            ; //	asm clr io[0x09].b14;			
0044B:      	clr io[0x09].b14//
            ; //_A30BB6F62_528:;				
            _A30BB6F62_528:
            ; //	asm	nop				
0044C:      	nop
            ; //_A30BB6F62_529:;				
            _A30BB6F62_529:
            ; //	asm	nop				
0044D:      	nop
            ; //_A30BB6F62_530:;				
            _A30BB6F62_530:
            ; //	asm	nop				
0044E:      	nop
            ; //_A30BB6F62_531:;				
            _A30BB6F62_531:
            ; //	goto LD63FD439_50;			
0044F:      	pch =	LD63FD439_50
00450:      	ljmp	LD63FD439_50
            ; //LD63FD439_53:;					
            LD63FD439_53:
            ; //_A30BB6F62_532:;				
            _A30BB6F62_532:
            ; //	asm set io[0x09].b14;			
00451:      	set io[0x09].b14//
            ; //_A30BB6F62_533:;				
            _A30BB6F62_533:
            ; //	asm	nop				
00452:      	nop
            ; //_A30BB6F62_534:;				
            _A30BB6F62_534:
            ; //	asm	nop				
00453:      	nop
            ; //_A30BB6F62_535:;				
            _A30BB6F62_535:
            ; //	asm	nop				
00454:      	nop
            ; //_A30BB6F62_536:;				
            _A30BB6F62_536:
            ; //	asm clr io[0x09].b14;			
00455:      	clr io[0x09].b14//
            ; //_A30BB6F62_537:;				
            _A30BB6F62_537:
            ; //	asm	nop				
00456:      	nop
            ; //_A30BB6F62_538:;				
            _A30BB6F62_538:
            ; //	asm	nop				
00457:      	nop
            ; //_A30BB6F62_539:;				
            _A30BB6F62_539:
            ; //	asm	nop				
00458:      	nop
            ; //_A30BB6F62_540:;				
            _A30BB6F62_540:
            ; //	asm	nop				
00459:      	nop
            ; //_A30BB6F62_541:;				
            _A30BB6F62_541:
            ; //	asm	nop				
0045A:      	nop
            ; //_A30BB6F62_542:;				
            _A30BB6F62_542:
            ; //	asm	nop				
0045B:      	nop
            ; //_A30BB6F62_543:;				
            _A30BB6F62_543:
            ; //	asm	nop				
0045C:      	nop
            ; //_A30BB6F62_544:;				
            _A30BB6F62_544:
            ; //	asm	nop				
0045D:      	nop
            ; //_A30BB6F62_545:;				
            _A30BB6F62_545:
            ; //	asm	nop				
0045E:      	nop
            ; //_A30BB6F62_546:;				
            _A30BB6F62_546:
            ; //	asm	nop				
0045F:      	nop
            ; //_A30BB6F62_547:;				
            _A30BB6F62_547:
            ; //	asm	nop				
00460:      	nop
            ; //_A30BB6F62_548:;				
            _A30BB6F62_548:
            ; //	asm	nop				
00461:      	nop
            ; //_A30BB6F62_549:;				
            _A30BB6F62_549:
            ; //	asm set io[0x09].b14;			
00462:      	set io[0x09].b14//
            ; //_A30BB6F62_550:;				
            _A30BB6F62_550:
            ; //	asm	nop				
00463:      	nop
            ; //_A30BB6F62_551:;				
            _A30BB6F62_551:
            ; //	asm	nop				
00464:      	nop
            ; //_A30BB6F62_552:;				
            _A30BB6F62_552:
            ; //	asm	nop				
00465:      	nop
            ; //_A30BB6F62_553:;				
            _A30BB6F62_553:
            ; //	asm clr io[0x09].b14;			
00466:      	clr io[0x09].b14//
            ; //_A30BB6F62_554:;				
            _A30BB6F62_554:
            ; //	asm	nop				
00467:      	nop
            ; //_A30BB6F62_555:;				
            _A30BB6F62_555:
            ; //	asm	nop				
00468:      	nop
            ; //_A30BB6F62_556:;				
            _A30BB6F62_556:
            ; //	asm	nop				
00469:      	nop
            ; //_A30BB6F62_557:;				
            _A30BB6F62_557:
            ; //	asm	nop				
0046A:      	nop
            ; //_A30BB6F62_558:;				
            _A30BB6F62_558:
            ; //	asm	nop				
0046B:      	nop
            ; //_A30BB6F62_559:;				
            _A30BB6F62_559:
            ; //	asm	nop				
0046C:      	nop
            ; //_A30BB6F62_560:;				
            _A30BB6F62_560:
            ; //	asm	nop				
0046D:      	nop
            ; //_A30BB6F62_561:;				
            _A30BB6F62_561:
            ; //	asm	nop				
0046E:      	nop
            ; //_A30BB6F62_562:;				
            _A30BB6F62_562:
            ; //	asm	nop				
0046F:      	nop
            ; //_A30BB6F62_563:;				
            _A30BB6F62_563:
            ; //	asm	nop				
00470:      	nop
            ; //_A30BB6F62_564:;				
            _A30BB6F62_564:
            ; //	asm	nop				
00471:      	nop
            ; //_A30BB6F62_565:;				
            _A30BB6F62_565:
            ; //	asm	nop				
00472:      	nop
            ; //_A30BB6F62_566:;				
            _A30BB6F62_566:
            ; //	asm set io[0x09].b14;			
00473:      	set io[0x09].b14//
            ; //_A30BB6F62_567:;				
            _A30BB6F62_567:
            ; //	asm	nop				
00474:      	nop
            ; //_A30BB6F62_568:;				
            _A30BB6F62_568:
            ; //	asm	nop				
00475:      	nop
            ; //_A30BB6F62_569:;				
            _A30BB6F62_569:
            ; //	asm	nop				
00476:      	nop
            ; //_A30BB6F62_570:;				
            _A30BB6F62_570:
            ; //	asm clr io[0x09].b14;			
00477:      	clr io[0x09].b14//
            ; //_A30BB6F62_571:;				
            _A30BB6F62_571:
            ; //	asm	nop				
00478:      	nop
            ; //_A30BB6F62_572:;				
            _A30BB6F62_572:
            ; //	asm	nop				
00479:      	nop
            ; //_A30BB6F62_573:;				
            _A30BB6F62_573:
            ; //	asm	nop				
0047A:      	nop
            ; //_A30BB6F62_574:;				
            _A30BB6F62_574:
            ; //	asm	nop				
0047B:      	nop
            ; //_A30BB6F62_575:;				
            _A30BB6F62_575:
            ; //	asm	nop				
0047C:      	nop
            ; //_A30BB6F62_576:;				
            _A30BB6F62_576:
            ; //	asm	nop				
0047D:      	nop
            ; //_A30BB6F62_577:;				
            _A30BB6F62_577:
            ; //	asm	nop				
0047E:      	nop
            ; //_A30BB6F62_578:;				
            _A30BB6F62_578:
            ; //	asm	nop				
0047F:      	nop
            ; //_A30BB6F62_579:;				
            _A30BB6F62_579:
            ; //	asm	nop				
00480:      	nop
            ; //_A30BB6F62_580:;				
            _A30BB6F62_580:
            ; //	asm	nop				
00481:      	nop
            ; //_A30BB6F62_581:;				
            _A30BB6F62_581:
            ; //	asm	nop				
00482:      	nop
            ; //_A30BB6F62_582:;				
            _A30BB6F62_582:
            ; //	asm	nop				
00483:      	nop
            ; //_A30BB6F62_583:;				
            _A30BB6F62_583:
            ; //	asm set io[0x09].b14;			
00484:      	set io[0x09].b14//
            ; //_A30BB6F62_584:;				
            _A30BB6F62_584:
            ; //	asm	nop				
00485:      	nop
            ; //_A30BB6F62_585:;				
            _A30BB6F62_585:
            ; //	asm	nop				
00486:      	nop
            ; //_A30BB6F62_586:;				
            _A30BB6F62_586:
            ; //	asm	nop				
00487:      	nop
            ; //_A30BB6F62_587:;				
            _A30BB6F62_587:
            ; //	asm clr io[0x09].b14;			
00488:      	clr io[0x09].b14//
            ; //_A30BB6F62_588:;				
            _A30BB6F62_588:
            ; //	asm	nop				
00489:      	nop
            ; //_A30BB6F62_589:;				
            _A30BB6F62_589:
            ; //	asm	nop				
0048A:      	nop
            ; //_A30BB6F62_590:;				
            _A30BB6F62_590:
            ; //	asm	nop				
0048B:      	nop
            ; //_A30BB6F62_591:;				
            _A30BB6F62_591:
            ; //	asm	nop				
0048C:      	nop
            ; //_A30BB6F62_592:;				
            _A30BB6F62_592:
            ; //	asm	nop				
0048D:      	nop
            ; //_A30BB6F62_593:;				
            _A30BB6F62_593:
            ; //	asm	nop				
0048E:      	nop
            ; //_A30BB6F62_594:;				
            _A30BB6F62_594:
            ; //	asm	nop				
0048F:      	nop
            ; //_A30BB6F62_595:;				
            _A30BB6F62_595:
            ; //	asm	nop				
00490:      	nop
            ; //_A30BB6F62_596:;				
            _A30BB6F62_596:
            ; //	asm	nop				
00491:      	nop
            ; //_A30BB6F62_597:;				
            _A30BB6F62_597:
            ; //	asm	nop				
00492:      	nop
            ; //_A30BB6F62_598:;				
            _A30BB6F62_598:
            ; //	asm	nop				
00493:      	nop
            ; //_A30BB6F62_599:;				
            _A30BB6F62_599:
            ; //	asm	nop				
00494:      	nop
            ; //_A30BB6F62_600:;				
            _A30BB6F62_600:
            ; //	asm set io[0x09].b14;			
00495:      	set io[0x09].b14//
            ; //_A30BB6F62_601:;				
            _A30BB6F62_601:
            ; //	asm	nop				
00496:      	nop
            ; //_A30BB6F62_602:;				
            _A30BB6F62_602:
            ; //	asm	nop				
00497:      	nop
            ; //_A30BB6F62_603:;				
            _A30BB6F62_603:
            ; //	asm	nop				
00498:      	nop
            ; //_A30BB6F62_604:;				
            _A30BB6F62_604:
            ; //	asm clr io[0x09].b14;			
00499:      	clr io[0x09].b14//
            ; //_A30BB6F62_605:;				
            _A30BB6F62_605:
            ; //	asm	nop				
0049A:      	nop
            ; //_A30BB6F62_606:;				
            _A30BB6F62_606:
            ; //	asm	nop				
0049B:      	nop
            ; //_A30BB6F62_607:;				
            _A30BB6F62_607:
            ; //	asm	nop				
0049C:      	nop
            ; //_A30BB6F62_608:;				
            _A30BB6F62_608:
            ; //	asm	nop				
0049D:      	nop
            ; //_A30BB6F62_609:;				
            _A30BB6F62_609:
            ; //	asm	nop				
0049E:      	nop
            ; //_A30BB6F62_610:;				
            _A30BB6F62_610:
            ; //	asm	nop				
0049F:      	nop
            ; //_A30BB6F62_611:;				
            _A30BB6F62_611:
            ; //	asm	nop				
004A0:      	nop
            ; //_A30BB6F62_612:;				
            _A30BB6F62_612:
            ; //	asm	nop				
004A1:      	nop
            ; //_A30BB6F62_613:;				
            _A30BB6F62_613:
            ; //	asm	nop				
004A2:      	nop
            ; //_A30BB6F62_614:;				
            _A30BB6F62_614:
            ; //	asm	nop				
004A3:      	nop
            ; //_A30BB6F62_615:;				
            _A30BB6F62_615:
            ; //	asm	nop				
004A4:      	nop
            ; //_A30BB6F62_616:;				
            _A30BB6F62_616:
            ; //	asm	nop				
004A5:      	nop
            ; //_A30BB6F62_617:;				
            _A30BB6F62_617:
            ; //	asm set io[0x09].b14;			
004A6:      	set io[0x09].b14//
            ; //_A30BB6F62_618:;				
            _A30BB6F62_618:
            ; //	asm	nop				
004A7:      	nop
            ; //_A30BB6F62_619:;				
            _A30BB6F62_619:
            ; //	asm	nop				
004A8:      	nop
            ; //_A30BB6F62_620:;				
            _A30BB6F62_620:
            ; //	asm	nop				
004A9:      	nop
            ; //_A30BB6F62_621:;				
            _A30BB6F62_621:
            ; //	asm clr io[0x09].b14;			
004AA:      	clr io[0x09].b14//
            ; //_A30BB6F62_622:;				
            _A30BB6F62_622:
            ; //	asm	nop				
004AB:      	nop
            ; //_A30BB6F62_623:;				
            _A30BB6F62_623:
            ; //	asm	nop				
004AC:      	nop
            ; //_A30BB6F62_624:;				
            _A30BB6F62_624:
            ; //	asm	nop				
004AD:      	nop
            ; //_A30BB6F62_625:;				
            _A30BB6F62_625:
            ; //	asm	nop				
004AE:      	nop
            ; //_A30BB6F62_626:;				
            _A30BB6F62_626:
            ; //	asm	nop				
004AF:      	nop
            ; //_A30BB6F62_627:;				
            _A30BB6F62_627:
            ; //	asm	nop				
004B0:      	nop
            ; //_A30BB6F62_628:;				
            _A30BB6F62_628:
            ; //	asm	nop				
004B1:      	nop
            ; //_A30BB6F62_629:;				
            _A30BB6F62_629:
            ; //	asm	nop				
004B2:      	nop
            ; //_A30BB6F62_630:;				
            _A30BB6F62_630:
            ; //	asm	nop				
004B3:      	nop
            ; //_A30BB6F62_631:;				
            _A30BB6F62_631:
            ; //	asm	nop				
004B4:      	nop
            ; //_A30BB6F62_632:;				
            _A30BB6F62_632:
            ; //	asm	nop				
004B5:      	nop
            ; //_A30BB6F62_633:;				
            _A30BB6F62_633:
            ; //	asm	nop				
004B6:      	nop
            ; //_A30BB6F62_634:;				
            _A30BB6F62_634:
            ; //	asm set io[0x09].b14;			
004B7:      	set io[0x09].b14//
            ; //_A30BB6F62_635:;				
            _A30BB6F62_635:
            ; //	asm	nop				
004B8:      	nop
            ; //_A30BB6F62_636:;				
            _A30BB6F62_636:
            ; //	asm	nop				
004B9:      	nop
            ; //_A30BB6F62_637:;				
            _A30BB6F62_637:
            ; //	asm	nop				
004BA:      	nop
            ; //_A30BB6F62_638:;				
            _A30BB6F62_638:
            ; //	asm clr io[0x09].b14;			
004BB:      	clr io[0x09].b14//
            ; //_A30BB6F62_639:;				
            _A30BB6F62_639:
            ; //	asm	nop				
004BC:      	nop
            ; //_A30BB6F62_640:;				
            _A30BB6F62_640:
            ; //	asm	nop				
004BD:      	nop
            ; //_A30BB6F62_641:;				
            _A30BB6F62_641:
            ; //	asm	nop				
004BE:      	nop
            ; //_A30BB6F62_642:;				
            _A30BB6F62_642:
            ; //	asm	nop				
004BF:      	nop
            ; //_A30BB6F62_643:;				
            _A30BB6F62_643:
            ; //	asm	nop				
004C0:      	nop
            ; //_A30BB6F62_644:;				
            _A30BB6F62_644:
            ; //	asm	nop				
004C1:      	nop
            ; //_A30BB6F62_645:;				
            _A30BB6F62_645:
            ; //	asm	nop				
004C2:      	nop
            ; //_A30BB6F62_646:;				
            _A30BB6F62_646:
            ; //	asm	nop				
004C3:      	nop
            ; //_A30BB6F62_647:;				
            _A30BB6F62_647:
            ; //	asm	nop				
004C4:      	nop
            ; //_A30BB6F62_648:;				
            _A30BB6F62_648:
            ; //	asm	nop				
004C5:      	nop
            ; //_A30BB6F62_649:;				
            _A30BB6F62_649:
            ; //	asm	nop				
004C6:      	nop
            ; //_A30BB6F62_650:;				
            _A30BB6F62_650:
            ; //	asm	nop				
004C7:      	nop
            ; //_A30BB6F62_651:;				
            _A30BB6F62_651:
            ; //	asm set io[0x09].b14;			
004C8:      	set io[0x09].b14//
            ; //_A30BB6F62_652:;				
            _A30BB6F62_652:
            ; //	asm	nop				
004C9:      	nop
            ; //_A30BB6F62_653:;				
            _A30BB6F62_653:
            ; //	asm	nop				
004CA:      	nop
            ; //_A30BB6F62_654:;				
            _A30BB6F62_654:
            ; //	asm	nop				
004CB:      	nop
            ; //_A30BB6F62_655:;				
            _A30BB6F62_655:
            ; //	asm clr io[0x09].b14;			
004CC:      	clr io[0x09].b14//
            ; //_A30BB6F62_656:;				
            _A30BB6F62_656:
            ; //	asm	nop				
004CD:      	nop
            ; //_A30BB6F62_657:;				
            _A30BB6F62_657:
            ; //	asm	nop				
004CE:      	nop
            ; //_A30BB6F62_658:;				
            _A30BB6F62_658:
            ; //	asm	nop				
004CF:      	nop
            ; //_A30BB6F62_659:;				
            _A30BB6F62_659:
            ; //	asm	nop				
004D0:      	nop
            ; //_A30BB6F62_660:;				
            _A30BB6F62_660:
            ; //	asm	nop				
004D1:      	nop
            ; //_A30BB6F62_661:;				
            _A30BB6F62_661:
            ; //	asm	nop				
004D2:      	nop
            ; //_A30BB6F62_662:;				
            _A30BB6F62_662:
            ; //	asm	nop				
004D3:      	nop
            ; //_A30BB6F62_663:;				
            _A30BB6F62_663:
            ; //	asm	nop				
004D4:      	nop
            ; //_A30BB6F62_664:;				
            _A30BB6F62_664:
            ; //	asm	nop				
004D5:      	nop
            ; //_A30BB6F62_665:;				
            _A30BB6F62_665:
            ; //	asm	nop				
004D6:      	nop
            ; //_A30BB6F62_666:;				
            _A30BB6F62_666:
            ; //	asm	nop				
004D7:      	nop
            ; //_A30BB6F62_667:;				
            _A30BB6F62_667:
            ; //	asm	nop				
004D8:      	nop
            ; //_A30BB6F62_668:;				
            _A30BB6F62_668:
            ; //	asm set io[0x09].b14;			
004D9:      	set io[0x09].b14//
            ; //_A30BB6F62_669:;				
            _A30BB6F62_669:
            ; //	asm	nop				
004DA:      	nop
            ; //_A30BB6F62_670:;				
            _A30BB6F62_670:
            ; //	asm	nop				
004DB:      	nop
            ; //_A30BB6F62_671:;				
            _A30BB6F62_671:
            ; //	asm	nop				
004DC:      	nop
            ; //_A30BB6F62_672:;				
            _A30BB6F62_672:
            ; //	asm clr io[0x09].b14;			
004DD:      	clr io[0x09].b14//
            ; //_A30BB6F62_673:;				
            _A30BB6F62_673:
            ; //	asm	nop				
004DE:      	nop
            ; //_A30BB6F62_674:;				
            _A30BB6F62_674:
            ; //	asm	nop				
004DF:      	nop
            ; //_A30BB6F62_675:;				
            _A30BB6F62_675:
            ; //	asm	nop				
004E0:      	nop
            ; //_A30BB6F62_676:;				
            _A30BB6F62_676:
            ; //	asm	nop				
004E1:      	nop
            ; //_A30BB6F62_677:;				
            _A30BB6F62_677:
            ; //	asm	nop				
004E2:      	nop
            ; //_A30BB6F62_678:;				
            _A30BB6F62_678:
            ; //	asm	nop				
004E3:      	nop
            ; //_A30BB6F62_679:;				
            _A30BB6F62_679:
            ; //	asm	nop				
004E4:      	nop
            ; //_A30BB6F62_680:;				
            _A30BB6F62_680:
            ; //	asm	nop				
004E5:      	nop
            ; //_A30BB6F62_681:;				
            _A30BB6F62_681:
            ; //	asm	nop				
004E6:      	nop
            ; //_A30BB6F62_682:;				
            _A30BB6F62_682:
            ; //	asm	nop				
004E7:      	nop
            ; //_A30BB6F62_683:;				
            _A30BB6F62_683:
            ; //	asm	nop				
004E8:      	nop
            ; //_A30BB6F62_684:;				
            _A30BB6F62_684:
            ; //	asm	nop				
004E9:      	nop
            ; //_A30BB6F62_685:;				
            _A30BB6F62_685:
            ; //	asm set io[0x09].b14;			
004EA:      	set io[0x09].b14//
            ; //_A30BB6F62_686:;				
            _A30BB6F62_686:
            ; //	asm	nop				
004EB:      	nop
            ; //_A30BB6F62_687:;				
            _A30BB6F62_687:
            ; //	asm	nop				
004EC:      	nop
            ; //_A30BB6F62_688:;				
            _A30BB6F62_688:
            ; //	asm	nop				
004ED:      	nop
            ; //_A30BB6F62_689:;				
            _A30BB6F62_689:
            ; //	asm clr io[0x09].b14;			
004EE:      	clr io[0x09].b14//
            ; //_A30BB6F62_690:;				
            _A30BB6F62_690:
            ; //	asm	nop				
004EF:      	nop
            ; //_A30BB6F62_691:;				
            _A30BB6F62_691:
            ; //	asm	nop				
004F0:      	nop
            ; //_A30BB6F62_692:;				
            _A30BB6F62_692:
            ; //	asm	nop				
004F1:      	nop
            ; //_A30BB6F62_693:;				
            _A30BB6F62_693:
            ; //	asm	nop				
004F2:      	nop
            ; //_A30BB6F62_694:;				
            _A30BB6F62_694:
            ; //	asm	nop				
004F3:      	nop
            ; //_A30BB6F62_695:;				
            _A30BB6F62_695:
            ; //	asm	nop				
004F4:      	nop
            ; //_A30BB6F62_696:;				
            _A30BB6F62_696:
            ; //	asm	nop				
004F5:      	nop
            ; //_A30BB6F62_697:;				
            _A30BB6F62_697:
            ; //	asm	nop				
004F6:      	nop
            ; //_A30BB6F62_698:;				
            _A30BB6F62_698:
            ; //	asm	nop				
004F7:      	nop
            ; //_A30BB6F62_699:;				
            _A30BB6F62_699:
            ; //	asm	nop				
004F8:      	nop
            ; //_A30BB6F62_700:;				
            _A30BB6F62_700:
            ; //	asm	nop				
004F9:      	nop
            ; //_A30BB6F62_701:;				
            _A30BB6F62_701:
            ; //	asm	nop				
004FA:      	nop
            ; //_A30BB6F62_702:;				
            _A30BB6F62_702:
            ; //	asm set io[0x09].b14;			
004FB:      	set io[0x09].b14//
            ; //_A30BB6F62_703:;				
            _A30BB6F62_703:
            ; //	asm	nop				
004FC:      	nop
            ; //_A30BB6F62_704:;				
            _A30BB6F62_704:
            ; //	asm	nop				
004FD:      	nop
            ; //_A30BB6F62_705:;				
            _A30BB6F62_705:
            ; //	asm	nop				
004FE:      	nop
            ; //_A30BB6F62_706:;				
            _A30BB6F62_706:
            ; //	asm clr io[0x09].b14;			
004FF:      	clr io[0x09].b14//
            ; //_A30BB6F62_707:;				
            _A30BB6F62_707:
            ; //	asm	nop				
00500:      	nop
            ; //_A30BB6F62_708:;				
            _A30BB6F62_708:
            ; //	asm	nop				
00501:      	nop
            ; //_A30BB6F62_709:;				
            _A30BB6F62_709:
            ; //	asm	nop				
00502:      	nop
            ; //_A30BB6F62_710:;				
            _A30BB6F62_710:
            ; //	asm	nop				
00503:      	nop
            ; //_A30BB6F62_711:;				
            _A30BB6F62_711:
            ; //	asm	nop				
00504:      	nop
            ; //_A30BB6F62_712:;				
            _A30BB6F62_712:
            ; //	asm	nop				
00505:      	nop
            ; //_A30BB6F62_713:;				
            _A30BB6F62_713:
            ; //	asm	nop				
00506:      	nop
            ; //_A30BB6F62_714:;				
            _A30BB6F62_714:
            ; //	asm	nop				
00507:      	nop
            ; //_A30BB6F62_715:;				
            _A30BB6F62_715:
            ; //	asm	nop				
00508:      	nop
            ; //_A30BB6F62_716:;				
            _A30BB6F62_716:
            ; //	asm	nop				
00509:      	nop
            ; //_A30BB6F62_717:;				
            _A30BB6F62_717:
            ; //	asm	nop				
0050A:      	nop
            ; //_A30BB6F62_718:;				
            _A30BB6F62_718:
            ; //	asm	nop				
0050B:      	nop
            ; //_A30BB6F62_719:;				
            _A30BB6F62_719:
            ; //	asm set io[0x09].b14;			
0050C:      	set io[0x09].b14//
            ; //_A30BB6F62_720:;				
            _A30BB6F62_720:
            ; //	asm	nop				
0050D:      	nop
            ; //_A30BB6F62_721:;				
            _A30BB6F62_721:
            ; //	asm	nop				
0050E:      	nop
            ; //_A30BB6F62_722:;				
            _A30BB6F62_722:
            ; //	asm	nop				
0050F:      	nop
            ; //_A30BB6F62_723:;				
            _A30BB6F62_723:
            ; //	asm clr io[0x09].b14;			
00510:      	clr io[0x09].b14//
            ; //_A30BB6F62_724:;				
            _A30BB6F62_724:
            ; //	asm	nop				
00511:      	nop
            ; //_A30BB6F62_725:;				
            _A30BB6F62_725:
            ; //	asm	nop				
00512:      	nop
            ; //_A30BB6F62_726:;				
            _A30BB6F62_726:
            ; //	asm	nop				
00513:      	nop
            ; //_A30BB6F62_727:;				
            _A30BB6F62_727:
            ; //	asm	nop				
00514:      	nop
            ; //_A30BB6F62_728:;				
            _A30BB6F62_728:
            ; //	asm	nop				
00515:      	nop
            ; //_A30BB6F62_729:;				
            _A30BB6F62_729:
            ; //	asm	nop				
00516:      	nop
            ; //_A30BB6F62_730:;				
            _A30BB6F62_730:
            ; //	asm	nop				
00517:      	nop
            ; //_A30BB6F62_731:;				
            _A30BB6F62_731:
            ; //	asm	nop				
00518:      	nop
            ; //_A30BB6F62_732:;				
            _A30BB6F62_732:
            ; //	asm	nop				
00519:      	nop
            ; //_A30BB6F62_733:;				
            _A30BB6F62_733:
            ; //	asm	nop				
0051A:      	nop
            ; //_A30BB6F62_734:;				
            _A30BB6F62_734:
            ; //	asm	nop				
0051B:      	nop
            ; //_A30BB6F62_735:;				
            _A30BB6F62_735:
            ; //	asm	nop				
0051C:      	nop
            ; //_A30BB6F62_736:;				
            _A30BB6F62_736:
            ; //	asm set io[0x09].b14;			
0051D:      	set io[0x09].b14//
            ; //_A30BB6F62_737:;				
            _A30BB6F62_737:
            ; //	asm	nop				
0051E:      	nop
            ; //_A30BB6F62_738:;				
            _A30BB6F62_738:
            ; //	asm	nop				
0051F:      	nop
            ; //_A30BB6F62_739:;				
            _A30BB6F62_739:
            ; //	asm	nop				
00520:      	nop
            ; //_A30BB6F62_740:;				
            _A30BB6F62_740:
            ; //	asm clr io[0x09].b14;			
00521:      	clr io[0x09].b14//
            ; //_A30BB6F62_741:;				
            _A30BB6F62_741:
            ; //	asm	nop				
00522:      	nop
            ; //_A30BB6F62_742:;				
            _A30BB6F62_742:
            ; //	asm	nop				
00523:      	nop
            ; //_A30BB6F62_743:;				
            _A30BB6F62_743:
            ; //	asm	nop				
00524:      	nop
            ; //_A30BB6F62_744:;				
            _A30BB6F62_744:
            ; //	asm	nop				
00525:      	nop
            ; //_A30BB6F62_745:;				
            _A30BB6F62_745:
            ; //	asm	nop				
00526:      	nop
            ; //_A30BB6F62_746:;				
            _A30BB6F62_746:
            ; //	asm	nop				
00527:      	nop
            ; //_A30BB6F62_747:;				
            _A30BB6F62_747:
            ; //	asm	nop				
00528:      	nop
            ; //_A30BB6F62_748:;				
            _A30BB6F62_748:
            ; //	asm	nop				
00529:      	nop
            ; //_A30BB6F62_749:;				
            _A30BB6F62_749:
            ; //	asm	nop				
0052A:      	nop
            ; //_A30BB6F62_750:;				
            _A30BB6F62_750:
            ; //	asm	nop				
0052B:      	nop
            ; //_A30BB6F62_751:;				
            _A30BB6F62_751:
            ; //	asm	nop				
0052C:      	nop
            ; //_A30BB6F62_752:;				
            _A30BB6F62_752:
            ; //	asm	nop				
0052D:      	nop
            ; //_A30BB6F62_753:;				
            _A30BB6F62_753:
            ; //	asm set io[0x09].b14;			
0052E:      	set io[0x09].b14//
            ; //_A30BB6F62_754:;				
            _A30BB6F62_754:
            ; //	asm	nop				
0052F:      	nop
            ; //_A30BB6F62_755:;				
            _A30BB6F62_755:
            ; //	asm	nop				
00530:      	nop
            ; //_A30BB6F62_756:;				
            _A30BB6F62_756:
            ; //	asm	nop				
00531:      	nop
            ; //_A30BB6F62_757:;				
            _A30BB6F62_757:
            ; //	asm clr io[0x09].b14;			
00532:      	clr io[0x09].b14//
            ; //_A30BB6F62_758:;				
            _A30BB6F62_758:
            ; //	asm	nop				
00533:      	nop
            ; //_A30BB6F62_759:;				
            _A30BB6F62_759:
            ; //	asm	nop				
00534:      	nop
            ; //_A30BB6F62_760:;				
            _A30BB6F62_760:
            ; //	asm	nop				
00535:      	nop
            ; //_A30BB6F62_761:;				
            _A30BB6F62_761:
            ; //	asm	nop				
00536:      	nop
            ; //_A30BB6F62_762:;				
            _A30BB6F62_762:
            ; //	asm	nop				
00537:      	nop
            ; //_A30BB6F62_763:;				
            _A30BB6F62_763:
            ; //	asm	nop				
00538:      	nop
            ; //_A30BB6F62_764:;				
            _A30BB6F62_764:
            ; //	asm	nop				
00539:      	nop
            ; //_A30BB6F62_765:;				
            _A30BB6F62_765:
            ; //	asm	nop				
0053A:      	nop
            ; //_A30BB6F62_766:;				
            _A30BB6F62_766:
            ; //	asm	nop				
0053B:      	nop
            ; //_A30BB6F62_767:;				
            _A30BB6F62_767:
            ; //	asm	nop				
0053C:      	nop
            ; //_A30BB6F62_768:;				
            _A30BB6F62_768:
            ; //	asm	nop				
0053D:      	nop
            ; //_A30BB6F62_769:;				
            _A30BB6F62_769:
            ; //	asm	nop				
0053E:      	nop
            ; //_A30BB6F62_770:;				
            _A30BB6F62_770:
            ; //	asm set io[0x09].b14;			
0053F:      	set io[0x09].b14//
            ; //_A30BB6F62_771:;				
            _A30BB6F62_771:
            ; //	asm	nop				
00540:      	nop
            ; //_A30BB6F62_772:;				
            _A30BB6F62_772:
            ; //	asm	nop				
00541:      	nop
            ; //_A30BB6F62_773:;				
            _A30BB6F62_773:
            ; //	asm	nop				
00542:      	nop
            ; //_A30BB6F62_774:;				
            _A30BB6F62_774:
            ; //	asm clr io[0x09].b14;			
00543:      	clr io[0x09].b14//
            ; //_A30BB6F62_775:;				
            _A30BB6F62_775:
            ; //	asm	nop				
00544:      	nop
            ; //_A30BB6F62_776:;				
            _A30BB6F62_776:
            ; //	asm	nop				
00545:      	nop
            ; //_A30BB6F62_777:;				
            _A30BB6F62_777:
            ; //	asm	nop				
00546:      	nop
            ; //_A30BB6F62_778:;				
            _A30BB6F62_778:
            ; //	asm	nop				
00547:      	nop
            ; //_A30BB6F62_779:;				
            _A30BB6F62_779:
            ; //	asm	nop				
00548:      	nop
            ; //_A30BB6F62_780:;				
            _A30BB6F62_780:
            ; //	asm	nop				
00549:      	nop
            ; //_A30BB6F62_781:;				
            _A30BB6F62_781:
            ; //	asm	nop				
0054A:      	nop
            ; //_A30BB6F62_782:;				
            _A30BB6F62_782:
            ; //	asm	nop				
0054B:      	nop
            ; //_A30BB6F62_783:;				
            _A30BB6F62_783:
            ; //	asm	nop				
0054C:      	nop
            ; //_A30BB6F62_784:;				
            _A30BB6F62_784:
            ; //	asm	nop				
0054D:      	nop
            ; //_A30BB6F62_785:;				
            _A30BB6F62_785:
            ; //	asm	nop				
0054E:      	nop
            ; //_A30BB6F62_786:;				
            _A30BB6F62_786:
            ; //	asm	nop				
0054F:      	nop
            ; //_A30BB6F62_787:;				
            _A30BB6F62_787:
            ; //	asm set io[0x09].b14;			
00550:      	set io[0x09].b14//
            ; //_A30BB6F62_788:;				
            _A30BB6F62_788:
            ; //	asm	nop				
00551:      	nop
            ; //_A30BB6F62_789:;				
            _A30BB6F62_789:
            ; //	asm	nop				
00552:      	nop
            ; //_A30BB6F62_790:;				
            _A30BB6F62_790:
            ; //	asm	nop				
00553:      	nop
            ; //_A30BB6F62_791:;				
            _A30BB6F62_791:
            ; //	asm clr io[0x09].b14;			
00554:      	clr io[0x09].b14//
            ; //_A30BB6F62_792:;				
            _A30BB6F62_792:
            ; //	asm	nop				
00555:      	nop
            ; //_A30BB6F62_793:;				
            _A30BB6F62_793:
            ; //	asm	nop				
00556:      	nop
            ; //_A30BB6F62_794:;				
            _A30BB6F62_794:
            ; //	asm	nop				
00557:      	nop
            ; //_A30BB6F62_795:;				
            _A30BB6F62_795:
            ; //	asm	nop				
00558:      	nop
            ; //_A30BB6F62_796:;				
            _A30BB6F62_796:
            ; //	asm	nop				
00559:      	nop
            ; //_A30BB6F62_797:;				
            _A30BB6F62_797:
            ; //	asm	nop				
0055A:      	nop
            ; //_A30BB6F62_798:;				
            _A30BB6F62_798:
            ; //	asm	nop				
0055B:      	nop
            ; //_A30BB6F62_799:;				
            _A30BB6F62_799:
            ; //	asm	nop				
0055C:      	nop
            ; //_A30BB6F62_800:;				
            _A30BB6F62_800:
            ; //	asm	nop				
0055D:      	nop
            ; //_A30BB6F62_801:;				
            _A30BB6F62_801:
            ; //	asm	nop				
0055E:      	nop
            ; //_A30BB6F62_802:;				
            _A30BB6F62_802:
            ; //	asm	nop				
0055F:      	nop
            ; //_A30BB6F62_803:;				
            _A30BB6F62_803:
            ; //	asm	nop				
00560:      	nop
            ; //_A30BB6F62_804:;				
            _A30BB6F62_804:
            ; //	asm set io[0x09].b14;			
00561:      	set io[0x09].b14//
            ; //_A30BB6F62_805:;				
            _A30BB6F62_805:
            ; //	asm	nop				
00562:      	nop
            ; //_A30BB6F62_806:;				
            _A30BB6F62_806:
            ; //	asm	nop				
00563:      	nop
            ; //_A30BB6F62_807:;				
            _A30BB6F62_807:
            ; //	asm	nop				
00564:      	nop
            ; //_A30BB6F62_808:;				
            _A30BB6F62_808:
            ; //	asm clr io[0x09].b14;			
00565:      	clr io[0x09].b14//
            ; //_A30BB6F62_809:;				
            _A30BB6F62_809:
            ; //	asm	nop				
00566:      	nop
            ; //_A30BB6F62_810:;				
            _A30BB6F62_810:
            ; //	asm	nop				
00567:      	nop
            ; //_A30BB6F62_811:;				
            _A30BB6F62_811:
            ; //	asm	nop				
00568:      	nop
            ; //_A30BB6F62_812:;				
            _A30BB6F62_812:
            ; //	asm	nop				
00569:      	nop
            ; //_A30BB6F62_813:;				
            _A30BB6F62_813:
            ; //	asm	nop				
0056A:      	nop
            ; //_A30BB6F62_814:;				
            _A30BB6F62_814:
            ; //	asm	nop				
0056B:      	nop
            ; //_A30BB6F62_815:;				
            _A30BB6F62_815:
            ; //	asm	nop				
0056C:      	nop
            ; //_A30BB6F62_816:;				
            _A30BB6F62_816:
            ; //	asm	nop				
0056D:      	nop
            ; //_A30BB6F62_817:;				
            _A30BB6F62_817:
            ; //	asm	nop				
0056E:      	nop
            ; //_A30BB6F62_818:;				
            _A30BB6F62_818:
            ; //	asm	nop				
0056F:      	nop
            ; //_A30BB6F62_819:;				
            _A30BB6F62_819:
            ; //	asm	nop				
00570:      	nop
            ; //_A30BB6F62_820:;				
            _A30BB6F62_820:
            ; //	asm	nop				
00571:      	nop
            ; //_A30BB6F62_821:;				
            _A30BB6F62_821:
            ; //	asm set io[0x09].b14;			
00572:      	set io[0x09].b14//
            ; //_A30BB6F62_822:;				
            _A30BB6F62_822:
            ; //	asm	nop				
00573:      	nop
            ; //_A30BB6F62_823:;				
            _A30BB6F62_823:
            ; //	asm	nop				
00574:      	nop
            ; //_A30BB6F62_824:;				
            _A30BB6F62_824:
            ; //	asm	nop				
00575:      	nop
            ; //_A30BB6F62_825:;				
            _A30BB6F62_825:
            ; //	asm clr io[0x09].b14;			
00576:      	clr io[0x09].b14//
            ; //_A30BB6F62_826:;				
            _A30BB6F62_826:
            ; //	asm	nop				
00577:      	nop
            ; //_A30BB6F62_827:;				
            _A30BB6F62_827:
            ; //	asm	nop				
00578:      	nop
            ; //_A30BB6F62_828:;				
            _A30BB6F62_828:
            ; //	asm	nop				
00579:      	nop
            ; //_A30BB6F62_829:;				
            _A30BB6F62_829:
            ; //	asm	nop				
0057A:      	nop
            ; //_A30BB6F62_830:;				
            _A30BB6F62_830:
            ; //	asm	nop				
0057B:      	nop
            ; //_A30BB6F62_831:;				
            _A30BB6F62_831:
            ; //	asm	nop				
0057C:      	nop
            ; //_A30BB6F62_832:;				
            _A30BB6F62_832:
            ; //	asm	nop				
0057D:      	nop
            ; //_A30BB6F62_833:;				
            _A30BB6F62_833:
            ; //	asm	nop				
0057E:      	nop
            ; //_A30BB6F62_834:;				
            _A30BB6F62_834:
            ; //	asm	nop				
0057F:      	nop
            ; //_A30BB6F62_835:;				
            _A30BB6F62_835:
            ; //	asm	nop				
00580:      	nop
            ; //_A30BB6F62_836:;				
            _A30BB6F62_836:
            ; //	asm	nop				
00581:      	nop
            ; //_A30BB6F62_837:;				
            _A30BB6F62_837:
            ; //	asm	nop				
00582:      	nop
            ; //_A30BB6F62_838:;				
            _A30BB6F62_838:
            ; //	asm set io[0x09].b14;			
00583:      	set io[0x09].b14//
            ; //_A30BB6F62_839:;				
            _A30BB6F62_839:
            ; //	asm	nop				
00584:      	nop
            ; //_A30BB6F62_840:;				
            _A30BB6F62_840:
            ; //	asm	nop				
00585:      	nop
            ; //_A30BB6F62_841:;				
            _A30BB6F62_841:
            ; //	asm	nop				
00586:      	nop
            ; //_A30BB6F62_842:;				
            _A30BB6F62_842:
            ; //	asm clr io[0x09].b14;			
00587:      	clr io[0x09].b14//
            ; //_A30BB6F62_843:;				
            _A30BB6F62_843:
            ; //	asm	nop				
00588:      	nop
            ; //_A30BB6F62_844:;				
            _A30BB6F62_844:
            ; //	asm	nop				
00589:      	nop
            ; //_A30BB6F62_845:;				
            _A30BB6F62_845:
            ; //	asm	nop				
0058A:      	nop
            ; //_A30BB6F62_846:;				
            _A30BB6F62_846:
            ; //	asm	nop				
0058B:      	nop
            ; //_A30BB6F62_847:;				
            _A30BB6F62_847:
            ; //	asm	nop				
0058C:      	nop
            ; //_A30BB6F62_848:;				
            _A30BB6F62_848:
            ; //	asm	nop				
0058D:      	nop
            ; //_A30BB6F62_849:;				
            _A30BB6F62_849:
            ; //	asm	nop				
0058E:      	nop
            ; //_A30BB6F62_850:;				
            _A30BB6F62_850:
            ; //	asm	nop				
0058F:      	nop
            ; //_A30BB6F62_851:;				
            _A30BB6F62_851:
            ; //	asm	nop				
00590:      	nop
            ; //_A30BB6F62_852:;				
            _A30BB6F62_852:
            ; //	asm	nop				
00591:      	nop
            ; //_A30BB6F62_853:;				
            _A30BB6F62_853:
            ; //	asm	nop				
00592:      	nop
            ; //_A30BB6F62_854:;				
            _A30BB6F62_854:
            ; //	asm	nop				
00593:      	nop
            ; //_A30BB6F62_855:;				
            _A30BB6F62_855:
            ; //	asm set io[0x09].b14;			
00594:      	set io[0x09].b14//
            ; //_A30BB6F62_856:;				
            _A30BB6F62_856:
            ; //	asm	nop				
00595:      	nop
            ; //_A30BB6F62_857:;				
            _A30BB6F62_857:
            ; //	asm	nop				
00596:      	nop
            ; //_A30BB6F62_858:;				
            _A30BB6F62_858:
            ; //	asm	nop				
00597:      	nop
            ; //_A30BB6F62_859:;				
            _A30BB6F62_859:
            ; //	asm clr io[0x09].b14;			
00598:      	clr io[0x09].b14//
            ; //_A30BB6F62_860:;				
            _A30BB6F62_860:
            ; //	asm	nop				
00599:      	nop
            ; //_A30BB6F62_861:;				
            _A30BB6F62_861:
            ; //	asm	nop				
0059A:      	nop
            ; //_A30BB6F62_862:;				
            _A30BB6F62_862:
            ; //	asm	nop				
0059B:      	nop
            ; //_A30BB6F62_863:;				
            _A30BB6F62_863:
            ; //	asm	nop				
0059C:      	nop
            ; //_A30BB6F62_864:;				
            _A30BB6F62_864:
            ; //	asm	nop				
0059D:      	nop
            ; //_A30BB6F62_865:;				
            _A30BB6F62_865:
            ; //	asm	nop				
0059E:      	nop
            ; //_A30BB6F62_866:;				
            _A30BB6F62_866:
            ; //	asm	nop				
0059F:      	nop
            ; //_A30BB6F62_867:;				
            _A30BB6F62_867:
            ; //	asm	nop				
005A0:      	nop
            ; //_A30BB6F62_868:;				
            _A30BB6F62_868:
            ; //	asm	nop				
005A1:      	nop
            ; //_A30BB6F62_869:;				
            _A30BB6F62_869:
            ; //	asm	nop				
005A2:      	nop
            ; //_A30BB6F62_870:;				
            _A30BB6F62_870:
            ; //	asm	nop				
005A3:      	nop
            ; //_A30BB6F62_871:;				
            _A30BB6F62_871:
            ; //	asm	nop				
005A4:      	nop
            ; //_A30BB6F62_872:;				
            _A30BB6F62_872:
            ; //	asm set io[0x09].b14;			
005A5:      	set io[0x09].b14//
            ; //_A30BB6F62_873:;				
            _A30BB6F62_873:
            ; //	asm	nop				
005A6:      	nop
            ; //_A30BB6F62_874:;				
            _A30BB6F62_874:
            ; //	asm	nop				
005A7:      	nop
            ; //_A30BB6F62_875:;				
            _A30BB6F62_875:
            ; //	asm	nop				
005A8:      	nop
            ; //_A30BB6F62_876:;				
            _A30BB6F62_876:
            ; //	asm clr io[0x09].b14;			
005A9:      	clr io[0x09].b14//
            ; //_A30BB6F62_877:;				
            _A30BB6F62_877:
            ; //	asm	nop				
005AA:      	nop
            ; //_A30BB6F62_878:;				
            _A30BB6F62_878:
            ; //	asm	nop				
005AB:      	nop
            ; //_A30BB6F62_879:;				
            _A30BB6F62_879:
            ; //	asm	nop				
005AC:      	nop
            ; //_A30BB6F62_880:;				
            _A30BB6F62_880:
            ; //	asm	nop				
005AD:      	nop
            ; //_A30BB6F62_881:;				
            _A30BB6F62_881:
            ; //	asm	nop				
005AE:      	nop
            ; //_A30BB6F62_882:;				
            _A30BB6F62_882:
            ; //	asm	nop				
005AF:      	nop
            ; //_A30BB6F62_883:;				
            _A30BB6F62_883:
            ; //	asm	nop				
005B0:      	nop
            ; //_A30BB6F62_884:;				
            _A30BB6F62_884:
            ; //	asm	nop				
005B1:      	nop
            ; //_A30BB6F62_885:;				
            _A30BB6F62_885:
            ; //	asm	nop				
005B2:      	nop
            ; //_A30BB6F62_886:;				
            _A30BB6F62_886:
            ; //	asm	nop				
005B3:      	nop
            ; //_A30BB6F62_887:;				
            _A30BB6F62_887:
            ; //	asm	nop				
005B4:      	nop
            ; //_A30BB6F62_888:;				
            _A30BB6F62_888:
            ; //	asm	nop				
005B5:      	nop
            ; //_A30BB6F62_889:;				
            _A30BB6F62_889:
            ; //	asm set io[0x09].b14;			
005B6:      	set io[0x09].b14//
            ; //_A30BB6F62_890:;				
            _A30BB6F62_890:
            ; //	asm	nop				
005B7:      	nop
            ; //_A30BB6F62_891:;				
            _A30BB6F62_891:
            ; //	asm	nop				
005B8:      	nop
            ; //_A30BB6F62_892:;				
            _A30BB6F62_892:
            ; //	asm	nop				
005B9:      	nop
            ; //_A30BB6F62_893:;				
            _A30BB6F62_893:
            ; //	asm clr io[0x09].b14;			
005BA:      	clr io[0x09].b14//
            ; //_A30BB6F62_894:;				
            _A30BB6F62_894:
            ; //	asm	nop				
005BB:      	nop
            ; //_A30BB6F62_895:;				
            _A30BB6F62_895:
            ; //	asm	nop				
005BC:      	nop
            ; //_A30BB6F62_896:;				
            _A30BB6F62_896:
            ; //	asm	nop				
005BD:      	nop
            ; //_A30BB6F62_897:;				
            _A30BB6F62_897:
            ; //	asm	nop				
005BE:      	nop
            ; //_A30BB6F62_898:;				
            _A30BB6F62_898:
            ; //	asm	nop				
005BF:      	nop
            ; //_A30BB6F62_899:;				
            _A30BB6F62_899:
            ; //	asm	nop				
005C0:      	nop
            ; //_A30BB6F62_900:;				
            _A30BB6F62_900:
            ; //	asm	nop				
005C1:      	nop
            ; //_A30BB6F62_901:;				
            _A30BB6F62_901:
            ; //	asm	nop				
005C2:      	nop
            ; //_A30BB6F62_902:;				
            _A30BB6F62_902:
            ; //	asm	nop				
005C3:      	nop
            ; //_A30BB6F62_903:;				
            _A30BB6F62_903:
            ; //	asm	nop				
005C4:      	nop
            ; //_A30BB6F62_904:;				
            _A30BB6F62_904:
            ; //	asm	nop				
005C5:      	nop
            ; //_A30BB6F62_905:;				
            _A30BB6F62_905:
            ; //	asm	nop				
005C6:      	nop
            ; //_A30BB6F62_906:;				
            _A30BB6F62_906:
            ; //	asm set io[0x09].b14;			
005C7:      	set io[0x09].b14//
            ; //_A30BB6F62_907:;				
            _A30BB6F62_907:
            ; //	asm	nop				
005C8:      	nop
            ; //_A30BB6F62_908:;				
            _A30BB6F62_908:
            ; //	asm	nop				
005C9:      	nop
            ; //_A30BB6F62_909:;				
            _A30BB6F62_909:
            ; //	asm	nop				
005CA:      	nop
            ; //_A30BB6F62_910:;				
            _A30BB6F62_910:
            ; //	asm clr io[0x09].b14;			
005CB:      	clr io[0x09].b14//
            ; //_A30BB6F62_911:;				
            _A30BB6F62_911:
            ; //	asm	nop				
005CC:      	nop
            ; //_A30BB6F62_912:;				
            _A30BB6F62_912:
            ; //	asm	nop				
005CD:      	nop
            ; //_A30BB6F62_913:;				
            _A30BB6F62_913:
            ; //	asm	nop				
005CE:      	nop
            ; //_A30BB6F62_914:;				
            _A30BB6F62_914:
            ; //	asm	nop				
005CF:      	nop
            ; //_A30BB6F62_915:;				
            _A30BB6F62_915:
            ; //	asm	nop				
005D0:      	nop
            ; //_A30BB6F62_916:;				
            _A30BB6F62_916:
            ; //	asm	nop				
005D1:      	nop
            ; //_A30BB6F62_917:;				
            _A30BB6F62_917:
            ; //	asm	nop				
005D2:      	nop
            ; //_A30BB6F62_918:;				
            _A30BB6F62_918:
            ; //	asm	nop				
005D3:      	nop
            ; //_A30BB6F62_919:;				
            _A30BB6F62_919:
            ; //	asm	nop				
005D4:      	nop
            ; //_A30BB6F62_920:;				
            _A30BB6F62_920:
            ; //	asm	nop				
005D5:      	nop
            ; //_A30BB6F62_921:;				
            _A30BB6F62_921:
            ; //	asm	nop				
005D6:      	nop
            ; //_A30BB6F62_922:;				
            _A30BB6F62_922:
            ; //	asm	nop				
005D7:      	nop
            ; //_A30BB6F62_923:;				
            _A30BB6F62_923:
            ; //	asm set io[0x09].b14;			
005D8:      	set io[0x09].b14//
            ; //_A30BB6F62_924:;				
            _A30BB6F62_924:
            ; //	asm	nop				
005D9:      	nop
            ; //_A30BB6F62_925:;				
            _A30BB6F62_925:
            ; //	asm	nop				
005DA:      	nop
            ; //_A30BB6F62_926:;				
            _A30BB6F62_926:
            ; //	asm	nop				
005DB:      	nop
            ; //_A30BB6F62_927:;				
            _A30BB6F62_927:
            ; //	asm clr io[0x09].b14;			
005DC:      	clr io[0x09].b14//
            ; //_A30BB6F62_928:;				
            _A30BB6F62_928:
            ; //	asm	nop				
005DD:      	nop
            ; //_A30BB6F62_929:;				
            _A30BB6F62_929:
            ; //	asm	nop				
005DE:      	nop
            ; //_A30BB6F62_930:;				
            _A30BB6F62_930:
            ; //	asm	nop				
005DF:      	nop
            ; //_A30BB6F62_931:;				
            _A30BB6F62_931:
            ; //	asm	nop				
005E0:      	nop
            ; //_A30BB6F62_932:;				
            _A30BB6F62_932:
            ; //	asm	nop				
005E1:      	nop
            ; //_A30BB6F62_933:;				
            _A30BB6F62_933:
            ; //	asm	nop				
005E2:      	nop
            ; //_A30BB6F62_934:;				
            _A30BB6F62_934:
            ; //	asm	nop				
005E3:      	nop
            ; //_A30BB6F62_935:;				
            _A30BB6F62_935:
            ; //	asm	nop				
005E4:      	nop
            ; //_A30BB6F62_936:;				
            _A30BB6F62_936:
            ; //	asm	nop				
005E5:      	nop
            ; //_A30BB6F62_937:;				
            _A30BB6F62_937:
            ; //	asm	nop				
005E6:      	nop
            ; //_A30BB6F62_938:;				
            _A30BB6F62_938:
            ; //	asm	nop				
005E7:      	nop
            ; //_A30BB6F62_939:;				
            _A30BB6F62_939:
            ; //	asm	nop				
005E8:      	nop
            ; //_A30BB6F62_940:;				
            _A30BB6F62_940:
            ; //	goto LD63FD439_50;			
005E9:      	pch =	LD63FD439_50
005EA:      	ljmp	LD63FD439_50
            ; //LD63FD439_54:;					
            LD63FD439_54:
            ; //_A30BB6F62_941:;				
            _A30BB6F62_941:
            ; //	asm set io[0x09].b14;			
005EB:      	set io[0x09].b14//
            ; //_A30BB6F62_942:;				
            _A30BB6F62_942:
            ; //	asm	nop				
005EC:      	nop
            ; //_A30BB6F62_943:;				
            _A30BB6F62_943:
            ; //	asm	nop				
005ED:      	nop
            ; //_A30BB6F62_944:;				
            _A30BB6F62_944:
            ; //	asm	nop				
005EE:      	nop
            ; //_A30BB6F62_945:;				
            _A30BB6F62_945:
            ; //	asm clr io[0x09].b14;			
005EF:      	clr io[0x09].b14//
            ; //_A30BB6F62_946:;				
            _A30BB6F62_946:
            ; //	asm	nop				
005F0:      	nop
            ; //_A30BB6F62_947:;				
            _A30BB6F62_947:
            ; //	asm	nop				
005F1:      	nop
            ; //_A30BB6F62_948:;				
            _A30BB6F62_948:
            ; //	asm	nop				
005F2:      	nop
            ; //_A30BB6F62_949:;				
            _A30BB6F62_949:
            ; //	asm	nop				
005F3:      	nop
            ; //_A30BB6F62_950:;				
            _A30BB6F62_950:
            ; //	asm	nop				
005F4:      	nop
            ; //_A30BB6F62_951:;				
            _A30BB6F62_951:
            ; //	asm	nop				
005F5:      	nop
            ; //_A30BB6F62_952:;				
            _A30BB6F62_952:
            ; //	asm	nop				
005F6:      	nop
            ; //_A30BB6F62_953:;				
            _A30BB6F62_953:
            ; //	asm	nop				
005F7:      	nop
            ; //_A30BB6F62_954:;				
            _A30BB6F62_954:
            ; //	asm	nop				
005F8:      	nop
            ; //_A30BB6F62_955:;				
            _A30BB6F62_955:
            ; //	asm	nop				
005F9:      	nop
            ; //_A30BB6F62_956:;				
            _A30BB6F62_956:
            ; //	asm	nop				
005FA:      	nop
            ; //_A30BB6F62_957:;				
            _A30BB6F62_957:
            ; //	asm	nop				
005FB:      	nop
            ; //_A30BB6F62_958:;				
            _A30BB6F62_958:
            ; //	asm set io[0x09].b14;			
005FC:      	set io[0x09].b14//
            ; //_A30BB6F62_959:;				
            _A30BB6F62_959:
            ; //	asm	nop				
005FD:      	nop
            ; //_A30BB6F62_960:;				
            _A30BB6F62_960:
            ; //	asm	nop				
005FE:      	nop
            ; //_A30BB6F62_961:;				
            _A30BB6F62_961:
            ; //	asm	nop				
005FF:      	nop
            ; //_A30BB6F62_962:;				
            _A30BB6F62_962:
            ; //	asm clr io[0x09].b14;			
00600:      	clr io[0x09].b14//
            ; //_A30BB6F62_963:;				
            _A30BB6F62_963:
            ; //	asm	nop				
00601:      	nop
            ; //_A30BB6F62_964:;				
            _A30BB6F62_964:
            ; //	asm	nop				
00602:      	nop
            ; //_A30BB6F62_965:;				
            _A30BB6F62_965:
            ; //	asm	nop				
00603:      	nop
            ; //_A30BB6F62_966:;				
            _A30BB6F62_966:
            ; //	asm	nop				
00604:      	nop
            ; //_A30BB6F62_967:;				
            _A30BB6F62_967:
            ; //	asm	nop				
00605:      	nop
            ; //_A30BB6F62_968:;				
            _A30BB6F62_968:
            ; //	asm	nop				
00606:      	nop
            ; //_A30BB6F62_969:;				
            _A30BB6F62_969:
            ; //	asm	nop				
00607:      	nop
            ; //_A30BB6F62_970:;				
            _A30BB6F62_970:
            ; //	asm	nop				
00608:      	nop
            ; //_A30BB6F62_971:;				
            _A30BB6F62_971:
            ; //	asm	nop				
00609:      	nop
            ; //_A30BB6F62_972:;				
            _A30BB6F62_972:
            ; //	asm	nop				
0060A:      	nop
            ; //_A30BB6F62_973:;				
            _A30BB6F62_973:
            ; //	asm	nop				
0060B:      	nop
            ; //_A30BB6F62_974:;				
            _A30BB6F62_974:
            ; //	asm	nop				
0060C:      	nop
            ; //_A30BB6F62_975:;				
            _A30BB6F62_975:
            ; //	asm set io[0x09].b14;			
0060D:      	set io[0x09].b14//
            ; //_A30BB6F62_976:;				
            _A30BB6F62_976:
            ; //	asm	nop				
0060E:      	nop
            ; //_A30BB6F62_977:;				
            _A30BB6F62_977:
            ; //	asm	nop				
0060F:      	nop
            ; //_A30BB6F62_978:;				
            _A30BB6F62_978:
            ; //	asm	nop				
00610:      	nop
            ; //_A30BB6F62_979:;				
            _A30BB6F62_979:
            ; //	asm clr io[0x09].b14;			
00611:      	clr io[0x09].b14//
            ; //_A30BB6F62_980:;				
            _A30BB6F62_980:
            ; //	asm	nop				
00612:      	nop
            ; //_A30BB6F62_981:;				
            _A30BB6F62_981:
            ; //	asm	nop				
00613:      	nop
            ; //_A30BB6F62_982:;				
            _A30BB6F62_982:
            ; //	asm	nop				
00614:      	nop
            ; //_A30BB6F62_983:;				
            _A30BB6F62_983:
            ; //	asm	nop				
00615:      	nop
            ; //_A30BB6F62_984:;				
            _A30BB6F62_984:
            ; //	asm	nop				
00616:      	nop
            ; //_A30BB6F62_985:;				
            _A30BB6F62_985:
            ; //	asm	nop				
00617:      	nop
            ; //_A30BB6F62_986:;				
            _A30BB6F62_986:
            ; //	asm	nop				
00618:      	nop
            ; //_A30BB6F62_987:;				
            _A30BB6F62_987:
            ; //	asm	nop				
00619:      	nop
            ; //_A30BB6F62_988:;				
            _A30BB6F62_988:
            ; //	asm	nop				
0061A:      	nop
            ; //_A30BB6F62_989:;				
            _A30BB6F62_989:
            ; //	asm	nop				
0061B:      	nop
            ; //_A30BB6F62_990:;				
            _A30BB6F62_990:
            ; //	asm	nop				
0061C:      	nop
            ; //_A30BB6F62_991:;				
            _A30BB6F62_991:
            ; //	asm	nop				
0061D:      	nop
            ; //_A30BB6F62_992:;				
            _A30BB6F62_992:
            ; //	asm set io[0x09].b14;			
0061E:      	set io[0x09].b14//
            ; //_A30BB6F62_993:;				
            _A30BB6F62_993:
            ; //	asm	nop				
0061F:      	nop
            ; //_A30BB6F62_994:;				
            _A30BB6F62_994:
            ; //	asm	nop				
00620:      	nop
            ; //_A30BB6F62_995:;				
            _A30BB6F62_995:
            ; //	asm	nop				
00621:      	nop
            ; //_A30BB6F62_996:;				
            _A30BB6F62_996:
            ; //	asm clr io[0x09].b14;			
00622:      	clr io[0x09].b14//
            ; //_A30BB6F62_997:;				
            _A30BB6F62_997:
            ; //	asm	nop				
00623:      	nop
            ; //_A30BB6F62_998:;				
            _A30BB6F62_998:
            ; //	asm	nop				
00624:      	nop
            ; //_A30BB6F62_999:;				
            _A30BB6F62_999:
            ; //	asm	nop				
00625:      	nop
            ; //_A30BB6F62_1000:;				
            _A30BB6F62_1000:
            ; //	asm	nop				
00626:      	nop
            ; //_A30BB6F62_1001:;				
            _A30BB6F62_1001:
            ; //	asm	nop				
00627:      	nop
            ; //_A30BB6F62_1002:;				
            _A30BB6F62_1002:
            ; //	asm	nop				
00628:      	nop
            ; //_A30BB6F62_1003:;				
            _A30BB6F62_1003:
            ; //	asm	nop				
00629:      	nop
            ; //_A30BB6F62_1004:;				
            _A30BB6F62_1004:
            ; //	asm	nop				
0062A:      	nop
            ; //_A30BB6F62_1005:;				
            _A30BB6F62_1005:
            ; //	asm	nop				
0062B:      	nop
            ; //_A30BB6F62_1006:;				
            _A30BB6F62_1006:
            ; //	asm	nop				
0062C:      	nop
            ; //_A30BB6F62_1007:;				
            _A30BB6F62_1007:
            ; //	asm	nop				
0062D:      	nop
            ; //_A30BB6F62_1008:;				
            _A30BB6F62_1008:
            ; //	asm	nop				
0062E:      	nop
            ; //_A30BB6F62_1009:;				
            _A30BB6F62_1009:
            ; //	asm set io[0x09].b14;			
0062F:      	set io[0x09].b14//
            ; //_A30BB6F62_1010:;				
            _A30BB6F62_1010:
            ; //	asm	nop				
00630:      	nop
            ; //_A30BB6F62_1011:;				
            _A30BB6F62_1011:
            ; //	asm	nop				
00631:      	nop
            ; //_A30BB6F62_1012:;				
            _A30BB6F62_1012:
            ; //	asm	nop				
00632:      	nop
            ; //_A30BB6F62_1013:;				
            _A30BB6F62_1013:
            ; //	asm clr io[0x09].b14;			
00633:      	clr io[0x09].b14//
            ; //_A30BB6F62_1014:;				
            _A30BB6F62_1014:
            ; //	asm	nop				
00634:      	nop
            ; //_A30BB6F62_1015:;				
            _A30BB6F62_1015:
            ; //	asm	nop				
00635:      	nop
            ; //_A30BB6F62_1016:;				
            _A30BB6F62_1016:
            ; //	asm	nop				
00636:      	nop
            ; //_A30BB6F62_1017:;				
            _A30BB6F62_1017:
            ; //	asm	nop				
00637:      	nop
            ; //_A30BB6F62_1018:;				
            _A30BB6F62_1018:
            ; //	asm	nop				
00638:      	nop
            ; //_A30BB6F62_1019:;				
            _A30BB6F62_1019:
            ; //	asm	nop				
00639:      	nop
            ; //_A30BB6F62_1020:;				
            _A30BB6F62_1020:
            ; //	asm	nop				
0063A:      	nop
            ; //_A30BB6F62_1021:;				
            _A30BB6F62_1021:
            ; //	asm	nop				
0063B:      	nop
            ; //_A30BB6F62_1022:;				
            _A30BB6F62_1022:
            ; //	asm	nop				
0063C:      	nop
            ; //_A30BB6F62_1023:;				
            _A30BB6F62_1023:
            ; //	asm	nop				
0063D:      	nop
            ; //_A30BB6F62_1024:;				
            _A30BB6F62_1024:
            ; //	asm	nop				
0063E:      	nop
            ; //_A30BB6F62_1025:;				
            _A30BB6F62_1025:
            ; //	asm	nop				
0063F:      	nop
            ; //_A30BB6F62_1026:;				
            _A30BB6F62_1026:
            ; //	asm set io[0x09].b14;			
00640:      	set io[0x09].b14//
            ; //_A30BB6F62_1027:;				
            _A30BB6F62_1027:
            ; //	asm	nop				
00641:      	nop
            ; //_A30BB6F62_1028:;				
            _A30BB6F62_1028:
            ; //	asm	nop				
00642:      	nop
            ; //_A30BB6F62_1029:;				
            _A30BB6F62_1029:
            ; //	asm	nop				
00643:      	nop
            ; //_A30BB6F62_1030:;				
            _A30BB6F62_1030:
            ; //	asm clr io[0x09].b14;			
00644:      	clr io[0x09].b14//
            ; //_A30BB6F62_1031:;				
            _A30BB6F62_1031:
            ; //	asm	nop				
00645:      	nop
            ; //_A30BB6F62_1032:;				
            _A30BB6F62_1032:
            ; //	asm	nop				
00646:      	nop
            ; //_A30BB6F62_1033:;				
            _A30BB6F62_1033:
            ; //	asm	nop				
00647:      	nop
            ; //_A30BB6F62_1034:;				
            _A30BB6F62_1034:
            ; //	asm	nop				
00648:      	nop
            ; //_A30BB6F62_1035:;				
            _A30BB6F62_1035:
            ; //	asm	nop				
00649:      	nop
            ; //_A30BB6F62_1036:;				
            _A30BB6F62_1036:
            ; //	asm	nop				
0064A:      	nop
            ; //_A30BB6F62_1037:;				
            _A30BB6F62_1037:
            ; //	asm	nop				
0064B:      	nop
            ; //_A30BB6F62_1038:;				
            _A30BB6F62_1038:
            ; //	asm	nop				
0064C:      	nop
            ; //_A30BB6F62_1039:;				
            _A30BB6F62_1039:
            ; //	asm	nop				
0064D:      	nop
            ; //_A30BB6F62_1040:;				
            _A30BB6F62_1040:
            ; //	asm	nop				
0064E:      	nop
            ; //_A30BB6F62_1041:;				
            _A30BB6F62_1041:
            ; //	asm	nop				
0064F:      	nop
            ; //_A30BB6F62_1042:;				
            _A30BB6F62_1042:
            ; //	asm	nop				
00650:      	nop
            ; //_A30BB6F62_1043:;				
            _A30BB6F62_1043:
            ; //	asm set io[0x09].b14;			
00651:      	set io[0x09].b14//
            ; //_A30BB6F62_1044:;				
            _A30BB6F62_1044:
            ; //	asm	nop				
00652:      	nop
            ; //_A30BB6F62_1045:;				
            _A30BB6F62_1045:
            ; //	asm	nop				
00653:      	nop
            ; //_A30BB6F62_1046:;				
            _A30BB6F62_1046:
            ; //	asm	nop				
00654:      	nop
            ; //_A30BB6F62_1047:;				
            _A30BB6F62_1047:
            ; //	asm clr io[0x09].b14;			
00655:      	clr io[0x09].b14//
            ; //_A30BB6F62_1048:;				
            _A30BB6F62_1048:
            ; //	asm	nop				
00656:      	nop
            ; //_A30BB6F62_1049:;				
            _A30BB6F62_1049:
            ; //	asm	nop				
00657:      	nop
            ; //_A30BB6F62_1050:;				
            _A30BB6F62_1050:
            ; //	asm	nop				
00658:      	nop
            ; //_A30BB6F62_1051:;				
            _A30BB6F62_1051:
            ; //	asm	nop				
00659:      	nop
            ; //_A30BB6F62_1052:;				
            _A30BB6F62_1052:
            ; //	asm	nop				
0065A:      	nop
            ; //_A30BB6F62_1053:;				
            _A30BB6F62_1053:
            ; //	asm	nop				
0065B:      	nop
            ; //_A30BB6F62_1054:;				
            _A30BB6F62_1054:
            ; //	asm	nop				
0065C:      	nop
            ; //_A30BB6F62_1055:;				
            _A30BB6F62_1055:
            ; //	asm	nop				
0065D:      	nop
            ; //_A30BB6F62_1056:;				
            _A30BB6F62_1056:
            ; //	asm	nop				
0065E:      	nop
            ; //_A30BB6F62_1057:;				
            _A30BB6F62_1057:
            ; //	asm	nop				
0065F:      	nop
            ; //_A30BB6F62_1058:;				
            _A30BB6F62_1058:
            ; //	asm	nop				
00660:      	nop
            ; //_A30BB6F62_1059:;				
            _A30BB6F62_1059:
            ; //	asm	nop				
00661:      	nop
            ; //_A30BB6F62_1060:;				
            _A30BB6F62_1060:
            ; //	asm set io[0x09].b14;			
00662:      	set io[0x09].b14//
            ; //_A30BB6F62_1061:;				
            _A30BB6F62_1061:
            ; //	asm	nop				
00663:      	nop
            ; //_A30BB6F62_1062:;				
            _A30BB6F62_1062:
            ; //	asm	nop				
00664:      	nop
            ; //_A30BB6F62_1063:;				
            _A30BB6F62_1063:
            ; //	asm	nop				
00665:      	nop
            ; //_A30BB6F62_1064:;				
            _A30BB6F62_1064:
            ; //	asm clr io[0x09].b14;			
00666:      	clr io[0x09].b14//
            ; //_A30BB6F62_1065:;				
            _A30BB6F62_1065:
            ; //	asm	nop				
00667:      	nop
            ; //_A30BB6F62_1066:;				
            _A30BB6F62_1066:
            ; //	asm	nop				
00668:      	nop
            ; //_A30BB6F62_1067:;				
            _A30BB6F62_1067:
            ; //	asm	nop				
00669:      	nop
            ; //_A30BB6F62_1068:;				
            _A30BB6F62_1068:
            ; //	asm	nop				
0066A:      	nop
            ; //_A30BB6F62_1069:;				
            _A30BB6F62_1069:
            ; //	asm	nop				
0066B:      	nop
            ; //_A30BB6F62_1070:;				
            _A30BB6F62_1070:
            ; //	asm	nop				
0066C:      	nop
            ; //_A30BB6F62_1071:;				
            _A30BB6F62_1071:
            ; //	asm	nop				
0066D:      	nop
            ; //_A30BB6F62_1072:;				
            _A30BB6F62_1072:
            ; //	asm	nop				
0066E:      	nop
            ; //_A30BB6F62_1073:;				
            _A30BB6F62_1073:
            ; //	asm	nop				
0066F:      	nop
            ; //_A30BB6F62_1074:;				
            _A30BB6F62_1074:
            ; //	asm	nop				
00670:      	nop
            ; //_A30BB6F62_1075:;				
            _A30BB6F62_1075:
            ; //	asm	nop				
00671:      	nop
            ; //_A30BB6F62_1076:;				
            _A30BB6F62_1076:
            ; //	asm	nop				
00672:      	nop
            ; //_A30BB6F62_1077:;				
            _A30BB6F62_1077:
            ; //	asm set io[0x09].b14;			
00673:      	set io[0x09].b14//
            ; //_A30BB6F62_1078:;				
            _A30BB6F62_1078:
            ; //	asm	nop				
00674:      	nop
            ; //_A30BB6F62_1079:;				
            _A30BB6F62_1079:
            ; //	asm	nop				
00675:      	nop
            ; //_A30BB6F62_1080:;				
            _A30BB6F62_1080:
            ; //	asm	nop				
00676:      	nop
            ; //_A30BB6F62_1081:;				
            _A30BB6F62_1081:
            ; //	asm	nop				
00677:      	nop
            ; //_A30BB6F62_1082:;				
            _A30BB6F62_1082:
            ; //	asm	nop				
00678:      	nop
            ; //_A30BB6F62_1083:;				
            _A30BB6F62_1083:
            ; //	asm	nop				
00679:      	nop
            ; //_A30BB6F62_1084:;				
            _A30BB6F62_1084:
            ; //	asm	nop				
0067A:      	nop
            ; //_A30BB6F62_1085:;				
            _A30BB6F62_1085:
            ; //	asm	nop				
0067B:      	nop
            ; //_A30BB6F62_1086:;				
            _A30BB6F62_1086:
            ; //	asm	nop				
0067C:      	nop
            ; //_A30BB6F62_1087:;				
            _A30BB6F62_1087:
            ; //	asm	nop				
0067D:      	nop
            ; //_A30BB6F62_1088:;				
            _A30BB6F62_1088:
            ; //	asm	nop				
0067E:      	nop
            ; //_A30BB6F62_1089:;				
            _A30BB6F62_1089:
            ; //	asm	nop				
0067F:      	nop
            ; //_A30BB6F62_1090:;				
            _A30BB6F62_1090:
            ; //	asm clr io[0x09].b14;			
00680:      	clr io[0x09].b14//
            ; //_A30BB6F62_1091:;				
            _A30BB6F62_1091:
            ; //	asm	nop				
00681:      	nop
            ; //_A30BB6F62_1092:;				
            _A30BB6F62_1092:
            ; //	asm	nop				
00682:      	nop
            ; //_A30BB6F62_1093:;				
            _A30BB6F62_1093:
            ; //	asm	nop				
00683:      	nop
            ; //_A30BB6F62_1094:;				
            _A30BB6F62_1094:
            ; //	asm set io[0x09].b14;			
00684:      	set io[0x09].b14//
            ; //_A30BB6F62_1095:;				
            _A30BB6F62_1095:
            ; //	asm	nop				
00685:      	nop
            ; //_A30BB6F62_1096:;				
            _A30BB6F62_1096:
            ; //	asm	nop				
00686:      	nop
            ; //_A30BB6F62_1097:;				
            _A30BB6F62_1097:
            ; //	asm	nop				
00687:      	nop
            ; //_A30BB6F62_1098:;				
            _A30BB6F62_1098:
            ; //	asm	nop				
00688:      	nop
            ; //_A30BB6F62_1099:;				
            _A30BB6F62_1099:
            ; //	asm	nop				
00689:      	nop
            ; //_A30BB6F62_1100:;				
            _A30BB6F62_1100:
            ; //	asm	nop				
0068A:      	nop
            ; //_A30BB6F62_1101:;				
            _A30BB6F62_1101:
            ; //	asm	nop				
0068B:      	nop
            ; //_A30BB6F62_1102:;				
            _A30BB6F62_1102:
            ; //	asm	nop				
0068C:      	nop
            ; //_A30BB6F62_1103:;				
            _A30BB6F62_1103:
            ; //	asm	nop				
0068D:      	nop
            ; //_A30BB6F62_1104:;				
            _A30BB6F62_1104:
            ; //	asm	nop				
0068E:      	nop
            ; //_A30BB6F62_1105:;				
            _A30BB6F62_1105:
            ; //	asm	nop				
0068F:      	nop
            ; //_A30BB6F62_1106:;				
            _A30BB6F62_1106:
            ; //	asm	nop				
00690:      	nop
            ; //_A30BB6F62_1107:;				
            _A30BB6F62_1107:
            ; //	asm clr io[0x09].b14;			
00691:      	clr io[0x09].b14//
            ; //_A30BB6F62_1108:;				
            _A30BB6F62_1108:
            ; //	asm	nop				
00692:      	nop
            ; //_A30BB6F62_1109:;				
            _A30BB6F62_1109:
            ; //	asm	nop				
00693:      	nop
            ; //_A30BB6F62_1110:;				
            _A30BB6F62_1110:
            ; //	asm	nop				
00694:      	nop
            ; //_A30BB6F62_1111:;				
            _A30BB6F62_1111:
            ; //	asm set io[0x09].b14;			
00695:      	set io[0x09].b14//
            ; //_A30BB6F62_1112:;				
            _A30BB6F62_1112:
            ; //	asm	nop				
00696:      	nop
            ; //_A30BB6F62_1113:;				
            _A30BB6F62_1113:
            ; //	asm	nop				
00697:      	nop
            ; //_A30BB6F62_1114:;				
            _A30BB6F62_1114:
            ; //	asm	nop				
00698:      	nop
            ; //_A30BB6F62_1115:;				
            _A30BB6F62_1115:
            ; //	asm	nop				
00699:      	nop
            ; //_A30BB6F62_1116:;				
            _A30BB6F62_1116:
            ; //	asm	nop				
0069A:      	nop
            ; //_A30BB6F62_1117:;				
            _A30BB6F62_1117:
            ; //	asm	nop				
0069B:      	nop
            ; //_A30BB6F62_1118:;				
            _A30BB6F62_1118:
            ; //	asm	nop				
0069C:      	nop
            ; //_A30BB6F62_1119:;				
            _A30BB6F62_1119:
            ; //	asm	nop				
0069D:      	nop
            ; //_A30BB6F62_1120:;				
            _A30BB6F62_1120:
            ; //	asm	nop				
0069E:      	nop
            ; //_A30BB6F62_1121:;				
            _A30BB6F62_1121:
            ; //	asm	nop				
0069F:      	nop
            ; //_A30BB6F62_1122:;				
            _A30BB6F62_1122:
            ; //	asm	nop				
006A0:      	nop
            ; //_A30BB6F62_1123:;				
            _A30BB6F62_1123:
            ; //	asm	nop				
006A1:      	nop
            ; //_A30BB6F62_1124:;				
            _A30BB6F62_1124:
            ; //	asm clr io[0x09].b14;			
006A2:      	clr io[0x09].b14//
            ; //_A30BB6F62_1125:;				
            _A30BB6F62_1125:
            ; //	asm	nop				
006A3:      	nop
            ; //_A30BB6F62_1126:;				
            _A30BB6F62_1126:
            ; //	asm	nop				
006A4:      	nop
            ; //_A30BB6F62_1127:;				
            _A30BB6F62_1127:
            ; //	asm	nop				
006A5:      	nop
            ; //_A30BB6F62_1128:;				
            _A30BB6F62_1128:
            ; //	asm set io[0x09].b14;			
006A6:      	set io[0x09].b14//
            ; //_A30BB6F62_1129:;				
            _A30BB6F62_1129:
            ; //	asm	nop				
006A7:      	nop
            ; //_A30BB6F62_1130:;				
            _A30BB6F62_1130:
            ; //	asm	nop				
006A8:      	nop
            ; //_A30BB6F62_1131:;				
            _A30BB6F62_1131:
            ; //	asm	nop				
006A9:      	nop
            ; //_A30BB6F62_1132:;				
            _A30BB6F62_1132:
            ; //	asm	nop				
006AA:      	nop
            ; //_A30BB6F62_1133:;				
            _A30BB6F62_1133:
            ; //	asm	nop				
006AB:      	nop
            ; //_A30BB6F62_1134:;				
            _A30BB6F62_1134:
            ; //	asm	nop				
006AC:      	nop
            ; //_A30BB6F62_1135:;				
            _A30BB6F62_1135:
            ; //	asm	nop				
006AD:      	nop
            ; //_A30BB6F62_1136:;				
            _A30BB6F62_1136:
            ; //	asm	nop				
006AE:      	nop
            ; //_A30BB6F62_1137:;				
            _A30BB6F62_1137:
            ; //	asm	nop				
006AF:      	nop
            ; //_A30BB6F62_1138:;				
            _A30BB6F62_1138:
            ; //	asm	nop				
006B0:      	nop
            ; //_A30BB6F62_1139:;				
            _A30BB6F62_1139:
            ; //	asm	nop				
006B1:      	nop
            ; //_A30BB6F62_1140:;				
            _A30BB6F62_1140:
            ; //	asm	nop				
006B2:      	nop
            ; //_A30BB6F62_1141:;				
            _A30BB6F62_1141:
            ; //	asm clr io[0x09].b14;			
006B3:      	clr io[0x09].b14//
            ; //_A30BB6F62_1142:;				
            _A30BB6F62_1142:
            ; //	asm	nop				
006B4:      	nop
            ; //_A30BB6F62_1143:;				
            _A30BB6F62_1143:
            ; //	asm	nop				
006B5:      	nop
            ; //_A30BB6F62_1144:;				
            _A30BB6F62_1144:
            ; //	asm	nop				
006B6:      	nop
            ; //_A30BB6F62_1145:;				
            _A30BB6F62_1145:
            ; //	asm set io[0x09].b14;			
006B7:      	set io[0x09].b14//
            ; //_A30BB6F62_1146:;				
            _A30BB6F62_1146:
            ; //	asm	nop				
006B8:      	nop
            ; //_A30BB6F62_1147:;				
            _A30BB6F62_1147:
            ; //	asm	nop				
006B9:      	nop
            ; //_A30BB6F62_1148:;				
            _A30BB6F62_1148:
            ; //	asm	nop				
006BA:      	nop
            ; //_A30BB6F62_1149:;				
            _A30BB6F62_1149:
            ; //	asm	nop				
006BB:      	nop
            ; //_A30BB6F62_1150:;				
            _A30BB6F62_1150:
            ; //	asm	nop				
006BC:      	nop
            ; //_A30BB6F62_1151:;				
            _A30BB6F62_1151:
            ; //	asm	nop				
006BD:      	nop
            ; //_A30BB6F62_1152:;				
            _A30BB6F62_1152:
            ; //	asm	nop				
006BE:      	nop
            ; //_A30BB6F62_1153:;				
            _A30BB6F62_1153:
            ; //	asm	nop				
006BF:      	nop
            ; //_A30BB6F62_1154:;				
            _A30BB6F62_1154:
            ; //	asm	nop				
006C0:      	nop
            ; //_A30BB6F62_1155:;				
            _A30BB6F62_1155:
            ; //	asm	nop				
006C1:      	nop
            ; //_A30BB6F62_1156:;				
            _A30BB6F62_1156:
            ; //	asm	nop				
006C2:      	nop
            ; //_A30BB6F62_1157:;				
            _A30BB6F62_1157:
            ; //	asm	nop				
006C3:      	nop
            ; //_A30BB6F62_1158:;				
            _A30BB6F62_1158:
            ; //	asm clr io[0x09].b14;			
006C4:      	clr io[0x09].b14//
            ; //_A30BB6F62_1159:;				
            _A30BB6F62_1159:
            ; //	asm	nop				
006C5:      	nop
            ; //_A30BB6F62_1160:;				
            _A30BB6F62_1160:
            ; //	asm	nop				
006C6:      	nop
            ; //_A30BB6F62_1161:;				
            _A30BB6F62_1161:
            ; //	asm	nop				
006C7:      	nop
            ; //_A30BB6F62_1162:;				
            _A30BB6F62_1162:
            ; //	asm set io[0x09].b14;			
006C8:      	set io[0x09].b14//
            ; //_A30BB6F62_1163:;				
            _A30BB6F62_1163:
            ; //	asm	nop				
006C9:      	nop
            ; //_A30BB6F62_1164:;				
            _A30BB6F62_1164:
            ; //	asm	nop				
006CA:      	nop
            ; //_A30BB6F62_1165:;				
            _A30BB6F62_1165:
            ; //	asm	nop				
006CB:      	nop
            ; //_A30BB6F62_1166:;				
            _A30BB6F62_1166:
            ; //	asm	nop				
006CC:      	nop
            ; //_A30BB6F62_1167:;				
            _A30BB6F62_1167:
            ; //	asm	nop				
006CD:      	nop
            ; //_A30BB6F62_1168:;				
            _A30BB6F62_1168:
            ; //	asm	nop				
006CE:      	nop
            ; //_A30BB6F62_1169:;				
            _A30BB6F62_1169:
            ; //	asm	nop				
006CF:      	nop
            ; //_A30BB6F62_1170:;				
            _A30BB6F62_1170:
            ; //	asm	nop				
006D0:      	nop
            ; //_A30BB6F62_1171:;				
            _A30BB6F62_1171:
            ; //	asm	nop				
006D1:      	nop
            ; //_A30BB6F62_1172:;				
            _A30BB6F62_1172:
            ; //	asm	nop				
006D2:      	nop
            ; //_A30BB6F62_1173:;				
            _A30BB6F62_1173:
            ; //	asm	nop				
006D3:      	nop
            ; //_A30BB6F62_1174:;				
            _A30BB6F62_1174:
            ; //	asm	nop				
006D4:      	nop
            ; //_A30BB6F62_1175:;				
            _A30BB6F62_1175:
            ; //	asm clr io[0x09].b14;			
006D5:      	clr io[0x09].b14//
            ; //_A30BB6F62_1176:;				
            _A30BB6F62_1176:
            ; //	asm	nop				
006D6:      	nop
            ; //_A30BB6F62_1177:;				
            _A30BB6F62_1177:
            ; //	asm	nop				
006D7:      	nop
            ; //_A30BB6F62_1178:;				
            _A30BB6F62_1178:
            ; //	asm	nop				
006D8:      	nop
            ; //_A30BB6F62_1179:;				
            _A30BB6F62_1179:
            ; //	asm set io[0x09].b14;			
006D9:      	set io[0x09].b14//
            ; //_A30BB6F62_1180:;				
            _A30BB6F62_1180:
            ; //	asm	nop				
006DA:      	nop
            ; //_A30BB6F62_1181:;				
            _A30BB6F62_1181:
            ; //	asm	nop				
006DB:      	nop
            ; //_A30BB6F62_1182:;				
            _A30BB6F62_1182:
            ; //	asm	nop				
006DC:      	nop
            ; //_A30BB6F62_1183:;				
            _A30BB6F62_1183:
            ; //	asm	nop				
006DD:      	nop
            ; //_A30BB6F62_1184:;				
            _A30BB6F62_1184:
            ; //	asm	nop				
006DE:      	nop
            ; //_A30BB6F62_1185:;				
            _A30BB6F62_1185:
            ; //	asm	nop				
006DF:      	nop
            ; //_A30BB6F62_1186:;				
            _A30BB6F62_1186:
            ; //	asm	nop				
006E0:      	nop
            ; //_A30BB6F62_1187:;				
            _A30BB6F62_1187:
            ; //	asm	nop				
006E1:      	nop
            ; //_A30BB6F62_1188:;				
            _A30BB6F62_1188:
            ; //	asm	nop				
006E2:      	nop
            ; //_A30BB6F62_1189:;				
            _A30BB6F62_1189:
            ; //	asm	nop				
006E3:      	nop
            ; //_A30BB6F62_1190:;				
            _A30BB6F62_1190:
            ; //	asm	nop				
006E4:      	nop
            ; //_A30BB6F62_1191:;				
            _A30BB6F62_1191:
            ; //	asm	nop				
006E5:      	nop
            ; //_A30BB6F62_1192:;				
            _A30BB6F62_1192:
            ; //	asm clr io[0x09].b14;			
006E6:      	clr io[0x09].b14//
            ; //_A30BB6F62_1193:;				
            _A30BB6F62_1193:
            ; //	asm	nop				
006E7:      	nop
            ; //_A30BB6F62_1194:;				
            _A30BB6F62_1194:
            ; //	asm	nop				
006E8:      	nop
            ; //_A30BB6F62_1195:;				
            _A30BB6F62_1195:
            ; //	asm	nop				
006E9:      	nop
            ; //_A30BB6F62_1196:;				
            _A30BB6F62_1196:
            ; //	asm set io[0x09].b14;			
006EA:      	set io[0x09].b14//
            ; //_A30BB6F62_1197:;				
            _A30BB6F62_1197:
            ; //	asm	nop				
006EB:      	nop
            ; //_A30BB6F62_1198:;				
            _A30BB6F62_1198:
            ; //	asm	nop				
006EC:      	nop
            ; //_A30BB6F62_1199:;				
            _A30BB6F62_1199:
            ; //	asm	nop				
006ED:      	nop
            ; //_A30BB6F62_1200:;				
            _A30BB6F62_1200:
            ; //	asm	nop				
006EE:      	nop
            ; //_A30BB6F62_1201:;				
            _A30BB6F62_1201:
            ; //	asm	nop				
006EF:      	nop
            ; //_A30BB6F62_1202:;				
            _A30BB6F62_1202:
            ; //	asm	nop				
006F0:      	nop
            ; //_A30BB6F62_1203:;				
            _A30BB6F62_1203:
            ; //	asm	nop				
006F1:      	nop
            ; //_A30BB6F62_1204:;				
            _A30BB6F62_1204:
            ; //	asm	nop				
006F2:      	nop
            ; //_A30BB6F62_1205:;				
            _A30BB6F62_1205:
            ; //	asm	nop				
006F3:      	nop
            ; //_A30BB6F62_1206:;				
            _A30BB6F62_1206:
            ; //	asm	nop				
006F4:      	nop
            ; //_A30BB6F62_1207:;				
            _A30BB6F62_1207:
            ; //	asm	nop				
006F5:      	nop
            ; //_A30BB6F62_1208:;				
            _A30BB6F62_1208:
            ; //	asm	nop				
006F6:      	nop
            ; //_A30BB6F62_1209:;				
            _A30BB6F62_1209:
            ; //	asm clr io[0x09].b14;			
006F7:      	clr io[0x09].b14//
            ; //_A30BB6F62_1210:;				
            _A30BB6F62_1210:
            ; //	asm	nop				
006F8:      	nop
            ; //_A30BB6F62_1211:;				
            _A30BB6F62_1211:
            ; //	asm	nop				
006F9:      	nop
            ; //_A30BB6F62_1212:;				
            _A30BB6F62_1212:
            ; //	asm	nop				
006FA:      	nop
            ; //_A30BB6F62_1213:;				
            _A30BB6F62_1213:
            ; //	asm set io[0x09].b14;			
006FB:      	set io[0x09].b14//
            ; //_A30BB6F62_1214:;				
            _A30BB6F62_1214:
            ; //	asm	nop				
006FC:      	nop
            ; //_A30BB6F62_1215:;				
            _A30BB6F62_1215:
            ; //	asm	nop				
006FD:      	nop
            ; //_A30BB6F62_1216:;				
            _A30BB6F62_1216:
            ; //	asm	nop				
006FE:      	nop
            ; //_A30BB6F62_1217:;				
            _A30BB6F62_1217:
            ; //	asm clr io[0x09].b14;			
006FF:      	clr io[0x09].b14//
            ; //_A30BB6F62_1218:;				
            _A30BB6F62_1218:
            ; //	asm	nop				
00700:      	nop
            ; //_A30BB6F62_1219:;				
            _A30BB6F62_1219:
            ; //	asm	nop				
00701:      	nop
            ; //_A30BB6F62_1220:;				
            _A30BB6F62_1220:
            ; //	asm	nop				
00702:      	nop
            ; //_A30BB6F62_1221:;				
            _A30BB6F62_1221:
            ; //	asm	nop				
00703:      	nop
            ; //_A30BB6F62_1222:;				
            _A30BB6F62_1222:
            ; //	asm	nop				
00704:      	nop
            ; //_A30BB6F62_1223:;				
            _A30BB6F62_1223:
            ; //	asm	nop				
00705:      	nop
            ; //_A30BB6F62_1224:;				
            _A30BB6F62_1224:
            ; //	asm	nop				
00706:      	nop
            ; //_A30BB6F62_1225:;				
            _A30BB6F62_1225:
            ; //	asm	nop				
00707:      	nop
            ; //_A30BB6F62_1226:;				
            _A30BB6F62_1226:
            ; //	asm	nop				
00708:      	nop
            ; //_A30BB6F62_1227:;				
            _A30BB6F62_1227:
            ; //	asm	nop				
00709:      	nop
            ; //_A30BB6F62_1228:;				
            _A30BB6F62_1228:
            ; //	asm	nop				
0070A:      	nop
            ; //_A30BB6F62_1229:;				
            _A30BB6F62_1229:
            ; //	asm	nop				
0070B:      	nop
            ; //_A30BB6F62_1230:;				
            _A30BB6F62_1230:
            ; //	asm set io[0x09].b14;			
0070C:      	set io[0x09].b14//
            ; //_A30BB6F62_1231:;				
            _A30BB6F62_1231:
            ; //	asm	nop				
0070D:      	nop
            ; //_A30BB6F62_1232:;				
            _A30BB6F62_1232:
            ; //	asm	nop				
0070E:      	nop
            ; //_A30BB6F62_1233:;				
            _A30BB6F62_1233:
            ; //	asm	nop				
0070F:      	nop
            ; //_A30BB6F62_1234:;				
            _A30BB6F62_1234:
            ; //	asm clr io[0x09].b14;			
00710:      	clr io[0x09].b14//
            ; //_A30BB6F62_1235:;				
            _A30BB6F62_1235:
            ; //	asm	nop				
00711:      	nop
            ; //_A30BB6F62_1236:;				
            _A30BB6F62_1236:
            ; //	asm	nop				
00712:      	nop
            ; //_A30BB6F62_1237:;				
            _A30BB6F62_1237:
            ; //	asm	nop				
00713:      	nop
            ; //_A30BB6F62_1238:;				
            _A30BB6F62_1238:
            ; //	asm	nop				
00714:      	nop
            ; //_A30BB6F62_1239:;				
            _A30BB6F62_1239:
            ; //	asm	nop				
00715:      	nop
            ; //_A30BB6F62_1240:;				
            _A30BB6F62_1240:
            ; //	asm	nop				
00716:      	nop
            ; //_A30BB6F62_1241:;				
            _A30BB6F62_1241:
            ; //	asm	nop				
00717:      	nop
            ; //_A30BB6F62_1242:;				
            _A30BB6F62_1242:
            ; //	asm	nop				
00718:      	nop
            ; //_A30BB6F62_1243:;				
            _A30BB6F62_1243:
            ; //	asm	nop				
00719:      	nop
            ; //_A30BB6F62_1244:;				
            _A30BB6F62_1244:
            ; //	asm	nop				
0071A:      	nop
            ; //_A30BB6F62_1245:;				
            _A30BB6F62_1245:
            ; //	asm	nop				
0071B:      	nop
            ; //_A30BB6F62_1246:;				
            _A30BB6F62_1246:
            ; //	asm	nop				
0071C:      	nop
            ; //_A30BB6F62_1247:;				
            _A30BB6F62_1247:
            ; //	asm set io[0x09].b14;			
0071D:      	set io[0x09].b14//
            ; //_A30BB6F62_1248:;				
            _A30BB6F62_1248:
            ; //	asm	nop				
0071E:      	nop
            ; //_A30BB6F62_1249:;				
            _A30BB6F62_1249:
            ; //	asm	nop				
0071F:      	nop
            ; //_A30BB6F62_1250:;				
            _A30BB6F62_1250:
            ; //	asm	nop				
00720:      	nop
            ; //_A30BB6F62_1251:;				
            _A30BB6F62_1251:
            ; //	asm clr io[0x09].b14;			
00721:      	clr io[0x09].b14//
            ; //_A30BB6F62_1252:;				
            _A30BB6F62_1252:
            ; //	asm	nop				
00722:      	nop
            ; //_A30BB6F62_1253:;				
            _A30BB6F62_1253:
            ; //	asm	nop				
00723:      	nop
            ; //_A30BB6F62_1254:;				
            _A30BB6F62_1254:
            ; //	asm	nop				
00724:      	nop
            ; //_A30BB6F62_1255:;				
            _A30BB6F62_1255:
            ; //	asm	nop				
00725:      	nop
            ; //_A30BB6F62_1256:;				
            _A30BB6F62_1256:
            ; //	asm	nop				
00726:      	nop
            ; //_A30BB6F62_1257:;				
            _A30BB6F62_1257:
            ; //	asm	nop				
00727:      	nop
            ; //_A30BB6F62_1258:;				
            _A30BB6F62_1258:
            ; //	asm	nop				
00728:      	nop
            ; //_A30BB6F62_1259:;				
            _A30BB6F62_1259:
            ; //	asm	nop				
00729:      	nop
            ; //_A30BB6F62_1260:;				
            _A30BB6F62_1260:
            ; //	asm	nop				
0072A:      	nop
            ; //_A30BB6F62_1261:;				
            _A30BB6F62_1261:
            ; //	asm	nop				
0072B:      	nop
            ; //_A30BB6F62_1262:;				
            _A30BB6F62_1262:
            ; //	asm	nop				
0072C:      	nop
            ; //_A30BB6F62_1263:;				
            _A30BB6F62_1263:
            ; //	asm	nop				
0072D:      	nop
            ; //_A30BB6F62_1264:;				
            _A30BB6F62_1264:
            ; //	asm set io[0x09].b14;			
0072E:      	set io[0x09].b14//
            ; //_A30BB6F62_1265:;				
            _A30BB6F62_1265:
            ; //	asm	nop				
0072F:      	nop
            ; //_A30BB6F62_1266:;				
            _A30BB6F62_1266:
            ; //	asm	nop				
00730:      	nop
            ; //_A30BB6F62_1267:;				
            _A30BB6F62_1267:
            ; //	asm	nop				
00731:      	nop
            ; //_A30BB6F62_1268:;				
            _A30BB6F62_1268:
            ; //	asm clr io[0x09].b14;			
00732:      	clr io[0x09].b14//
            ; //_A30BB6F62_1269:;				
            _A30BB6F62_1269:
            ; //	asm	nop				
00733:      	nop
            ; //_A30BB6F62_1270:;				
            _A30BB6F62_1270:
            ; //	asm	nop				
00734:      	nop
            ; //_A30BB6F62_1271:;				
            _A30BB6F62_1271:
            ; //	asm	nop				
00735:      	nop
            ; //_A30BB6F62_1272:;				
            _A30BB6F62_1272:
            ; //	asm	nop				
00736:      	nop
            ; //_A30BB6F62_1273:;				
            _A30BB6F62_1273:
            ; //	asm	nop				
00737:      	nop
            ; //_A30BB6F62_1274:;				
            _A30BB6F62_1274:
            ; //	asm	nop				
00738:      	nop
            ; //_A30BB6F62_1275:;				
            _A30BB6F62_1275:
            ; //	asm	nop				
00739:      	nop
            ; //_A30BB6F62_1276:;				
            _A30BB6F62_1276:
            ; //	asm	nop				
0073A:      	nop
            ; //_A30BB6F62_1277:;				
            _A30BB6F62_1277:
            ; //	asm	nop				
0073B:      	nop
            ; //_A30BB6F62_1278:;				
            _A30BB6F62_1278:
            ; //	asm	nop				
0073C:      	nop
            ; //_A30BB6F62_1279:;				
            _A30BB6F62_1279:
            ; //	asm	nop				
0073D:      	nop
            ; //_A30BB6F62_1280:;				
            _A30BB6F62_1280:
            ; //	asm	nop				
0073E:      	nop
            ; //_A30BB6F62_1281:;				
            _A30BB6F62_1281:
            ; //	asm set io[0x09].b14;			
0073F:      	set io[0x09].b14//
            ; //_A30BB6F62_1282:;				
            _A30BB6F62_1282:
            ; //	asm	nop				
00740:      	nop
            ; //_A30BB6F62_1283:;				
            _A30BB6F62_1283:
            ; //	asm	nop				
00741:      	nop
            ; //_A30BB6F62_1284:;				
            _A30BB6F62_1284:
            ; //	asm	nop				
00742:      	nop
            ; //_A30BB6F62_1285:;				
            _A30BB6F62_1285:
            ; //	asm clr io[0x09].b14;			
00743:      	clr io[0x09].b14//
            ; //_A30BB6F62_1286:;				
            _A30BB6F62_1286:
            ; //	asm	nop				
00744:      	nop
            ; //_A30BB6F62_1287:;				
            _A30BB6F62_1287:
            ; //	asm	nop				
00745:      	nop
            ; //_A30BB6F62_1288:;				
            _A30BB6F62_1288:
            ; //	asm	nop				
00746:      	nop
            ; //_A30BB6F62_1289:;				
            _A30BB6F62_1289:
            ; //	asm	nop				
00747:      	nop
            ; //_A30BB6F62_1290:;				
            _A30BB6F62_1290:
            ; //	asm	nop				
00748:      	nop
            ; //_A30BB6F62_1291:;				
            _A30BB6F62_1291:
            ; //	asm	nop				
00749:      	nop
            ; //_A30BB6F62_1292:;				
            _A30BB6F62_1292:
            ; //	asm	nop				
0074A:      	nop
            ; //_A30BB6F62_1293:;				
            _A30BB6F62_1293:
            ; //	asm	nop				
0074B:      	nop
            ; //_A30BB6F62_1294:;				
            _A30BB6F62_1294:
            ; //	asm	nop				
0074C:      	nop
            ; //_A30BB6F62_1295:;				
            _A30BB6F62_1295:
            ; //	asm	nop				
0074D:      	nop
            ; //_A30BB6F62_1296:;				
            _A30BB6F62_1296:
            ; //	asm	nop				
0074E:      	nop
            ; //_A30BB6F62_1297:;				
            _A30BB6F62_1297:
            ; //	asm	nop				
0074F:      	nop
            ; //_A30BB6F62_1298:;				
            _A30BB6F62_1298:
            ; //	asm set io[0x09].b14;			
00750:      	set io[0x09].b14//
            ; //_A30BB6F62_1299:;				
            _A30BB6F62_1299:
            ; //	asm	nop				
00751:      	nop
            ; //_A30BB6F62_1300:;				
            _A30BB6F62_1300:
            ; //	asm	nop				
00752:      	nop
            ; //_A30BB6F62_1301:;				
            _A30BB6F62_1301:
            ; //	asm	nop				
00753:      	nop
            ; //_A30BB6F62_1302:;				
            _A30BB6F62_1302:
            ; //	asm clr io[0x09].b14;			
00754:      	clr io[0x09].b14//
            ; //_A30BB6F62_1303:;				
            _A30BB6F62_1303:
            ; //	asm	nop				
00755:      	nop
            ; //_A30BB6F62_1304:;				
            _A30BB6F62_1304:
            ; //	asm	nop				
00756:      	nop
            ; //_A30BB6F62_1305:;				
            _A30BB6F62_1305:
            ; //	asm	nop				
00757:      	nop
            ; //_A30BB6F62_1306:;				
            _A30BB6F62_1306:
            ; //	asm	nop				
00758:      	nop
            ; //_A30BB6F62_1307:;				
            _A30BB6F62_1307:
            ; //	asm	nop				
00759:      	nop
            ; //_A30BB6F62_1308:;				
            _A30BB6F62_1308:
            ; //	asm	nop				
0075A:      	nop
            ; //_A30BB6F62_1309:;				
            _A30BB6F62_1309:
            ; //	asm	nop				
0075B:      	nop
            ; //_A30BB6F62_1310:;				
            _A30BB6F62_1310:
            ; //	asm	nop				
0075C:      	nop
            ; //_A30BB6F62_1311:;				
            _A30BB6F62_1311:
            ; //	asm	nop				
0075D:      	nop
            ; //_A30BB6F62_1312:;				
            _A30BB6F62_1312:
            ; //	asm	nop				
0075E:      	nop
            ; //_A30BB6F62_1313:;				
            _A30BB6F62_1313:
            ; //	asm	nop				
0075F:      	nop
            ; //_A30BB6F62_1314:;				
            _A30BB6F62_1314:
            ; //	asm	nop				
00760:      	nop
            ; //_A30BB6F62_1315:;				
            _A30BB6F62_1315:
            ; //	asm set io[0x09].b14;			
00761:      	set io[0x09].b14//
            ; //_A30BB6F62_1316:;				
            _A30BB6F62_1316:
            ; //	asm	nop				
00762:      	nop
            ; //_A30BB6F62_1317:;				
            _A30BB6F62_1317:
            ; //	asm	nop				
00763:      	nop
            ; //_A30BB6F62_1318:;				
            _A30BB6F62_1318:
            ; //	asm	nop				
00764:      	nop
            ; //_A30BB6F62_1319:;				
            _A30BB6F62_1319:
            ; //	asm clr io[0x09].b14;			
00765:      	clr io[0x09].b14//
            ; //_A30BB6F62_1320:;				
            _A30BB6F62_1320:
            ; //	asm	nop				
00766:      	nop
            ; //_A30BB6F62_1321:;				
            _A30BB6F62_1321:
            ; //	asm	nop				
00767:      	nop
            ; //_A30BB6F62_1322:;				
            _A30BB6F62_1322:
            ; //	asm	nop				
00768:      	nop
            ; //_A30BB6F62_1323:;				
            _A30BB6F62_1323:
            ; //	asm	nop				
00769:      	nop
            ; //_A30BB6F62_1324:;				
            _A30BB6F62_1324:
            ; //	asm	nop				
0076A:      	nop
            ; //_A30BB6F62_1325:;				
            _A30BB6F62_1325:
            ; //	asm	nop				
0076B:      	nop
            ; //_A30BB6F62_1326:;				
            _A30BB6F62_1326:
            ; //	asm	nop				
0076C:      	nop
            ; //_A30BB6F62_1327:;				
            _A30BB6F62_1327:
            ; //	asm	nop				
0076D:      	nop
            ; //_A30BB6F62_1328:;				
            _A30BB6F62_1328:
            ; //	asm	nop				
0076E:      	nop
            ; //_A30BB6F62_1329:;				
            _A30BB6F62_1329:
            ; //	asm	nop				
0076F:      	nop
            ; //_A30BB6F62_1330:;				
            _A30BB6F62_1330:
            ; //	asm	nop				
00770:      	nop
            ; //_A30BB6F62_1331:;				
            _A30BB6F62_1331:
            ; //	asm	nop				
00771:      	nop
            ; //_A30BB6F62_1332:;				
            _A30BB6F62_1332:
            ; //	asm set io[0x09].b14;			
00772:      	set io[0x09].b14//
            ; //_A30BB6F62_1333:;				
            _A30BB6F62_1333:
            ; //	asm	nop				
00773:      	nop
            ; //_A30BB6F62_1334:;				
            _A30BB6F62_1334:
            ; //	asm	nop				
00774:      	nop
            ; //_A30BB6F62_1335:;				
            _A30BB6F62_1335:
            ; //	asm	nop				
00775:      	nop
            ; //_A30BB6F62_1336:;				
            _A30BB6F62_1336:
            ; //	asm clr io[0x09].b14;			
00776:      	clr io[0x09].b14//
            ; //_A30BB6F62_1337:;				
            _A30BB6F62_1337:
            ; //	asm	nop				
00777:      	nop
            ; //_A30BB6F62_1338:;				
            _A30BB6F62_1338:
            ; //	asm	nop				
00778:      	nop
            ; //_A30BB6F62_1339:;				
            _A30BB6F62_1339:
            ; //	asm	nop				
00779:      	nop
            ; //_A30BB6F62_1340:;				
            _A30BB6F62_1340:
            ; //	asm	nop				
0077A:      	nop
            ; //_A30BB6F62_1341:;				
            _A30BB6F62_1341:
            ; //	asm	nop				
0077B:      	nop
            ; //_A30BB6F62_1342:;				
            _A30BB6F62_1342:
            ; //	asm	nop				
0077C:      	nop
            ; //_A30BB6F62_1343:;				
            _A30BB6F62_1343:
            ; //	asm	nop				
0077D:      	nop
            ; //_A30BB6F62_1344:;				
            _A30BB6F62_1344:
            ; //	asm	nop				
0077E:      	nop
            ; //_A30BB6F62_1345:;				
            _A30BB6F62_1345:
            ; //	asm	nop				
0077F:      	nop
            ; //_A30BB6F62_1346:;				
            _A30BB6F62_1346:
            ; //	asm	nop				
00780:      	nop
            ; //_A30BB6F62_1347:;				
            _A30BB6F62_1347:
            ; //	asm	nop				
00781:      	nop
            ; //_A30BB6F62_1348:;				
            _A30BB6F62_1348:
            ; //	asm	nop				
00782:      	nop
            ; //_A30BB6F62_1349:;				
            _A30BB6F62_1349:
            ; //	goto LD63FD439_50;			
00783:      	pch =	LD63FD439_50
00784:      	ljmp	LD63FD439_50
            ; //LD63FD439_55:;					
            LD63FD439_55:
            ; //_A30BB6F62_1350:;				
            _A30BB6F62_1350:
            ; //	asm set io[0x09].b14;			
00785:      	set io[0x09].b14//
            ; //_A30BB6F62_1351:;				
            _A30BB6F62_1351:
            ; //	asm	nop				
00786:      	nop
            ; //_A30BB6F62_1352:;				
            _A30BB6F62_1352:
            ; //	asm	nop				
00787:      	nop
            ; //_A30BB6F62_1353:;				
            _A30BB6F62_1353:
            ; //	asm	nop				
00788:      	nop
            ; //_A30BB6F62_1354:;				
            _A30BB6F62_1354:
            ; //	asm	nop				
00789:      	nop
            ; //_A30BB6F62_1355:;				
            _A30BB6F62_1355:
            ; //	asm	nop				
0078A:      	nop
            ; //_A30BB6F62_1356:;				
            _A30BB6F62_1356:
            ; //	asm	nop				
0078B:      	nop
            ; //_A30BB6F62_1357:;				
            _A30BB6F62_1357:
            ; //	asm	nop				
0078C:      	nop
            ; //_A30BB6F62_1358:;				
            _A30BB6F62_1358:
            ; //	asm	nop				
0078D:      	nop
            ; //_A30BB6F62_1359:;				
            _A30BB6F62_1359:
            ; //	asm	nop				
0078E:      	nop
            ; //_A30BB6F62_1360:;				
            _A30BB6F62_1360:
            ; //	asm	nop				
0078F:      	nop
            ; //_A30BB6F62_1361:;				
            _A30BB6F62_1361:
            ; //	asm	nop				
00790:      	nop
            ; //_A30BB6F62_1362:;				
            _A30BB6F62_1362:
            ; //	asm	nop				
00791:      	nop
            ; //_A30BB6F62_1363:;				
            _A30BB6F62_1363:
            ; //	asm clr io[0x09].b14;			
00792:      	clr io[0x09].b14//
            ; //_A30BB6F62_1364:;				
            _A30BB6F62_1364:
            ; //	asm	nop				
00793:      	nop
            ; //_A30BB6F62_1365:;				
            _A30BB6F62_1365:
            ; //	asm	nop				
00794:      	nop
            ; //_A30BB6F62_1366:;				
            _A30BB6F62_1366:
            ; //	asm	nop				
00795:      	nop
            ; //_A30BB6F62_1367:;				
            _A30BB6F62_1367:
            ; //	asm set io[0x09].b14;			
00796:      	set io[0x09].b14//
            ; //_A30BB6F62_1368:;				
            _A30BB6F62_1368:
            ; //	asm	nop				
00797:      	nop
            ; //_A30BB6F62_1369:;				
            _A30BB6F62_1369:
            ; //	asm	nop				
00798:      	nop
            ; //_A30BB6F62_1370:;				
            _A30BB6F62_1370:
            ; //	asm	nop				
00799:      	nop
            ; //_A30BB6F62_1371:;				
            _A30BB6F62_1371:
            ; //	asm	nop				
0079A:      	nop
            ; //_A30BB6F62_1372:;				
            _A30BB6F62_1372:
            ; //	asm	nop				
0079B:      	nop
            ; //_A30BB6F62_1373:;				
            _A30BB6F62_1373:
            ; //	asm	nop				
0079C:      	nop
            ; //_A30BB6F62_1374:;				
            _A30BB6F62_1374:
            ; //	asm	nop				
0079D:      	nop
            ; //_A30BB6F62_1375:;				
            _A30BB6F62_1375:
            ; //	asm	nop				
0079E:      	nop
            ; //_A30BB6F62_1376:;				
            _A30BB6F62_1376:
            ; //	asm	nop				
0079F:      	nop
            ; //_A30BB6F62_1377:;				
            _A30BB6F62_1377:
            ; //	asm	nop				
007A0:      	nop
            ; //_A30BB6F62_1378:;				
            _A30BB6F62_1378:
            ; //	asm	nop				
007A1:      	nop
            ; //_A30BB6F62_1379:;				
            _A30BB6F62_1379:
            ; //	asm	nop				
007A2:      	nop
            ; //_A30BB6F62_1380:;				
            _A30BB6F62_1380:
            ; //	asm clr io[0x09].b14;			
007A3:      	clr io[0x09].b14//
            ; //_A30BB6F62_1381:;				
            _A30BB6F62_1381:
            ; //	asm	nop				
007A4:      	nop
            ; //_A30BB6F62_1382:;				
            _A30BB6F62_1382:
            ; //	asm	nop				
007A5:      	nop
            ; //_A30BB6F62_1383:;				
            _A30BB6F62_1383:
            ; //	asm	nop				
007A6:      	nop
            ; //_A30BB6F62_1384:;				
            _A30BB6F62_1384:
            ; //	asm set io[0x09].b14;			
007A7:      	set io[0x09].b14//
            ; //_A30BB6F62_1385:;				
            _A30BB6F62_1385:
            ; //	asm	nop				
007A8:      	nop
            ; //_A30BB6F62_1386:;				
            _A30BB6F62_1386:
            ; //	asm	nop				
007A9:      	nop
            ; //_A30BB6F62_1387:;				
            _A30BB6F62_1387:
            ; //	asm	nop				
007AA:      	nop
            ; //_A30BB6F62_1388:;				
            _A30BB6F62_1388:
            ; //	asm	nop				
007AB:      	nop
            ; //_A30BB6F62_1389:;				
            _A30BB6F62_1389:
            ; //	asm	nop				
007AC:      	nop
            ; //_A30BB6F62_1390:;				
            _A30BB6F62_1390:
            ; //	asm	nop				
007AD:      	nop
            ; //_A30BB6F62_1391:;				
            _A30BB6F62_1391:
            ; //	asm	nop				
007AE:      	nop
            ; //_A30BB6F62_1392:;				
            _A30BB6F62_1392:
            ; //	asm	nop				
007AF:      	nop
            ; //_A30BB6F62_1393:;				
            _A30BB6F62_1393:
            ; //	asm	nop				
007B0:      	nop
            ; //_A30BB6F62_1394:;				
            _A30BB6F62_1394:
            ; //	asm	nop				
007B1:      	nop
            ; //_A30BB6F62_1395:;				
            _A30BB6F62_1395:
            ; //	asm	nop				
007B2:      	nop
            ; //_A30BB6F62_1396:;				
            _A30BB6F62_1396:
            ; //	asm	nop				
007B3:      	nop
            ; //_A30BB6F62_1397:;				
            _A30BB6F62_1397:
            ; //	asm clr io[0x09].b14;			
007B4:      	clr io[0x09].b14//
            ; //_A30BB6F62_1398:;				
            _A30BB6F62_1398:
            ; //	asm	nop				
007B5:      	nop
            ; //_A30BB6F62_1399:;				
            _A30BB6F62_1399:
            ; //	asm	nop				
007B6:      	nop
            ; //_A30BB6F62_1400:;				
            _A30BB6F62_1400:
            ; //	asm	nop				
007B7:      	nop
            ; //_A30BB6F62_1401:;				
            _A30BB6F62_1401:
            ; //	asm set io[0x09].b14;			
007B8:      	set io[0x09].b14//
            ; //_A30BB6F62_1402:;				
            _A30BB6F62_1402:
            ; //	asm	nop				
007B9:      	nop
            ; //_A30BB6F62_1403:;				
            _A30BB6F62_1403:
            ; //	asm	nop				
007BA:      	nop
            ; //_A30BB6F62_1404:;				
            _A30BB6F62_1404:
            ; //	asm	nop				
007BB:      	nop
            ; //_A30BB6F62_1405:;				
            _A30BB6F62_1405:
            ; //	asm	nop				
007BC:      	nop
            ; //_A30BB6F62_1406:;				
            _A30BB6F62_1406:
            ; //	asm	nop				
007BD:      	nop
            ; //_A30BB6F62_1407:;				
            _A30BB6F62_1407:
            ; //	asm	nop				
007BE:      	nop
            ; //_A30BB6F62_1408:;				
            _A30BB6F62_1408:
            ; //	asm	nop				
007BF:      	nop
            ; //_A30BB6F62_1409:;				
            _A30BB6F62_1409:
            ; //	asm	nop				
007C0:      	nop
            ; //_A30BB6F62_1410:;				
            _A30BB6F62_1410:
            ; //	asm	nop				
007C1:      	nop
            ; //_A30BB6F62_1411:;				
            _A30BB6F62_1411:
            ; //	asm	nop				
007C2:      	nop
            ; //_A30BB6F62_1412:;				
            _A30BB6F62_1412:
            ; //	asm	nop				
007C3:      	nop
            ; //_A30BB6F62_1413:;				
            _A30BB6F62_1413:
            ; //	asm	nop				
007C4:      	nop
            ; //_A30BB6F62_1414:;				
            _A30BB6F62_1414:
            ; //	asm clr io[0x09].b14;			
007C5:      	clr io[0x09].b14//
            ; //_A30BB6F62_1415:;				
            _A30BB6F62_1415:
            ; //	asm	nop				
007C6:      	nop
            ; //_A30BB6F62_1416:;				
            _A30BB6F62_1416:
            ; //	asm	nop				
007C7:      	nop
            ; //_A30BB6F62_1417:;				
            _A30BB6F62_1417:
            ; //	asm	nop				
007C8:      	nop
            ; //_A30BB6F62_1418:;				
            _A30BB6F62_1418:
            ; //	asm set io[0x09].b14;			
007C9:      	set io[0x09].b14//
            ; //_A30BB6F62_1419:;				
            _A30BB6F62_1419:
            ; //	asm	nop				
007CA:      	nop
            ; //_A30BB6F62_1420:;				
            _A30BB6F62_1420:
            ; //	asm	nop				
007CB:      	nop
            ; //_A30BB6F62_1421:;				
            _A30BB6F62_1421:
            ; //	asm	nop				
007CC:      	nop
            ; //_A30BB6F62_1422:;				
            _A30BB6F62_1422:
            ; //	asm	nop				
007CD:      	nop
            ; //_A30BB6F62_1423:;				
            _A30BB6F62_1423:
            ; //	asm	nop				
007CE:      	nop
            ; //_A30BB6F62_1424:;				
            _A30BB6F62_1424:
            ; //	asm	nop				
007CF:      	nop
            ; //_A30BB6F62_1425:;				
            _A30BB6F62_1425:
            ; //	asm	nop				
007D0:      	nop
            ; //_A30BB6F62_1426:;				
            _A30BB6F62_1426:
            ; //	asm	nop				
007D1:      	nop
            ; //_A30BB6F62_1427:;				
            _A30BB6F62_1427:
            ; //	asm	nop				
007D2:      	nop
            ; //_A30BB6F62_1428:;				
            _A30BB6F62_1428:
            ; //	asm	nop				
007D3:      	nop
            ; //_A30BB6F62_1429:;				
            _A30BB6F62_1429:
            ; //	asm	nop				
007D4:      	nop
            ; //_A30BB6F62_1430:;				
            _A30BB6F62_1430:
            ; //	asm	nop				
007D5:      	nop
            ; //_A30BB6F62_1431:;				
            _A30BB6F62_1431:
            ; //	asm clr io[0x09].b14;			
007D6:      	clr io[0x09].b14//
            ; //_A30BB6F62_1432:;				
            _A30BB6F62_1432:
            ; //	asm	nop				
007D7:      	nop
            ; //_A30BB6F62_1433:;				
            _A30BB6F62_1433:
            ; //	asm	nop				
007D8:      	nop
            ; //_A30BB6F62_1434:;				
            _A30BB6F62_1434:
            ; //	asm	nop				
007D9:      	nop
            ; //_A30BB6F62_1435:;				
            _A30BB6F62_1435:
            ; //	asm set io[0x09].b14;			
007DA:      	set io[0x09].b14//
            ; //_A30BB6F62_1436:;				
            _A30BB6F62_1436:
            ; //	asm	nop				
007DB:      	nop
            ; //_A30BB6F62_1437:;				
            _A30BB6F62_1437:
            ; //	asm	nop				
007DC:      	nop
            ; //_A30BB6F62_1438:;				
            _A30BB6F62_1438:
            ; //	asm	nop				
007DD:      	nop
            ; //_A30BB6F62_1439:;				
            _A30BB6F62_1439:
            ; //	asm	nop				
007DE:      	nop
            ; //_A30BB6F62_1440:;				
            _A30BB6F62_1440:
            ; //	asm	nop				
007DF:      	nop
            ; //_A30BB6F62_1441:;				
            _A30BB6F62_1441:
            ; //	asm	nop				
007E0:      	nop
            ; //_A30BB6F62_1442:;				
            _A30BB6F62_1442:
            ; //	asm	nop				
007E1:      	nop
            ; //_A30BB6F62_1443:;				
            _A30BB6F62_1443:
            ; //	asm	nop				
007E2:      	nop
            ; //_A30BB6F62_1444:;				
            _A30BB6F62_1444:
            ; //	asm	nop				
007E3:      	nop
            ; //_A30BB6F62_1445:;				
            _A30BB6F62_1445:
            ; //	asm	nop				
007E4:      	nop
            ; //_A30BB6F62_1446:;				
            _A30BB6F62_1446:
            ; //	asm	nop				
007E5:      	nop
            ; //_A30BB6F62_1447:;				
            _A30BB6F62_1447:
            ; //	asm	nop				
007E6:      	nop
            ; //_A30BB6F62_1448:;				
            _A30BB6F62_1448:
            ; //	asm clr io[0x09].b14;			
007E7:      	clr io[0x09].b14//
            ; //_A30BB6F62_1449:;				
            _A30BB6F62_1449:
            ; //	asm	nop				
007E8:      	nop
            ; //_A30BB6F62_1450:;				
            _A30BB6F62_1450:
            ; //	asm	nop				
007E9:      	nop
            ; //_A30BB6F62_1451:;				
            _A30BB6F62_1451:
            ; //	asm	nop				
007EA:      	nop
            ; //_A30BB6F62_1452:;				
            _A30BB6F62_1452:
            ; //	asm set io[0x09].b14;			
007EB:      	set io[0x09].b14//
            ; //_A30BB6F62_1453:;				
            _A30BB6F62_1453:
            ; //	asm	nop				
007EC:      	nop
            ; //_A30BB6F62_1454:;				
            _A30BB6F62_1454:
            ; //	asm	nop				
007ED:      	nop
            ; //_A30BB6F62_1455:;				
            _A30BB6F62_1455:
            ; //	asm	nop				
007EE:      	nop
            ; //_A30BB6F62_1456:;				
            _A30BB6F62_1456:
            ; //	asm	nop				
007EF:      	nop
            ; //_A30BB6F62_1457:;				
            _A30BB6F62_1457:
            ; //	asm	nop				
007F0:      	nop
            ; //_A30BB6F62_1458:;				
            _A30BB6F62_1458:
            ; //	asm	nop				
007F1:      	nop
            ; //_A30BB6F62_1459:;				
            _A30BB6F62_1459:
            ; //	asm	nop				
007F2:      	nop
            ; //_A30BB6F62_1460:;				
            _A30BB6F62_1460:
            ; //	asm	nop				
007F3:      	nop
            ; //_A30BB6F62_1461:;				
            _A30BB6F62_1461:
            ; //	asm	nop				
007F4:      	nop
            ; //_A30BB6F62_1462:;				
            _A30BB6F62_1462:
            ; //	asm	nop				
007F5:      	nop
            ; //_A30BB6F62_1463:;				
            _A30BB6F62_1463:
            ; //	asm	nop				
007F6:      	nop
            ; //_A30BB6F62_1464:;				
            _A30BB6F62_1464:
            ; //	asm	nop				
007F7:      	nop
            ; //_A30BB6F62_1465:;				
            _A30BB6F62_1465:
            ; //	asm clr io[0x09].b14;			
007F8:      	clr io[0x09].b14//
            ; //_A30BB6F62_1466:;				
            _A30BB6F62_1466:
            ; //	asm	nop				
007F9:      	nop
            ; //_A30BB6F62_1467:;				
            _A30BB6F62_1467:
            ; //	asm	nop				
007FA:      	nop
            ; //_A30BB6F62_1468:;				
            _A30BB6F62_1468:
            ; //	asm	nop				
007FB:      	nop
            ; //_A30BB6F62_1469:;				
            _A30BB6F62_1469:
            ; //	asm set io[0x09].b14;			
007FC:      	set io[0x09].b14//
            ; //_A30BB6F62_1470:;				
            _A30BB6F62_1470:
            ; //	asm	nop				
007FD:      	nop
            ; //_A30BB6F62_1471:;				
            _A30BB6F62_1471:
            ; //	asm	nop				
007FE:      	nop
            ; //_A30BB6F62_1472:;				
            _A30BB6F62_1472:
            ; //	asm	nop				
007FF:      	nop
            ; //_A30BB6F62_1473:;				
            _A30BB6F62_1473:
            ; //	asm	nop				
00800:      	nop
            ; //_A30BB6F62_1474:;				
            _A30BB6F62_1474:
            ; //	asm	nop				
00801:      	nop
            ; //_A30BB6F62_1475:;				
            _A30BB6F62_1475:
            ; //	asm	nop				
00802:      	nop
            ; //_A30BB6F62_1476:;				
            _A30BB6F62_1476:
            ; //	asm	nop				
00803:      	nop
            ; //_A30BB6F62_1477:;				
            _A30BB6F62_1477:
            ; //	asm	nop				
00804:      	nop
            ; //_A30BB6F62_1478:;				
            _A30BB6F62_1478:
            ; //	asm	nop				
00805:      	nop
            ; //_A30BB6F62_1479:;				
            _A30BB6F62_1479:
            ; //	asm	nop				
00806:      	nop
            ; //_A30BB6F62_1480:;				
            _A30BB6F62_1480:
            ; //	asm	nop				
00807:      	nop
            ; //_A30BB6F62_1481:;				
            _A30BB6F62_1481:
            ; //	asm	nop				
00808:      	nop
            ; //_A30BB6F62_1482:;				
            _A30BB6F62_1482:
            ; //	asm clr io[0x09].b14;			
00809:      	clr io[0x09].b14//
            ; //_A30BB6F62_1483:;				
            _A30BB6F62_1483:
            ; //	asm	nop				
0080A:      	nop
            ; //_A30BB6F62_1484:;				
            _A30BB6F62_1484:
            ; //	asm	nop				
0080B:      	nop
            ; //_A30BB6F62_1485:;				
            _A30BB6F62_1485:
            ; //	asm	nop				
0080C:      	nop
            ; //_A30BB6F62_1486:;				
            _A30BB6F62_1486:
            ; //	asm set io[0x09].b14;			
0080D:      	set io[0x09].b14//
            ; //_A30BB6F62_1487:;				
            _A30BB6F62_1487:
            ; //	asm	nop				
0080E:      	nop
            ; //_A30BB6F62_1488:;				
            _A30BB6F62_1488:
            ; //	asm	nop				
0080F:      	nop
            ; //_A30BB6F62_1489:;				
            _A30BB6F62_1489:
            ; //	asm	nop				
00810:      	nop
            ; //_A30BB6F62_1490:;				
            _A30BB6F62_1490:
            ; //	asm clr io[0x09].b14;			
00811:      	clr io[0x09].b14//
            ; //_A30BB6F62_1491:;				
            _A30BB6F62_1491:
            ; //	asm	nop				
00812:      	nop
            ; //_A30BB6F62_1492:;				
            _A30BB6F62_1492:
            ; //	asm	nop				
00813:      	nop
            ; //_A30BB6F62_1493:;				
            _A30BB6F62_1493:
            ; //	asm	nop				
00814:      	nop
            ; //_A30BB6F62_1494:;				
            _A30BB6F62_1494:
            ; //	asm	nop				
00815:      	nop
            ; //_A30BB6F62_1495:;				
            _A30BB6F62_1495:
            ; //	asm	nop				
00816:      	nop
            ; //_A30BB6F62_1496:;				
            _A30BB6F62_1496:
            ; //	asm	nop				
00817:      	nop
            ; //_A30BB6F62_1497:;				
            _A30BB6F62_1497:
            ; //	asm	nop				
00818:      	nop
            ; //_A30BB6F62_1498:;				
            _A30BB6F62_1498:
            ; //	asm	nop				
00819:      	nop
            ; //_A30BB6F62_1499:;				
            _A30BB6F62_1499:
            ; //	asm	nop				
0081A:      	nop
            ; //_A30BB6F62_1500:;				
            _A30BB6F62_1500:
            ; //	asm	nop				
0081B:      	nop
            ; //_A30BB6F62_1501:;				
            _A30BB6F62_1501:
            ; //	asm	nop				
0081C:      	nop
            ; //_A30BB6F62_1502:;				
            _A30BB6F62_1502:
            ; //	asm	nop				
0081D:      	nop
            ; //_A30BB6F62_1503:;				
            _A30BB6F62_1503:
            ; //	asm set io[0x09].b14;			
0081E:      	set io[0x09].b14//
            ; //_A30BB6F62_1504:;				
            _A30BB6F62_1504:
            ; //	asm	nop				
0081F:      	nop
            ; //_A30BB6F62_1505:;				
            _A30BB6F62_1505:
            ; //	asm	nop				
00820:      	nop
            ; //_A30BB6F62_1506:;				
            _A30BB6F62_1506:
            ; //	asm	nop				
00821:      	nop
            ; //_A30BB6F62_1507:;				
            _A30BB6F62_1507:
            ; //	asm clr io[0x09].b14;			
00822:      	clr io[0x09].b14//
            ; //_A30BB6F62_1508:;				
            _A30BB6F62_1508:
            ; //	asm	nop				
00823:      	nop
            ; //_A30BB6F62_1509:;				
            _A30BB6F62_1509:
            ; //	asm	nop				
00824:      	nop
            ; //_A30BB6F62_1510:;				
            _A30BB6F62_1510:
            ; //	asm	nop				
00825:      	nop
            ; //_A30BB6F62_1511:;				
            _A30BB6F62_1511:
            ; //	asm	nop				
00826:      	nop
            ; //_A30BB6F62_1512:;				
            _A30BB6F62_1512:
            ; //	asm	nop				
00827:      	nop
            ; //_A30BB6F62_1513:;				
            _A30BB6F62_1513:
            ; //	asm	nop				
00828:      	nop
            ; //_A30BB6F62_1514:;				
            _A30BB6F62_1514:
            ; //	asm	nop				
00829:      	nop
            ; //_A30BB6F62_1515:;				
            _A30BB6F62_1515:
            ; //	asm	nop				
0082A:      	nop
            ; //_A30BB6F62_1516:;				
            _A30BB6F62_1516:
            ; //	asm	nop				
0082B:      	nop
            ; //_A30BB6F62_1517:;				
            _A30BB6F62_1517:
            ; //	asm	nop				
0082C:      	nop
            ; //_A30BB6F62_1518:;				
            _A30BB6F62_1518:
            ; //	asm	nop				
0082D:      	nop
            ; //_A30BB6F62_1519:;				
            _A30BB6F62_1519:
            ; //	asm	nop				
0082E:      	nop
            ; //_A30BB6F62_1520:;				
            _A30BB6F62_1520:
            ; //	asm set io[0x09].b14;			
0082F:      	set io[0x09].b14//
            ; //_A30BB6F62_1521:;				
            _A30BB6F62_1521:
            ; //	asm	nop				
00830:      	nop
            ; //_A30BB6F62_1522:;				
            _A30BB6F62_1522:
            ; //	asm	nop				
00831:      	nop
            ; //_A30BB6F62_1523:;				
            _A30BB6F62_1523:
            ; //	asm	nop				
00832:      	nop
            ; //_A30BB6F62_1524:;				
            _A30BB6F62_1524:
            ; //	asm clr io[0x09].b14;			
00833:      	clr io[0x09].b14//
            ; //_A30BB6F62_1525:;				
            _A30BB6F62_1525:
            ; //	asm	nop				
00834:      	nop
            ; //_A30BB6F62_1526:;				
            _A30BB6F62_1526:
            ; //	asm	nop				
00835:      	nop
            ; //_A30BB6F62_1527:;				
            _A30BB6F62_1527:
            ; //	asm	nop				
00836:      	nop
            ; //_A30BB6F62_1528:;				
            _A30BB6F62_1528:
            ; //	asm	nop				
00837:      	nop
            ; //_A30BB6F62_1529:;				
            _A30BB6F62_1529:
            ; //	asm	nop				
00838:      	nop
            ; //_A30BB6F62_1530:;				
            _A30BB6F62_1530:
            ; //	asm	nop				
00839:      	nop
            ; //_A30BB6F62_1531:;				
            _A30BB6F62_1531:
            ; //	asm	nop				
0083A:      	nop
            ; //_A30BB6F62_1532:;				
            _A30BB6F62_1532:
            ; //	asm	nop				
0083B:      	nop
            ; //_A30BB6F62_1533:;				
            _A30BB6F62_1533:
            ; //	asm	nop				
0083C:      	nop
            ; //_A30BB6F62_1534:;				
            _A30BB6F62_1534:
            ; //	asm	nop				
0083D:      	nop
            ; //_A30BB6F62_1535:;				
            _A30BB6F62_1535:
            ; //	asm	nop				
0083E:      	nop
            ; //_A30BB6F62_1536:;				
            _A30BB6F62_1536:
            ; //	asm	nop				
0083F:      	nop
            ; //_A30BB6F62_1537:;				
            _A30BB6F62_1537:
            ; //	asm set io[0x09].b14;			
00840:      	set io[0x09].b14//
            ; //_A30BB6F62_1538:;				
            _A30BB6F62_1538:
            ; //	asm	nop				
00841:      	nop
            ; //_A30BB6F62_1539:;				
            _A30BB6F62_1539:
            ; //	asm	nop				
00842:      	nop
            ; //_A30BB6F62_1540:;				
            _A30BB6F62_1540:
            ; //	asm	nop				
00843:      	nop
            ; //_A30BB6F62_1541:;				
            _A30BB6F62_1541:
            ; //	asm clr io[0x09].b14;			
00844:      	clr io[0x09].b14//
            ; //_A30BB6F62_1542:;				
            _A30BB6F62_1542:
            ; //	asm	nop				
00845:      	nop
            ; //_A30BB6F62_1543:;				
            _A30BB6F62_1543:
            ; //	asm	nop				
00846:      	nop
            ; //_A30BB6F62_1544:;				
            _A30BB6F62_1544:
            ; //	asm	nop				
00847:      	nop
            ; //_A30BB6F62_1545:;				
            _A30BB6F62_1545:
            ; //	asm	nop				
00848:      	nop
            ; //_A30BB6F62_1546:;				
            _A30BB6F62_1546:
            ; //	asm	nop				
00849:      	nop
            ; //_A30BB6F62_1547:;				
            _A30BB6F62_1547:
            ; //	asm	nop				
0084A:      	nop
            ; //_A30BB6F62_1548:;				
            _A30BB6F62_1548:
            ; //	asm	nop				
0084B:      	nop
            ; //_A30BB6F62_1549:;				
            _A30BB6F62_1549:
            ; //	asm	nop				
0084C:      	nop
            ; //_A30BB6F62_1550:;				
            _A30BB6F62_1550:
            ; //	asm	nop				
0084D:      	nop
            ; //_A30BB6F62_1551:;				
            _A30BB6F62_1551:
            ; //	asm	nop				
0084E:      	nop
            ; //_A30BB6F62_1552:;				
            _A30BB6F62_1552:
            ; //	asm	nop				
0084F:      	nop
            ; //_A30BB6F62_1553:;				
            _A30BB6F62_1553:
            ; //	asm	nop				
00850:      	nop
            ; //_A30BB6F62_1554:;				
            _A30BB6F62_1554:
            ; //	asm set io[0x09].b14;			
00851:      	set io[0x09].b14//
            ; //_A30BB6F62_1555:;				
            _A30BB6F62_1555:
            ; //	asm	nop				
00852:      	nop
            ; //_A30BB6F62_1556:;				
            _A30BB6F62_1556:
            ; //	asm	nop				
00853:      	nop
            ; //_A30BB6F62_1557:;				
            _A30BB6F62_1557:
            ; //	asm	nop				
00854:      	nop
            ; //_A30BB6F62_1558:;				
            _A30BB6F62_1558:
            ; //	asm clr io[0x09].b14;			
00855:      	clr io[0x09].b14//
            ; //_A30BB6F62_1559:;				
            _A30BB6F62_1559:
            ; //	asm	nop				
00856:      	nop
            ; //_A30BB6F62_1560:;				
            _A30BB6F62_1560:
            ; //	asm	nop				
00857:      	nop
            ; //_A30BB6F62_1561:;				
            _A30BB6F62_1561:
            ; //	asm	nop				
00858:      	nop
            ; //_A30BB6F62_1562:;				
            _A30BB6F62_1562:
            ; //	asm	nop				
00859:      	nop
            ; //_A30BB6F62_1563:;				
            _A30BB6F62_1563:
            ; //	asm	nop				
0085A:      	nop
            ; //_A30BB6F62_1564:;				
            _A30BB6F62_1564:
            ; //	asm	nop				
0085B:      	nop
            ; //_A30BB6F62_1565:;				
            _A30BB6F62_1565:
            ; //	asm	nop				
0085C:      	nop
            ; //_A30BB6F62_1566:;				
            _A30BB6F62_1566:
            ; //	asm	nop				
0085D:      	nop
            ; //_A30BB6F62_1567:;				
            _A30BB6F62_1567:
            ; //	asm	nop				
0085E:      	nop
            ; //_A30BB6F62_1568:;				
            _A30BB6F62_1568:
            ; //	asm	nop				
0085F:      	nop
            ; //_A30BB6F62_1569:;				
            _A30BB6F62_1569:
            ; //	asm	nop				
00860:      	nop
            ; //_A30BB6F62_1570:;				
            _A30BB6F62_1570:
            ; //	asm	nop				
00861:      	nop
            ; //_A30BB6F62_1571:;				
            _A30BB6F62_1571:
            ; //	asm set io[0x09].b14;			
00862:      	set io[0x09].b14//
            ; //_A30BB6F62_1572:;				
            _A30BB6F62_1572:
            ; //	asm	nop				
00863:      	nop
            ; //_A30BB6F62_1573:;				
            _A30BB6F62_1573:
            ; //	asm	nop				
00864:      	nop
            ; //_A30BB6F62_1574:;				
            _A30BB6F62_1574:
            ; //	asm	nop				
00865:      	nop
            ; //_A30BB6F62_1575:;				
            _A30BB6F62_1575:
            ; //	asm clr io[0x09].b14;			
00866:      	clr io[0x09].b14//
            ; //_A30BB6F62_1576:;				
            _A30BB6F62_1576:
            ; //	asm	nop				
00867:      	nop
            ; //_A30BB6F62_1577:;				
            _A30BB6F62_1577:
            ; //	asm	nop				
00868:      	nop
            ; //_A30BB6F62_1578:;				
            _A30BB6F62_1578:
            ; //	asm	nop				
00869:      	nop
            ; //_A30BB6F62_1579:;				
            _A30BB6F62_1579:
            ; //	asm	nop				
0086A:      	nop
            ; //_A30BB6F62_1580:;				
            _A30BB6F62_1580:
            ; //	asm	nop				
0086B:      	nop
            ; //_A30BB6F62_1581:;				
            _A30BB6F62_1581:
            ; //	asm	nop				
0086C:      	nop
            ; //_A30BB6F62_1582:;				
            _A30BB6F62_1582:
            ; //	asm	nop				
0086D:      	nop
            ; //_A30BB6F62_1583:;				
            _A30BB6F62_1583:
            ; //	asm	nop				
0086E:      	nop
            ; //_A30BB6F62_1584:;				
            _A30BB6F62_1584:
            ; //	asm	nop				
0086F:      	nop
            ; //_A30BB6F62_1585:;				
            _A30BB6F62_1585:
            ; //	asm	nop				
00870:      	nop
            ; //_A30BB6F62_1586:;				
            _A30BB6F62_1586:
            ; //	asm	nop				
00871:      	nop
            ; //_A30BB6F62_1587:;				
            _A30BB6F62_1587:
            ; //	asm	nop				
00872:      	nop
            ; //_A30BB6F62_1588:;				
            _A30BB6F62_1588:
            ; //	asm set io[0x09].b14;			
00873:      	set io[0x09].b14//
            ; //_A30BB6F62_1589:;				
            _A30BB6F62_1589:
            ; //	asm	nop				
00874:      	nop
            ; //_A30BB6F62_1590:;				
            _A30BB6F62_1590:
            ; //	asm	nop				
00875:      	nop
            ; //_A30BB6F62_1591:;				
            _A30BB6F62_1591:
            ; //	asm	nop				
00876:      	nop
            ; //_A30BB6F62_1592:;				
            _A30BB6F62_1592:
            ; //	asm clr io[0x09].b14;			
00877:      	clr io[0x09].b14//
            ; //_A30BB6F62_1593:;				
            _A30BB6F62_1593:
            ; //	asm	nop				
00878:      	nop
            ; //_A30BB6F62_1594:;				
            _A30BB6F62_1594:
            ; //	asm	nop				
00879:      	nop
            ; //_A30BB6F62_1595:;				
            _A30BB6F62_1595:
            ; //	asm	nop				
0087A:      	nop
            ; //_A30BB6F62_1596:;				
            _A30BB6F62_1596:
            ; //	asm	nop				
0087B:      	nop
            ; //_A30BB6F62_1597:;				
            _A30BB6F62_1597:
            ; //	asm	nop				
0087C:      	nop
            ; //_A30BB6F62_1598:;				
            _A30BB6F62_1598:
            ; //	asm	nop				
0087D:      	nop
            ; //_A30BB6F62_1599:;				
            _A30BB6F62_1599:
            ; //	asm	nop				
0087E:      	nop
            ; //_A30BB6F62_1600:;				
            _A30BB6F62_1600:
            ; //	asm	nop				
0087F:      	nop
            ; //_A30BB6F62_1601:;				
            _A30BB6F62_1601:
            ; //	asm	nop				
00880:      	nop
            ; //_A30BB6F62_1602:;				
            _A30BB6F62_1602:
            ; //	asm	nop				
00881:      	nop
            ; //_A30BB6F62_1603:;				
            _A30BB6F62_1603:
            ; //	asm	nop				
00882:      	nop
            ; //_A30BB6F62_1604:;				
            _A30BB6F62_1604:
            ; //	asm	nop				
00883:      	nop
            ; //_A30BB6F62_1605:;				
            _A30BB6F62_1605:
            ; //	asm set io[0x09].b14;			
00884:      	set io[0x09].b14//
            ; //_A30BB6F62_1606:;				
            _A30BB6F62_1606:
            ; //	asm	nop				
00885:      	nop
            ; //_A30BB6F62_1607:;				
            _A30BB6F62_1607:
            ; //	asm	nop				
00886:      	nop
            ; //_A30BB6F62_1608:;				
            _A30BB6F62_1608:
            ; //	asm	nop				
00887:      	nop
            ; //_A30BB6F62_1609:;				
            _A30BB6F62_1609:
            ; //	asm clr io[0x09].b14;			
00888:      	clr io[0x09].b14//
            ; //_A30BB6F62_1610:;				
            _A30BB6F62_1610:
            ; //	asm	nop				
00889:      	nop
            ; //_A30BB6F62_1611:;				
            _A30BB6F62_1611:
            ; //	asm	nop				
0088A:      	nop
            ; //_A30BB6F62_1612:;				
            _A30BB6F62_1612:
            ; //	asm	nop				
0088B:      	nop
            ; //_A30BB6F62_1613:;				
            _A30BB6F62_1613:
            ; //	asm	nop				
0088C:      	nop
            ; //_A30BB6F62_1614:;				
            _A30BB6F62_1614:
            ; //	asm	nop				
0088D:      	nop
            ; //_A30BB6F62_1615:;				
            _A30BB6F62_1615:
            ; //	asm	nop				
0088E:      	nop
            ; //_A30BB6F62_1616:;				
            _A30BB6F62_1616:
            ; //	asm	nop				
0088F:      	nop
            ; //_A30BB6F62_1617:;				
            _A30BB6F62_1617:
            ; //	asm	nop				
00890:      	nop
            ; //_A30BB6F62_1618:;				
            _A30BB6F62_1618:
            ; //	asm	nop				
00891:      	nop
            ; //_A30BB6F62_1619:;				
            _A30BB6F62_1619:
            ; //	asm	nop				
00892:      	nop
            ; //_A30BB6F62_1620:;				
            _A30BB6F62_1620:
            ; //	asm	nop				
00893:      	nop
            ; //_A30BB6F62_1621:;				
            _A30BB6F62_1621:
            ; //	asm	nop				
00894:      	nop
            ; //_A30BB6F62_1622:;				
            _A30BB6F62_1622:
            ; //	asm set io[0x09].b14;			
00895:      	set io[0x09].b14//
            ; //_A30BB6F62_1623:;				
            _A30BB6F62_1623:
            ; //	asm	nop				
00896:      	nop
            ; //_A30BB6F62_1624:;				
            _A30BB6F62_1624:
            ; //	asm	nop				
00897:      	nop
            ; //_A30BB6F62_1625:;				
            _A30BB6F62_1625:
            ; //	asm	nop				
00898:      	nop
            ; //_A30BB6F62_1626:;				
            _A30BB6F62_1626:
            ; //	asm clr io[0x09].b14;			
00899:      	clr io[0x09].b14//
            ; //_A30BB6F62_1627:;				
            _A30BB6F62_1627:
            ; //	asm	nop				
0089A:      	nop
            ; //_A30BB6F62_1628:;				
            _A30BB6F62_1628:
            ; //	asm	nop				
0089B:      	nop
            ; //_A30BB6F62_1629:;				
            _A30BB6F62_1629:
            ; //	asm	nop				
0089C:      	nop
            ; //_A30BB6F62_1630:;				
            _A30BB6F62_1630:
            ; //	asm	nop				
0089D:      	nop
            ; //_A30BB6F62_1631:;				
            _A30BB6F62_1631:
            ; //	asm	nop				
0089E:      	nop
            ; //_A30BB6F62_1632:;				
            _A30BB6F62_1632:
            ; //	asm	nop				
0089F:      	nop
            ; //_A30BB6F62_1633:;				
            _A30BB6F62_1633:
            ; //	asm	nop				
008A0:      	nop
            ; //_A30BB6F62_1634:;				
            _A30BB6F62_1634:
            ; //	asm	nop				
008A1:      	nop
            ; //_A30BB6F62_1635:;				
            _A30BB6F62_1635:
            ; //	asm	nop				
008A2:      	nop
            ; //_A30BB6F62_1636:;				
            _A30BB6F62_1636:
            ; //	asm	nop				
008A3:      	nop
            ; //_A30BB6F62_1637:;				
            _A30BB6F62_1637:
            ; //	asm	nop				
008A4:      	nop
            ; //_A30BB6F62_1638:;				
            _A30BB6F62_1638:
            ; //	asm	nop				
008A5:      	nop
            ; //_A30BB6F62_1639:;				
            _A30BB6F62_1639:
            ; //	asm set io[0x09].b14;			
008A6:      	set io[0x09].b14//
            ; //_A30BB6F62_1640:;				
            _A30BB6F62_1640:
            ; //	asm	nop				
008A7:      	nop
            ; //_A30BB6F62_1641:;				
            _A30BB6F62_1641:
            ; //	asm	nop				
008A8:      	nop
            ; //_A30BB6F62_1642:;				
            _A30BB6F62_1642:
            ; //	asm	nop				
008A9:      	nop
            ; //_A30BB6F62_1643:;				
            _A30BB6F62_1643:
            ; //	asm clr io[0x09].b14;			
008AA:      	clr io[0x09].b14//
            ; //_A30BB6F62_1644:;				
            _A30BB6F62_1644:
            ; //	asm	nop				
008AB:      	nop
            ; //_A30BB6F62_1645:;				
            _A30BB6F62_1645:
            ; //	asm	nop				
008AC:      	nop
            ; //_A30BB6F62_1646:;				
            _A30BB6F62_1646:
            ; //	asm	nop				
008AD:      	nop
            ; //_A30BB6F62_1647:;				
            _A30BB6F62_1647:
            ; //	asm	nop				
008AE:      	nop
            ; //_A30BB6F62_1648:;				
            _A30BB6F62_1648:
            ; //	asm	nop				
008AF:      	nop
            ; //_A30BB6F62_1649:;				
            _A30BB6F62_1649:
            ; //	asm	nop				
008B0:      	nop
            ; //_A30BB6F62_1650:;				
            _A30BB6F62_1650:
            ; //	asm	nop				
008B1:      	nop
            ; //_A30BB6F62_1651:;				
            _A30BB6F62_1651:
            ; //	asm	nop				
008B2:      	nop
            ; //_A30BB6F62_1652:;				
            _A30BB6F62_1652:
            ; //	asm	nop				
008B3:      	nop
            ; //_A30BB6F62_1653:;				
            _A30BB6F62_1653:
            ; //	asm	nop				
008B4:      	nop
            ; //_A30BB6F62_1654:;				
            _A30BB6F62_1654:
            ; //	asm	nop				
008B5:      	nop
            ; //_A30BB6F62_1655:;				
            _A30BB6F62_1655:
            ; //	asm	nop				
008B6:      	nop
            ; //_A30BB6F62_1656:;				
            _A30BB6F62_1656:
            ; //	asm set io[0x09].b14;			
008B7:      	set io[0x09].b14//
            ; //_A30BB6F62_1657:;				
            _A30BB6F62_1657:
            ; //	asm	nop				
008B8:      	nop
            ; //_A30BB6F62_1658:;				
            _A30BB6F62_1658:
            ; //	asm	nop				
008B9:      	nop
            ; //_A30BB6F62_1659:;				
            _A30BB6F62_1659:
            ; //	asm	nop				
008BA:      	nop
            ; //_A30BB6F62_1660:;				
            _A30BB6F62_1660:
            ; //	asm clr io[0x09].b14;			
008BB:      	clr io[0x09].b14//
            ; //_A30BB6F62_1661:;				
            _A30BB6F62_1661:
            ; //	asm	nop				
008BC:      	nop
            ; //_A30BB6F62_1662:;				
            _A30BB6F62_1662:
            ; //	asm	nop				
008BD:      	nop
            ; //_A30BB6F62_1663:;				
            _A30BB6F62_1663:
            ; //	asm	nop				
008BE:      	nop
            ; //_A30BB6F62_1664:;				
            _A30BB6F62_1664:
            ; //	asm	nop				
008BF:      	nop
            ; //_A30BB6F62_1665:;				
            _A30BB6F62_1665:
            ; //	asm	nop				
008C0:      	nop
            ; //_A30BB6F62_1666:;				
            _A30BB6F62_1666:
            ; //	asm	nop				
008C1:      	nop
            ; //_A30BB6F62_1667:;				
            _A30BB6F62_1667:
            ; //	asm	nop				
008C2:      	nop
            ; //_A30BB6F62_1668:;				
            _A30BB6F62_1668:
            ; //	asm	nop				
008C3:      	nop
            ; //_A30BB6F62_1669:;				
            _A30BB6F62_1669:
            ; //	asm	nop				
008C4:      	nop
            ; //_A30BB6F62_1670:;				
            _A30BB6F62_1670:
            ; //	asm	nop				
008C5:      	nop
            ; //_A30BB6F62_1671:;				
            _A30BB6F62_1671:
            ; //	asm	nop				
008C6:      	nop
            ; //_A30BB6F62_1672:;				
            _A30BB6F62_1672:
            ; //	asm	nop				
008C7:      	nop
            ; //_A30BB6F62_1673:;				
            _A30BB6F62_1673:
            ; //	asm set io[0x09].b14;			
008C8:      	set io[0x09].b14//
            ; //_A30BB6F62_1674:;				
            _A30BB6F62_1674:
            ; //	asm	nop				
008C9:      	nop
            ; //_A30BB6F62_1675:;				
            _A30BB6F62_1675:
            ; //	asm	nop				
008CA:      	nop
            ; //_A30BB6F62_1676:;				
            _A30BB6F62_1676:
            ; //	asm	nop				
008CB:      	nop
            ; //_A30BB6F62_1677:;				
            _A30BB6F62_1677:
            ; //	asm clr io[0x09].b14;			
008CC:      	clr io[0x09].b14//
            ; //_A30BB6F62_1678:;				
            _A30BB6F62_1678:
            ; //	asm	nop				
008CD:      	nop
            ; //_A30BB6F62_1679:;				
            _A30BB6F62_1679:
            ; //	asm	nop				
008CE:      	nop
            ; //_A30BB6F62_1680:;				
            _A30BB6F62_1680:
            ; //	asm	nop				
008CF:      	nop
            ; //_A30BB6F62_1681:;				
            _A30BB6F62_1681:
            ; //	asm	nop				
008D0:      	nop
            ; //_A30BB6F62_1682:;				
            _A30BB6F62_1682:
            ; //	asm	nop				
008D1:      	nop
            ; //_A30BB6F62_1683:;				
            _A30BB6F62_1683:
            ; //	asm	nop				
008D2:      	nop
            ; //_A30BB6F62_1684:;				
            _A30BB6F62_1684:
            ; //	asm	nop				
008D3:      	nop
            ; //_A30BB6F62_1685:;				
            _A30BB6F62_1685:
            ; //	asm	nop				
008D4:      	nop
            ; //_A30BB6F62_1686:;				
            _A30BB6F62_1686:
            ; //	asm	nop				
008D5:      	nop
            ; //_A30BB6F62_1687:;				
            _A30BB6F62_1687:
            ; //	asm	nop				
008D6:      	nop
            ; //_A30BB6F62_1688:;				
            _A30BB6F62_1688:
            ; //	asm	nop				
008D7:      	nop
            ; //_A30BB6F62_1689:;				
            _A30BB6F62_1689:
            ; //	asm	nop				
008D8:      	nop
            ; //_A30BB6F62_1690:;				
            _A30BB6F62_1690:
            ; //	asm set io[0x09].b14;			
008D9:      	set io[0x09].b14//
            ; //_A30BB6F62_1691:;				
            _A30BB6F62_1691:
            ; //	asm	nop				
008DA:      	nop
            ; //_A30BB6F62_1692:;				
            _A30BB6F62_1692:
            ; //	asm	nop				
008DB:      	nop
            ; //_A30BB6F62_1693:;				
            _A30BB6F62_1693:
            ; //	asm	nop				
008DC:      	nop
            ; //_A30BB6F62_1694:;				
            _A30BB6F62_1694:
            ; //	asm clr io[0x09].b14;			
008DD:      	clr io[0x09].b14//
            ; //_A30BB6F62_1695:;				
            _A30BB6F62_1695:
            ; //	asm	nop				
008DE:      	nop
            ; //_A30BB6F62_1696:;				
            _A30BB6F62_1696:
            ; //	asm	nop				
008DF:      	nop
            ; //_A30BB6F62_1697:;				
            _A30BB6F62_1697:
            ; //	asm	nop				
008E0:      	nop
            ; //_A30BB6F62_1698:;				
            _A30BB6F62_1698:
            ; //	asm	nop				
008E1:      	nop
            ; //_A30BB6F62_1699:;				
            _A30BB6F62_1699:
            ; //	asm	nop				
008E2:      	nop
            ; //_A30BB6F62_1700:;				
            _A30BB6F62_1700:
            ; //	asm	nop				
008E3:      	nop
            ; //_A30BB6F62_1701:;				
            _A30BB6F62_1701:
            ; //	asm	nop				
008E4:      	nop
            ; //_A30BB6F62_1702:;				
            _A30BB6F62_1702:
            ; //	asm	nop				
008E5:      	nop
            ; //_A30BB6F62_1703:;				
            _A30BB6F62_1703:
            ; //	asm	nop				
008E6:      	nop
            ; //_A30BB6F62_1704:;				
            _A30BB6F62_1704:
            ; //	asm	nop				
008E7:      	nop
            ; //_A30BB6F62_1705:;				
            _A30BB6F62_1705:
            ; //	asm	nop				
008E8:      	nop
            ; //_A30BB6F62_1706:;				
            _A30BB6F62_1706:
            ; //	asm	nop				
008E9:      	nop
            ; //_A30BB6F62_1707:;				
            _A30BB6F62_1707:
            ; //	asm set io[0x09].b14;			
008EA:      	set io[0x09].b14//
            ; //_A30BB6F62_1708:;				
            _A30BB6F62_1708:
            ; //	asm	nop				
008EB:      	nop
            ; //_A30BB6F62_1709:;				
            _A30BB6F62_1709:
            ; //	asm	nop				
008EC:      	nop
            ; //_A30BB6F62_1710:;				
            _A30BB6F62_1710:
            ; //	asm	nop				
008ED:      	nop
            ; //_A30BB6F62_1711:;				
            _A30BB6F62_1711:
            ; //	asm clr io[0x09].b14;			
008EE:      	clr io[0x09].b14//
            ; //_A30BB6F62_1712:;				
            _A30BB6F62_1712:
            ; //	asm	nop				
008EF:      	nop
            ; //_A30BB6F62_1713:;				
            _A30BB6F62_1713:
            ; //	asm	nop				
008F0:      	nop
            ; //_A30BB6F62_1714:;				
            _A30BB6F62_1714:
            ; //	asm	nop				
008F1:      	nop
            ; //_A30BB6F62_1715:;				
            _A30BB6F62_1715:
            ; //	asm	nop				
008F2:      	nop
            ; //_A30BB6F62_1716:;				
            _A30BB6F62_1716:
            ; //	asm	nop				
008F3:      	nop
            ; //_A30BB6F62_1717:;				
            _A30BB6F62_1717:
            ; //	asm	nop				
008F4:      	nop
            ; //_A30BB6F62_1718:;				
            _A30BB6F62_1718:
            ; //	asm	nop				
008F5:      	nop
            ; //_A30BB6F62_1719:;				
            _A30BB6F62_1719:
            ; //	asm	nop				
008F6:      	nop
            ; //_A30BB6F62_1720:;				
            _A30BB6F62_1720:
            ; //	asm	nop				
008F7:      	nop
            ; //_A30BB6F62_1721:;				
            _A30BB6F62_1721:
            ; //	asm	nop				
008F8:      	nop
            ; //_A30BB6F62_1722:;				
            _A30BB6F62_1722:
            ; //	asm	nop				
008F9:      	nop
            ; //_A30BB6F62_1723:;				
            _A30BB6F62_1723:
            ; //	asm	nop				
008FA:      	nop
            ; //_A30BB6F62_1724:;				
            _A30BB6F62_1724:
            ; //	asm set io[0x09].b14;			
008FB:      	set io[0x09].b14//
            ; //_A30BB6F62_1725:;				
            _A30BB6F62_1725:
            ; //	asm	nop				
008FC:      	nop
            ; //_A30BB6F62_1726:;				
            _A30BB6F62_1726:
            ; //	asm	nop				
008FD:      	nop
            ; //_A30BB6F62_1727:;				
            _A30BB6F62_1727:
            ; //	asm	nop				
008FE:      	nop
            ; //_A30BB6F62_1728:;				
            _A30BB6F62_1728:
            ; //	asm clr io[0x09].b14;			
008FF:      	clr io[0x09].b14//
            ; //_A30BB6F62_1729:;				
            _A30BB6F62_1729:
            ; //	asm	nop				
00900:      	nop
            ; //_A30BB6F62_1730:;				
            _A30BB6F62_1730:
            ; //	asm	nop				
00901:      	nop
            ; //_A30BB6F62_1731:;				
            _A30BB6F62_1731:
            ; //	asm	nop				
00902:      	nop
            ; //_A30BB6F62_1732:;				
            _A30BB6F62_1732:
            ; //	asm	nop				
00903:      	nop
            ; //_A30BB6F62_1733:;				
            _A30BB6F62_1733:
            ; //	asm	nop				
00904:      	nop
            ; //_A30BB6F62_1734:;				
            _A30BB6F62_1734:
            ; //	asm	nop				
00905:      	nop
            ; //_A30BB6F62_1735:;				
            _A30BB6F62_1735:
            ; //	asm	nop				
00906:      	nop
            ; //_A30BB6F62_1736:;				
            _A30BB6F62_1736:
            ; //	asm	nop				
00907:      	nop
            ; //_A30BB6F62_1737:;				
            _A30BB6F62_1737:
            ; //	asm	nop				
00908:      	nop
            ; //_A30BB6F62_1738:;				
            _A30BB6F62_1738:
            ; //	asm	nop				
00909:      	nop
            ; //_A30BB6F62_1739:;				
            _A30BB6F62_1739:
            ; //	asm	nop				
0090A:      	nop
            ; //_A30BB6F62_1740:;				
            _A30BB6F62_1740:
            ; //	asm	nop				
0090B:      	nop
            ; //_A30BB6F62_1741:;				
            _A30BB6F62_1741:
            ; //	asm set io[0x09].b14;			
0090C:      	set io[0x09].b14//
            ; //_A30BB6F62_1742:;				
            _A30BB6F62_1742:
            ; //	asm	nop				
0090D:      	nop
            ; //_A30BB6F62_1743:;				
            _A30BB6F62_1743:
            ; //	asm	nop				
0090E:      	nop
            ; //_A30BB6F62_1744:;				
            _A30BB6F62_1744:
            ; //	asm	nop				
0090F:      	nop
            ; //_A30BB6F62_1745:;				
            _A30BB6F62_1745:
            ; //	asm clr io[0x09].b14;			
00910:      	clr io[0x09].b14//
            ; //_A30BB6F62_1746:;				
            _A30BB6F62_1746:
            ; //	asm	nop				
00911:      	nop
            ; //_A30BB6F62_1747:;				
            _A30BB6F62_1747:
            ; //	asm	nop				
00912:      	nop
            ; //_A30BB6F62_1748:;				
            _A30BB6F62_1748:
            ; //	asm	nop				
00913:      	nop
            ; //_A30BB6F62_1749:;				
            _A30BB6F62_1749:
            ; //	asm	nop				
00914:      	nop
            ; //_A30BB6F62_1750:;				
            _A30BB6F62_1750:
            ; //	asm	nop				
00915:      	nop
            ; //_A30BB6F62_1751:;				
            _A30BB6F62_1751:
            ; //	asm	nop				
00916:      	nop
            ; //_A30BB6F62_1752:;				
            _A30BB6F62_1752:
            ; //	asm	nop				
00917:      	nop
            ; //_A30BB6F62_1753:;				
            _A30BB6F62_1753:
            ; //	asm	nop				
00918:      	nop
            ; //_A30BB6F62_1754:;				
            _A30BB6F62_1754:
            ; //	asm	nop				
00919:      	nop
            ; //_A30BB6F62_1755:;				
            _A30BB6F62_1755:
            ; //	asm	nop				
0091A:      	nop
            ; //_A30BB6F62_1756:;				
            _A30BB6F62_1756:
            ; //	asm	nop				
0091B:      	nop
            ; //_A30BB6F62_1757:;				
            _A30BB6F62_1757:
            ; //	asm	nop				
0091C:      	nop
            ; //_A30BB6F62_1758:;				
            _A30BB6F62_1758:
            ; //	goto LD63FD439_50;			
0091D:      	pch =	LD63FD439_50
0091E:      	ljmp	LD63FD439_50
            ; //LD63FD439_56:;					
            LD63FD439_56:
            ; //_A30BB6F62_1759:;				
            _A30BB6F62_1759:
            ; //	asm set io[0x09].b14;			
0091F:      	set io[0x09].b14//
            ; //_A30BB6F62_1760:;				
            _A30BB6F62_1760:
            ; //	asm	nop				
00920:      	nop
            ; //_A30BB6F62_1761:;				
            _A30BB6F62_1761:
            ; //	asm	nop				
00921:      	nop
            ; //_A30BB6F62_1762:;				
            _A30BB6F62_1762:
            ; //	asm	nop				
00922:      	nop
            ; //_A30BB6F62_1763:;				
            _A30BB6F62_1763:
            ; //	asm clr io[0x09].b14;			
00923:      	clr io[0x09].b14//
            ; //_A30BB6F62_1764:;				
            _A30BB6F62_1764:
            ; //	asm	nop				
00924:      	nop
            ; //_A30BB6F62_1765:;				
            _A30BB6F62_1765:
            ; //	asm	nop				
00925:      	nop
            ; //_A30BB6F62_1766:;				
            _A30BB6F62_1766:
            ; //	asm	nop				
00926:      	nop
            ; //_A30BB6F62_1767:;				
            _A30BB6F62_1767:
            ; //	asm	nop				
00927:      	nop
            ; //_A30BB6F62_1768:;				
            _A30BB6F62_1768:
            ; //	asm	nop				
00928:      	nop
            ; //_A30BB6F62_1769:;				
            _A30BB6F62_1769:
            ; //	asm	nop				
00929:      	nop
            ; //_A30BB6F62_1770:;				
            _A30BB6F62_1770:
            ; //	asm	nop				
0092A:      	nop
            ; //_A30BB6F62_1771:;				
            _A30BB6F62_1771:
            ; //	asm	nop				
0092B:      	nop
            ; //_A30BB6F62_1772:;				
            _A30BB6F62_1772:
            ; //	asm	nop				
0092C:      	nop
            ; //_A30BB6F62_1773:;				
            _A30BB6F62_1773:
            ; //	asm	nop				
0092D:      	nop
            ; //_A30BB6F62_1774:;				
            _A30BB6F62_1774:
            ; //	asm	nop				
0092E:      	nop
            ; //_A30BB6F62_1775:;				
            _A30BB6F62_1775:
            ; //	asm	nop				
0092F:      	nop
            ; //_A30BB6F62_1776:;				
            _A30BB6F62_1776:
            ; //	asm set io[0x09].b14;			
00930:      	set io[0x09].b14//
            ; //_A30BB6F62_1777:;				
            _A30BB6F62_1777:
            ; //	asm	nop				
00931:      	nop
            ; //_A30BB6F62_1778:;				
            _A30BB6F62_1778:
            ; //	asm	nop				
00932:      	nop
            ; //_A30BB6F62_1779:;				
            _A30BB6F62_1779:
            ; //	asm	nop				
00933:      	nop
            ; //_A30BB6F62_1780:;				
            _A30BB6F62_1780:
            ; //	asm clr io[0x09].b14;			
00934:      	clr io[0x09].b14//
            ; //_A30BB6F62_1781:;				
            _A30BB6F62_1781:
            ; //	asm	nop				
00935:      	nop
            ; //_A30BB6F62_1782:;				
            _A30BB6F62_1782:
            ; //	asm	nop				
00936:      	nop
            ; //_A30BB6F62_1783:;				
            _A30BB6F62_1783:
            ; //	asm	nop				
00937:      	nop
            ; //_A30BB6F62_1784:;				
            _A30BB6F62_1784:
            ; //	asm	nop				
00938:      	nop
            ; //_A30BB6F62_1785:;				
            _A30BB6F62_1785:
            ; //	asm	nop				
00939:      	nop
            ; //_A30BB6F62_1786:;				
            _A30BB6F62_1786:
            ; //	asm	nop				
0093A:      	nop
            ; //_A30BB6F62_1787:;				
            _A30BB6F62_1787:
            ; //	asm	nop				
0093B:      	nop
            ; //_A30BB6F62_1788:;				
            _A30BB6F62_1788:
            ; //	asm	nop				
0093C:      	nop
            ; //_A30BB6F62_1789:;				
            _A30BB6F62_1789:
            ; //	asm	nop				
0093D:      	nop
            ; //_A30BB6F62_1790:;				
            _A30BB6F62_1790:
            ; //	asm	nop				
0093E:      	nop
            ; //_A30BB6F62_1791:;				
            _A30BB6F62_1791:
            ; //	asm	nop				
0093F:      	nop
            ; //_A30BB6F62_1792:;				
            _A30BB6F62_1792:
            ; //	asm	nop				
00940:      	nop
            ; //_A30BB6F62_1793:;				
            _A30BB6F62_1793:
            ; //	asm set io[0x09].b14;			
00941:      	set io[0x09].b14//
            ; //_A30BB6F62_1794:;				
            _A30BB6F62_1794:
            ; //	asm	nop				
00942:      	nop
            ; //_A30BB6F62_1795:;				
            _A30BB6F62_1795:
            ; //	asm	nop				
00943:      	nop
            ; //_A30BB6F62_1796:;				
            _A30BB6F62_1796:
            ; //	asm	nop				
00944:      	nop
            ; //_A30BB6F62_1797:;				
            _A30BB6F62_1797:
            ; //	asm clr io[0x09].b14;			
00945:      	clr io[0x09].b14//
            ; //_A30BB6F62_1798:;				
            _A30BB6F62_1798:
            ; //	asm	nop				
00946:      	nop
            ; //_A30BB6F62_1799:;				
            _A30BB6F62_1799:
            ; //	asm	nop				
00947:      	nop
            ; //_A30BB6F62_1800:;				
            _A30BB6F62_1800:
            ; //	asm	nop				
00948:      	nop
            ; //_A30BB6F62_1801:;				
            _A30BB6F62_1801:
            ; //	asm	nop				
00949:      	nop
            ; //_A30BB6F62_1802:;				
            _A30BB6F62_1802:
            ; //	asm	nop				
0094A:      	nop
            ; //_A30BB6F62_1803:;				
            _A30BB6F62_1803:
            ; //	asm	nop				
0094B:      	nop
            ; //_A30BB6F62_1804:;				
            _A30BB6F62_1804:
            ; //	asm	nop				
0094C:      	nop
            ; //_A30BB6F62_1805:;				
            _A30BB6F62_1805:
            ; //	asm	nop				
0094D:      	nop
            ; //_A30BB6F62_1806:;				
            _A30BB6F62_1806:
            ; //	asm	nop				
0094E:      	nop
            ; //_A30BB6F62_1807:;				
            _A30BB6F62_1807:
            ; //	asm	nop				
0094F:      	nop
            ; //_A30BB6F62_1808:;				
            _A30BB6F62_1808:
            ; //	asm	nop				
00950:      	nop
            ; //_A30BB6F62_1809:;				
            _A30BB6F62_1809:
            ; //	asm	nop				
00951:      	nop
            ; //_A30BB6F62_1810:;				
            _A30BB6F62_1810:
            ; //	asm set io[0x09].b14;			
00952:      	set io[0x09].b14//
            ; //_A30BB6F62_1811:;				
            _A30BB6F62_1811:
            ; //	asm	nop				
00953:      	nop
            ; //_A30BB6F62_1812:;				
            _A30BB6F62_1812:
            ; //	asm	nop				
00954:      	nop
            ; //_A30BB6F62_1813:;				
            _A30BB6F62_1813:
            ; //	asm	nop				
00955:      	nop
            ; //_A30BB6F62_1814:;				
            _A30BB6F62_1814:
            ; //	asm clr io[0x09].b14;			
00956:      	clr io[0x09].b14//
            ; //_A30BB6F62_1815:;				
            _A30BB6F62_1815:
            ; //	asm	nop				
00957:      	nop
            ; //_A30BB6F62_1816:;				
            _A30BB6F62_1816:
            ; //	asm	nop				
00958:      	nop
            ; //_A30BB6F62_1817:;				
            _A30BB6F62_1817:
            ; //	asm	nop				
00959:      	nop
            ; //_A30BB6F62_1818:;				
            _A30BB6F62_1818:
            ; //	asm	nop				
0095A:      	nop
            ; //_A30BB6F62_1819:;				
            _A30BB6F62_1819:
            ; //	asm	nop				
0095B:      	nop
            ; //_A30BB6F62_1820:;				
            _A30BB6F62_1820:
            ; //	asm	nop				
0095C:      	nop
            ; //_A30BB6F62_1821:;				
            _A30BB6F62_1821:
            ; //	asm	nop				
0095D:      	nop
            ; //_A30BB6F62_1822:;				
            _A30BB6F62_1822:
            ; //	asm	nop				
0095E:      	nop
            ; //_A30BB6F62_1823:;				
            _A30BB6F62_1823:
            ; //	asm	nop				
0095F:      	nop
            ; //_A30BB6F62_1824:;				
            _A30BB6F62_1824:
            ; //	asm	nop				
00960:      	nop
            ; //_A30BB6F62_1825:;				
            _A30BB6F62_1825:
            ; //	asm	nop				
00961:      	nop
            ; //_A30BB6F62_1826:;				
            _A30BB6F62_1826:
            ; //	asm	nop				
00962:      	nop
            ; //_A30BB6F62_1827:;				
            _A30BB6F62_1827:
            ; //	asm set io[0x09].b14;			
00963:      	set io[0x09].b14//
            ; //_A30BB6F62_1828:;				
            _A30BB6F62_1828:
            ; //	asm	nop				
00964:      	nop
            ; //_A30BB6F62_1829:;				
            _A30BB6F62_1829:
            ; //	asm	nop				
00965:      	nop
            ; //_A30BB6F62_1830:;				
            _A30BB6F62_1830:
            ; //	asm	nop				
00966:      	nop
            ; //_A30BB6F62_1831:;				
            _A30BB6F62_1831:
            ; //	asm clr io[0x09].b14;			
00967:      	clr io[0x09].b14//
            ; //_A30BB6F62_1832:;				
            _A30BB6F62_1832:
            ; //	asm	nop				
00968:      	nop
            ; //_A30BB6F62_1833:;				
            _A30BB6F62_1833:
            ; //	asm	nop				
00969:      	nop
            ; //_A30BB6F62_1834:;				
            _A30BB6F62_1834:
            ; //	asm	nop				
0096A:      	nop
            ; //_A30BB6F62_1835:;				
            _A30BB6F62_1835:
            ; //	asm	nop				
0096B:      	nop
            ; //_A30BB6F62_1836:;				
            _A30BB6F62_1836:
            ; //	asm	nop				
0096C:      	nop
            ; //_A30BB6F62_1837:;				
            _A30BB6F62_1837:
            ; //	asm	nop				
0096D:      	nop
            ; //_A30BB6F62_1838:;				
            _A30BB6F62_1838:
            ; //	asm	nop				
0096E:      	nop
            ; //_A30BB6F62_1839:;				
            _A30BB6F62_1839:
            ; //	asm	nop				
0096F:      	nop
            ; //_A30BB6F62_1840:;				
            _A30BB6F62_1840:
            ; //	asm	nop				
00970:      	nop
            ; //_A30BB6F62_1841:;				
            _A30BB6F62_1841:
            ; //	asm	nop				
00971:      	nop
            ; //_A30BB6F62_1842:;				
            _A30BB6F62_1842:
            ; //	asm	nop				
00972:      	nop
            ; //_A30BB6F62_1843:;				
            _A30BB6F62_1843:
            ; //	asm	nop				
00973:      	nop
            ; //_A30BB6F62_1844:;				
            _A30BB6F62_1844:
            ; //	asm set io[0x09].b14;			
00974:      	set io[0x09].b14//
            ; //_A30BB6F62_1845:;				
            _A30BB6F62_1845:
            ; //	asm	nop				
00975:      	nop
            ; //_A30BB6F62_1846:;				
            _A30BB6F62_1846:
            ; //	asm	nop				
00976:      	nop
            ; //_A30BB6F62_1847:;				
            _A30BB6F62_1847:
            ; //	asm	nop				
00977:      	nop
            ; //_A30BB6F62_1848:;				
            _A30BB6F62_1848:
            ; //	asm clr io[0x09].b14;			
00978:      	clr io[0x09].b14//
            ; //_A30BB6F62_1849:;				
            _A30BB6F62_1849:
            ; //	asm	nop				
00979:      	nop
            ; //_A30BB6F62_1850:;				
            _A30BB6F62_1850:
            ; //	asm	nop				
0097A:      	nop
            ; //_A30BB6F62_1851:;				
            _A30BB6F62_1851:
            ; //	asm	nop				
0097B:      	nop
            ; //_A30BB6F62_1852:;				
            _A30BB6F62_1852:
            ; //	asm	nop				
0097C:      	nop
            ; //_A30BB6F62_1853:;				
            _A30BB6F62_1853:
            ; //	asm	nop				
0097D:      	nop
            ; //_A30BB6F62_1854:;				
            _A30BB6F62_1854:
            ; //	asm	nop				
0097E:      	nop
            ; //_A30BB6F62_1855:;				
            _A30BB6F62_1855:
            ; //	asm	nop				
0097F:      	nop
            ; //_A30BB6F62_1856:;				
            _A30BB6F62_1856:
            ; //	asm	nop				
00980:      	nop
            ; //_A30BB6F62_1857:;				
            _A30BB6F62_1857:
            ; //	asm	nop				
00981:      	nop
            ; //_A30BB6F62_1858:;				
            _A30BB6F62_1858:
            ; //	asm	nop				
00982:      	nop
            ; //_A30BB6F62_1859:;				
            _A30BB6F62_1859:
            ; //	asm	nop				
00983:      	nop
            ; //_A30BB6F62_1860:;				
            _A30BB6F62_1860:
            ; //	asm	nop				
00984:      	nop
            ; //_A30BB6F62_1861:;				
            _A30BB6F62_1861:
            ; //	asm set io[0x09].b14;			
00985:      	set io[0x09].b14//
            ; //_A30BB6F62_1862:;				
            _A30BB6F62_1862:
            ; //	asm	nop				
00986:      	nop
            ; //_A30BB6F62_1863:;				
            _A30BB6F62_1863:
            ; //	asm	nop				
00987:      	nop
            ; //_A30BB6F62_1864:;				
            _A30BB6F62_1864:
            ; //	asm	nop				
00988:      	nop
            ; //_A30BB6F62_1865:;				
            _A30BB6F62_1865:
            ; //	asm clr io[0x09].b14;			
00989:      	clr io[0x09].b14//
            ; //_A30BB6F62_1866:;				
            _A30BB6F62_1866:
            ; //	asm	nop				
0098A:      	nop
            ; //_A30BB6F62_1867:;				
            _A30BB6F62_1867:
            ; //	asm	nop				
0098B:      	nop
            ; //_A30BB6F62_1868:;				
            _A30BB6F62_1868:
            ; //	asm	nop				
0098C:      	nop
            ; //_A30BB6F62_1869:;				
            _A30BB6F62_1869:
            ; //	asm	nop				
0098D:      	nop
            ; //_A30BB6F62_1870:;				
            _A30BB6F62_1870:
            ; //	asm	nop				
0098E:      	nop
            ; //_A30BB6F62_1871:;				
            _A30BB6F62_1871:
            ; //	asm	nop				
0098F:      	nop
            ; //_A30BB6F62_1872:;				
            _A30BB6F62_1872:
            ; //	asm	nop				
00990:      	nop
            ; //_A30BB6F62_1873:;				
            _A30BB6F62_1873:
            ; //	asm	nop				
00991:      	nop
            ; //_A30BB6F62_1874:;				
            _A30BB6F62_1874:
            ; //	asm	nop				
00992:      	nop
            ; //_A30BB6F62_1875:;				
            _A30BB6F62_1875:
            ; //	asm	nop				
00993:      	nop
            ; //_A30BB6F62_1876:;				
            _A30BB6F62_1876:
            ; //	asm	nop				
00994:      	nop
            ; //_A30BB6F62_1877:;				
            _A30BB6F62_1877:
            ; //	asm	nop				
00995:      	nop
            ; //_A30BB6F62_1878:;				
            _A30BB6F62_1878:
            ; //	asm set io[0x09].b14;			
00996:      	set io[0x09].b14//
            ; //_A30BB6F62_1879:;				
            _A30BB6F62_1879:
            ; //	asm	nop				
00997:      	nop
            ; //_A30BB6F62_1880:;				
            _A30BB6F62_1880:
            ; //	asm	nop				
00998:      	nop
            ; //_A30BB6F62_1881:;				
            _A30BB6F62_1881:
            ; //	asm	nop				
00999:      	nop
            ; //_A30BB6F62_1882:;				
            _A30BB6F62_1882:
            ; //	asm clr io[0x09].b14;			
0099A:      	clr io[0x09].b14//
            ; //_A30BB6F62_1883:;				
            _A30BB6F62_1883:
            ; //	asm	nop				
0099B:      	nop
            ; //_A30BB6F62_1884:;				
            _A30BB6F62_1884:
            ; //	asm	nop				
0099C:      	nop
            ; //_A30BB6F62_1885:;				
            _A30BB6F62_1885:
            ; //	asm	nop				
0099D:      	nop
            ; //_A30BB6F62_1886:;				
            _A30BB6F62_1886:
            ; //	asm	nop				
0099E:      	nop
            ; //_A30BB6F62_1887:;				
            _A30BB6F62_1887:
            ; //	asm	nop				
0099F:      	nop
            ; //_A30BB6F62_1888:;				
            _A30BB6F62_1888:
            ; //	asm	nop				
009A0:      	nop
            ; //_A30BB6F62_1889:;				
            _A30BB6F62_1889:
            ; //	asm	nop				
009A1:      	nop
            ; //_A30BB6F62_1890:;				
            _A30BB6F62_1890:
            ; //	asm	nop				
009A2:      	nop
            ; //_A30BB6F62_1891:;				
            _A30BB6F62_1891:
            ; //	asm	nop				
009A3:      	nop
            ; //_A30BB6F62_1892:;				
            _A30BB6F62_1892:
            ; //	asm	nop				
009A4:      	nop
            ; //_A30BB6F62_1893:;				
            _A30BB6F62_1893:
            ; //	asm	nop				
009A5:      	nop
            ; //_A30BB6F62_1894:;				
            _A30BB6F62_1894:
            ; //	asm	nop				
009A6:      	nop
            ; //_A30BB6F62_1895:;				
            _A30BB6F62_1895:
            ; //	asm set io[0x09].b14;			
009A7:      	set io[0x09].b14//
            ; //_A30BB6F62_1896:;				
            _A30BB6F62_1896:
            ; //	asm	nop				
009A8:      	nop
            ; //_A30BB6F62_1897:;				
            _A30BB6F62_1897:
            ; //	asm	nop				
009A9:      	nop
            ; //_A30BB6F62_1898:;				
            _A30BB6F62_1898:
            ; //	asm	nop				
009AA:      	nop
            ; //_A30BB6F62_1899:;				
            _A30BB6F62_1899:
            ; //	asm	nop				
009AB:      	nop
            ; //_A30BB6F62_1900:;				
            _A30BB6F62_1900:
            ; //	asm	nop				
009AC:      	nop
            ; //_A30BB6F62_1901:;				
            _A30BB6F62_1901:
            ; //	asm	nop				
009AD:      	nop
            ; //_A30BB6F62_1902:;				
            _A30BB6F62_1902:
            ; //	asm	nop				
009AE:      	nop
            ; //_A30BB6F62_1903:;				
            _A30BB6F62_1903:
            ; //	asm	nop				
009AF:      	nop
            ; //_A30BB6F62_1904:;				
            _A30BB6F62_1904:
            ; //	asm	nop				
009B0:      	nop
            ; //_A30BB6F62_1905:;				
            _A30BB6F62_1905:
            ; //	asm	nop				
009B1:      	nop
            ; //_A30BB6F62_1906:;				
            _A30BB6F62_1906:
            ; //	asm	nop				
009B2:      	nop
            ; //_A30BB6F62_1907:;				
            _A30BB6F62_1907:
            ; //	asm	nop				
009B3:      	nop
            ; //_A30BB6F62_1908:;				
            _A30BB6F62_1908:
            ; //	asm clr io[0x09].b14;			
009B4:      	clr io[0x09].b14//
            ; //_A30BB6F62_1909:;				
            _A30BB6F62_1909:
            ; //	asm	nop				
009B5:      	nop
            ; //_A30BB6F62_1910:;				
            _A30BB6F62_1910:
            ; //	asm	nop				
009B6:      	nop
            ; //_A30BB6F62_1911:;				
            _A30BB6F62_1911:
            ; //	asm	nop				
009B7:      	nop
            ; //_A30BB6F62_1912:;				
            _A30BB6F62_1912:
            ; //	asm set io[0x09].b14;			
009B8:      	set io[0x09].b14//
            ; //_A30BB6F62_1913:;				
            _A30BB6F62_1913:
            ; //	asm	nop				
009B9:      	nop
            ; //_A30BB6F62_1914:;				
            _A30BB6F62_1914:
            ; //	asm	nop				
009BA:      	nop
            ; //_A30BB6F62_1915:;				
            _A30BB6F62_1915:
            ; //	asm	nop				
009BB:      	nop
            ; //_A30BB6F62_1916:;				
            _A30BB6F62_1916:
            ; //	asm	nop				
009BC:      	nop
            ; //_A30BB6F62_1917:;				
            _A30BB6F62_1917:
            ; //	asm	nop				
009BD:      	nop
            ; //_A30BB6F62_1918:;				
            _A30BB6F62_1918:
            ; //	asm	nop				
009BE:      	nop
            ; //_A30BB6F62_1919:;				
            _A30BB6F62_1919:
            ; //	asm	nop				
009BF:      	nop
            ; //_A30BB6F62_1920:;				
            _A30BB6F62_1920:
            ; //	asm	nop				
009C0:      	nop
            ; //_A30BB6F62_1921:;				
            _A30BB6F62_1921:
            ; //	asm	nop				
009C1:      	nop
            ; //_A30BB6F62_1922:;				
            _A30BB6F62_1922:
            ; //	asm	nop				
009C2:      	nop
            ; //_A30BB6F62_1923:;				
            _A30BB6F62_1923:
            ; //	asm	nop				
009C3:      	nop
            ; //_A30BB6F62_1924:;				
            _A30BB6F62_1924:
            ; //	asm	nop				
009C4:      	nop
            ; //_A30BB6F62_1925:;				
            _A30BB6F62_1925:
            ; //	asm clr io[0x09].b14;			
009C5:      	clr io[0x09].b14//
            ; //_A30BB6F62_1926:;				
            _A30BB6F62_1926:
            ; //	asm	nop				
009C6:      	nop
            ; //_A30BB6F62_1927:;				
            _A30BB6F62_1927:
            ; //	asm	nop				
009C7:      	nop
            ; //_A30BB6F62_1928:;				
            _A30BB6F62_1928:
            ; //	asm	nop				
009C8:      	nop
            ; //_A30BB6F62_1929:;				
            _A30BB6F62_1929:
            ; //	asm set io[0x09].b14;			
009C9:      	set io[0x09].b14//
            ; //_A30BB6F62_1930:;				
            _A30BB6F62_1930:
            ; //	asm	nop				
009CA:      	nop
            ; //_A30BB6F62_1931:;				
            _A30BB6F62_1931:
            ; //	asm	nop				
009CB:      	nop
            ; //_A30BB6F62_1932:;				
            _A30BB6F62_1932:
            ; //	asm	nop				
009CC:      	nop
            ; //_A30BB6F62_1933:;				
            _A30BB6F62_1933:
            ; //	asm	nop				
009CD:      	nop
            ; //_A30BB6F62_1934:;				
            _A30BB6F62_1934:
            ; //	asm	nop				
009CE:      	nop
            ; //_A30BB6F62_1935:;				
            _A30BB6F62_1935:
            ; //	asm	nop				
009CF:      	nop
            ; //_A30BB6F62_1936:;				
            _A30BB6F62_1936:
            ; //	asm	nop				
009D0:      	nop
            ; //_A30BB6F62_1937:;				
            _A30BB6F62_1937:
            ; //	asm	nop				
009D1:      	nop
            ; //_A30BB6F62_1938:;				
            _A30BB6F62_1938:
            ; //	asm	nop				
009D2:      	nop
            ; //_A30BB6F62_1939:;				
            _A30BB6F62_1939:
            ; //	asm	nop				
009D3:      	nop
            ; //_A30BB6F62_1940:;				
            _A30BB6F62_1940:
            ; //	asm	nop				
009D4:      	nop
            ; //_A30BB6F62_1941:;				
            _A30BB6F62_1941:
            ; //	asm	nop				
009D5:      	nop
            ; //_A30BB6F62_1942:;				
            _A30BB6F62_1942:
            ; //	asm clr io[0x09].b14;			
009D6:      	clr io[0x09].b14//
            ; //_A30BB6F62_1943:;				
            _A30BB6F62_1943:
            ; //	asm	nop				
009D7:      	nop
            ; //_A30BB6F62_1944:;				
            _A30BB6F62_1944:
            ; //	asm	nop				
009D8:      	nop
            ; //_A30BB6F62_1945:;				
            _A30BB6F62_1945:
            ; //	asm	nop				
009D9:      	nop
            ; //_A30BB6F62_1946:;				
            _A30BB6F62_1946:
            ; //	asm set io[0x09].b14;			
009DA:      	set io[0x09].b14//
            ; //_A30BB6F62_1947:;				
            _A30BB6F62_1947:
            ; //	asm	nop				
009DB:      	nop
            ; //_A30BB6F62_1948:;				
            _A30BB6F62_1948:
            ; //	asm	nop				
009DC:      	nop
            ; //_A30BB6F62_1949:;				
            _A30BB6F62_1949:
            ; //	asm	nop				
009DD:      	nop
            ; //_A30BB6F62_1950:;				
            _A30BB6F62_1950:
            ; //	asm	nop				
009DE:      	nop
            ; //_A30BB6F62_1951:;				
            _A30BB6F62_1951:
            ; //	asm	nop				
009DF:      	nop
            ; //_A30BB6F62_1952:;				
            _A30BB6F62_1952:
            ; //	asm	nop				
009E0:      	nop
            ; //_A30BB6F62_1953:;				
            _A30BB6F62_1953:
            ; //	asm	nop				
009E1:      	nop
            ; //_A30BB6F62_1954:;				
            _A30BB6F62_1954:
            ; //	asm	nop				
009E2:      	nop
            ; //_A30BB6F62_1955:;				
            _A30BB6F62_1955:
            ; //	asm	nop				
009E3:      	nop
            ; //_A30BB6F62_1956:;				
            _A30BB6F62_1956:
            ; //	asm	nop				
009E4:      	nop
            ; //_A30BB6F62_1957:;				
            _A30BB6F62_1957:
            ; //	asm	nop				
009E5:      	nop
            ; //_A30BB6F62_1958:;				
            _A30BB6F62_1958:
            ; //	asm	nop				
009E6:      	nop
            ; //_A30BB6F62_1959:;				
            _A30BB6F62_1959:
            ; //	asm clr io[0x09].b14;			
009E7:      	clr io[0x09].b14//
            ; //_A30BB6F62_1960:;				
            _A30BB6F62_1960:
            ; //	asm	nop				
009E8:      	nop
            ; //_A30BB6F62_1961:;				
            _A30BB6F62_1961:
            ; //	asm	nop				
009E9:      	nop
            ; //_A30BB6F62_1962:;				
            _A30BB6F62_1962:
            ; //	asm	nop				
009EA:      	nop
            ; //_A30BB6F62_1963:;				
            _A30BB6F62_1963:
            ; //	asm set io[0x09].b14;			
009EB:      	set io[0x09].b14//
            ; //_A30BB6F62_1964:;				
            _A30BB6F62_1964:
            ; //	asm	nop				
009EC:      	nop
            ; //_A30BB6F62_1965:;				
            _A30BB6F62_1965:
            ; //	asm	nop				
009ED:      	nop
            ; //_A30BB6F62_1966:;				
            _A30BB6F62_1966:
            ; //	asm	nop				
009EE:      	nop
            ; //_A30BB6F62_1967:;				
            _A30BB6F62_1967:
            ; //	asm	nop				
009EF:      	nop
            ; //_A30BB6F62_1968:;				
            _A30BB6F62_1968:
            ; //	asm	nop				
009F0:      	nop
            ; //_A30BB6F62_1969:;				
            _A30BB6F62_1969:
            ; //	asm	nop				
009F1:      	nop
            ; //_A30BB6F62_1970:;				
            _A30BB6F62_1970:
            ; //	asm	nop				
009F2:      	nop
            ; //_A30BB6F62_1971:;				
            _A30BB6F62_1971:
            ; //	asm	nop				
009F3:      	nop
            ; //_A30BB6F62_1972:;				
            _A30BB6F62_1972:
            ; //	asm	nop				
009F4:      	nop
            ; //_A30BB6F62_1973:;				
            _A30BB6F62_1973:
            ; //	asm	nop				
009F5:      	nop
            ; //_A30BB6F62_1974:;				
            _A30BB6F62_1974:
            ; //	asm	nop				
009F6:      	nop
            ; //_A30BB6F62_1975:;				
            _A30BB6F62_1975:
            ; //	asm	nop				
009F7:      	nop
            ; //_A30BB6F62_1976:;				
            _A30BB6F62_1976:
            ; //	asm clr io[0x09].b14;			
009F8:      	clr io[0x09].b14//
            ; //_A30BB6F62_1977:;				
            _A30BB6F62_1977:
            ; //	asm	nop				
009F9:      	nop
            ; //_A30BB6F62_1978:;				
            _A30BB6F62_1978:
            ; //	asm	nop				
009FA:      	nop
            ; //_A30BB6F62_1979:;				
            _A30BB6F62_1979:
            ; //	asm	nop				
009FB:      	nop
            ; //_A30BB6F62_1980:;				
            _A30BB6F62_1980:
            ; //	asm set io[0x09].b14;			
009FC:      	set io[0x09].b14//
            ; //_A30BB6F62_1981:;				
            _A30BB6F62_1981:
            ; //	asm	nop				
009FD:      	nop
            ; //_A30BB6F62_1982:;				
            _A30BB6F62_1982:
            ; //	asm	nop				
009FE:      	nop
            ; //_A30BB6F62_1983:;				
            _A30BB6F62_1983:
            ; //	asm	nop				
009FF:      	nop
            ; //_A30BB6F62_1984:;				
            _A30BB6F62_1984:
            ; //	asm	nop				
00A00:      	nop
            ; //_A30BB6F62_1985:;				
            _A30BB6F62_1985:
            ; //	asm	nop				
00A01:      	nop
            ; //_A30BB6F62_1986:;				
            _A30BB6F62_1986:
            ; //	asm	nop				
00A02:      	nop
            ; //_A30BB6F62_1987:;				
            _A30BB6F62_1987:
            ; //	asm	nop				
00A03:      	nop
            ; //_A30BB6F62_1988:;				
            _A30BB6F62_1988:
            ; //	asm	nop				
00A04:      	nop
            ; //_A30BB6F62_1989:;				
            _A30BB6F62_1989:
            ; //	asm	nop				
00A05:      	nop
            ; //_A30BB6F62_1990:;				
            _A30BB6F62_1990:
            ; //	asm	nop				
00A06:      	nop
            ; //_A30BB6F62_1991:;				
            _A30BB6F62_1991:
            ; //	asm	nop				
00A07:      	nop
            ; //_A30BB6F62_1992:;				
            _A30BB6F62_1992:
            ; //	asm	nop				
00A08:      	nop
            ; //_A30BB6F62_1993:;				
            _A30BB6F62_1993:
            ; //	asm clr io[0x09].b14;			
00A09:      	clr io[0x09].b14//
            ; //_A30BB6F62_1994:;				
            _A30BB6F62_1994:
            ; //	asm	nop				
00A0A:      	nop
            ; //_A30BB6F62_1995:;				
            _A30BB6F62_1995:
            ; //	asm	nop				
00A0B:      	nop
            ; //_A30BB6F62_1996:;				
            _A30BB6F62_1996:
            ; //	asm	nop				
00A0C:      	nop
            ; //_A30BB6F62_1997:;				
            _A30BB6F62_1997:
            ; //	asm set io[0x09].b14;			
00A0D:      	set io[0x09].b14//
            ; //_A30BB6F62_1998:;				
            _A30BB6F62_1998:
            ; //	asm	nop				
00A0E:      	nop
            ; //_A30BB6F62_1999:;				
            _A30BB6F62_1999:
            ; //	asm	nop				
00A0F:      	nop
            ; //_A30BB6F62_2000:;				
            _A30BB6F62_2000:
            ; //	asm	nop				
00A10:      	nop
            ; //_A30BB6F62_2001:;				
            _A30BB6F62_2001:
            ; //	asm	nop				
00A11:      	nop
            ; //_A30BB6F62_2002:;				
            _A30BB6F62_2002:
            ; //	asm	nop				
00A12:      	nop
            ; //_A30BB6F62_2003:;				
            _A30BB6F62_2003:
            ; //	asm	nop				
00A13:      	nop
            ; //_A30BB6F62_2004:;				
            _A30BB6F62_2004:
            ; //	asm	nop				
00A14:      	nop
            ; //_A30BB6F62_2005:;				
            _A30BB6F62_2005:
            ; //	asm	nop				
00A15:      	nop
            ; //_A30BB6F62_2006:;				
            _A30BB6F62_2006:
            ; //	asm	nop				
00A16:      	nop
            ; //_A30BB6F62_2007:;				
            _A30BB6F62_2007:
            ; //	asm	nop				
00A17:      	nop
            ; //_A30BB6F62_2008:;				
            _A30BB6F62_2008:
            ; //	asm	nop				
00A18:      	nop
            ; //_A30BB6F62_2009:;				
            _A30BB6F62_2009:
            ; //	asm	nop				
00A19:      	nop
            ; //_A30BB6F62_2010:;				
            _A30BB6F62_2010:
            ; //	asm clr io[0x09].b14;			
00A1A:      	clr io[0x09].b14//
            ; //_A30BB6F62_2011:;				
            _A30BB6F62_2011:
            ; //	asm	nop				
00A1B:      	nop
            ; //_A30BB6F62_2012:;				
            _A30BB6F62_2012:
            ; //	asm	nop				
00A1C:      	nop
            ; //_A30BB6F62_2013:;				
            _A30BB6F62_2013:
            ; //	asm	nop				
00A1D:      	nop
            ; //_A30BB6F62_2014:;				
            _A30BB6F62_2014:
            ; //	asm set io[0x09].b14;			
00A1E:      	set io[0x09].b14//
            ; //_A30BB6F62_2015:;				
            _A30BB6F62_2015:
            ; //	asm	nop				
00A1F:      	nop
            ; //_A30BB6F62_2016:;				
            _A30BB6F62_2016:
            ; //	asm	nop				
00A20:      	nop
            ; //_A30BB6F62_2017:;				
            _A30BB6F62_2017:
            ; //	asm	nop				
00A21:      	nop
            ; //_A30BB6F62_2018:;				
            _A30BB6F62_2018:
            ; //	asm	nop				
00A22:      	nop
            ; //_A30BB6F62_2019:;				
            _A30BB6F62_2019:
            ; //	asm	nop				
00A23:      	nop
            ; //_A30BB6F62_2020:;				
            _A30BB6F62_2020:
            ; //	asm	nop				
00A24:      	nop
            ; //_A30BB6F62_2021:;				
            _A30BB6F62_2021:
            ; //	asm	nop				
00A25:      	nop
            ; //_A30BB6F62_2022:;				
            _A30BB6F62_2022:
            ; //	asm	nop				
00A26:      	nop
            ; //_A30BB6F62_2023:;				
            _A30BB6F62_2023:
            ; //	asm	nop				
00A27:      	nop
            ; //_A30BB6F62_2024:;				
            _A30BB6F62_2024:
            ; //	asm	nop				
00A28:      	nop
            ; //_A30BB6F62_2025:;				
            _A30BB6F62_2025:
            ; //	asm	nop				
00A29:      	nop
            ; //_A30BB6F62_2026:;				
            _A30BB6F62_2026:
            ; //	asm	nop				
00A2A:      	nop
            ; //_A30BB6F62_2027:;				
            _A30BB6F62_2027:
            ; //	asm clr io[0x09].b14;			
00A2B:      	clr io[0x09].b14//
            ; //_A30BB6F62_2028:;				
            _A30BB6F62_2028:
            ; //	asm	nop				
00A2C:      	nop
            ; //_A30BB6F62_2029:;				
            _A30BB6F62_2029:
            ; //	asm	nop				
00A2D:      	nop
            ; //_A30BB6F62_2030:;				
            _A30BB6F62_2030:
            ; //	asm	nop				
00A2E:      	nop
            ; //_A30BB6F62_2031:;				
            _A30BB6F62_2031:
            ; //	asm set io[0x09].b14;			
00A2F:      	set io[0x09].b14//
            ; //_A30BB6F62_2032:;				
            _A30BB6F62_2032:
            ; //	asm	nop				
00A30:      	nop
            ; //_A30BB6F62_2033:;				
            _A30BB6F62_2033:
            ; //	asm	nop				
00A31:      	nop
            ; //_A30BB6F62_2034:;				
            _A30BB6F62_2034:
            ; //	asm	nop				
00A32:      	nop
            ; //_A30BB6F62_2035:;				
            _A30BB6F62_2035:
            ; //	asm	nop				
00A33:      	nop
            ; //_A30BB6F62_2036:;				
            _A30BB6F62_2036:
            ; //	asm	nop				
00A34:      	nop
            ; //_A30BB6F62_2037:;				
            _A30BB6F62_2037:
            ; //	asm	nop				
00A35:      	nop
            ; //_A30BB6F62_2038:;				
            _A30BB6F62_2038:
            ; //	asm	nop				
00A36:      	nop
            ; //_A30BB6F62_2039:;				
            _A30BB6F62_2039:
            ; //	asm	nop				
00A37:      	nop
            ; //_A30BB6F62_2040:;				
            _A30BB6F62_2040:
            ; //	asm	nop				
00A38:      	nop
            ; //_A30BB6F62_2041:;				
            _A30BB6F62_2041:
            ; //	asm	nop				
00A39:      	nop
            ; //_A30BB6F62_2042:;				
            _A30BB6F62_2042:
            ; //	asm	nop				
00A3A:      	nop
            ; //_A30BB6F62_2043:;				
            _A30BB6F62_2043:
            ; //	asm	nop				
00A3B:      	nop
            ; //_A30BB6F62_2044:;				
            _A30BB6F62_2044:
            ; //	asm clr io[0x09].b14;			
00A3C:      	clr io[0x09].b14//
            ; //_A30BB6F62_2045:;				
            _A30BB6F62_2045:
            ; //	asm	nop				
00A3D:      	nop
            ; //_A30BB6F62_2046:;				
            _A30BB6F62_2046:
            ; //	asm	nop				
00A3E:      	nop
            ; //_A30BB6F62_2047:;				
            _A30BB6F62_2047:
            ; //	asm	nop				
00A3F:      	nop
            ; //_A30BB6F62_2048:;				
            _A30BB6F62_2048:
            ; //	asm set io[0x09].b14;			
00A40:      	set io[0x09].b14//
            ; //_A30BB6F62_2049:;				
            _A30BB6F62_2049:
            ; //	asm	nop				
00A41:      	nop
            ; //_A30BB6F62_2050:;				
            _A30BB6F62_2050:
            ; //	asm	nop				
00A42:      	nop
            ; //_A30BB6F62_2051:;				
            _A30BB6F62_2051:
            ; //	asm	nop				
00A43:      	nop
            ; //_A30BB6F62_2052:;				
            _A30BB6F62_2052:
            ; //	asm	nop				
00A44:      	nop
            ; //_A30BB6F62_2053:;				
            _A30BB6F62_2053:
            ; //	asm	nop				
00A45:      	nop
            ; //_A30BB6F62_2054:;				
            _A30BB6F62_2054:
            ; //	asm	nop				
00A46:      	nop
            ; //_A30BB6F62_2055:;				
            _A30BB6F62_2055:
            ; //	asm	nop				
00A47:      	nop
            ; //_A30BB6F62_2056:;				
            _A30BB6F62_2056:
            ; //	asm	nop				
00A48:      	nop
            ; //_A30BB6F62_2057:;				
            _A30BB6F62_2057:
            ; //	asm	nop				
00A49:      	nop
            ; //_A30BB6F62_2058:;				
            _A30BB6F62_2058:
            ; //	asm	nop				
00A4A:      	nop
            ; //_A30BB6F62_2059:;				
            _A30BB6F62_2059:
            ; //	asm	nop				
00A4B:      	nop
            ; //_A30BB6F62_2060:;				
            _A30BB6F62_2060:
            ; //	asm	nop				
00A4C:      	nop
            ; //_A30BB6F62_2061:;				
            _A30BB6F62_2061:
            ; //	asm clr io[0x09].b14;			
00A4D:      	clr io[0x09].b14//
            ; //_A30BB6F62_2062:;				
            _A30BB6F62_2062:
            ; //	asm	nop				
00A4E:      	nop
            ; //_A30BB6F62_2063:;				
            _A30BB6F62_2063:
            ; //	asm	nop				
00A4F:      	nop
            ; //_A30BB6F62_2064:;				
            _A30BB6F62_2064:
            ; //	asm	nop				
00A50:      	nop
            ; //_A30BB6F62_2065:;				
            _A30BB6F62_2065:
            ; //	asm set io[0x09].b14;			
00A51:      	set io[0x09].b14//
            ; //_A30BB6F62_2066:;				
            _A30BB6F62_2066:
            ; //	asm	nop				
00A52:      	nop
            ; //_A30BB6F62_2067:;				
            _A30BB6F62_2067:
            ; //	asm	nop				
00A53:      	nop
            ; //_A30BB6F62_2068:;				
            _A30BB6F62_2068:
            ; //	asm	nop				
00A54:      	nop
            ; //_A30BB6F62_2069:;				
            _A30BB6F62_2069:
            ; //	asm	nop				
00A55:      	nop
            ; //_A30BB6F62_2070:;				
            _A30BB6F62_2070:
            ; //	asm	nop				
00A56:      	nop
            ; //_A30BB6F62_2071:;				
            _A30BB6F62_2071:
            ; //	asm	nop				
00A57:      	nop
            ; //_A30BB6F62_2072:;				
            _A30BB6F62_2072:
            ; //	asm	nop				
00A58:      	nop
            ; //_A30BB6F62_2073:;				
            _A30BB6F62_2073:
            ; //	asm	nop				
00A59:      	nop
            ; //_A30BB6F62_2074:;				
            _A30BB6F62_2074:
            ; //	asm	nop				
00A5A:      	nop
            ; //_A30BB6F62_2075:;				
            _A30BB6F62_2075:
            ; //	asm	nop				
00A5B:      	nop
            ; //_A30BB6F62_2076:;				
            _A30BB6F62_2076:
            ; //	asm	nop				
00A5C:      	nop
            ; //_A30BB6F62_2077:;				
            _A30BB6F62_2077:
            ; //	asm	nop				
00A5D:      	nop
            ; //_A30BB6F62_2078:;				
            _A30BB6F62_2078:
            ; //	asm clr io[0x09].b14;			
00A5E:      	clr io[0x09].b14//
            ; //_A30BB6F62_2079:;				
            _A30BB6F62_2079:
            ; //	asm	nop				
00A5F:      	nop
            ; //_A30BB6F62_2080:;				
            _A30BB6F62_2080:
            ; //	asm	nop				
00A60:      	nop
            ; //_A30BB6F62_2081:;				
            _A30BB6F62_2081:
            ; //	asm	nop				
00A61:      	nop
            ; //_A30BB6F62_2082:;				
            _A30BB6F62_2082:
            ; //	asm set io[0x09].b14;			
00A62:      	set io[0x09].b14//
            ; //_A30BB6F62_2083:;				
            _A30BB6F62_2083:
            ; //	asm	nop				
00A63:      	nop
            ; //_A30BB6F62_2084:;				
            _A30BB6F62_2084:
            ; //	asm	nop				
00A64:      	nop
            ; //_A30BB6F62_2085:;				
            _A30BB6F62_2085:
            ; //	asm	nop				
00A65:      	nop
            ; //_A30BB6F62_2086:;				
            _A30BB6F62_2086:
            ; //	asm	nop				
00A66:      	nop
            ; //_A30BB6F62_2087:;				
            _A30BB6F62_2087:
            ; //	asm	nop				
00A67:      	nop
            ; //_A30BB6F62_2088:;				
            _A30BB6F62_2088:
            ; //	asm	nop				
00A68:      	nop
            ; //_A30BB6F62_2089:;				
            _A30BB6F62_2089:
            ; //	asm	nop				
00A69:      	nop
            ; //_A30BB6F62_2090:;				
            _A30BB6F62_2090:
            ; //	asm	nop				
00A6A:      	nop
            ; //_A30BB6F62_2091:;				
            _A30BB6F62_2091:
            ; //	asm	nop				
00A6B:      	nop
            ; //_A30BB6F62_2092:;				
            _A30BB6F62_2092:
            ; //	asm	nop				
00A6C:      	nop
            ; //_A30BB6F62_2093:;				
            _A30BB6F62_2093:
            ; //	asm	nop				
00A6D:      	nop
            ; //_A30BB6F62_2094:;				
            _A30BB6F62_2094:
            ; //	asm	nop				
00A6E:      	nop
            ; //_A30BB6F62_2095:;				
            _A30BB6F62_2095:
            ; //	asm clr io[0x09].b14;			
00A6F:      	clr io[0x09].b14//
            ; //_A30BB6F62_2096:;				
            _A30BB6F62_2096:
            ; //	asm	nop				
00A70:      	nop
            ; //_A30BB6F62_2097:;				
            _A30BB6F62_2097:
            ; //	asm	nop				
00A71:      	nop
            ; //_A30BB6F62_2098:;				
            _A30BB6F62_2098:
            ; //	asm	nop				
00A72:      	nop
            ; //_A30BB6F62_2099:;				
            _A30BB6F62_2099:
            ; //	asm set io[0x09].b14;			
00A73:      	set io[0x09].b14//
            ; //_A30BB6F62_2100:;				
            _A30BB6F62_2100:
            ; //	asm	nop				
00A74:      	nop
            ; //_A30BB6F62_2101:;				
            _A30BB6F62_2101:
            ; //	asm	nop				
00A75:      	nop
            ; //_A30BB6F62_2102:;				
            _A30BB6F62_2102:
            ; //	asm	nop				
00A76:      	nop
            ; //_A30BB6F62_2103:;				
            _A30BB6F62_2103:
            ; //	asm	nop				
00A77:      	nop
            ; //_A30BB6F62_2104:;				
            _A30BB6F62_2104:
            ; //	asm	nop				
00A78:      	nop
            ; //_A30BB6F62_2105:;				
            _A30BB6F62_2105:
            ; //	asm	nop				
00A79:      	nop
            ; //_A30BB6F62_2106:;				
            _A30BB6F62_2106:
            ; //	asm	nop				
00A7A:      	nop
            ; //_A30BB6F62_2107:;				
            _A30BB6F62_2107:
            ; //	asm	nop				
00A7B:      	nop
            ; //_A30BB6F62_2108:;				
            _A30BB6F62_2108:
            ; //	asm	nop				
00A7C:      	nop
            ; //_A30BB6F62_2109:;				
            _A30BB6F62_2109:
            ; //	asm	nop				
00A7D:      	nop
            ; //_A30BB6F62_2110:;				
            _A30BB6F62_2110:
            ; //	asm	nop				
00A7E:      	nop
            ; //_A30BB6F62_2111:;				
            _A30BB6F62_2111:
            ; //	asm	nop				
00A7F:      	nop
            ; //_A30BB6F62_2112:;				
            _A30BB6F62_2112:
            ; //	asm clr io[0x09].b14;			
00A80:      	clr io[0x09].b14//
            ; //_A30BB6F62_2113:;				
            _A30BB6F62_2113:
            ; //	asm	nop				
00A81:      	nop
            ; //_A30BB6F62_2114:;				
            _A30BB6F62_2114:
            ; //	asm	nop				
00A82:      	nop
            ; //_A30BB6F62_2115:;				
            _A30BB6F62_2115:
            ; //	asm	nop				
00A83:      	nop
            ; //_A30BB6F62_2116:;				
            _A30BB6F62_2116:
            ; //	asm set io[0x09].b14;			
00A84:      	set io[0x09].b14//
            ; //_A30BB6F62_2117:;				
            _A30BB6F62_2117:
            ; //	asm	nop				
00A85:      	nop
            ; //_A30BB6F62_2118:;				
            _A30BB6F62_2118:
            ; //	asm	nop				
00A86:      	nop
            ; //_A30BB6F62_2119:;				
            _A30BB6F62_2119:
            ; //	asm	nop				
00A87:      	nop
            ; //_A30BB6F62_2120:;				
            _A30BB6F62_2120:
            ; //	asm	nop				
00A88:      	nop
            ; //_A30BB6F62_2121:;				
            _A30BB6F62_2121:
            ; //	asm	nop				
00A89:      	nop
            ; //_A30BB6F62_2122:;				
            _A30BB6F62_2122:
            ; //	asm	nop				
00A8A:      	nop
            ; //_A30BB6F62_2123:;				
            _A30BB6F62_2123:
            ; //	asm	nop				
00A8B:      	nop
            ; //_A30BB6F62_2124:;				
            _A30BB6F62_2124:
            ; //	asm	nop				
00A8C:      	nop
            ; //_A30BB6F62_2125:;				
            _A30BB6F62_2125:
            ; //	asm	nop				
00A8D:      	nop
            ; //_A30BB6F62_2126:;				
            _A30BB6F62_2126:
            ; //	asm	nop				
00A8E:      	nop
            ; //_A30BB6F62_2127:;				
            _A30BB6F62_2127:
            ; //	asm	nop				
00A8F:      	nop
            ; //_A30BB6F62_2128:;				
            _A30BB6F62_2128:
            ; //	asm	nop				
00A90:      	nop
            ; //_A30BB6F62_2129:;				
            _A30BB6F62_2129:
            ; //	asm clr io[0x09].b14;			
00A91:      	clr io[0x09].b14//
            ; //_A30BB6F62_2130:;				
            _A30BB6F62_2130:
            ; //	asm	nop				
00A92:      	nop
            ; //_A30BB6F62_2131:;				
            _A30BB6F62_2131:
            ; //	asm	nop				
00A93:      	nop
            ; //_A30BB6F62_2132:;				
            _A30BB6F62_2132:
            ; //	asm	nop				
00A94:      	nop
            ; //_A30BB6F62_2133:;				
            _A30BB6F62_2133:
            ; //	asm set io[0x09].b14;			
00A95:      	set io[0x09].b14//
            ; //_A30BB6F62_2134:;				
            _A30BB6F62_2134:
            ; //	asm	nop				
00A96:      	nop
            ; //_A30BB6F62_2135:;				
            _A30BB6F62_2135:
            ; //	asm	nop				
00A97:      	nop
            ; //_A30BB6F62_2136:;				
            _A30BB6F62_2136:
            ; //	asm	nop				
00A98:      	nop
            ; //_A30BB6F62_2137:;				
            _A30BB6F62_2137:
            ; //	asm	nop				
00A99:      	nop
            ; //_A30BB6F62_2138:;				
            _A30BB6F62_2138:
            ; //	asm	nop				
00A9A:      	nop
            ; //_A30BB6F62_2139:;				
            _A30BB6F62_2139:
            ; //	asm	nop				
00A9B:      	nop
            ; //_A30BB6F62_2140:;				
            _A30BB6F62_2140:
            ; //	asm	nop				
00A9C:      	nop
            ; //_A30BB6F62_2141:;				
            _A30BB6F62_2141:
            ; //	asm	nop				
00A9D:      	nop
            ; //_A30BB6F62_2142:;				
            _A30BB6F62_2142:
            ; //	asm	nop				
00A9E:      	nop
            ; //_A30BB6F62_2143:;				
            _A30BB6F62_2143:
            ; //	asm	nop				
00A9F:      	nop
            ; //_A30BB6F62_2144:;				
            _A30BB6F62_2144:
            ; //	asm	nop				
00AA0:      	nop
            ; //_A30BB6F62_2145:;				
            _A30BB6F62_2145:
            ; //	asm	nop				
00AA1:      	nop
            ; //_A30BB6F62_2146:;				
            _A30BB6F62_2146:
            ; //	asm clr io[0x09].b14;			
00AA2:      	clr io[0x09].b14//
            ; //_A30BB6F62_2147:;				
            _A30BB6F62_2147:
            ; //	asm	nop				
00AA3:      	nop
            ; //_A30BB6F62_2148:;				
            _A30BB6F62_2148:
            ; //	asm	nop				
00AA4:      	nop
            ; //_A30BB6F62_2149:;				
            _A30BB6F62_2149:
            ; //	asm	nop				
00AA5:      	nop
            ; //_A30BB6F62_2150:;				
            _A30BB6F62_2150:
            ; //	asm set io[0x09].b14;			
00AA6:      	set io[0x09].b14//
            ; //_A30BB6F62_2151:;				
            _A30BB6F62_2151:
            ; //	asm	nop				
00AA7:      	nop
            ; //_A30BB6F62_2152:;				
            _A30BB6F62_2152:
            ; //	asm	nop				
00AA8:      	nop
            ; //_A30BB6F62_2153:;				
            _A30BB6F62_2153:
            ; //	asm	nop				
00AA9:      	nop
            ; //_A30BB6F62_2154:;				
            _A30BB6F62_2154:
            ; //	asm	nop				
00AAA:      	nop
            ; //_A30BB6F62_2155:;				
            _A30BB6F62_2155:
            ; //	asm	nop				
00AAB:      	nop
            ; //_A30BB6F62_2156:;				
            _A30BB6F62_2156:
            ; //	asm	nop				
00AAC:      	nop
            ; //_A30BB6F62_2157:;				
            _A30BB6F62_2157:
            ; //	asm	nop				
00AAD:      	nop
            ; //_A30BB6F62_2158:;				
            _A30BB6F62_2158:
            ; //	asm	nop				
00AAE:      	nop
            ; //_A30BB6F62_2159:;				
            _A30BB6F62_2159:
            ; //	asm	nop				
00AAF:      	nop
            ; //_A30BB6F62_2160:;				
            _A30BB6F62_2160:
            ; //	asm	nop				
00AB0:      	nop
            ; //_A30BB6F62_2161:;				
            _A30BB6F62_2161:
            ; //	asm	nop				
00AB1:      	nop
            ; //_A30BB6F62_2162:;				
            _A30BB6F62_2162:
            ; //	asm	nop				
00AB2:      	nop
            ; //_A30BB6F62_2163:;				
            _A30BB6F62_2163:
            ; //	asm clr io[0x09].b14;			
00AB3:      	clr io[0x09].b14//
            ; //_A30BB6F62_2164:;				
            _A30BB6F62_2164:
            ; //	asm	nop				
00AB4:      	nop
            ; //_A30BB6F62_2165:;				
            _A30BB6F62_2165:
            ; //	asm	nop				
00AB5:      	nop
            ; //_A30BB6F62_2166:;				
            _A30BB6F62_2166:
            ; //	asm	nop				
00AB6:      	nop
            ; //_A30BB6F62_2167:;				
            _A30BB6F62_2167:
            ; //	goto LD63FD439_50;			
00AB7:      	pch =	LD63FD439_50
00AB8:      	ljmp	LD63FD439_50
            ; //LD63FD439_57:;					
            LD63FD439_57:
            ; //_A30BB6F62_2168:;				
            _A30BB6F62_2168:
            ; //	asm set io[0x09].b14;			
00AB9:      	set io[0x09].b14//
            ; //_A30BB6F62_2169:;				
            _A30BB6F62_2169:
            ; //	asm	nop				
00ABA:      	nop
            ; //_A30BB6F62_2170:;				
            _A30BB6F62_2170:
            ; //	asm	nop				
00ABB:      	nop
            ; //_A30BB6F62_2171:;				
            _A30BB6F62_2171:
            ; //	asm	nop				
00ABC:      	nop
            ; //_A30BB6F62_2172:;				
            _A30BB6F62_2172:
            ; //	asm clr io[0x09].b14;			
00ABD:      	clr io[0x09].b14//
            ; //_A30BB6F62_2173:;				
            _A30BB6F62_2173:
            ; //	asm	nop				
00ABE:      	nop
            ; //_A30BB6F62_2174:;				
            _A30BB6F62_2174:
            ; //	asm	nop				
00ABF:      	nop
            ; //_A30BB6F62_2175:;				
            _A30BB6F62_2175:
            ; //	asm	nop				
00AC0:      	nop
            ; //_A30BB6F62_2176:;				
            _A30BB6F62_2176:
            ; //	asm	nop				
00AC1:      	nop
            ; //_A30BB6F62_2177:;				
            _A30BB6F62_2177:
            ; //	asm	nop				
00AC2:      	nop
            ; //_A30BB6F62_2178:;				
            _A30BB6F62_2178:
            ; //	asm	nop				
00AC3:      	nop
            ; //_A30BB6F62_2179:;				
            _A30BB6F62_2179:
            ; //	asm	nop				
00AC4:      	nop
            ; //_A30BB6F62_2180:;				
            _A30BB6F62_2180:
            ; //	asm	nop				
00AC5:      	nop
            ; //_A30BB6F62_2181:;				
            _A30BB6F62_2181:
            ; //	asm	nop				
00AC6:      	nop
            ; //_A30BB6F62_2182:;				
            _A30BB6F62_2182:
            ; //	asm	nop				
00AC7:      	nop
            ; //_A30BB6F62_2183:;				
            _A30BB6F62_2183:
            ; //	asm	nop				
00AC8:      	nop
            ; //_A30BB6F62_2184:;				
            _A30BB6F62_2184:
            ; //	asm	nop				
00AC9:      	nop
            ; //_A30BB6F62_2185:;				
            _A30BB6F62_2185:
            ; //	asm set io[0x09].b14;			
00ACA:      	set io[0x09].b14//
            ; //_A30BB6F62_2186:;				
            _A30BB6F62_2186:
            ; //	asm	nop				
00ACB:      	nop
            ; //_A30BB6F62_2187:;				
            _A30BB6F62_2187:
            ; //	asm	nop				
00ACC:      	nop
            ; //_A30BB6F62_2188:;				
            _A30BB6F62_2188:
            ; //	asm	nop				
00ACD:      	nop
            ; //_A30BB6F62_2189:;				
            _A30BB6F62_2189:
            ; //	asm clr io[0x09].b14;			
00ACE:      	clr io[0x09].b14//
            ; //_A30BB6F62_2190:;				
            _A30BB6F62_2190:
            ; //	asm	nop				
00ACF:      	nop
            ; //_A30BB6F62_2191:;				
            _A30BB6F62_2191:
            ; //	asm	nop				
00AD0:      	nop
            ; //_A30BB6F62_2192:;				
            _A30BB6F62_2192:
            ; //	asm	nop				
00AD1:      	nop
            ; //_A30BB6F62_2193:;				
            _A30BB6F62_2193:
            ; //	asm	nop				
00AD2:      	nop
            ; //_A30BB6F62_2194:;				
            _A30BB6F62_2194:
            ; //	asm	nop				
00AD3:      	nop
            ; //_A30BB6F62_2195:;				
            _A30BB6F62_2195:
            ; //	asm	nop				
00AD4:      	nop
            ; //_A30BB6F62_2196:;				
            _A30BB6F62_2196:
            ; //	asm	nop				
00AD5:      	nop
            ; //_A30BB6F62_2197:;				
            _A30BB6F62_2197:
            ; //	asm	nop				
00AD6:      	nop
            ; //_A30BB6F62_2198:;				
            _A30BB6F62_2198:
            ; //	asm	nop				
00AD7:      	nop
            ; //_A30BB6F62_2199:;				
            _A30BB6F62_2199:
            ; //	asm	nop				
00AD8:      	nop
            ; //_A30BB6F62_2200:;				
            _A30BB6F62_2200:
            ; //	asm	nop				
00AD9:      	nop
            ; //_A30BB6F62_2201:;				
            _A30BB6F62_2201:
            ; //	asm	nop				
00ADA:      	nop
            ; //_A30BB6F62_2202:;				
            _A30BB6F62_2202:
            ; //	asm set io[0x09].b14;			
00ADB:      	set io[0x09].b14//
            ; //_A30BB6F62_2203:;				
            _A30BB6F62_2203:
            ; //	asm	nop				
00ADC:      	nop
            ; //_A30BB6F62_2204:;				
            _A30BB6F62_2204:
            ; //	asm	nop				
00ADD:      	nop
            ; //_A30BB6F62_2205:;				
            _A30BB6F62_2205:
            ; //	asm	nop				
00ADE:      	nop
            ; //_A30BB6F62_2206:;				
            _A30BB6F62_2206:
            ; //	asm clr io[0x09].b14;			
00ADF:      	clr io[0x09].b14//
            ; //_A30BB6F62_2207:;				
            _A30BB6F62_2207:
            ; //	asm	nop				
00AE0:      	nop
            ; //_A30BB6F62_2208:;				
            _A30BB6F62_2208:
            ; //	asm	nop				
00AE1:      	nop
            ; //_A30BB6F62_2209:;				
            _A30BB6F62_2209:
            ; //	asm	nop				
00AE2:      	nop
            ; //_A30BB6F62_2210:;				
            _A30BB6F62_2210:
            ; //	asm	nop				
00AE3:      	nop
            ; //_A30BB6F62_2211:;				
            _A30BB6F62_2211:
            ; //	asm	nop				
00AE4:      	nop
            ; //_A30BB6F62_2212:;				
            _A30BB6F62_2212:
            ; //	asm	nop				
00AE5:      	nop
            ; //_A30BB6F62_2213:;				
            _A30BB6F62_2213:
            ; //	asm	nop				
00AE6:      	nop
            ; //_A30BB6F62_2214:;				
            _A30BB6F62_2214:
            ; //	asm	nop				
00AE7:      	nop
            ; //_A30BB6F62_2215:;				
            _A30BB6F62_2215:
            ; //	asm	nop				
00AE8:      	nop
            ; //_A30BB6F62_2216:;				
            _A30BB6F62_2216:
            ; //	asm	nop				
00AE9:      	nop
            ; //_A30BB6F62_2217:;				
            _A30BB6F62_2217:
            ; //	asm	nop				
00AEA:      	nop
            ; //_A30BB6F62_2218:;				
            _A30BB6F62_2218:
            ; //	asm	nop				
00AEB:      	nop
            ; //_A30BB6F62_2219:;				
            _A30BB6F62_2219:
            ; //	asm set io[0x09].b14;			
00AEC:      	set io[0x09].b14//
            ; //_A30BB6F62_2220:;				
            _A30BB6F62_2220:
            ; //	asm	nop				
00AED:      	nop
            ; //_A30BB6F62_2221:;				
            _A30BB6F62_2221:
            ; //	asm	nop				
00AEE:      	nop
            ; //_A30BB6F62_2222:;				
            _A30BB6F62_2222:
            ; //	asm	nop				
00AEF:      	nop
            ; //_A30BB6F62_2223:;				
            _A30BB6F62_2223:
            ; //	asm clr io[0x09].b14;			
00AF0:      	clr io[0x09].b14//
            ; //_A30BB6F62_2224:;				
            _A30BB6F62_2224:
            ; //	asm	nop				
00AF1:      	nop
            ; //_A30BB6F62_2225:;				
            _A30BB6F62_2225:
            ; //	asm	nop				
00AF2:      	nop
            ; //_A30BB6F62_2226:;				
            _A30BB6F62_2226:
            ; //	asm	nop				
00AF3:      	nop
            ; //_A30BB6F62_2227:;				
            _A30BB6F62_2227:
            ; //	asm	nop				
00AF4:      	nop
            ; //_A30BB6F62_2228:;				
            _A30BB6F62_2228:
            ; //	asm	nop				
00AF5:      	nop
            ; //_A30BB6F62_2229:;				
            _A30BB6F62_2229:
            ; //	asm	nop				
00AF6:      	nop
            ; //_A30BB6F62_2230:;				
            _A30BB6F62_2230:
            ; //	asm	nop				
00AF7:      	nop
            ; //_A30BB6F62_2231:;				
            _A30BB6F62_2231:
            ; //	asm	nop				
00AF8:      	nop
            ; //_A30BB6F62_2232:;				
            _A30BB6F62_2232:
            ; //	asm	nop				
00AF9:      	nop
            ; //_A30BB6F62_2233:;				
            _A30BB6F62_2233:
            ; //	asm	nop				
00AFA:      	nop
            ; //_A30BB6F62_2234:;				
            _A30BB6F62_2234:
            ; //	asm	nop				
00AFB:      	nop
            ; //_A30BB6F62_2235:;				
            _A30BB6F62_2235:
            ; //	asm	nop				
00AFC:      	nop
            ; //_A30BB6F62_2236:;				
            _A30BB6F62_2236:
            ; //	asm set io[0x09].b14;			
00AFD:      	set io[0x09].b14//
            ; //_A30BB6F62_2237:;				
            _A30BB6F62_2237:
            ; //	asm	nop				
00AFE:      	nop
            ; //_A30BB6F62_2238:;				
            _A30BB6F62_2238:
            ; //	asm	nop				
00AFF:      	nop
            ; //_A30BB6F62_2239:;				
            _A30BB6F62_2239:
            ; //	asm	nop				
00B00:      	nop
            ; //_A30BB6F62_2240:;				
            _A30BB6F62_2240:
            ; //	asm clr io[0x09].b14;			
00B01:      	clr io[0x09].b14//
            ; //_A30BB6F62_2241:;				
            _A30BB6F62_2241:
            ; //	asm	nop				
00B02:      	nop
            ; //_A30BB6F62_2242:;				
            _A30BB6F62_2242:
            ; //	asm	nop				
00B03:      	nop
            ; //_A30BB6F62_2243:;				
            _A30BB6F62_2243:
            ; //	asm	nop				
00B04:      	nop
            ; //_A30BB6F62_2244:;				
            _A30BB6F62_2244:
            ; //	asm	nop				
00B05:      	nop
            ; //_A30BB6F62_2245:;				
            _A30BB6F62_2245:
            ; //	asm	nop				
00B06:      	nop
            ; //_A30BB6F62_2246:;				
            _A30BB6F62_2246:
            ; //	asm	nop				
00B07:      	nop
            ; //_A30BB6F62_2247:;				
            _A30BB6F62_2247:
            ; //	asm	nop				
00B08:      	nop
            ; //_A30BB6F62_2248:;				
            _A30BB6F62_2248:
            ; //	asm	nop				
00B09:      	nop
            ; //_A30BB6F62_2249:;				
            _A30BB6F62_2249:
            ; //	asm	nop				
00B0A:      	nop
            ; //_A30BB6F62_2250:;				
            _A30BB6F62_2250:
            ; //	asm	nop				
00B0B:      	nop
            ; //_A30BB6F62_2251:;				
            _A30BB6F62_2251:
            ; //	asm	nop				
00B0C:      	nop
            ; //_A30BB6F62_2252:;				
            _A30BB6F62_2252:
            ; //	asm	nop				
00B0D:      	nop
            ; //_A30BB6F62_2253:;				
            _A30BB6F62_2253:
            ; //	asm set io[0x09].b14;			
00B0E:      	set io[0x09].b14//
            ; //_A30BB6F62_2254:;				
            _A30BB6F62_2254:
            ; //	asm	nop				
00B0F:      	nop
            ; //_A30BB6F62_2255:;				
            _A30BB6F62_2255:
            ; //	asm	nop				
00B10:      	nop
            ; //_A30BB6F62_2256:;				
            _A30BB6F62_2256:
            ; //	asm	nop				
00B11:      	nop
            ; //_A30BB6F62_2257:;				
            _A30BB6F62_2257:
            ; //	asm clr io[0x09].b14;			
00B12:      	clr io[0x09].b14//
            ; //_A30BB6F62_2258:;				
            _A30BB6F62_2258:
            ; //	asm	nop				
00B13:      	nop
            ; //_A30BB6F62_2259:;				
            _A30BB6F62_2259:
            ; //	asm	nop				
00B14:      	nop
            ; //_A30BB6F62_2260:;				
            _A30BB6F62_2260:
            ; //	asm	nop				
00B15:      	nop
            ; //_A30BB6F62_2261:;				
            _A30BB6F62_2261:
            ; //	asm	nop				
00B16:      	nop
            ; //_A30BB6F62_2262:;				
            _A30BB6F62_2262:
            ; //	asm	nop				
00B17:      	nop
            ; //_A30BB6F62_2263:;				
            _A30BB6F62_2263:
            ; //	asm	nop				
00B18:      	nop
            ; //_A30BB6F62_2264:;				
            _A30BB6F62_2264:
            ; //	asm	nop				
00B19:      	nop
            ; //_A30BB6F62_2265:;				
            _A30BB6F62_2265:
            ; //	asm	nop				
00B1A:      	nop
            ; //_A30BB6F62_2266:;				
            _A30BB6F62_2266:
            ; //	asm	nop				
00B1B:      	nop
            ; //_A30BB6F62_2267:;				
            _A30BB6F62_2267:
            ; //	asm	nop				
00B1C:      	nop
            ; //_A30BB6F62_2268:;				
            _A30BB6F62_2268:
            ; //	asm	nop				
00B1D:      	nop
            ; //_A30BB6F62_2269:;				
            _A30BB6F62_2269:
            ; //	asm	nop				
00B1E:      	nop
            ; //_A30BB6F62_2270:;				
            _A30BB6F62_2270:
            ; //	asm set io[0x09].b14;			
00B1F:      	set io[0x09].b14//
            ; //_A30BB6F62_2271:;				
            _A30BB6F62_2271:
            ; //	asm	nop				
00B20:      	nop
            ; //_A30BB6F62_2272:;				
            _A30BB6F62_2272:
            ; //	asm	nop				
00B21:      	nop
            ; //_A30BB6F62_2273:;				
            _A30BB6F62_2273:
            ; //	asm	nop				
00B22:      	nop
            ; //_A30BB6F62_2274:;				
            _A30BB6F62_2274:
            ; //	asm clr io[0x09].b14;			
00B23:      	clr io[0x09].b14//
            ; //_A30BB6F62_2275:;				
            _A30BB6F62_2275:
            ; //	asm	nop				
00B24:      	nop
            ; //_A30BB6F62_2276:;				
            _A30BB6F62_2276:
            ; //	asm	nop				
00B25:      	nop
            ; //_A30BB6F62_2277:;				
            _A30BB6F62_2277:
            ; //	asm	nop				
00B26:      	nop
            ; //_A30BB6F62_2278:;				
            _A30BB6F62_2278:
            ; //	asm	nop				
00B27:      	nop
            ; //_A30BB6F62_2279:;				
            _A30BB6F62_2279:
            ; //	asm	nop				
00B28:      	nop
            ; //_A30BB6F62_2280:;				
            _A30BB6F62_2280:
            ; //	asm	nop				
00B29:      	nop
            ; //_A30BB6F62_2281:;				
            _A30BB6F62_2281:
            ; //	asm	nop				
00B2A:      	nop
            ; //_A30BB6F62_2282:;				
            _A30BB6F62_2282:
            ; //	asm	nop				
00B2B:      	nop
            ; //_A30BB6F62_2283:;				
            _A30BB6F62_2283:
            ; //	asm	nop				
00B2C:      	nop
            ; //_A30BB6F62_2284:;				
            _A30BB6F62_2284:
            ; //	asm	nop				
00B2D:      	nop
            ; //_A30BB6F62_2285:;				
            _A30BB6F62_2285:
            ; //	asm	nop				
00B2E:      	nop
            ; //_A30BB6F62_2286:;				
            _A30BB6F62_2286:
            ; //	asm	nop				
00B2F:      	nop
            ; //_A30BB6F62_2287:;				
            _A30BB6F62_2287:
            ; //	asm set io[0x09].b14;			
00B30:      	set io[0x09].b14//
            ; //_A30BB6F62_2288:;				
            _A30BB6F62_2288:
            ; //	asm	nop				
00B31:      	nop
            ; //_A30BB6F62_2289:;				
            _A30BB6F62_2289:
            ; //	asm	nop				
00B32:      	nop
            ; //_A30BB6F62_2290:;				
            _A30BB6F62_2290:
            ; //	asm	nop				
00B33:      	nop
            ; //_A30BB6F62_2291:;				
            _A30BB6F62_2291:
            ; //	asm clr io[0x09].b14;			
00B34:      	clr io[0x09].b14//
            ; //_A30BB6F62_2292:;				
            _A30BB6F62_2292:
            ; //	asm	nop				
00B35:      	nop
            ; //_A30BB6F62_2293:;				
            _A30BB6F62_2293:
            ; //	asm	nop				
00B36:      	nop
            ; //_A30BB6F62_2294:;				
            _A30BB6F62_2294:
            ; //	asm	nop				
00B37:      	nop
            ; //_A30BB6F62_2295:;				
            _A30BB6F62_2295:
            ; //	asm	nop				
00B38:      	nop
            ; //_A30BB6F62_2296:;				
            _A30BB6F62_2296:
            ; //	asm	nop				
00B39:      	nop
            ; //_A30BB6F62_2297:;				
            _A30BB6F62_2297:
            ; //	asm	nop				
00B3A:      	nop
            ; //_A30BB6F62_2298:;				
            _A30BB6F62_2298:
            ; //	asm	nop				
00B3B:      	nop
            ; //_A30BB6F62_2299:;				
            _A30BB6F62_2299:
            ; //	asm	nop				
00B3C:      	nop
            ; //_A30BB6F62_2300:;				
            _A30BB6F62_2300:
            ; //	asm	nop				
00B3D:      	nop
            ; //_A30BB6F62_2301:;				
            _A30BB6F62_2301:
            ; //	asm	nop				
00B3E:      	nop
            ; //_A30BB6F62_2302:;				
            _A30BB6F62_2302:
            ; //	asm	nop				
00B3F:      	nop
            ; //_A30BB6F62_2303:;				
            _A30BB6F62_2303:
            ; //	asm	nop				
00B40:      	nop
            ; //_A30BB6F62_2304:;				
            _A30BB6F62_2304:
            ; //	asm set io[0x09].b14;			
00B41:      	set io[0x09].b14//
            ; //_A30BB6F62_2305:;				
            _A30BB6F62_2305:
            ; //	asm	nop				
00B42:      	nop
            ; //_A30BB6F62_2306:;				
            _A30BB6F62_2306:
            ; //	asm	nop				
00B43:      	nop
            ; //_A30BB6F62_2307:;				
            _A30BB6F62_2307:
            ; //	asm	nop				
00B44:      	nop
            ; //_A30BB6F62_2308:;				
            _A30BB6F62_2308:
            ; //	asm clr io[0x09].b14;			
00B45:      	clr io[0x09].b14//
            ; //_A30BB6F62_2309:;				
            _A30BB6F62_2309:
            ; //	asm	nop				
00B46:      	nop
            ; //_A30BB6F62_2310:;				
            _A30BB6F62_2310:
            ; //	asm	nop				
00B47:      	nop
            ; //_A30BB6F62_2311:;				
            _A30BB6F62_2311:
            ; //	asm	nop				
00B48:      	nop
            ; //_A30BB6F62_2312:;				
            _A30BB6F62_2312:
            ; //	asm	nop				
00B49:      	nop
            ; //_A30BB6F62_2313:;				
            _A30BB6F62_2313:
            ; //	asm	nop				
00B4A:      	nop
            ; //_A30BB6F62_2314:;				
            _A30BB6F62_2314:
            ; //	asm	nop				
00B4B:      	nop
            ; //_A30BB6F62_2315:;				
            _A30BB6F62_2315:
            ; //	asm	nop				
00B4C:      	nop
            ; //_A30BB6F62_2316:;				
            _A30BB6F62_2316:
            ; //	asm	nop				
00B4D:      	nop
            ; //_A30BB6F62_2317:;				
            _A30BB6F62_2317:
            ; //	asm	nop				
00B4E:      	nop
            ; //_A30BB6F62_2318:;				
            _A30BB6F62_2318:
            ; //	asm	nop				
00B4F:      	nop
            ; //_A30BB6F62_2319:;				
            _A30BB6F62_2319:
            ; //	asm	nop				
00B50:      	nop
            ; //_A30BB6F62_2320:;				
            _A30BB6F62_2320:
            ; //	asm	nop				
00B51:      	nop
            ; //_A30BB6F62_2321:;				
            _A30BB6F62_2321:
            ; //	asm set io[0x09].b14;			
00B52:      	set io[0x09].b14//
            ; //_A30BB6F62_2322:;				
            _A30BB6F62_2322:
            ; //	asm	nop				
00B53:      	nop
            ; //_A30BB6F62_2323:;				
            _A30BB6F62_2323:
            ; //	asm	nop				
00B54:      	nop
            ; //_A30BB6F62_2324:;				
            _A30BB6F62_2324:
            ; //	asm	nop				
00B55:      	nop
            ; //_A30BB6F62_2325:;				
            _A30BB6F62_2325:
            ; //	asm clr io[0x09].b14;			
00B56:      	clr io[0x09].b14//
            ; //_A30BB6F62_2326:;				
            _A30BB6F62_2326:
            ; //	asm	nop				
00B57:      	nop
            ; //_A30BB6F62_2327:;				
            _A30BB6F62_2327:
            ; //	asm	nop				
00B58:      	nop
            ; //_A30BB6F62_2328:;				
            _A30BB6F62_2328:
            ; //	asm	nop				
00B59:      	nop
            ; //_A30BB6F62_2329:;				
            _A30BB6F62_2329:
            ; //	asm	nop				
00B5A:      	nop
            ; //_A30BB6F62_2330:;				
            _A30BB6F62_2330:
            ; //	asm	nop				
00B5B:      	nop
            ; //_A30BB6F62_2331:;				
            _A30BB6F62_2331:
            ; //	asm	nop				
00B5C:      	nop
            ; //_A30BB6F62_2332:;				
            _A30BB6F62_2332:
            ; //	asm	nop				
00B5D:      	nop
            ; //_A30BB6F62_2333:;				
            _A30BB6F62_2333:
            ; //	asm	nop				
00B5E:      	nop
            ; //_A30BB6F62_2334:;				
            _A30BB6F62_2334:
            ; //	asm	nop				
00B5F:      	nop
            ; //_A30BB6F62_2335:;				
            _A30BB6F62_2335:
            ; //	asm	nop				
00B60:      	nop
            ; //_A30BB6F62_2336:;				
            _A30BB6F62_2336:
            ; //	asm	nop				
00B61:      	nop
            ; //_A30BB6F62_2337:;				
            _A30BB6F62_2337:
            ; //	asm	nop				
00B62:      	nop
            ; //_A30BB6F62_2338:;				
            _A30BB6F62_2338:
            ; //	asm set io[0x09].b14;			
00B63:      	set io[0x09].b14//
            ; //_A30BB6F62_2339:;				
            _A30BB6F62_2339:
            ; //	asm	nop				
00B64:      	nop
            ; //_A30BB6F62_2340:;				
            _A30BB6F62_2340:
            ; //	asm	nop				
00B65:      	nop
            ; //_A30BB6F62_2341:;				
            _A30BB6F62_2341:
            ; //	asm	nop				
00B66:      	nop
            ; //_A30BB6F62_2342:;				
            _A30BB6F62_2342:
            ; //	asm clr io[0x09].b14;			
00B67:      	clr io[0x09].b14//
            ; //_A30BB6F62_2343:;				
            _A30BB6F62_2343:
            ; //	asm	nop				
00B68:      	nop
            ; //_A30BB6F62_2344:;				
            _A30BB6F62_2344:
            ; //	asm	nop				
00B69:      	nop
            ; //_A30BB6F62_2345:;				
            _A30BB6F62_2345:
            ; //	asm	nop				
00B6A:      	nop
            ; //_A30BB6F62_2346:;				
            _A30BB6F62_2346:
            ; //	asm	nop				
00B6B:      	nop
            ; //_A30BB6F62_2347:;				
            _A30BB6F62_2347:
            ; //	asm	nop				
00B6C:      	nop
            ; //_A30BB6F62_2348:;				
            _A30BB6F62_2348:
            ; //	asm	nop				
00B6D:      	nop
            ; //_A30BB6F62_2349:;				
            _A30BB6F62_2349:
            ; //	asm	nop				
00B6E:      	nop
            ; //_A30BB6F62_2350:;				
            _A30BB6F62_2350:
            ; //	asm	nop				
00B6F:      	nop
            ; //_A30BB6F62_2351:;				
            _A30BB6F62_2351:
            ; //	asm	nop				
00B70:      	nop
            ; //_A30BB6F62_2352:;				
            _A30BB6F62_2352:
            ; //	asm	nop				
00B71:      	nop
            ; //_A30BB6F62_2353:;				
            _A30BB6F62_2353:
            ; //	asm	nop				
00B72:      	nop
            ; //_A30BB6F62_2354:;				
            _A30BB6F62_2354:
            ; //	asm	nop				
00B73:      	nop
            ; //_A30BB6F62_2355:;				
            _A30BB6F62_2355:
            ; //	asm set io[0x09].b14;			
00B74:      	set io[0x09].b14//
            ; //_A30BB6F62_2356:;				
            _A30BB6F62_2356:
            ; //	asm	nop				
00B75:      	nop
            ; //_A30BB6F62_2357:;				
            _A30BB6F62_2357:
            ; //	asm	nop				
00B76:      	nop
            ; //_A30BB6F62_2358:;				
            _A30BB6F62_2358:
            ; //	asm	nop				
00B77:      	nop
            ; //_A30BB6F62_2359:;				
            _A30BB6F62_2359:
            ; //	asm clr io[0x09].b14;			
00B78:      	clr io[0x09].b14//
            ; //_A30BB6F62_2360:;				
            _A30BB6F62_2360:
            ; //	asm	nop				
00B79:      	nop
            ; //_A30BB6F62_2361:;				
            _A30BB6F62_2361:
            ; //	asm	nop				
00B7A:      	nop
            ; //_A30BB6F62_2362:;				
            _A30BB6F62_2362:
            ; //	asm	nop				
00B7B:      	nop
            ; //_A30BB6F62_2363:;				
            _A30BB6F62_2363:
            ; //	asm	nop				
00B7C:      	nop
            ; //_A30BB6F62_2364:;				
            _A30BB6F62_2364:
            ; //	asm	nop				
00B7D:      	nop
            ; //_A30BB6F62_2365:;				
            _A30BB6F62_2365:
            ; //	asm	nop				
00B7E:      	nop
            ; //_A30BB6F62_2366:;				
            _A30BB6F62_2366:
            ; //	asm	nop				
00B7F:      	nop
            ; //_A30BB6F62_2367:;				
            _A30BB6F62_2367:
            ; //	asm	nop				
00B80:      	nop
            ; //_A30BB6F62_2368:;				
            _A30BB6F62_2368:
            ; //	asm	nop				
00B81:      	nop
            ; //_A30BB6F62_2369:;				
            _A30BB6F62_2369:
            ; //	asm	nop				
00B82:      	nop
            ; //_A30BB6F62_2370:;				
            _A30BB6F62_2370:
            ; //	asm	nop				
00B83:      	nop
            ; //_A30BB6F62_2371:;				
            _A30BB6F62_2371:
            ; //	asm	nop				
00B84:      	nop
            ; //_A30BB6F62_2372:;				
            _A30BB6F62_2372:
            ; //	asm set io[0x09].b14;			
00B85:      	set io[0x09].b14//
            ; //_A30BB6F62_2373:;				
            _A30BB6F62_2373:
            ; //	asm	nop				
00B86:      	nop
            ; //_A30BB6F62_2374:;				
            _A30BB6F62_2374:
            ; //	asm	nop				
00B87:      	nop
            ; //_A30BB6F62_2375:;				
            _A30BB6F62_2375:
            ; //	asm	nop				
00B88:      	nop
            ; //_A30BB6F62_2376:;				
            _A30BB6F62_2376:
            ; //	asm clr io[0x09].b14;			
00B89:      	clr io[0x09].b14//
            ; //_A30BB6F62_2377:;				
            _A30BB6F62_2377:
            ; //	asm	nop				
00B8A:      	nop
            ; //_A30BB6F62_2378:;				
            _A30BB6F62_2378:
            ; //	asm	nop				
00B8B:      	nop
            ; //_A30BB6F62_2379:;				
            _A30BB6F62_2379:
            ; //	asm	nop				
00B8C:      	nop
            ; //_A30BB6F62_2380:;				
            _A30BB6F62_2380:
            ; //	asm	nop				
00B8D:      	nop
            ; //_A30BB6F62_2381:;				
            _A30BB6F62_2381:
            ; //	asm	nop				
00B8E:      	nop
            ; //_A30BB6F62_2382:;				
            _A30BB6F62_2382:
            ; //	asm	nop				
00B8F:      	nop
            ; //_A30BB6F62_2383:;				
            _A30BB6F62_2383:
            ; //	asm	nop				
00B90:      	nop
            ; //_A30BB6F62_2384:;				
            _A30BB6F62_2384:
            ; //	asm	nop				
00B91:      	nop
            ; //_A30BB6F62_2385:;				
            _A30BB6F62_2385:
            ; //	asm	nop				
00B92:      	nop
            ; //_A30BB6F62_2386:;				
            _A30BB6F62_2386:
            ; //	asm	nop				
00B93:      	nop
            ; //_A30BB6F62_2387:;				
            _A30BB6F62_2387:
            ; //	asm	nop				
00B94:      	nop
            ; //_A30BB6F62_2388:;				
            _A30BB6F62_2388:
            ; //	asm	nop				
00B95:      	nop
            ; //_A30BB6F62_2389:;				
            _A30BB6F62_2389:
            ; //	asm set io[0x09].b14;			
00B96:      	set io[0x09].b14//
            ; //_A30BB6F62_2390:;				
            _A30BB6F62_2390:
            ; //	asm	nop				
00B97:      	nop
            ; //_A30BB6F62_2391:;				
            _A30BB6F62_2391:
            ; //	asm	nop				
00B98:      	nop
            ; //_A30BB6F62_2392:;				
            _A30BB6F62_2392:
            ; //	asm	nop				
00B99:      	nop
            ; //_A30BB6F62_2393:;				
            _A30BB6F62_2393:
            ; //	asm clr io[0x09].b14;			
00B9A:      	clr io[0x09].b14//
            ; //_A30BB6F62_2394:;				
            _A30BB6F62_2394:
            ; //	asm	nop				
00B9B:      	nop
            ; //_A30BB6F62_2395:;				
            _A30BB6F62_2395:
            ; //	asm	nop				
00B9C:      	nop
            ; //_A30BB6F62_2396:;				
            _A30BB6F62_2396:
            ; //	asm	nop				
00B9D:      	nop
            ; //_A30BB6F62_2397:;				
            _A30BB6F62_2397:
            ; //	asm	nop				
00B9E:      	nop
            ; //_A30BB6F62_2398:;				
            _A30BB6F62_2398:
            ; //	asm	nop				
00B9F:      	nop
            ; //_A30BB6F62_2399:;				
            _A30BB6F62_2399:
            ; //	asm	nop				
00BA0:      	nop
            ; //_A30BB6F62_2400:;				
            _A30BB6F62_2400:
            ; //	asm	nop				
00BA1:      	nop
            ; //_A30BB6F62_2401:;				
            _A30BB6F62_2401:
            ; //	asm	nop				
00BA2:      	nop
            ; //_A30BB6F62_2402:;				
            _A30BB6F62_2402:
            ; //	asm	nop				
00BA3:      	nop
            ; //_A30BB6F62_2403:;				
            _A30BB6F62_2403:
            ; //	asm	nop				
00BA4:      	nop
            ; //_A30BB6F62_2404:;				
            _A30BB6F62_2404:
            ; //	asm	nop				
00BA5:      	nop
            ; //_A30BB6F62_2405:;				
            _A30BB6F62_2405:
            ; //	asm	nop				
00BA6:      	nop
            ; //_A30BB6F62_2406:;				
            _A30BB6F62_2406:
            ; //	asm set io[0x09].b14;			
00BA7:      	set io[0x09].b14//
            ; //_A30BB6F62_2407:;				
            _A30BB6F62_2407:
            ; //	asm	nop				
00BA8:      	nop
            ; //_A30BB6F62_2408:;				
            _A30BB6F62_2408:
            ; //	asm	nop				
00BA9:      	nop
            ; //_A30BB6F62_2409:;				
            _A30BB6F62_2409:
            ; //	asm	nop				
00BAA:      	nop
            ; //_A30BB6F62_2410:;				
            _A30BB6F62_2410:
            ; //	asm clr io[0x09].b14;			
00BAB:      	clr io[0x09].b14//
            ; //_A30BB6F62_2411:;				
            _A30BB6F62_2411:
            ; //	asm	nop				
00BAC:      	nop
            ; //_A30BB6F62_2412:;				
            _A30BB6F62_2412:
            ; //	asm	nop				
00BAD:      	nop
            ; //_A30BB6F62_2413:;				
            _A30BB6F62_2413:
            ; //	asm	nop				
00BAE:      	nop
            ; //_A30BB6F62_2414:;				
            _A30BB6F62_2414:
            ; //	asm	nop				
00BAF:      	nop
            ; //_A30BB6F62_2415:;				
            _A30BB6F62_2415:
            ; //	asm	nop				
00BB0:      	nop
            ; //_A30BB6F62_2416:;				
            _A30BB6F62_2416:
            ; //	asm	nop				
00BB1:      	nop
            ; //_A30BB6F62_2417:;				
            _A30BB6F62_2417:
            ; //	asm	nop				
00BB2:      	nop
            ; //_A30BB6F62_2418:;				
            _A30BB6F62_2418:
            ; //	asm	nop				
00BB3:      	nop
            ; //_A30BB6F62_2419:;				
            _A30BB6F62_2419:
            ; //	asm	nop				
00BB4:      	nop
            ; //_A30BB6F62_2420:;				
            _A30BB6F62_2420:
            ; //	asm	nop				
00BB5:      	nop
            ; //_A30BB6F62_2421:;				
            _A30BB6F62_2421:
            ; //	asm	nop				
00BB6:      	nop
            ; //_A30BB6F62_2422:;				
            _A30BB6F62_2422:
            ; //	asm	nop				
00BB7:      	nop
            ; //_A30BB6F62_2423:;				
            _A30BB6F62_2423:
            ; //	asm set io[0x09].b14;			
00BB8:      	set io[0x09].b14//
            ; //_A30BB6F62_2424:;				
            _A30BB6F62_2424:
            ; //	asm	nop				
00BB9:      	nop
            ; //_A30BB6F62_2425:;				
            _A30BB6F62_2425:
            ; //	asm	nop				
00BBA:      	nop
            ; //_A30BB6F62_2426:;				
            _A30BB6F62_2426:
            ; //	asm	nop				
00BBB:      	nop
            ; //_A30BB6F62_2427:;				
            _A30BB6F62_2427:
            ; //	asm clr io[0x09].b14;			
00BBC:      	clr io[0x09].b14//
            ; //_A30BB6F62_2428:;				
            _A30BB6F62_2428:
            ; //	asm	nop				
00BBD:      	nop
            ; //_A30BB6F62_2429:;				
            _A30BB6F62_2429:
            ; //	asm	nop				
00BBE:      	nop
            ; //_A30BB6F62_2430:;				
            _A30BB6F62_2430:
            ; //	asm	nop				
00BBF:      	nop
            ; //_A30BB6F62_2431:;				
            _A30BB6F62_2431:
            ; //	asm	nop				
00BC0:      	nop
            ; //_A30BB6F62_2432:;				
            _A30BB6F62_2432:
            ; //	asm	nop				
00BC1:      	nop
            ; //_A30BB6F62_2433:;				
            _A30BB6F62_2433:
            ; //	asm	nop				
00BC2:      	nop
            ; //_A30BB6F62_2434:;				
            _A30BB6F62_2434:
            ; //	asm	nop				
00BC3:      	nop
            ; //_A30BB6F62_2435:;				
            _A30BB6F62_2435:
            ; //	asm	nop				
00BC4:      	nop
            ; //_A30BB6F62_2436:;				
            _A30BB6F62_2436:
            ; //	asm	nop				
00BC5:      	nop
            ; //_A30BB6F62_2437:;				
            _A30BB6F62_2437:
            ; //	asm	nop				
00BC6:      	nop
            ; //_A30BB6F62_2438:;				
            _A30BB6F62_2438:
            ; //	asm	nop				
00BC7:      	nop
            ; //_A30BB6F62_2439:;				
            _A30BB6F62_2439:
            ; //	asm	nop				
00BC8:      	nop
            ; //_A30BB6F62_2440:;				
            _A30BB6F62_2440:
            ; //	asm set io[0x09].b14;			
00BC9:      	set io[0x09].b14//
            ; //_A30BB6F62_2441:;				
            _A30BB6F62_2441:
            ; //	asm	nop				
00BCA:      	nop
            ; //_A30BB6F62_2442:;				
            _A30BB6F62_2442:
            ; //	asm	nop				
00BCB:      	nop
            ; //_A30BB6F62_2443:;				
            _A30BB6F62_2443:
            ; //	asm	nop				
00BCC:      	nop
            ; //_A30BB6F62_2444:;				
            _A30BB6F62_2444:
            ; //	asm	nop				
00BCD:      	nop
            ; //_A30BB6F62_2445:;				
            _A30BB6F62_2445:
            ; //	asm	nop				
00BCE:      	nop
            ; //_A30BB6F62_2446:;				
            _A30BB6F62_2446:
            ; //	asm	nop				
00BCF:      	nop
            ; //_A30BB6F62_2447:;				
            _A30BB6F62_2447:
            ; //	asm	nop				
00BD0:      	nop
            ; //_A30BB6F62_2448:;				
            _A30BB6F62_2448:
            ; //	asm	nop				
00BD1:      	nop
            ; //_A30BB6F62_2449:;				
            _A30BB6F62_2449:
            ; //	asm	nop				
00BD2:      	nop
            ; //_A30BB6F62_2450:;				
            _A30BB6F62_2450:
            ; //	asm	nop				
00BD3:      	nop
            ; //_A30BB6F62_2451:;				
            _A30BB6F62_2451:
            ; //	asm	nop				
00BD4:      	nop
            ; //_A30BB6F62_2452:;				
            _A30BB6F62_2452:
            ; //	asm	nop				
00BD5:      	nop
            ; //_A30BB6F62_2453:;				
            _A30BB6F62_2453:
            ; //	asm clr io[0x09].b14;			
00BD6:      	clr io[0x09].b14//
            ; //_A30BB6F62_2454:;				
            _A30BB6F62_2454:
            ; //	asm	nop				
00BD7:      	nop
            ; //_A30BB6F62_2455:;				
            _A30BB6F62_2455:
            ; //	asm	nop				
00BD8:      	nop
            ; //_A30BB6F62_2456:;				
            _A30BB6F62_2456:
            ; //	asm	nop				
00BD9:      	nop
            ; //_A30BB6F62_2457:;				
            _A30BB6F62_2457:
            ; //	asm set io[0x09].b14;			
00BDA:      	set io[0x09].b14//
            ; //_A30BB6F62_2458:;				
            _A30BB6F62_2458:
            ; //	asm	nop				
00BDB:      	nop
            ; //_A30BB6F62_2459:;				
            _A30BB6F62_2459:
            ; //	asm	nop				
00BDC:      	nop
            ; //_A30BB6F62_2460:;				
            _A30BB6F62_2460:
            ; //	asm	nop				
00BDD:      	nop
            ; //_A30BB6F62_2461:;				
            _A30BB6F62_2461:
            ; //	asm	nop				
00BDE:      	nop
            ; //_A30BB6F62_2462:;				
            _A30BB6F62_2462:
            ; //	asm	nop				
00BDF:      	nop
            ; //_A30BB6F62_2463:;				
            _A30BB6F62_2463:
            ; //	asm	nop				
00BE0:      	nop
            ; //_A30BB6F62_2464:;				
            _A30BB6F62_2464:
            ; //	asm	nop				
00BE1:      	nop
            ; //_A30BB6F62_2465:;				
            _A30BB6F62_2465:
            ; //	asm	nop				
00BE2:      	nop
            ; //_A30BB6F62_2466:;				
            _A30BB6F62_2466:
            ; //	asm	nop				
00BE3:      	nop
            ; //_A30BB6F62_2467:;				
            _A30BB6F62_2467:
            ; //	asm	nop				
00BE4:      	nop
            ; //_A30BB6F62_2468:;				
            _A30BB6F62_2468:
            ; //	asm	nop				
00BE5:      	nop
            ; //_A30BB6F62_2469:;				
            _A30BB6F62_2469:
            ; //	asm	nop				
00BE6:      	nop
            ; //_A30BB6F62_2470:;				
            _A30BB6F62_2470:
            ; //	asm clr io[0x09].b14;			
00BE7:      	clr io[0x09].b14//
            ; //_A30BB6F62_2471:;				
            _A30BB6F62_2471:
            ; //	asm	nop				
00BE8:      	nop
            ; //_A30BB6F62_2472:;				
            _A30BB6F62_2472:
            ; //	asm	nop				
00BE9:      	nop
            ; //_A30BB6F62_2473:;				
            _A30BB6F62_2473:
            ; //	asm	nop				
00BEA:      	nop
            ; //_A30BB6F62_2474:;				
            _A30BB6F62_2474:
            ; //	asm set io[0x09].b14;			
00BEB:      	set io[0x09].b14//
            ; //_A30BB6F62_2475:;				
            _A30BB6F62_2475:
            ; //	asm	nop				
00BEC:      	nop
            ; //_A30BB6F62_2476:;				
            _A30BB6F62_2476:
            ; //	asm	nop				
00BED:      	nop
            ; //_A30BB6F62_2477:;				
            _A30BB6F62_2477:
            ; //	asm	nop				
00BEE:      	nop
            ; //_A30BB6F62_2478:;				
            _A30BB6F62_2478:
            ; //	asm	nop				
00BEF:      	nop
            ; //_A30BB6F62_2479:;				
            _A30BB6F62_2479:
            ; //	asm	nop				
00BF0:      	nop
            ; //_A30BB6F62_2480:;				
            _A30BB6F62_2480:
            ; //	asm	nop				
00BF1:      	nop
            ; //_A30BB6F62_2481:;				
            _A30BB6F62_2481:
            ; //	asm	nop				
00BF2:      	nop
            ; //_A30BB6F62_2482:;				
            _A30BB6F62_2482:
            ; //	asm	nop				
00BF3:      	nop
            ; //_A30BB6F62_2483:;				
            _A30BB6F62_2483:
            ; //	asm	nop				
00BF4:      	nop
            ; //_A30BB6F62_2484:;				
            _A30BB6F62_2484:
            ; //	asm	nop				
00BF5:      	nop
            ; //_A30BB6F62_2485:;				
            _A30BB6F62_2485:
            ; //	asm	nop				
00BF6:      	nop
            ; //_A30BB6F62_2486:;				
            _A30BB6F62_2486:
            ; //	asm	nop				
00BF7:      	nop
            ; //_A30BB6F62_2487:;				
            _A30BB6F62_2487:
            ; //	asm clr io[0x09].b14;			
00BF8:      	clr io[0x09].b14//
            ; //_A30BB6F62_2488:;				
            _A30BB6F62_2488:
            ; //	asm	nop				
00BF9:      	nop
            ; //_A30BB6F62_2489:;				
            _A30BB6F62_2489:
            ; //	asm	nop				
00BFA:      	nop
            ; //_A30BB6F62_2490:;				
            _A30BB6F62_2490:
            ; //	asm	nop				
00BFB:      	nop
            ; //_A30BB6F62_2491:;				
            _A30BB6F62_2491:
            ; //	asm set io[0x09].b14;			
00BFC:      	set io[0x09].b14//
            ; //_A30BB6F62_2492:;				
            _A30BB6F62_2492:
            ; //	asm	nop				
00BFD:      	nop
            ; //_A30BB6F62_2493:;				
            _A30BB6F62_2493:
            ; //	asm	nop				
00BFE:      	nop
            ; //_A30BB6F62_2494:;				
            _A30BB6F62_2494:
            ; //	asm	nop				
00BFF:      	nop
            ; //_A30BB6F62_2495:;				
            _A30BB6F62_2495:
            ; //	asm	nop				
00C00:      	nop
            ; //_A30BB6F62_2496:;				
            _A30BB6F62_2496:
            ; //	asm	nop				
00C01:      	nop
            ; //_A30BB6F62_2497:;				
            _A30BB6F62_2497:
            ; //	asm	nop				
00C02:      	nop
            ; //_A30BB6F62_2498:;				
            _A30BB6F62_2498:
            ; //	asm	nop				
00C03:      	nop
            ; //_A30BB6F62_2499:;				
            _A30BB6F62_2499:
            ; //	asm	nop				
00C04:      	nop
            ; //_A30BB6F62_2500:;				
            _A30BB6F62_2500:
            ; //	asm	nop				
00C05:      	nop
            ; //_A30BB6F62_2501:;				
            _A30BB6F62_2501:
            ; //	asm	nop				
00C06:      	nop
            ; //_A30BB6F62_2502:;				
            _A30BB6F62_2502:
            ; //	asm	nop				
00C07:      	nop
            ; //_A30BB6F62_2503:;				
            _A30BB6F62_2503:
            ; //	asm	nop				
00C08:      	nop
            ; //_A30BB6F62_2504:;				
            _A30BB6F62_2504:
            ; //	asm clr io[0x09].b14;			
00C09:      	clr io[0x09].b14//
            ; //_A30BB6F62_2505:;				
            _A30BB6F62_2505:
            ; //	asm	nop				
00C0A:      	nop
            ; //_A30BB6F62_2506:;				
            _A30BB6F62_2506:
            ; //	asm	nop				
00C0B:      	nop
            ; //_A30BB6F62_2507:;				
            _A30BB6F62_2507:
            ; //	asm	nop				
00C0C:      	nop
            ; //_A30BB6F62_2508:;				
            _A30BB6F62_2508:
            ; //	asm set io[0x09].b14;			
00C0D:      	set io[0x09].b14//
            ; //_A30BB6F62_2509:;				
            _A30BB6F62_2509:
            ; //	asm	nop				
00C0E:      	nop
            ; //_A30BB6F62_2510:;				
            _A30BB6F62_2510:
            ; //	asm	nop				
00C0F:      	nop
            ; //_A30BB6F62_2511:;				
            _A30BB6F62_2511:
            ; //	asm	nop				
00C10:      	nop
            ; //_A30BB6F62_2512:;				
            _A30BB6F62_2512:
            ; //	asm	nop				
00C11:      	nop
            ; //_A30BB6F62_2513:;				
            _A30BB6F62_2513:
            ; //	asm	nop				
00C12:      	nop
            ; //_A30BB6F62_2514:;				
            _A30BB6F62_2514:
            ; //	asm	nop				
00C13:      	nop
            ; //_A30BB6F62_2515:;				
            _A30BB6F62_2515:
            ; //	asm	nop				
00C14:      	nop
            ; //_A30BB6F62_2516:;				
            _A30BB6F62_2516:
            ; //	asm	nop				
00C15:      	nop
            ; //_A30BB6F62_2517:;				
            _A30BB6F62_2517:
            ; //	asm	nop				
00C16:      	nop
            ; //_A30BB6F62_2518:;				
            _A30BB6F62_2518:
            ; //	asm	nop				
00C17:      	nop
            ; //_A30BB6F62_2519:;				
            _A30BB6F62_2519:
            ; //	asm	nop				
00C18:      	nop
            ; //_A30BB6F62_2520:;				
            _A30BB6F62_2520:
            ; //	asm	nop				
00C19:      	nop
            ; //_A30BB6F62_2521:;				
            _A30BB6F62_2521:
            ; //	asm clr io[0x09].b14;			
00C1A:      	clr io[0x09].b14//
            ; //_A30BB6F62_2522:;				
            _A30BB6F62_2522:
            ; //	asm	nop				
00C1B:      	nop
            ; //_A30BB6F62_2523:;				
            _A30BB6F62_2523:
            ; //	asm	nop				
00C1C:      	nop
            ; //_A30BB6F62_2524:;				
            _A30BB6F62_2524:
            ; //	asm	nop				
00C1D:      	nop
            ; //_A30BB6F62_2525:;				
            _A30BB6F62_2525:
            ; //	asm set io[0x09].b14;			
00C1E:      	set io[0x09].b14//
            ; //_A30BB6F62_2526:;				
            _A30BB6F62_2526:
            ; //	asm	nop				
00C1F:      	nop
            ; //_A30BB6F62_2527:;				
            _A30BB6F62_2527:
            ; //	asm	nop				
00C20:      	nop
            ; //_A30BB6F62_2528:;				
            _A30BB6F62_2528:
            ; //	asm	nop				
00C21:      	nop
            ; //_A30BB6F62_2529:;				
            _A30BB6F62_2529:
            ; //	asm	nop				
00C22:      	nop
            ; //_A30BB6F62_2530:;				
            _A30BB6F62_2530:
            ; //	asm	nop				
00C23:      	nop
            ; //_A30BB6F62_2531:;				
            _A30BB6F62_2531:
            ; //	asm	nop				
00C24:      	nop
            ; //_A30BB6F62_2532:;				
            _A30BB6F62_2532:
            ; //	asm	nop				
00C25:      	nop
            ; //_A30BB6F62_2533:;				
            _A30BB6F62_2533:
            ; //	asm	nop				
00C26:      	nop
            ; //_A30BB6F62_2534:;				
            _A30BB6F62_2534:
            ; //	asm	nop				
00C27:      	nop
            ; //_A30BB6F62_2535:;				
            _A30BB6F62_2535:
            ; //	asm	nop				
00C28:      	nop
            ; //_A30BB6F62_2536:;				
            _A30BB6F62_2536:
            ; //	asm	nop				
00C29:      	nop
            ; //_A30BB6F62_2537:;				
            _A30BB6F62_2537:
            ; //	asm	nop				
00C2A:      	nop
            ; //_A30BB6F62_2538:;				
            _A30BB6F62_2538:
            ; //	asm clr io[0x09].b14;			
00C2B:      	clr io[0x09].b14//
            ; //_A30BB6F62_2539:;				
            _A30BB6F62_2539:
            ; //	asm	nop				
00C2C:      	nop
            ; //_A30BB6F62_2540:;				
            _A30BB6F62_2540:
            ; //	asm	nop				
00C2D:      	nop
            ; //_A30BB6F62_2541:;				
            _A30BB6F62_2541:
            ; //	asm	nop				
00C2E:      	nop
            ; //_A30BB6F62_2542:;				
            _A30BB6F62_2542:
            ; //	asm set io[0x09].b14;			
00C2F:      	set io[0x09].b14//
            ; //_A30BB6F62_2543:;				
            _A30BB6F62_2543:
            ; //	asm	nop				
00C30:      	nop
            ; //_A30BB6F62_2544:;				
            _A30BB6F62_2544:
            ; //	asm	nop				
00C31:      	nop
            ; //_A30BB6F62_2545:;				
            _A30BB6F62_2545:
            ; //	asm	nop				
00C32:      	nop
            ; //_A30BB6F62_2546:;				
            _A30BB6F62_2546:
            ; //	asm	nop				
00C33:      	nop
            ; //_A30BB6F62_2547:;				
            _A30BB6F62_2547:
            ; //	asm	nop				
00C34:      	nop
            ; //_A30BB6F62_2548:;				
            _A30BB6F62_2548:
            ; //	asm	nop				
00C35:      	nop
            ; //_A30BB6F62_2549:;				
            _A30BB6F62_2549:
            ; //	asm	nop				
00C36:      	nop
            ; //_A30BB6F62_2550:;				
            _A30BB6F62_2550:
            ; //	asm	nop				
00C37:      	nop
            ; //_A30BB6F62_2551:;				
            _A30BB6F62_2551:
            ; //	asm	nop				
00C38:      	nop
            ; //_A30BB6F62_2552:;				
            _A30BB6F62_2552:
            ; //	asm	nop				
00C39:      	nop
            ; //_A30BB6F62_2553:;				
            _A30BB6F62_2553:
            ; //	asm	nop				
00C3A:      	nop
            ; //_A30BB6F62_2554:;				
            _A30BB6F62_2554:
            ; //	asm	nop				
00C3B:      	nop
            ; //_A30BB6F62_2555:;				
            _A30BB6F62_2555:
            ; //	asm clr io[0x09].b14;			
00C3C:      	clr io[0x09].b14//
            ; //_A30BB6F62_2556:;				
            _A30BB6F62_2556:
            ; //	asm	nop				
00C3D:      	nop
            ; //_A30BB6F62_2557:;				
            _A30BB6F62_2557:
            ; //	asm	nop				
00C3E:      	nop
            ; //_A30BB6F62_2558:;				
            _A30BB6F62_2558:
            ; //	asm	nop				
00C3F:      	nop
            ; //_A30BB6F62_2559:;				
            _A30BB6F62_2559:
            ; //	asm set io[0x09].b14;			
00C40:      	set io[0x09].b14//
            ; //_A30BB6F62_2560:;				
            _A30BB6F62_2560:
            ; //	asm	nop				
00C41:      	nop
            ; //_A30BB6F62_2561:;				
            _A30BB6F62_2561:
            ; //	asm	nop				
00C42:      	nop
            ; //_A30BB6F62_2562:;				
            _A30BB6F62_2562:
            ; //	asm	nop				
00C43:      	nop
            ; //_A30BB6F62_2563:;				
            _A30BB6F62_2563:
            ; //	asm	nop				
00C44:      	nop
            ; //_A30BB6F62_2564:;				
            _A30BB6F62_2564:
            ; //	asm	nop				
00C45:      	nop
            ; //_A30BB6F62_2565:;				
            _A30BB6F62_2565:
            ; //	asm	nop				
00C46:      	nop
            ; //_A30BB6F62_2566:;				
            _A30BB6F62_2566:
            ; //	asm	nop				
00C47:      	nop
            ; //_A30BB6F62_2567:;				
            _A30BB6F62_2567:
            ; //	asm	nop				
00C48:      	nop
            ; //_A30BB6F62_2568:;				
            _A30BB6F62_2568:
            ; //	asm	nop				
00C49:      	nop
            ; //_A30BB6F62_2569:;				
            _A30BB6F62_2569:
            ; //	asm	nop				
00C4A:      	nop
            ; //_A30BB6F62_2570:;				
            _A30BB6F62_2570:
            ; //	asm	nop				
00C4B:      	nop
            ; //_A30BB6F62_2571:;				
            _A30BB6F62_2571:
            ; //	asm	nop				
00C4C:      	nop
            ; //_A30BB6F62_2572:;				
            _A30BB6F62_2572:
            ; //	asm clr io[0x09].b14;			
00C4D:      	clr io[0x09].b14//
            ; //_A30BB6F62_2573:;				
            _A30BB6F62_2573:
            ; //	asm	nop				
00C4E:      	nop
            ; //_A30BB6F62_2574:;				
            _A30BB6F62_2574:
            ; //	asm	nop				
00C4F:      	nop
            ; //_A30BB6F62_2575:;				
            _A30BB6F62_2575:
            ; //	asm	nop				
00C50:      	nop
            ; //_A30BB6F62_2576:;				
            _A30BB6F62_2576:
            ; //	goto LD63FD439_50;			
00C51:      	pch =	LD63FD439_50
00C52:      	ljmp	LD63FD439_50
            ; //LD63FD439_58:;					
            LD63FD439_58:
            ; //_A30BB6F62_2577:;				
            _A30BB6F62_2577:
            ; //	goto LD63FD439_50;			
00C53:      	pch =	LD63FD439_50
00C54:      	ljmp	LD63FD439_50
            ; //	goto LD63FD439_50;			
00C55:      	pch =	LD63FD439_50
00C56:      	ljmp	LD63FD439_50
            ; //LD63FD439_51:;					
            LD63FD439_51:
            ; //	sCX	= sAX;				
00C57:      	AR	= AX
00C58:      	CX	= AR
            ; //	sAX	= 0x0000;			
00C59:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00C5A:      	pch	= sfx_CMP_AX_CX_JE
00C5B:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_59;	
00C5C:      	if NZ	jmp LD63FD439_59
            ; //	goto LD63FD439_52;			
00C5D:      	pch =	LD63FD439_52
00C5E:      	ljmp	LD63FD439_52
            ; //LD63FD439_59:;					
            LD63FD439_59:
            ; //	sAX	= 0x0001;			
00C5F:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00C60:      	pch	= sfx_CMP_AX_CX_JE
00C61:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_60;	
00C62:      	if NZ	jmp LD63FD439_60
            ; //	goto LD63FD439_53;			
00C63:      	pch =	LD63FD439_53
00C64:      	ljmp	LD63FD439_53
            ; //LD63FD439_60:;					
            LD63FD439_60:
            ; //	sAX	= 0x0003;			
00C65:      	AX	= 0x03
            ; //	sfx_CMP_AX_CX_JE();			
00C66:      	pch	= sfx_CMP_AX_CX_JE
00C67:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_61;	
00C68:      	if NZ	jmp LD63FD439_61
            ; //	goto LD63FD439_54;			
00C69:      	pch =	LD63FD439_54
00C6A:      	ljmp	LD63FD439_54
            ; //LD63FD439_61:;					
            LD63FD439_61:
            ; //	sAX	= 0x0002;			
00C6B:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
00C6C:      	pch	= sfx_CMP_AX_CX_JE
00C6D:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_62;	
00C6E:      	if NZ	jmp LD63FD439_62
            ; //	goto LD63FD439_55;			
00C6F:      	pch =	LD63FD439_55
00C70:      	ljmp	LD63FD439_55
            ; //LD63FD439_62:;					
            LD63FD439_62:
            ; //	sAX	= 0x0005;			
00C71:      	AX	= 0x05
            ; //	sfx_CMP_AX_CX_JE();			
00C72:      	pch	= sfx_CMP_AX_CX_JE
00C73:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_63;	
00C74:      	if NZ	jmp LD63FD439_63
            ; //	goto LD63FD439_56;			
00C75:      	pch =	LD63FD439_56
00C76:      	ljmp	LD63FD439_56
            ; //LD63FD439_63:;					
            LD63FD439_63:
            ; //	sAX	= 0x0004;			
00C77:      	AX	= 0x04
            ; //	sfx_CMP_AX_CX_JE();			
00C78:      	pch	= sfx_CMP_AX_CX_JE
00C79:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_64;	
00C7A:      	if NZ	jmp LD63FD439_64
            ; //	goto LD63FD439_57;			
00C7B:      	pch =	LD63FD439_57
00C7C:      	ljmp	LD63FD439_57
            ; //LD63FD439_64:;					
            LD63FD439_64:
            ; //	goto	LD63FD439_58;			
00C7D:      	pch =	LD63FD439_58
00C7E:      	ljmp	LD63FD439_58
            ; //LD63FD439_50:;					
            LD63FD439_50:
            ; //	goto LD63FD439_48;			
00C7F:      	pch =	LD63FD439_48
00C80:      	ljmp	LD63FD439_48
            ; //LD63FD439_47:;					
            LD63FD439_47:
            ; //_A30BB6F62_2578:;				
            _A30BB6F62_2578:
            ; //LD63FD439_44:;					
            LD63FD439_44:
            ; //_A30BB6F62_2579:;				
            _A30BB6F62_2579:
            ; //	return;					
00C81:      	AR	= 1
00C82:      	BP	+= AR
00C83:      	pop	AR
00C84:      	rm[BP_SAVE]	= AR
00C85:      	rets
            ; //_WS_TRSF_color_setE1CC300C_end:;		
            _WS_TRSF_color_setE1CC300C_end:
            ; //_A30BB6F62_2580:;				
            _A30BB6F62_2580:
            ; //}
            ; //
            ; //void _WS_RefreshAD7B99B1()			
            _WS_RefreshAD7B99B1:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00C86:      	AR	= rm[BP_SAVE]
00C87:      	push	AR
00C88:      	AR	= BP
00C89:      	rm[BP_SAVE]	= AR
00C8A:      	AR	 = -1
00C8B:      	BP	+= AR
            ; //_A30BB6F62_2581:;				
            _A30BB6F62_2581:
            ; //_A30BB6F62_2582:;				
            _A30BB6F62_2582:
            ; //	_i_1_2+0	= 0x00;			
00C8C:      	I1	= rm[BP_SAVE]
00C8D:      	AR	= 0x00
00C8E:      	rm[I1]	= AR
            ; //LD63FD439_66:;					
            LD63FD439_66:
            ; //	sSI	= (int)&_i_1_2;			
00C8F:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00C90:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00C91:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00C92:      	pch	= sfx_CMP_AX_CX_JBE
00C93:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_70;	
00C94:      	if ZR	jmp LD63FD439_70
            ; //	goto	LD63FD439_68;			
00C95:      	pch =	LD63FD439_68
00C96:      	ljmp	LD63FD439_68
            ; //LD63FD439_70:;					
            LD63FD439_70:
            ; //	goto LD63FD439_67;			
00C97:      	pch =	LD63FD439_67
00C98:      	ljmp	LD63FD439_67
            ; //LD63FD439_69:;					
            LD63FD439_69:
            ; //	sSI	= (int)&_i_1_2;			
00C99:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00C9A:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00C9B:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00C9C:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00C9D:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00C9E:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_66;			
00C9F:      	pch =	LD63FD439_66
00CA0:      	ljmp	LD63FD439_66
            ; //LD63FD439_67:;					
            LD63FD439_67:
            ; //	
            ; //_A30BB6F62_2583:;				
            _A30BB6F62_2583:
            ; //_A30BB6F62_2584:;				
            _A30BB6F62_2584:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00CA1:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00CA2:      	push	AX
            ; //	sSI	= (int)&_i_1_2;			
00CA3:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00CA4:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
00CA5:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
00CA6:      	pch	= sfx_IMUL_AX_CX
00CA7:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00CA8:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00CA9:      	AR	= CX
00CAA:      	AX	+= AR
            ; //	sSI	= sAX;				
00CAB:      	AR	= AX
00CAC:      	I1	= AR
            ; //	sAX	= *(__int16*)sSI++;		
00CAD:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00CAE:      	DX	= rm[I1--]
            ; //	PUSH(sAX);				
00CAF:      	push	AX
            ; //	_WS_Send24bits851C5C55(STACK[sSP + 0]);	
00CB0:      	pch	= _WS_Send24bits851C5C55
00CB1:      	lcall	_WS_Send24bits851C5C55
            ; //	RESTORESP(1);				
00CB2:      	pop	AR
            ; //	goto LD63FD439_69;			
00CB3:      	pch =	LD63FD439_69
00CB4:      	ljmp	LD63FD439_69
            ; //LD63FD439_68:;					
            LD63FD439_68:
            ; //_A30BB6F62_2585:;				
            _A30BB6F62_2585:
            ; //_A30BB6F62_2586:;				
            _A30BB6F62_2586:
            ; //	asm clr io[0x09].b14;			
00CB5:      	clr io[0x09].b14//
            ; //LD63FD439_65:;					
            LD63FD439_65:
            ; //_A30BB6F62_2587:;				
            _A30BB6F62_2587:
            ; //	return;					
00CB6:      	AR	= 1
00CB7:      	BP	+= AR
00CB8:      	pop	AR
00CB9:      	rm[BP_SAVE]	= AR
00CBA:      	rets
            ; //_WS_RefreshAD7B99B1_end:;			
            _WS_RefreshAD7B99B1_end:
            ; //_A30BB6F62_2588:;				
            _A30BB6F62_2588:
            ; //}
            ; //
            ; //void _WS_Key_RGBC5B96B6D()			
            _WS_Key_RGBC5B96B6D:
            ; //{
            ; //_A30BB6F62_2589:;				
            _A30BB6F62_2589:
            ; //	
            ; //_A30BB6F62_2590:;				
            _A30BB6F62_2590:
            ; //	asm I1 = LD63FD439_72+0;		
00CBB:      	I1 = LD63FD439_72+0//
            ; //	sAX	= *(__int16*)sSI;		
00CBC:      	AX	= rm[I1]
            ; //	goto LD63FD439_74;			
00CBD:      	pch =	LD63FD439_74
00CBE:      	ljmp	LD63FD439_74
            ; //LD63FD439_75:;					
            LD63FD439_75:
            ; //_A30BB6F62_2591:;				
            _A30BB6F62_2591:
            ; //_A30BB6F62_2592:;				
            _A30BB6F62_2592:
            ; //	sAX	= 0x0000;			
00CBF:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CC0:      	push	AX
            ; //	sAX	= 0x0003;			
00CC1:      	AX	= 0x03
            ; //	PUSH(sAX);				
00CC2:      	push	AX
            ; //	sAX	= 0x0000;			
00CC3:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CC4:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00CC5:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00CC6:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00CC7:      	AR	= 3
00CC8:      	BP	+= AR
            ; //_A30BB6F62_2593:;				
            _A30BB6F62_2593:
            ; //_A30BB6F62_2594:;				
            _A30BB6F62_2594:
            ; //	_WS_RefreshAD7B99B1();			
00CC9:      	pch	= _WS_RefreshAD7B99B1
00CCA:      	lcall	_WS_RefreshAD7B99B1
            ; //_A30BB6F62_2595:;				
            _A30BB6F62_2595:
            ; //_A30BB6F62_2596:;				
            _A30BB6F62_2596:
            ; //	sAX	= 0x0000;			
00CCB:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CCC:      	push	AX
            ; //	sAX	= 0x0003;			
00CCD:      	AX	= 0x03
            ; //	PUSH(sAX);				
00CCE:      	push	AX
            ; //	sAX	= 0x0000;			
00CCF:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CD0:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00CD1:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00CD2:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00CD3:      	AR	= 3
00CD4:      	BP	+= AR
            ; //_A30BB6F62_2597:;				
            _A30BB6F62_2597:
            ; //_A30BB6F62_2598:;				
            _A30BB6F62_2598:
            ; //	_WS_RefreshAD7B99B1();			
00CD5:      	pch	= _WS_RefreshAD7B99B1
00CD6:      	lcall	_WS_RefreshAD7B99B1
            ; //_A30BB6F62_2599:;				
            _A30BB6F62_2599:
            ; //	goto LD63FD439_73;			
00CD7:      	pch =	LD63FD439_73
00CD8:      	ljmp	LD63FD439_73
            ; //LD63FD439_76:;					
            LD63FD439_76:
            ; //_A30BB6F62_2600:;				
            _A30BB6F62_2600:
            ; //_A30BB6F62_2601:;				
            _A30BB6F62_2601:
            ; //	sAX	= 0x0000;			
00CD9:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CDA:      	push	AX
            ; //	sAX	= 0x0003;			
00CDB:      	AX	= 0x03
            ; //	PUSH(sAX);				
00CDC:      	push	AX
            ; //	sAX	= 0x0000;			
00CDD:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CDE:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00CDF:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00CE0:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00CE1:      	AR	= 3
00CE2:      	BP	+= AR
            ; //_A30BB6F62_2602:;				
            _A30BB6F62_2602:
            ; //_A30BB6F62_2603:;				
            _A30BB6F62_2603:
            ; //	_WS_RefreshAD7B99B1();			
00CE3:      	pch	= _WS_RefreshAD7B99B1
00CE4:      	lcall	_WS_RefreshAD7B99B1
            ; //_A30BB6F62_2604:;				
            _A30BB6F62_2604:
            ; //_A30BB6F62_2605:;				
            _A30BB6F62_2605:
            ; //	sAX	= 0x001F;			
00CE5:      	AX	= 0x1F
            ; //	PUSH(sAX);				
00CE6:      	push	AX
            ; //	sAX	= 0x0006;			
00CE7:      	AX	= 0x06
            ; //	PUSH(sAX);				
00CE8:      	push	AX
            ; //	sAX	= 0x0004;			
00CE9:      	AX	= 0x04
            ; //	PUSH(sAX);				
00CEA:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00CEB:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00CEC:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00CED:      	AR	= 3
00CEE:      	BP	+= AR
            ; //_A30BB6F62_2606:;				
            _A30BB6F62_2606:
            ; //_A30BB6F62_2607:;				
            _A30BB6F62_2607:
            ; //	_WS_RefreshAD7B99B1();			
00CEF:      	pch	= _WS_RefreshAD7B99B1
00CF0:      	lcall	_WS_RefreshAD7B99B1
            ; //_A30BB6F62_2608:;				
            _A30BB6F62_2608:
            ; //	goto LD63FD439_73;			
00CF1:      	pch =	LD63FD439_73
00CF2:      	ljmp	LD63FD439_73
            ; //LD63FD439_77:;					
            LD63FD439_77:
            ; //_A30BB6F62_2609:;				
            _A30BB6F62_2609:
            ; //_A30BB6F62_2610:;				
            _A30BB6F62_2610:
            ; //	sAX	= 0x0000;			
00CF3:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CF4:      	push	AX
            ; //	sAX	= 0x0003;			
00CF5:      	AX	= 0x03
            ; //	PUSH(sAX);				
00CF6:      	push	AX
            ; //	sAX	= 0x0000;			
00CF7:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CF8:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00CF9:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00CFA:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00CFB:      	AR	= 3
00CFC:      	BP	+= AR
            ; //_A30BB6F62_2611:;				
            _A30BB6F62_2611:
            ; //_A30BB6F62_2612:;				
            _A30BB6F62_2612:
            ; //	_WS_RefreshAD7B99B1();			
00CFD:      	pch	= _WS_RefreshAD7B99B1
00CFE:      	lcall	_WS_RefreshAD7B99B1
            ; //_A30BB6F62_2613:;				
            _A30BB6F62_2613:
            ; //_A30BB6F62_2614:;				
            _A30BB6F62_2614:
            ; //	sAX	= 0xFF00;			
00CFF:      	AX	= 0xFF00
            ; //	PUSH(sAX);				
00D01:      	push	AX
            ; //	sAX	= 0x000A;			
00D02:      	AX	= 0x0A
            ; //	PUSH(sAX);				
00D03:      	push	AX
            ; //	sAX	= 0x0007;			
00D04:      	AX	= 0x07
            ; //	PUSH(sAX);				
00D05:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D06:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D07:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D08:      	AR	= 3
00D09:      	BP	+= AR
            ; //_A30BB6F62_2615:;				
            _A30BB6F62_2615:
            ; //_A30BB6F62_2616:;				
            _A30BB6F62_2616:
            ; //	_WS_RefreshAD7B99B1();			
00D0A:      	pch	= _WS_RefreshAD7B99B1
00D0B:      	lcall	_WS_RefreshAD7B99B1
            ; //_A30BB6F62_2617:;				
            _A30BB6F62_2617:
            ; //	goto LD63FD439_73;			
00D0C:      	pch =	LD63FD439_73
00D0D:      	ljmp	LD63FD439_73
            ; //	goto LD63FD439_73;			
00D0E:      	pch =	LD63FD439_73
00D0F:      	ljmp	LD63FD439_73
            ; //LD63FD439_74:;					
            LD63FD439_74:
            ; //	sCX	= sAX;				
00D10:      	AR	= AX
00D11:      	CX	= AR
            ; //	sAX	= 0x0000;			
00D12:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_U_JE();			
00D13:      	pch	= sfx_CMP_AX_CX_U_JE
00D14:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_78;	
00D15:      	if NZ	jmp LD63FD439_78
            ; //	goto LD63FD439_75;			
00D16:      	pch =	LD63FD439_75
00D17:      	ljmp	LD63FD439_75
            ; //LD63FD439_78:;					
            LD63FD439_78:
            ; //	sAX	= 0x0001;			
00D18:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_U_JE();			
00D19:      	pch	= sfx_CMP_AX_CX_U_JE
00D1A:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_79;	
00D1B:      	if NZ	jmp LD63FD439_79
            ; //	goto LD63FD439_76;			
00D1C:      	pch =	LD63FD439_76
00D1D:      	ljmp	LD63FD439_76
            ; //LD63FD439_79:;					
            LD63FD439_79:
            ; //	sAX	= 0x0002;			
00D1E:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_U_JE();			
00D1F:      	pch	= sfx_CMP_AX_CX_U_JE
00D20:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_80;	
00D21:      	if NZ	jmp LD63FD439_80
            ; //	goto LD63FD439_77;			
00D22:      	pch =	LD63FD439_77
00D23:      	ljmp	LD63FD439_77
            ; //LD63FD439_80:;					
            LD63FD439_80:
            ; //	goto	LD63FD439_73;			
00D24:      	pch =	LD63FD439_73
00D25:      	ljmp	LD63FD439_73
            ; //LD63FD439_73:;					
            LD63FD439_73:
            ; //_A30BB6F62_2618:;				
            _A30BB6F62_2618:
            ; //	asm I1 = LD63FD439_72+0;		
00D26:      	I1 = LD63FD439_72+0//
            ; //	sAX	= *(__int16*)sSI;		
00D27:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_72;		
00D28:      	I1	= LD63FD439_72
            ; //	PUSH(sAX);				
00D29:      	push	AX
            ; //	sAX	= 0x0001;			
00D2A:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
00D2B:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
00D2C:      	AR	= AX
00D2D:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
00D2E:      	rm[I1]	= CX
            ; //	sAX	= POP();			
00D2F:      	pop	AX
            ; //_A30BB6F62_2619:;				
            _A30BB6F62_2619:
            ; //	asm I1 = LD63FD439_72+0;		
00D30:      	I1 = LD63FD439_72+0//
            ; //	sAX	= *(__int16*)sSI;		
00D31:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
00D32:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JA();			
00D33:      	pch	= sfx_CMP_AX_CX_JA
00D34:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_82;	
00D35:      	if ZR	jmp LD63FD439_82
            ; //	goto	LD63FD439_81;			
00D36:      	pch =	LD63FD439_81
00D37:      	ljmp	LD63FD439_81
            ; //LD63FD439_82:;					
            LD63FD439_82:
            ; //_A30BB6F62_2620:;				
            _A30BB6F62_2620:
            ; //	LD63FD439_72+0	= 0x00;			
00D38:      	AR	= 0x00
00D39:      	rm[LD63FD439_72+0]	= AR
            ; //LD63FD439_81:;					
            LD63FD439_81:
            ; //_A30BB6F62_2621:;				
            _A30BB6F62_2621:
            ; //_A30BB6F62_2622:;				
            _A30BB6F62_2622:
            ; //_A30BB6F62_2623:;				
            _A30BB6F62_2623:
            ; //	sAX	= 0x0032;			
00D3A:      	AX	= 0x32
            ; //	PUSH(sAX);				
00D3B:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
00D3C:      	pch	= _delay6F9F34ED
00D3D:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
00D3E:      	pop	AR
            ; //LD63FD439_71:;					
            LD63FD439_71:
            ; //_A30BB6F62_2624:;				
            _A30BB6F62_2624:
            ; //	return;					
00D3F:      	rets
            ; //_WS_Key_RGBC5B96B6D_end:;			
            _WS_Key_RGBC5B96B6D_end:
            ; //_A30BB6F62_2625:;				
            _A30BB6F62_2625:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_WS2811_02F950F9_s(void)	
            ginit_code_WS2811_02F950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+0;
00D40:      	P1 = #ginit_seg_WS2811_02F950F9_s+0//
            ; //	asm I1 = LD63FD439_15;			
00D43:      	I1 = LD63FD439_15//
            ; //	sCX = 1;				
00D44:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00D45:      	pch	= sfx_GLOBALINIT
00D46:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+1;
00D47:      	P1 = #ginit_seg_WS2811_02F950F9_s+1//
            ; //	asm I1 = LD63FD439_72;			
00D4A:      	I1 = LD63FD439_72//
            ; //	sCX = 1;				
00D4B:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00D4C:      	pch	= sfx_GLOBALINIT
00D4D:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00D4E:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_WS2811_02F950F9_s[2] = {	
            ginit_seg_WS2811_02F950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
00D4F:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00D50:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> Start=========================
            ; global.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _InitialDA4A7CC4();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //rjmp void L0E8FA404_84()			
            L0E8FA404_84:
            ; //{
            ; //_A30BB6F62_2626:;				
            _A30BB6F62_2626:
            ; //	
            ; //_A30BB6F62_2627:;				
            _A30BB6F62_2627:
            ; //	io[0x04]	= 0x000F;		
00D51:      	AR	= 0x0F
00D52:      	io[0x04]	= AR
            ; //_A30BB6F62_2628:;				
            _A30BB6F62_2628:
            ; //	io[0x05]	= 0xFFFF;		
00D53:      	AR	= 0xFFFF
00D55:      	io[0x05]	= AR
            ; //_A30BB6F62_2629:;				
            _A30BB6F62_2629:
            ; //	io[0x07]	= 0x0000;		
00D56:      	AR	= 0x00
00D57:      	io[0x07]	= AR
            ; //_A30BB6F62_2630:;				
            _A30BB6F62_2630:
            ; //	io[0x08]	= 0x0000;		
00D58:      	AR	= 0x00
00D59:      	io[0x08]	= AR
            ; //L0E8FA404_86:;					
            L0E8FA404_86:
            ; //_A30BB6F62_2631:;				
            _A30BB6F62_2631:
            ; //	return;					
00D5A:      	rets
            ; //L0E8FA404_84_end:;				
            L0E8FA404_84_end:
            ; //_A30BB6F62_2632:;				
            _A30BB6F62_2632:
            ; //}
            ; //
            ; //rjmp void _InitialDA4A7CC4()			
            _InitialDA4A7CC4:
            ; //{
            ; //_A30BB6F62_2633:;				
            _A30BB6F62_2633:
            ; //	
            ; //_A30BB6F62_2634:;				
            _A30BB6F62_2634:
            ; //	sAX	= 0x003F;			
00D5B:      	AX	= 0x3F
            ; //_A30BB6F62_2635:;				
            _A30BB6F62_2635:
            ; //	asm	AR = AX				
00D5C:      	AR = AX
            ; //_A30BB6F62_2636:;				
            _A30BB6F62_2636:
            ; //	asm	FLTG = AR			
00D5D:      	FLTG = AR
            ; //	
            ; //_A30BB6F62_2637:;				
            _A30BB6F62_2637:
            ; //	sAX	= 0x1FFF;			
00D5E:      	AX	= 0x1FFF
            ; //_A30BB6F62_2638:;				
            _A30BB6F62_2638:
            ; //	asm	AR = AX				
00D60:      	AR = AX
            ; //_A30BB6F62_2639:;				
            _A30BB6F62_2639:
            ; //	asm	FLTP = AR			
00D61:      	FLTP = AR
            ; //	
            ; //_A30BB6F62_2640:;				
            _A30BB6F62_2640:
            ; //	sAX	= 0x0008;			
00D62:      	AX	= 0x08
            ; //_A30BB6F62_2641:;				
            _A30BB6F62_2641:
            ; //	asm	AR = AX				
00D63:      	AR = AX
            ; //_A30BB6F62_2642:;				
            _A30BB6F62_2642:
            ; //	asm	CBL = AR			
00D64:      	CBL = AR
            ; //_A30BB6F62_2643:;				
            _A30BB6F62_2643:
            ; //	io[0x67]	= 0x0007;		
00D65:      	AR	= 0x07
00D66:      	io[0x67]	= AR
            ; //_A30BB6F62_2644:;				
            _A30BB6F62_2644:
            ; //	io[0x06]	= 0xC004;		
00D67:      	AR	= 0xC004
00D69:      	io[0x06]	= AR
            ; //_A30BB6F62_2645:;				
            _A30BB6F62_2645:
            ; //	io[0x05]	= 0x0000;		
00D6A:      	AR	= 0x00
00D6B:      	io[0x05]	= AR
            ; //_A30BB6F62_2646:;				
            _A30BB6F62_2646:
            ; //	io[0x09]	= 0x0000;		
00D6C:      	AR	= 0x00
00D6D:      	io[0x09]	= AR
            ; //L0E8FA404_87:;					
            L0E8FA404_87:
            ; //_A30BB6F62_2647:;				
            _A30BB6F62_2647:
            ; //	return;					
00D6E:      	rets
            ; //_InitialDA4A7CC4_end:;				
            _InitialDA4A7CC4_end:
            ; //_A30BB6F62_2648:;				
            _A30BB6F62_2648:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_global_6037E6D5_s(void)	
            ginit_code_global_6037E6D5_s:
            ; //{
            ; //	return;					
00D6F:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> Start=========================
            
            
            _ClearTickCount5DDE4003:
            #ifdef _MFDSP_
            	set		io[MISC].b8
            #else
00D70:      	set		io[MISC].b7
            #endif
00D71:      	set		io[MISC].b15
            	
00D72:      	io[REAL_T]=	AR
00D73:      	AR=		io[REAL_T]
00D74:      	AR=		io[REAL_T]
00D75:      	io[REAL_T]=	AR
00D76:      	rets
            
            ; -----------------------------------------------
            
            _GetTickCount18DC070C:
00D77:      	AX=		0xFFF0
            @gettickcount_loop_1000:
00D79:      	io[ClrWDT]=	AR
00D7A:      	AR=		io[REAL_T]
00D7B:      	AR=		AR & AX
00D7C:      	SF=		AR - AX
00D7D:      	if ZR jmp	@gettickcount_loop_1000
00D7E:      	AX=		AR
00D7F:      	AR=		io[REAL_T]
00D80:      	DX=		AR
00D81:      	rets
            
            	
            ; -----------------------------------------------
            ; void delay(int ms)
            ;
            ; in:
            ;     BP + 1 - int ms
            ;
            ; -----------------------------------------------
            _delay6F9F34ED:
            ; {
00D82:      	AR=		BP
00D83:      	AR=		AR + 1		; ~~ port
00D84:      	I1=		AR
            
            	; unsigned long tick;
            	; unsigned long msr;
            
            	; ~~ 1ms = 32768 ticks
            
            	; msr = (unsigned long)ms << 15;
00D85:      		R0=		0
00D86:      		R1=		rm[I1]
00D87:      		clr		C
00D88:      		src		R1, 1
00D89:      		src		R0, 1
            	
            	; tick = GetTickCount();
00D8A:      		call		_GetTickCount18DC070C
00D8B:      		AR=		AX
00D8C:      		CX=		AR
00D8D:      		AR=		DX
00D8E:      		BX=		AR
            	
            	; while((GetTickCount() - tick) < msr);
            	@delay_loop_1024:
00D8F:      		call		_GetTickCount18DC070C
00D90:      		AR=		CX
00D91:      		AX=		AX - AR
00D92:      		AR=		BX
00D93:      		DX=		DX - AR + C - 1
00D94:      		AR=		R0
00D95:      		AX=		AX - AR
00D96:      		AR=		R1
00D97:      		DX=		DX - AR + C - 1
00D98:      		AR=		0
00D99:      		AR=		AR - 0 + C - 1
00D9A:      		if AN jmp	@delay_loop_1024
            
00D9B:      	rets
            ; }
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> End=========================
            
            ;=========================Include <DEPS\D58805FB_GINIT.S.CODE.ASM> Start=========================
            ; D58805FB_ginit.s.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code(void)			
            ginit_code:
            ; //{
            ; //	ginit_code_655_99B6FC89_s();		
00D9C:      	pch	= ginit_code_655_99B6FC89_s
00D9D:      	lcall	ginit_code_655_99B6FC89_s
            ; //	ginit_code_WS2811_02F950F9_s();		
00D9E:      	pch	= ginit_code_WS2811_02F950F9_s
00D9F:      	lcall	ginit_code_WS2811_02F950F9_s
            ; //	ginit_code_global_6037E6D5_s();		
00DA0:      	pch	= ginit_code_global_6037E6D5_s
00DA1:      	lcall	ginit_code_global_6037E6D5_s
            ; //	return;					
00DA2:      	rets
            ; //}
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\D58805FB_GINIT.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> Start=========================
            
            
            ; ~~ CRT0 support functions
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GLOBALINIT(void)
            ; void sfx_LOCALINIT(void)
            ;
            ; in:
            ;     I1	- pointer to SRAM initial value
            ;     P1	- pointer to PROM initial data
            ;     CX	- total count (word)
            ;
            ; out:
            ;     none
            ;
            ; --------------------------------------------
            sfx_GLOBALINIT:
            sfx_LOCALINIT:
00DA3:      	P1.hh=		0
00DA4:      	jmp		@glinit_label_1409
            @glinit_loop_1409:
00DA5:      	AR=		pm[P1++]
00DA6:      	rm[I1++]=	AR
            @glinit_label_1409:
00DA7:      	loop		@glinit_loop_1409
00DA8:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MUL_AX_CX(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MUL_AX_CX:
            
00DA9:      	AR=		AX
00DAA:      	MX=		AR
00DAB:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
00DAC:      	MACOP=		3
00DAD:      	MR=		MX * AR
            #endif
            
00DAE:      	AR=		MR0
00DAF:      	AX=		AR
00DB0:      	AR=		MR1
00DB1:      	DX=		AR
00DB2:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMUL_AX_CX(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMUL_AX_CX:
            
00DB3:      	AR=		AX
00DB4:      	MX=		AR
00DB5:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
00DB6:      	MACOP=		0
00DB7:      	MR=		MX * AR
            #endif
            
00DB8:      	AR=		MR0
00DB9:      	AX=		AR
00DBA:      	AR=		MR1
00DBB:      	DX=		AR
00DBC:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMULLONG(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMULLONG:
00DBD:      	AR=		rm[BP_SAVE]
00DBE:      	push		AR
00DBF:      	AR=		BP
00DC0:      	rm[BP_SAVE]=	AR
00DC1:      	AR=		AR - 3
00DC2:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
00DC3:      	AR=		CX
00DC4:      	MX=		AR
00DC5:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
00DC6:      	MACOP=		3		; unsigned
00DC7:      	MR=		MX * AR
            #endif
            
00DC8:      	I1=		rm[BP_SAVE]
00DC9:      	AR=		2
00DCA:      	I1=		I1 - AR
00DCB:      	rm[I1++]=	MR0
00DCC:      	rm[I1++]=	MR1
00DCD:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
00DCE:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUS
            #else
00DCF:      	MACOP=		1		; mx:unsigned / my:signed
00DD0:      	MR=		MX * AR
            #endif
            
00DD1:      	AR=		rm[I1]
00DD2:      	AR=		AR + MR0
00DD3:      	rm[I1++]=	AR
00DD4:      	AR=		rm[I1]
00DD5:      	AR=		AR + MR1 + C
00DD6:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
00DD7:      	AR=		BX
00DD8:      	MX=		AR
00DD9:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULSU
            #else
00DDA:      	MACOP=		2		; mx:signed / my:unsigned
00DDB:      	MR=		MX * AR
            #endif
            
00DDC:      	AR=		rm[I1]
00DDD:      	AR=		AR + MR0
00DDE:      	rm[I1++]=	AR
00DDF:      	AR=		rm[I1]
00DE0:      	AR=		AR + MR1 + C
00DE1:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
00DE2:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
00DE3:      	MACOP=		0		; mx:signed / my:signed
00DE4:      	MR=		MX * AR
            #endif
            
00DE5:      	AR=		rm[I1]
00DE6:      	AR=		AR + MR0
00DE7:      	rm[I1]=		AR
            
00DE8:      	I1=		rm[BP_SAVE]
00DE9:      	CX=		rm[I1--]
00DEA:      	DX=		rm[I1--]
00DEB:      	AX=		rm[I1]
            
00DEC:      	AR=		3
00DED:      	BP=		BP + AR
00DEE:      	pop		AR
00DEF:      	rm[BP_SAVE]=	AR
            
00DF0:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MULLONG(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MULLONG:
00DF1:      	AR=		rm[BP_SAVE]
00DF2:      	push		AR
00DF3:      	AR=		BP
00DF4:      	rm[BP_SAVE]=	AR
00DF5:      	AR=		AR - 3
00DF6:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
00DF7:      	AR=		CX
00DF8:      	MX=		AR
00DF9:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
00DFA:      	MACOP=		3		; unsigned
00DFB:      	MR=		MX * AR
            #endif
            
00DFC:      	I1=		rm[BP_SAVE]
00DFD:      	AR=		2
00DFE:      	I1=		I1 - AR
00DFF:      	rm[I1++]=	MR0
00E00:      	rm[I1++]=	MR1
00E01:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
00E02:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
00E03:      	MR=		MX * AR
            #endif
            
00E04:      	AR=		rm[I1]
00E05:      	AR=		AR + MR0
00E06:      	rm[I1++]=	AR
00E07:      	AR=		rm[I1]
00E08:      	AR=		AR + MR1 + C
00E09:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
00E0A:      	AR=		BX
00E0B:      	MX=		AR
00E0C:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
00E0D:      	MR=		MX * AR
            #endif
            
00E0E:      	AR=		rm[I1]
00E0F:      	AR=		AR + MR0
00E10:      	rm[I1++]=	AR
00E11:      	AR=		rm[I1]
00E12:      	AR=		AR + MR1 + C
00E13:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
00E14:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
00E15:      	MR=		MX * AR
            #endif
            
00E16:      	AR=		rm[I1]
00E17:      	AR=		AR + MR0
00E18:      	rm[I1]=		AR
            
00E19:      	I1=		rm[BP_SAVE]
00E1A:      	CX=		rm[I1--]
00E1B:      	DX=		rm[I1--]
00E1C:      	AX=		rm[I1]
            
00E1D:      	AR=		3
00E1E:      	BP=		BP + AR
00E1F:      	pop		AR
00E20:      	rm[BP_SAVE]=	AR
            
00E21:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIV_AX_CX(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIV_AX_CX:
            	; unsigned int reste = 0;
00E22:      		DX=		0
            	; unsigned char count = 16;
00E23:      		R0=		16
            	; BOOL c;
            
            	; do
            	@divword_loop_1824:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
00E24:      			slz		AX, 1
            		; reste <<= 1;
00E25:      			slc		DX, 1
            
            		; if (c)
            		; {
            			; reste |= 1;
            		; }
            		@divword_label_1822:
            
            		; if (reste >= y)
00E26:      			AR=		DX
00E27:      			AR-=		CX
00E28:      			AR=		0
00E29:      			AR=		AR - 0 + C - 1
00E2A:      			if AN jmp	@divword_label_1823
            		; {
            			; reste -= y;
00E2B:      				AR=		CX
00E2C:      				DX=		DX - AR
            			; ~~ x <- (result = 1)
            			; x |= 1;
00E2D:      				set		AX.b0
            		; }
            		@divword_label_1823:
            
00E2E:      		R0--
00E2F:      		if NZ jmp	@divword_loop_1824
            	; }while (--count);
            
            	; return x;
00E30:      		rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIV_AX_CX(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIV_AX_CX:
            
            	; register int r;
            
            	; r = sfx_DIV_AX_CX((x < 0 ? -x : x), (y < 0 ? -y : y));
00E31:      		R1=		0
00E32:      		AR=		0
00E33:      		test		AX.b15
00E34:      		if ZR jmp	@divsword_label_1833
00E35:      			AX=		AR - AX
00E36:      			set		R1.b0
            		@divsword_label_1833:
00E37:      		test		CX.b15
00E38:      		if ZR jmp	@divsword_label_1834
00E39:      			CX=		AR - CX
00E3A:      			set		R1.b1
            		@divsword_label_1834:
00E3B:      		call		sfx_DIV_AX_CX
            
            	; if ((x < 0) ^ (y < 0))
00E3C:      		AR=		R1
00E3D:      		slz		AR, 1
00E3E:      		AR^=		R1
00E3F:      		test		AR.b1
00E40:      		if ZR jmp	@divsword_label_1835
            	; {
            		; return (0 - r);
00E41:      			AR=		0
00E42:      			AX=		AR - AX
00E43:      			DX=		AR - DX
            
            	; }
            	@divsword_label_1835:
            
            	; return r;
00E44:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIVLONG(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIVLONG:
            	; unsigned long reste = 0L;
00E45:      		R0=		0	; L
00E46:      		R1=		0	; H
            	; unsigned char count = 32;
00E47:      		R2=		32
            	; BOOL c;
            
            	; do
            	@divulong_loop_1723:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
00E48:      			slz		AX, 1
00E49:      			slc		DX, 1
            		; reste <<= 1;
00E4A:      			slc		R0, 1
00E4B:      			slc		R1, 1
            
            		; if (c)
            		; {
            			; reste |= 1L;
            		; }
            		@divulong_label_1726:
            
            		; if (reste >= y)
00E4C:      			AR=		R0
00E4D:      			AR-=		CX
00E4E:      			AR=		R1
00E4F:      			AR=		AR - BX + C - 1
00E50:      			if AN jmp	@divulong_label_1734
            		; {
            			; reste -= y;
00E51:      				AR=		CX
00E52:      				R0=		R0 - AR
00E53:      				AR=		BX
00E54:      				R1=		R1 - AR + C - 1
            			; ~~ x <- (result = 1)
            			; x |= 1L;
00E55:      				set		AX.b0
            		; }
            		@divulong_label_1734:
            
00E56:      		R2--
00E57:      		if NZ jmp	@divulong_loop_1723
            	; }while (--count);
            
            	; return x;
00E58:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIVLONG(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     BX:DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIVLONG:
            	; long r;
            
            	; r = divulong((x < 0 ? -x : x), (y < 0 ? -y : y));
00E59:      		R3=		0
00E5A:      		AR=		0
00E5B:      		test		DX.b15
00E5C:      		if ZR jmp	@divslong_label_1759
00E5D:      			AX=		AR - AX
00E5E:      			DX=		AR - DX + C - 1
00E5F:      			set		R3.b0
            		@divslong_label_1759:
00E60:      		test		BX.b15
00E61:      		if ZR jmp	@divslong_label_1800
00E62:      			CX=		AR - CX
00E63:      			BX=		AR - BX + C - 1
00E64:      			set		R3.b1
            		@divslong_label_1800:
00E65:      		call		sfx_DIVLONG
            
            	; if ((x < 0) ^ (y < 0))
00E66:      		AR=		R3
00E67:      		slz		AR, 1
00E68:      		AR^=		R3
00E69:      		test		AR.b1
00E6A:      		if ZR jmp	@divslong_label_1807
            	; {
            		; return -r;
00E6B:      			AR=		0
00E6C:      			AX=		AR - AX
00E6D:      			DX=		AR - DX + C - 1
00E6E:      			R0=		AR - R0
00E6F:      			R1=		AR - R1 + C - 1
            
            	; }
            	@divslong_label_1807:
            
            	; return r;
00E70:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MOD_AX_CX(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_MOD_AX_CX:
00E71:      	call		sfx_DIV_AX_CX
00E72:      	AR=		DX
00E73:      	AX=		AR
00E74:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMOD_AX_CX(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMOD_AX_CX:
00E75:      	call		sfx_IDIV_AX_CX
00E76:      	AR=		DX
00E77:      	AX=		AR
00E78:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MODLONG(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_MODLONG:
00E79:      	call		sfx_DIVLONG
00E7A:      	AR=		R0
00E7B:      	AX=		AR
00E7C:      	AR=		R1
00E7D:      	DX=		AR
00E7E:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMODLONG(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMODLONG:
00E7F:      	call		sfx_IDIVLONG
00E80:      	AR=		R0
00E81:      	AX=		AR
00E82:      	AR=		R1
00E83:      	DX=		AR
00E84:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG:
            	; AR=		CX
            	; AX=		AX + AR
            	; AR=		BX
            	; DX=		DX + AR + C
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG_BXCX_DXAX(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG_BXCX_DXAX:
            	; AR=		AX
            	; CX=		CX + AR
            	; AR=		DX
            	; BX=		BX + AR + C
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBLONG(void)
            ;
            ; note:
            ;     signed sub
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SUBLONG:
            	; AR=		CX
            	; AX=		AX - AR
            	; AR=		BX
            	; DX=		DX - AR + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDDIOFS(void)
            ;
            ; note:
            ;     add P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDDIOFS:
00E85:      	AR=		AX
00E86:      	P1=		P1 + AR
00E87:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDSIOFS(void)
            ;
            ; note:
            ;     add I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDSIOFS:
00E88:      	AR=		AX
00E89:      	I1=		I1 + AR
00E8A:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDAXOFS(void)
            ;
            ; note:
            ;     add AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_ADDAXOFS:
00E8B:      	AR=		CX
00E8C:      	AX=		AX + AR
00E8D:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBDIOFS(void)
            ;
            ; note:
            ;     sub P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBDIOFS:
00E8E:      	AR=		AX
00E8F:      	P1=		P1 - AR
00E90:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBSIOFS(void)
            ;
            ; note:
            ;     sub I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBSIOFS:
00E91:      	AR=		AX
00E92:      	I1=		I1 - AR
00E93:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBAXOFS(void)
            ;
            ; note:
            ;     sub AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_SUBAXOFS:
00E94:      	AR=		CX
00E95:      	AX=		AX + AR
00E96:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_DXAX(void)
            ;
            ; note:
            ;     load long data from PROM to DX:AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG:
            ; sfx_GETDILONG_DXAX:
            	; AX=		pm[P1++]
            	; DX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_BXCX(void)
            ;
            ; note:
            ;     load long data from PROM to BX:CX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG_BXCX:
            	; CX=		pm[P1++]
            	; BX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_DXAX(void)
            ; void sfx_GETSILONG_DXAX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to DX:AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG:
            ; sfx_GETSILONG_D:
            ; sfx_GETSILONG_DXAX:
            ; sfx_GETSILONG_DXAX_D:
            	; AX=		rm[I1++]
            	; DX=		rm[I1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_BXCX(void)
            ; void sfx_GETSILONG_BXCX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to BX:CX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG_BXCX:
            ; sfx_GETSILONG_BXCX_D:
            	; CX=		rm[I1++]
            	; BX=		rm[I1--]
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ANDLONG(void)
            ;
            ; note:
            ;     AND two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ANDLONG:
            	; AR=		CX
            	; AX=		AX & AR
            	; AR=		BX
            	; DX=		DX & AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ORLONG(void)
            ;
            ; note:
            ;     OR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ORLONG:
            	; AR=		CX
            	; AX=		AX | AR
            	; AR=		BX
            	; DX=		DX | AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XORLONG(void)
            ;
            ; note:
            ;     XOR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_XORLONG:
            	; AR=		CX
            	; AX=		AX ^ AR
            	; AR=		BX
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHL_AX_CX(void)
            ;
            ; note:
            ;     left shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHL_AX_CX:
            	; jmp		@shlac_label_1653
            ; @shlac_loop_1653:
            	; slz		AX, 1
            ; @shlac_label_1653:
            	; loop		@shlac_loop_1653
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SHLLONG(void)
            ;
            ; note:
            ;     left shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHLLONG:
            	; jmp		@shllong_label_1653
            ; @shllong_loop_1653:
            	; slz		AX, 1
            	; slc		DX, 1
            ; @shllong_label_1653:
            	; loop		@shllong_loop_1653
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX_CX(void)
            ;
            ; note:
            ;     unsigned right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX_CX:
            	; jmp		@shrac_label_1657
            ; @shrac_loop_1657:
            	; clr		C
            	; src		AX, 1
            ; @shrac_label_1657:
            	; loop		@shrac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX_CX(void)
            ;
            ; note:
            ;     signed right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX_CX:
            	; jmp		@sarac_label_1657
            ; @sarac_loop_1657:
            	; sra		AX, 1
            ; @sarac_label_1657:
            	; loop		@sarac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SARLONG(void)
            ;
            ; note:
            ;     signed right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SARLONG:
            	; jmp		@sarlong_label_1657
            ; @sarlong_loop_1657:
            	; sra		DX, 1
            	; src		AX, 1
            ; @sarlong_label_1657:
            	; loop		@sarlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHRLONG(void)
            ;
            ; note:
            ;     unsigned right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- ulong data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHRLONG:
            	; jmp		@shrlong_label_1657
            ; @shrlong_loop_1657:
            	; clr		C
            	; src		DX, 1
            	; src		AX, 1
            ; @shrlong_label_1657:
            	; loop		@shrlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX(void)
            ;
            ; note:
            ;     unsigned right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX:
            	; clr		C
            	; src		AX, 1
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX(void)
            ;
            ; note:
            ;     signed right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX:
            	; sra		AX, 1
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG(void)
            ; void sfx_STORSILONG_D(void)		; for function's parameter
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG:
            ; sfx_STORSILONG_D:
            	; rm[I1++]=	AX
            	; rm[I1--]=	DX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG_BXCX(void)
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG_BXCX:
            	; rm[I1++]=	CX
            	; rm[I1--]=	BX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG:
00E97:      	pm[P1++]=	AX
00E98:      	pm[P1--]=	DX
00E99:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG_BXCX:
00E9A:      	pm[P1++]=	CX
00E9B:      	pm[P1--]=	BX
00E9C:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CX to BX
            ;
            ; in:
            ;     CX	- signed short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_CX:
            ; sfx_INT2ULONG_CX:
            	; BX=		0
            	; test		CX.b15
            	; if ZR jmp	@i2lcx_label_1756
            	; BX=		-1
            ; @i2lcx_label_1756:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_CX(void)
            ;
            ; note:
            ;     convert short unsigned value CX to long (BX:CX)
            ;
            ; in:
            ;     CX	- unsigned short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_CX:
            ; sfx_UINT2ULONG_CX:
            	; BX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CL to BX:CH
            ;
            ; in:
            ;     CX	- signed char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_CX:
00E9D:      	BX=		0
00E9E:      	CX.h=		0
00E9F:      	test		CX.b7
00EA0:      	if ZR jmp	@c2lcx_label_1800
00EA1:      	CX.h=		0xFF
00EA2:      	BX=		-1
            @c2lcx_label_1800:
00EA3:      	rets
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_CX(void)
            ;
            ; note:
            ;     convert unsigned char value CL to long (BX:CX)
            ;
            ; in:
            ;     CL	- unsigned char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_CX:
            	; CX.h=		0
            	; BX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AX to DX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_AX:
            ; sfx_INT2ULONG_AX:
            	; DX=		0
            	; test		AX.b15
            	; if ZR jmp	@i2lax_label_1756
            	; DX=		-1
            ; @i2lax_label_1756:
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_AX(void)
            ;
            ; note:
            ;     convert short unsigned value AX to long (DX:AX)
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_AX:
            ; sfx_UINT2ULONG_AX:
            	; DX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AL to DX:AH
            ;
            ; in:
            ;     AX	- signed char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_AX:
00EA4:      	DX=		0
00EA5:      	AX.h=		0
00EA6:      	test		AX.b7
00EA7:      	if ZR jmp	@c2lax_label_1800
00EA8:      	AX.h=		0xFF
00EA9:      	DX=		-1
            @c2lax_label_1800:
00EAA:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_AX(void)
            ;
            ; note:
            ;     convert unsigned char value AL to long (DX:AX)
            ;
            ; in:
            ;     AL	- unsigned char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_AX:
            	; AX.h=		0
            	; DX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CALL_BY_AX(void)
            ;
            ; note:
            ;     call sub routine in AX (address)
            ;
            ; in:
            ;     AX	- sub routine address
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_CALL_BY_AX:
            	; AR=		AX
            	; P1=		AR
            	; P1.hh=		0
            	; fjmp		pm[P1]
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHG_AX_CX(void)
            ;
            ; note:
            ;     exchange AX CX value
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; result:
            ;     AX <-> CX
            ;
            ; --------------------------------------------
            ; sfx_XCHG_AX_CX:
            	; push		AX
            	; push		CX
            	; pop		AX
            	; pop		CX
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHGLONG(void)
            ;
            ; note:
            ;     exchange DX:AX BX:CX value
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; result:
            ;     DX:AX <-> BX:CX
            ;
            ; --------------------------------------------
            sfx_XCHGLONG:
00EAB:      	push		AX
00EAC:      	push		CX
00EAD:      	pop		AX
00EAE:      	pop		CX
00EAF:      	push		DX
00EB0:      	push		BX
00EB1:      	pop		DX
00EB2:      	pop		BX
00EB3:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEG_AX(void)
            ;
            ; note:
            ;     negative AX
            ;
            ; in:
            ;     AX	- operator 1
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEG_AX:
            	; AR=		0
            	; AX=		AR - AX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEGLONG(void)
            ;
            ; note:
            ;     negative DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEGLONG:
            	; AR=		0
            	; AX=		AR - AX
            	; DX=		AR - DX + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOT_AX(void)
            ;
            ; note:
            ;     not AX
            ;
            ; in:
            ;     AX	- operator
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOT_AX:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOTLONG(void)
            ;
            ; note:
            ;     not DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOTLONG:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOT_AX(void)
            ;
            ; note:
            ;     logical NOT
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_LOGNOT_AX:
            	;; x86 code
            	;;   neg AX
            	;;   sbb AX,AX
            	;;   inc AX
            	; AR=		0
            	; AR=		AR - AX
            	; AX=		AR
            	; AX=		AR - AX + C - 1
            	; AX++
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOTLONG(void)
            ;
            ; note:
            ;     logical NOT (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            sfx_LOGNOTLONG:
            	; x86 code
            	;   neg AX
            	;   sbb AX,AX
            	;   inc AX
00EB4:      	AR=		DX
00EB5:      	DX=		0
00EB6:      	AR=		AR | AX
00EB7:      	AX=		1
00EB8:      	if ZR jmp	@longnotl_label_1120
00EB9:      	AX=		0
            @longnotl_label_1120:
00EBA:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOL_AX(void)
            ;
            ; note:
            ;     logical BOOL
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOL_AX:
            	;; x86 code
            	;;   neg ax
            	;;   sbb ax,ax
            	;;   neg ax
            	; AR=		AX
            	; AX=		0
            	; if ZR jmp	@boolax_label_1758
            	; AX=		1
            ; @boolax_label_1758:
            	; rets
            	
            	; AR=		-1
            	; AR=		AR + AX
            	; AX=		0
            	; AX += C
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOLLONG(void)
            ;
            ; note:
            ;     logical BOOL (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOLLONG:
            	; AR=		DX
            	; DX=		0
            	; AR=		AR | AX
            	; AX=		0
            	; if ZR jmp	@boollong_label_1801
            	; AX=		1
            ; @boollong_label_1801:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INITSISTOR(void)
            ;
            ; note:
            ;     for used in global/local variable initial
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     I1 + 1
            ;
            ; --------------------------------------------
            ; sfx_INITSISTOR:
            	; rm[I1++]=	AX
            	; rets
            
            ; --------------------------------------------
            
            ; sfx_INITSISTORLONG:
            	; rm[I1++]=	AX
            	; rm[I1++]=	DX
            	; rets
            
            
            ; ~~ condition assistant functions ~~
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; JNE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            sfx_CMP_AX_CX_U_JNE:
00EBB:      	DX=		0
00EBC:      	BX=		0
            sfx_CMPLONG_JNE:
00EBD:      	AR=		CX
00EBE:      	AX=		AX - AR
00EBF:      	AR=		BX
00EC0:      	AR=		DX - AR + C - 1
00EC1:      	AR=		AR | AX
00EC2:      	if EQ jmp	@sfx_cl_jne_f
00EC3:      	set		Z		; true
00EC4:      	rets
            @sfx_cl_jne_f:
00EC5:      	clr		Z		; false
00EC6:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JNE:
00EC7:      	DX=		0
00EC8:      	BX=		0
            sfx_CMPLONG_BCDA_JNE:
00EC9:      	AR=		AX
00ECA:      	CX=		CX - AR
00ECB:      	AR=		DX
00ECC:      	AR=		BX - AR + C - 1
00ECD:      	AR=		AR | CX
00ECE:      	if EQ jmp	@sfx_clbcda_jne_f
00ECF:      	set		Z		; true
00ED0:      	rets
            @sfx_clbcda_jne_f:
00ED1:      	clr		Z		; false
00ED2:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JNE:
00ED3:      	AR=		CX
00ED4:      	SF=		AX - AR
00ED5:      	if EQ jmp	@sfx_ac_jne_f
00ED6:      	set		Z
00ED7:      	rets
            @sfx_ac_jne_f:
00ED8:      	clr		Z
00ED9:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JNE:
00EDA:      	AR=		AX
00EDB:      	SF=		CX - AR
00EDC:      	if EQ jmp	@sfx_ca_jne_f
00EDD:      	set		Z
00EDE:      	rets
            @sfx_ca_jne_f:
00EDF:      	clr		Z
00EE0:      	rets
            
            
            
            ; JE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            
            
            sfx_CMP_AX_CX_U_JE:
00EE1:      	DX=		0
00EE2:      	BX=		0
            sfx_CMPLONG_JE:
00EE3:      	AR=		CX
00EE4:      	AX=		AX - AR
00EE5:      	AR=		BX
00EE6:      	AR=		DX - AR + C - 1
00EE7:      	AR=		AR | AX
00EE8:      	if NE jmp	@sfx_cl_jz_f
00EE9:      	set		Z		; true
00EEA:      	rets
            @sfx_cl_jz_f:
00EEB:      	clr		Z		; false
00EEC:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JE:
00EED:      	DX=		0
00EEE:      	BX=		0
            sfx_CMPLONG_BCDA_JE:
00EEF:      	AR=		AX
00EF0:      	CX=		CX - AR
00EF1:      	AR=		DX
00EF2:      	AR=		BX - AR + C - 1
00EF3:      	AR=		AR | CX
00EF4:      	if NE jmp	@sfx_clbcda_jz_f
00EF5:      	set		Z		; true
00EF6:      	rets
            @sfx_clbcda_jz_f:
00EF7:      	clr		Z		; false
00EF8:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JE:
00EF9:      	AR=		CX
00EFA:      	SF=		AX - AR
00EFB:      	if NE jmp	@sfx_ac_je_f
00EFC:      	set		Z
00EFD:      	rets
            @sfx_ac_je_f:
00EFE:      	clr		Z
00EFF:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JE:
00F00:      	AR=		AX
00F01:      	SF=		CX - AR
00F02:      	if NE jmp	@sfx_ca_je_f
00F03:      	set		Z
00F04:      	rets
            @sfx_ca_je_f:
00F05:      	clr		Z
00F06:      	rets
            
            
            
            ; JG group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; A - above (unsigned)
            ; G - greater (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JA:
            sfx_CMP_AX_CX_JA:
00F07:      	DX=		0
00F08:      	BX=		0
            sfx_CMPLONG_JG:
00F09:      	AR=		CX
00F0A:      	AX=		AX - AR
00F0B:      	AR=		BX
00F0C:      	AR=		DX - AR + C - 1
00F0D:      	if AN jmp	@sfx_cl_jg_f
            
            	; exclude EQU condition
00F0E:      	AR=		AR | AX
00F0F:      	if ZR jmp	@sfx_cl_jg_f
            
00F10:      	set		Z		; true
00F11:      	rets
            @sfx_cl_jg_f:
00F12:      	clr		Z		; false
00F13:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JA:
00F14:      	AR=		CX
00F15:      	AX=		AX - AR
00F16:      	AR=		BX
00F17:      	DX=		DX - AR + C - 1
00F18:      	AR=		0
00F19:      	AR=		AR - 0 + C - 1
00F1A:      	if AN jmp	@sfx_cl_jg_f
            
00F1B:      	AR=		AR | DX		; exclude EQU condition
00F1C:      	AR=		AR | AX
00F1D:      	if ZR jmp	@sfx_cl_jg_f
            
00F1E:      	set		Z		; true
00F1F:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JA:
            sfx_CMP_CX_AX_JA:
00F20:      	DX=		0
00F21:      	BX=		0
            sfx_CMPLONG_BCDA_JG:
00F22:      	AR=		AX
00F23:      	CX=		CX - AR
00F24:      	AR=		DX
00F25:      	AR=		BX - AR + C - 1
00F26:      	if AN jmp	@sfx_clbcda_jg_f
            
00F27:      	AR=		AR | CX		; exclude EQU condition
00F28:      	if ZR jmp	@sfx_clbcda_jg_f
            
00F29:      	set		Z		; true
00F2A:      	rets
            @sfx_clbcda_jg_f:
00F2B:      	clr		Z		; false
00F2C:      	rets
            
            ; ~~---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JA:
00F2D:      	AR=		AX
00F2E:      	CX=		CX - AR
00F2F:      	AR=		DX
00F30:      	BX=		BX - AR + C - 1
00F31:      	AR=		0
00F32:      	AR=		AR - 0 + C - 1
00F33:      	if AN jmp	@sfx_clbcda_jg_f
            
00F34:      	AR=		AR | BX		; exclude EQU condition
00F35:      	AR=		AR | CX
00F36:      	if ZR jmp	@sfx_clbcda_jg_f
            
00F37:      	set		Z		; true
00F38:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JG:
00F39:      	AR=		CX
00F3A:      	SF=		AX - AR
00F3B:      	if LE jmp	@sfx_cmp_ac_jg_f
00F3C:      	set		Z
00F3D:      	rets
            @sfx_cmp_ac_jg_f:
00F3E:      	clr		Z
00F3F:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JG:
00F40:      	AR=		AX
00F41:      	SF=		CX - AR
00F42:      	if LE jmp	@sfx_cmp_ca_jg_f
00F43:      	set		Z
00F44:      	rets
            @sfx_cmp_ca_jg_f:
00F45:      	clr		Z
00F46:      	rets
            
            
            ; JGE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JAE:
            sfx_CMP_AX_CX_JAE:
00F47:      	DX=		0
00F48:      	BX=		0
            sfx_CMPLONG_JGE:
00F49:      	AR=		CX
00F4A:      	AX=		AX - AR
00F4B:      	AR=		BX
00F4C:      	DX=		DX - AR + C - 1
00F4D:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
            
00F4E:      	set		Z		; true
00F4F:      	rets
            @sfx_cl_jge_f:
00F50:      	clr		Z		; false
00F51:      	rets
            
            ; ~~-----------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JAE:
00F52:      	AR=		CX
00F53:      	AX=		AX - AR
00F54:      	AR=		BX
00F55:      	DX=		DX - AR + C - 1
00F56:      	AR=		0
00F57:      	AR=		AR - 0 + C - 1
00F58:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
00F59:      	set		Z		; true
00F5A:      	rets
            
            ; ---------
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JAE:
            sfx_CMP_CX_AX_JAE:
00F5B:      	DX=		0
00F5C:      	BX=		0
            sfx_CMPLONG_BCDA_JGE:
00F5D:      	AR=		AX
00F5E:      	CX=		CX - AR
00F5F:      	AR=		DX
00F60:      	BX=		BX - AR + C - 1
00F61:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
            
00F62:      	set		Z		; true
00F63:      	rets
            @sfx_clbcda_jge_f:
00F64:      	clr		Z		; false
00F65:      	rets
            
            ; ---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JAE:
00F66:      	AR=		AX
00F67:      	CX=		CX - AR
00F68:      	AR=		DX
00F69:      	BX=		BX - AR + C - 1
00F6A:      	AR=		0
00F6B:      	AR=		AR - 0 + C - 1
00F6C:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
00F6D:      	set		Z		; true
00F6E:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JGE:
00F6F:      	AR=		CX
00F70:      	SF=		AX - AR
00F71:      	if AN jmp	@sfx_cmp_ac_jge_f
00F72:      	set		Z
00F73:      	rets
            @sfx_cmp_ac_jge_f:
00F74:      	clr		Z
00F75:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JGE:
00F76:      	AR=		AX
00F77:      	SF=		CX - AR
00F78:      	if AN jmp	@sfx_cmp_ca_jge_f
00F79:      	set		Z
00F7A:      	rets
            @sfx_cmp_ca_jge_f:
00F7B:      	clr		Z
00F7C:      	rets
            
            
            ; JL group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; B - below (unsigned)
            ; L - less (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JB:
            sfx_CMP_AX_CX_JB:
00F7D:      	DX=		0
00F7E:      	BX=		0
            sfx_CMPLONG_JL:
00F7F:      	AR=		CX
00F80:      	AX=		AX - AR
00F81:      	AR=		BX
00F82:      	AR=		DX - AR + C - 1
00F83:      	if AN jmp	@sfx_cl_jl_chk
            
            @sfx_cl_jl_f:
00F84:      	clr		Z		; false
00F85:      	rets
            
            @sfx_cl_jl_chk:
00F86:      	AR=		AR | AX		; exclude EQU condition
00F87:      	if ZR jmp	@sfx_cl_jl_f
00F88:      	set		Z
00F89:      	rets
            
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JB:
00F8A:      	AR=		CX
00F8B:      	AX=		AX - AR
00F8C:      	AR=		BX
00F8D:      	DX=		DX - AR + C - 1
00F8E:      	AR=		0
00F8F:      	AR=		AR - 0 + C - 1
00F90:      	if AN jmp	@sfx_cl_jb_chk
            
            @sfx_cl_jb_f:
00F91:      	clr		Z		; false
00F92:      	rets
            
            @sfx_cl_jb_chk:
00F93:      	AR=		AR | DX
00F94:      	AR=		AR | AX		; exclude EQU condition
00F95:      	if ZR jmp	@sfx_cl_jb_f
00F96:      	set		Z
00F97:      	rets
            
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JB:
            sfx_CMP_CX_AX_JB:
00F98:      	DX=		0
00F99:      	BX=		0
            sfx_CMPLONG_BCDA_JL:
00F9A:      	AR=		AX
00F9B:      	CX=		CX - AR
00F9C:      	AR=		DX
00F9D:      	AR=		BX - AR + C - 1
00F9E:      	if AN jmp	@sfx_clbcda_jl_chk
            
            @sfx_clbcda_jl_f:
00F9F:      	clr		Z		; false
00FA0:      	rets
            
            @sfx_clbcda_jl_chk:
00FA1:      	AR=		AR | CX		; exclude EQU condition
00FA2:      	if ZR jmp	@sfx_clbcda_jl_f
00FA3:      	set		Z		; true
00FA4:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JB:
00FA5:      	AR=		AX
00FA6:      	CX=		CX - AR
00FA7:      	AR=		DX
00FA8:      	BX=		BX - AR + C - 1
00FA9:      	AR=		0
00FAA:      	AR=		AR - 0 + C - 1
00FAB:      	if AN jmp	@sfx_clbcda_jb_chk
            
            @sfx_clbcda_jb_f:
00FAC:      	clr		Z		; false
00FAD:      	rets
            
            @sfx_clbcda_jb_chk:
00FAE:      	AR=		AR | CX
00FAF:      	AR=		AR | BX
00FB0:      	if ZR jmp	@sfx_clbcda_jb_f
00FB1:      	set		Z		; true
00FB2:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JL:
00FB3:      	AR=		CX
00FB4:      	SF=		AX - AR
00FB5:      	if GE jmp	@sfx_cmp_ac_jl_f
00FB6:      	set		Z
00FB7:      	rets
            @sfx_cmp_ac_jl_f:
00FB8:      	clr		Z
00FB9:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JL:
00FBA:      	AR=		AX
00FBB:      	SF=		CX - AR
00FBC:      	if GE jmp	@sfx_cmp_ca_jl_f
00FBD:      	set		Z
00FBE:      	rets
            @sfx_cmp_ca_jl_f:
00FBF:      	clr		Z
00FC0:      	rets
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JBE:
            sfx_CMP_AX_CX_JBE:
00FC1:      	DX=		0
00FC2:      	BX=		0
            sfx_CMPLONG_JLE:
00FC3:      	AR=		CX
00FC4:      	AX=		AX - AR
00FC5:      	AR=		BX
00FC6:      	AR=		DX - AR + C - 1
00FC7:      	if AN jmp	@sfx_cl_jle_t
            
00FC8:      	AR=		AR | AX		; include EQU condition
00FC9:      	if ZR jmp	@sfx_cl_jle_t
            
00FCA:      	clr		Z		; false
00FCB:      	rets
            @sfx_cl_jle_t:
00FCC:      	set		Z		; true
00FCD:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JBE:
00FCE:      	AR=		CX
00FCF:      	AX=		AX - AR
00FD0:      	AR=		BX
00FD1:      	DX=		DX - AR + C - 1
00FD2:      	AR=		0
00FD3:      	AR=		AR - 0 + C - 1
00FD4:      	if AN jmp	@sfx_cl_jle_t
            
00FD5:      	AR=		AR | DX
00FD6:      	AR=		AR | AX
00FD7:      	if ZR jmp	@sfx_cl_jle_t
            
00FD8:      	clr		Z		; false
00FD9:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JBE:
            sfx_CMP_CX_AX_JBE:
00FDA:      	DX=		0
00FDB:      	BX=		0
            sfx_CMPLONG_BCDA_JLE:
00FDC:      	AR=		AX
00FDD:      	CX=		CX - AR
00FDE:      	AR=		DX
00FDF:      	AR=		BX - AR + C - 1
00FE0:      	if AN jmp	@sfx_clbcda_jle_t
            
00FE1:      	AR=		AR | CX		; include EQU condition
00FE2:      	if ZR jmp	@sfx_clbcda_jle_t
            
00FE3:      	clr		Z		; false
00FE4:      	rets
            @sfx_clbcda_jle_t:
00FE5:      	set		Z		; true
00FE6:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JBE:
00FE7:      	AR=		AX
00FE8:      	CX=		CX - AR
00FE9:      	AR=		DX
00FEA:      	BX=		BX - AR + C - 1
00FEB:      	AR=		0
00FEC:      	AR=		AR - 0 + C - 1
00FED:      	if AN jmp	@sfx_clbcda_jle_t
            
00FEE:      	AR=		AR | BX
00FEF:      	AR=		AR | CX
00FF0:      	if ZR jmp	@sfx_clbcda_jle_t
            
00FF1:      	clr		Z		; false
00FF2:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JLE:
00FF3:      	AR=		CX
00FF4:      	SF=		AX - AR
00FF5:      	if LE jmp	@sfx_cmp_ac_jl_t
00FF6:      	clr		Z
00FF7:      	rets
            @sfx_cmp_ac_jl_t:
00FF8:      	set		Z
00FF9:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JLE:
00FFA:      	AR=		AX
00FFB:      	SF=		CX - AR
00FFC:      	if LE jmp	@sfx_cmp_ca_jl_t
00FFD:      	clr		Z
00FFE:      	rets
            @sfx_cmp_ca_jl_t:
00FFF:      	set		Z
01000:      	rets
            
            
            ; ~!~ bit-field support
            
            @sfx_ortable_0:
01001:      	DW 0xFFFE
            @sfx_ortable_1:
01002:      	DW 0xFFFC
            @sfx_ortable_2:
01003:      	DW 0xFFF8
            @sfx_ortable_3:
01004:      	DW 0xFFF0
            @sfx_ortable_4:
01005:      	DW 0xFFE0
            @sfx_ortable_5:
01006:      	DW 0xFFC0
            @sfx_ortable_6:
01007:      	DW 0xFF80
            @sfx_ortable_7:
01008:      	DW 0xFF00
            @sfx_ortable_8:
01009:      	DW 0xFE00
            @sfx_ortable_9:
0100A:      	DW 0xFC00
            @sfx_ortable_10:
0100B:      	DW 0xF800
            @sfx_ortable_11:
0100C:      	DW 0xF000
            @sfx_ortable_12:
0100D:      	DW 0xE000
            @sfx_ortable_13:
0100E:      	DW 0xC000
            @sfx_ortable_14:
0100F:      	DW 0x8000
            
            ; ~!~
            
            @sfx_orhigh:
01010:      	AR=		pm[P1]
01011:      	DX=		DX | AR
01012:      	rets
            
            @sfx_orhigh_dx:
01013:      	DX=		-1
            @sfx_orlow:
01014:      	AR=		pm[P1]
01015:      	AX=		AX | AR
            @sfx_sextw_rets:
01016:      	rets
            
            ; ~!~ signed short
            
            sfx_SignExtW0:
01017:      	P1=		#@sfx_ortable_0
0101A:      	test		AX.b0
0101B:      	if ZR jmp	@sfx_sextw_rets
0101C:      	jmp		@sfx_orlow
            
            sfx_SignExtW1:
0101D:      	P1=		#@sfx_ortable_1
01020:      	test		AX.b1
01021:      	if ZR jmp	@sfx_sextw_rets
01022:      	jmp		@sfx_orlow
            
            sfx_SignExtW2:
01023:      	P1=		#@sfx_ortable_2
01026:      	test		AX.b2
01027:      	if ZR jmp	@sfx_sextw_rets
01028:      	jmp		@sfx_orlow
            
            sfx_SignExtW3:
01029:      	P1=		#@sfx_ortable_3
0102C:      	test		AX.b3
0102D:      	if ZR jmp	@sfx_sextw_rets
0102E:      	jmp		@sfx_orlow
            
            sfx_SignExtW4:
0102F:      	P1=		#@sfx_ortable_4
01032:      	test		AX.b4
01033:      	if ZR jmp	@sfx_sextw_rets
01034:      	jmp		@sfx_orlow
            
            sfx_SignExtW5:
01035:      	P1=		#@sfx_ortable_5
01038:      	test		AX.b5
01039:      	if ZR jmp	@sfx_sextw_rets
0103A:      	jmp		@sfx_orlow
            
            sfx_SignExtW6:
0103B:      	P1=		#@sfx_ortable_6
0103E:      	test		AX.b6
0103F:      	if ZR jmp	@sfx_sextw_rets
01040:      	jmp		@sfx_orlow
            
            sfx_SignExtW7:
01041:      	P1=		#@sfx_ortable_7
01044:      	test		AX.b7
01045:      	if ZR jmp	@sfx_sextw_rets
01046:      	jmp		@sfx_orlow
            
            sfx_SignExtW8:
01047:      	P1=		#@sfx_ortable_8
0104A:      	test		AX.b8
0104B:      	if ZR jmp	@sfx_sextw_rets
0104C:      	jmp		@sfx_orlow
            
            sfx_SignExtW9:
0104D:      	P1=		#@sfx_ortable_9
01050:      	test		AX.b9
01051:      	if ZR jmp	@sfx_sextw_rets
01052:      	jmp		@sfx_orlow
            
            sfx_SignExtW10:
01053:      	P1=		#@sfx_ortable_10
01056:      	test		AX.b10
01057:      	if ZR jmp	@sfx_sextw_rets
01058:      	jmp		@sfx_orlow
            
            sfx_SignExtW11:
01059:      	P1=		#@sfx_ortable_11
0105C:      	test		AX.b11
0105D:      	if ZR jmp	@sfx_sextw_rets
0105E:      	jmp		@sfx_orlow
            
            sfx_SignExtW12:
0105F:      	P1=		#@sfx_ortable_12
01062:      	test		AX.b12
01063:      	if ZR jmp	@sfx_sextw_rets
01064:      	jmp		@sfx_orlow
            
            sfx_SignExtW13:
01065:      	P1=		#@sfx_ortable_13
01068:      	test		AX.b13
01069:      	if ZR jmp	@sfx_sextw_rets
0106A:      	jmp		@sfx_orlow
            
            sfx_SignExtW14:
0106B:      	P1=		#@sfx_ortable_14
0106E:      	test		AX.b14
0106F:      	if ZR jmp	@sfx_sextw_rets
01070:      	jmp		@sfx_orlow
            
            ; ~!~ signed long
            
            sfx_SignExtL0:
01071:      	P1=		#@sfx_ortable_0
01074:      	test		AX.b0
01075:      	if ZR jmp	@sfx_sextw_rets
01076:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL1:
01077:      	P1=		#@sfx_ortable_1
0107A:      	test		AX.b1
0107B:      	if ZR jmp	@sfx_sextw_rets
0107C:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL2:
0107D:      	P1=		#@sfx_ortable_2
01080:      	test		AX.b2
01081:      	if ZR jmp	@sfx_sextw_rets
01082:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL3:
01083:      	P1=		#@sfx_ortable_3
01086:      	test		AX.b3
01087:      	if ZR jmp	@sfx_sextw_rets
01088:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL4:
01089:      	P1=		#@sfx_ortable_4
0108C:      	test		AX.b4
0108D:      	if ZR jmp	@sfx_sextw_rets
0108E:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL5:
0108F:      	P1=		#@sfx_ortable_5
01092:      	test		AX.b5
01093:      	if ZR jmp	@sfx_sextw_rets
01094:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL6:
01095:      	P1=		#@sfx_ortable_6
01098:      	test		AX.b6
01099:      	if ZR jmp	@sfx_sextw_rets
0109A:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL7:
0109B:      	P1=		#@sfx_ortable_7
0109E:      	test		AX.b7
0109F:      	if ZR jmp	@sfx_sextw_rets
010A0:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL8:
010A1:      	P1=		#@sfx_ortable_8
010A4:      	test		AX.b8
010A5:      	if ZR jmp	@sfx_sextw_rets
010A6:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL9:
010A7:      	P1=		#@sfx_ortable_9
010AA:      	test		AX.b9
010AB:      	if ZR jmp	@sfx_sextw_rets
010AC:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL10:
010AD:      	P1=		#@sfx_ortable_10
010B0:      	test		AX.b10
010B1:      	if ZR jmp	@sfx_sextw_rets
010B2:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL11:
010B3:      	P1=		#@sfx_ortable_11
010B6:      	test		AX.b11
010B7:      	if ZR jmp	@sfx_sextw_rets
010B8:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL12:
010B9:      	P1=		#@sfx_ortable_12
010BC:      	test		AX.b12
010BD:      	if ZR jmp	@sfx_sextw_rets
010BE:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL13:
010BF:      	P1=		#@sfx_ortable_13
010C2:      	test		AX.b13
010C3:      	if ZR jmp	@sfx_sextw_rets
010C4:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL14:
010C5:      	P1=		#@sfx_ortable_14
010C8:      	test		AX.b14
010C9:      	if ZR jmp	@sfx_sextw_rets
010CA:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL15:
010CB:      	test		AX.b15
010CC:      	if ZR jmp	@sfx_sextw_rets
010CD:      	DX=		-1
010CE:      	rets
            
            sfx_SignExtL16:
010CF:      	P1=		#@sfx_ortable_0
010D2:      	test		DX.b0
010D3:      	if ZR jmp	@sfx_sextw_rets
010D4:      	jmp		@sfx_orhigh
            
            sfx_SignExtL17:
010D5:      	P1=		#@sfx_ortable_1
010D8:      	test		DX.b1
010D9:      	if ZR jmp	@sfx_sextw_rets
010DA:      	jmp		@sfx_orhigh
            
            sfx_SignExtL18:
010DB:      	P1=		#@sfx_ortable_2
010DE:      	test		DX.b2
010DF:      	if ZR jmp	@sfx_sextw_rets
010E0:      	jmp		@sfx_orhigh
            
            sfx_SignExtL19:
010E1:      	P1=		#@sfx_ortable_3
010E4:      	test		DX.b3
010E5:      	if ZR jmp	@sfx_sextw_rets
010E6:      	jmp		@sfx_orhigh
            
            sfx_SignExtL20:
010E7:      	P1=		#@sfx_ortable_4
010EA:      	test		DX.b4
010EB:      	if ZR jmp	@sfx_sextw_rets
010EC:      	jmp		@sfx_orhigh
            
            sfx_SignExtL21:
010ED:      	P1=		#@sfx_ortable_5
010F0:      	test		DX.b5
010F1:      	if ZR jmp	@sfx_sextw_rets
010F2:      	jmp		@sfx_orhigh
            
            sfx_SignExtL22:
010F3:      	P1=		#@sfx_ortable_6
010F6:      	test		DX.b6
010F7:      	if ZR jmp	@sfx_sextw_rets
010F8:      	jmp		@sfx_orhigh
            
            sfx_SignExtL23:
010F9:      	P1=		#@sfx_ortable_7
010FC:      	test		DX.b7
010FD:      	if ZR jmp	@sfx_sextw_rets
010FE:      	jmp		@sfx_orhigh
            
            sfx_SignExtL24:
010FF:      	P1=		#@sfx_ortable_8
01102:      	test		DX.b8
01103:      	if ZR jmp	@sfx_sextw_rets
01104:      	jmp		@sfx_orhigh
            
            sfx_SignExtL25:
01105:      	P1=		#@sfx_ortable_9
01108:      	test		DX.b9
01109:      	if ZR jmp	@sfx_sextw_rets
0110A:      	jmp		@sfx_orhigh
            
            sfx_SignExtL26:
0110B:      	P1=		#@sfx_ortable_10
0110E:      	test		DX.b10
0110F:      	if ZR jmp	@sfx_sextw_rets
01110:      	jmp		@sfx_orhigh
            
            sfx_SignExtL27:
01111:      	P1=		#@sfx_ortable_11
01114:      	test		DX.b11
01115:      	if ZR jmp	@sfx_sextw_rets
01116:      	jmp		@sfx_orhigh
            
            sfx_SignExtL28:
01117:      	P1=		#@sfx_ortable_12
0111A:      	test		DX.b12
0111B:      	if ZR jmp	@sfx_sextw_rets
0111C:      	jmp		@sfx_orhigh
            
            sfx_SignExtL29:
0111D:      	P1=		#@sfx_ortable_13
01120:      	test		DX.b13
01121:      	if ZR jmp	@sfx_sextw_rets
01122:      	jmp		@sfx_orhigh
            
            sfx_SignExtL30:
01123:      	P1=		#@sfx_ortable_14
01126:      	test		DX.b14
01127:      	if ZR jmp	@sfx_sextw_rets
01128:      	jmp		@sfx_orhigh
            
            
            ; ~.~--------------------
            ; I1, AX
            
            sfx_REPMOV_SS:
            @sfx_repmov_ss_loop_1804:
01129:      	push		I1
0112A:      	AR=		AX
0112B:      	I1=		AR
0112C:      	AR=		rm[I1]
0112D:      	pop		I1
0112E:      	rm[I1++]=	AR
0112F:      	AX++
01130:      	loop		@sfx_repmov_ss_loop_1804
01131:      	rets
            
            ; ~~
            
            sfx_REPMOV_SR:
01132:      	AR=		AX
01133:      	P1=		AR
            @sfx_repmov_sr_loop_1804:
01134:      	rm[I1++]=	pm[P1++]
01135:      	loop		@sfx_repmov_sr_loop_1804
01136:      	rets
            
            
            ; ~~
            
            sfx_REPMOV_RS:
01137:      	AR=		AX
01138:      	I1=		AR
            @sfx_repmov_rs_loop_1804:
01139:      	AR=		rm[I1++]
0113A:      	pm[P1++]=	AR
0113B:      	loop		@sfx_repmov_rs_loop_1804
0113C:      	rets
            
            ; ~~
            
            sfx_REPMOV_RR:
            @sfx_repmov_rr_loop_1804:
0113D:      	push		P1
0113E:      	AR=		AX
0113F:      	P1=		AR
01140:      	AR=		pm[P1]
01141:      	pop		P1
01142:      	pm[P1++]=	AR
01143:      	AX++
01144:      	loop		@sfx_repmov_rr_loop_1804
01145:      	rets
            
            ; ~~
            
            ; sfx_CHECKZERO:
            	; AR=		AX
            	; rets
            
            ; ~~
            
            ; sfx_CHECKZEROLONG:
            	; AR=		AX
            	; AR=		AR | DX
            	; rets
            
            ; ~~
            
            
            #ifdef PRAM_BANK
            
            ;  ~~ simple link list for PRAM allocate
            
            ;  +---------+---------+
            ;  | field 0 | field 1 |
            ;  +---------+---------+
            ;  |   PROM  |  next   |
            ;  +---------+---------+
            
            sfx_DynFastCallInit:
            ; {
            	P1.hh=		PRAM_BANK
            	P1=		PRAM_OFFSET
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	rets
            ; }
            
            
            ; ~~ for C / ASM progam compatible used
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            ; bool sfx_DynFindPrg(PRGADR)
            ;
            ; in:
            ;    P1		- function start address
            ;
            ; out:
            ;     Z		- found, P0 = program entry address at PRAM
            ;     NZ	- not found, P0 = free space (list) start at PRAM
            ; ----------------------------------------------------------------
            
            sfx_DynFindPrg:
            ; {
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfp_loop_1320:
            	AR=		pm[P0++]	; program address
            	if ZR jmp	@sfxdfp_label_1321
            	SF=		AR - P1
            	if NE jmp	@sfxdfp_label_1323
            	
            	P0++
            	set		Z
            	rets
            
            @sfxdfp_label_1323:
            	AR=		pm[P0]		; next
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfp_label_1655
            	P0=		AR
            	jmp		@sfxdfp_loop_1320
            
            @sfxdfp_label_1321:
            	P0--				; list
            	clr		Z
            	rets
            	
            @sfxdfp_label_1655:
            ; ~~ list broken...
            	P0=		PRAM_OFFSET
            	clr		Z
            	rets
            ; }
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free link start
            ; AX = function end address
            
            
            sfx_DynBooking:
            ; {
            	; check if PRG to big to fit in PRAM
            
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	; ~~ can not cache PRG (total PRAM_SIZE) ??
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdb_label_1345
            
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdb_label_1349
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdb_label_1349:
            	; create link list
            
            	AR=		P1
            	pm[P0++]=	AR		; PRG
            	AR=		P0
            	AR=		AR - 3		; remove 1 list and 1 next
            	CX=		CX + AR
            	pm[P0++]=	CX		; next
            
            	push		P1
            	P1=		#@sfxdfc_label_1840
            	AR=		pm[P1]		; inst -> P1.hh = 0
            	pm[P0++]=	AR
            	AR=		CX
            	P1=		AR
            	P1.hh=		PRAM_BANK
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	pop		P1
            	
            	set		Z
            	rets
            
            @sfxdb_label_1345:
            	P0.hh=		0
            	clr		Z
            	rets
            ; }
            
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free PRG entry
            ; AX = function end address
            
            sfx_DynCache:
            	push		P0
            	AR=		AX
            	AR=		AR - P1
            	CX=		AR
            	jmp		@sfxdynch_label_1650
            @sfxdynch_loop_1650:
            	AR=		pm[P1++]
            	pm[P0++]=	AR
            @sfxdynch_label_1650:
            	loop		@sfxdynch_loop_1650
            	pop		P0
            	P0--
            	rets
            
            ; --------------------------------------------------------
            
            
            ; ~~ for C
            
            ; P1 = function start address
            ; AX = function end address
            
            sfx_DynFastCall:
            ; {
            	; look up function entry by prom address (P1)
            
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfc_label_1759:
            	AR=		pm[P0++]		; next
            	if ZR jmp	@sfxdfc_label_1758
            	SF=		AR - P1
            	if EQ jmp	@sfxdfc_label_1722
            	AR=		pm[P0]
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfc_label_2035
            	P0=		AR
            	jmp		@sfxdfc_label_1759
            
            @sfxdfc_label_2035:
            	P0=		PRAM_OFFSET + 1
            
            ; -----
            
            @sfxdfc_label_1758:
            
            	; look for remain free space
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	P0--
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdfc_label_1840
            	
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdfc_label_1817
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdfc_label_1817:
            
            	; copy program to pram
            
            	; ~~ PROM field
            		AR=		P1
            		pm[P0++]=	AR
            	; ~~ next field
            		AR=		P0
            		AR=		AR - 3		; remove 1 list and 1 next
            		CX=		CX + AR
            		pm[P0++]=	CX		; next
            
            	; ~~ booking
            		push		P1
            		P1=		#@sfxdfc_label_1840
            		AR=		pm[P1]		; inst -> P1.hh = 0
            		pm[P0++]=	AR
            		AR=		CX
            		P1=		AR
            		P1.hh=		PRAM_BANK
            		AR=		0
            		pm[P1++]=	AR
            		pm[P1]=		AR
            		P1.hh=		0
            		pop		P1
            
            	; copy instruction  "P0.hh = 0"
            		push		P0		; save exec address
            	@sfxdfc_loop_1829:
            		AR=		pm[P1++]
            		pm[P0++]=	AR
            		AR=		P0
            		SF=		AR - CX
            		if AN jmp	@sfxdfc_loop_1829
            		pop		P0
            		P0--
            		fjmp		pm[P0]
            
            @sfxdfc_label_1722:
            	P0++			; program entry
            	fjmp		pm[P0]
            
            @sfxdfc_label_1840:
            	P0.hh=		0
            
            @sfxdfc_label_1733:
            	; free space too small, direct run
            	fjmp		pm[P1]
            ; }
            
            
            
            
            #endif
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\FP32RT.ASM> Start=========================
            
            ; ~~-----------------------------------------------------
            ; single precision number (32-bit) float point support for DSP
            ; -------------------------------------------------------
            
            ; -------------------------------------------------------
            ; ~~ porting from SDCC
            ; -------------------------------------------------------
            
            ; +-----------------------------------------------------+-------------------------------------------------+
            ; | DX (BX)                                             | AX (CX)                                         |
            ; +------+------------------------+---------------------+-------------------------------------------------+
            ; |  0   | 7  6  5  4  3  2  1  0 |22 21 20 19 18 17 16 | 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0 |
            ; +------+------------------------+---------------------+-------------------------------------------------+
            ; | sign | e  e  e  e  e  e  e  e | m  m  m  m  m  m  m |  m  m  m  m  m  m  m  m  m  m  m  m  m  m  m  m |
            ; +------+------------------------+---------------------+-------------------------------------------------+
            ;    15   14 13 12 11 10  9  8  7   6  5  4  3  2  1  0   15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
            
            
            ; ~~ float -> sign / exp / mantissa
            
            ; ~~ DX:AX / BX:CX - mantissa [31:8]
            
            ; +-------------------------------------------------+--------------------------------------------------+
            ; | DX (BX)                                         | AX (CX)                                          |
            ; +---+---------------------------------------------+-------------------------+------------------------+
            ; | 1 | m  m  m  m  m  m  m  m  m  m  m  m  m  m  m | m  m  m  m  m  m  m  m  | 0  0  0  0  0  0  0  0 |
            ; +---+---------------------------------------------+-------------------------+------------------------+
            ;   H   22 21 20 19 18 17 16 15 14 13 12 11 10 9  8   7  6  5  4  3  2  1  0    -  -  -  -  -  -  -  -
            ;
            
            ; ~~ R0    / R1    - sign and exp
            ; +------------------------+------------------------+
            ; | S  -  -  -  -  -  -  - | e  e  e  e  e  e  e  e |
            ; +------------------------+------------------------+
            ;  15 14 13 12 11 10  9  8   7  6  5  4  3  2  1  0
            
            
            ; ~~ no shift
            
            sfx_GETARG_DANS_FS:
01146:      	AR=		DX
01147:      	slz		AR, 1		; ~~ C = sign
01148:      	xchg		AR
01149:      	AH=		0
0114A:      	R0=		AR
0114B:      	if NC jmp	@sfx_getarg_dafs_label_1736
0114C:      	set		R0.b15
            @sfx_getarg_dafs_label_1736:
0114D:      	AR=		0x7F
0114E:      	DX=		DX & AR
0114F:      	set		DX.b7		; ~~ HIDDEN 1
01150:      	rets
            
            ; ~~ ----
            
            sfx_GETARG_DA_FS:
01151:      	call		sfx_GETARG_DANS_FS
01152:      	slz		AX, 2
01153:      	slc		DX, 2
01154:      	slz		AX, 2
01155:      	slc		DX, 2
01156:      	slz		AX, 2
01157:      	slc		DX, 2
01158:      	slz		AX, 2
01159:      	slc		DX, 2
0115A:      	rets
            
            ; ~~ ----
            
            ; ~~ no shift
            
            sfx_GETARG_BCNS_FS:
0115B:      	AR=		BX
0115C:      	slz		AR, 1		; ~~ C = sign
0115D:      	xchg		AR
0115E:      	AH=		0
0115F:      	R1=		AR
01160:      	if NC jmp	@sfx_getarg_bcfs_label_1736
01161:      	set		R1.b15
            @sfx_getarg_bcfs_label_1736:
01162:      	AR=		0x7F
01163:      	BX=		BX & AR
01164:      	set		BX.b7		; ~~ HIDDEN 1
01165:      	rets
            
            ; ~~ ----
            
            sfx_GETARG_BC_FS:
01166:      	call		sfx_GETARG_BCNS_FS
01167:      	slz		CX, 2
01168:      	slc		BX, 2
01169:      	slz		CX, 2
0116A:      	slc		BX, 2
0116B:      	slz		CX, 2
0116C:      	slc		BX, 2
0116D:      	slz		CX, 2
0116E:      	slc		BX, 2
0116F:      	rets
            
            
            ; ~~ ----
            
            sfx_Normalize_DA_FS:
            ; {
01170:      	push		CX
01171:      	CX=		31
            @sfx_normalize_dafs_loop_1609:
01172:      	test		DX.b15
01173:      	if NZ jmp	@sfx_normalize_dafs_label_1609
01174:      	slz		AX, 1
01175:      	slc		DX, 1
01176:      	R0--
01177:      	AR=		R0
01178:      	clr		AR.b15
01179:      	if ZR jmp	@sfx_normalize_dafs_label_1609
0117A:      	loop		@sfx_normalize_dafs_loop_1609
            @sfx_normalize_dafs_label_1609:
0117B:      	pop		CX
0117C:      	rets
            ; }
            
            
            
            ; ~~ DX:AX - mantissa
            ; ~~ R0    - sign and exp
            
            sfx_RoundRet_DA_FS:
            ; {
            	; ~~ for register save
            
            	; ~~ round lowest 8-bit to increase accuracy ??
            
            	; AR=		AX
            	; AH=		0
            	; AR=		AR + 0x80		; 0xFF80
            	; if LE jmp	@sfx_roundret_dafs_label_1033
            
            	; test		AX.b8
            	; if ZR jmp	@sfx_roundret_dafs_label_1033
            
            	; ~~ +1
            
0117D:      	AR=		0x0080
0117F:      	AX=		AX + AR
01180:      	AR=		0
01181:      	DX=		DX + AR + C
01182:      	if NC jmp	@sfx_roundret_dafs_label_1033
            	; ~~ overflow
01183:      	DX.h=		0x80
01184:      	R0++
            @sfx_roundret_dafs_label_1033:
01185:      	AR=		AX
01186:      	AL=		0
01187:      	AR=		AR | DX
01188:      	if NZ jmp	sfx_DirectRet_DA_FS
            
            sfx_RetZero_DA_FS:
            	; ~~ float 0.0
01189:      	AX=		0
0118A:      	DX=		0
0118B:      	rets
            
            
            sfx_DirectRet_DA_FS:
            	; ~~ drop 1-bit  (1.xxx)
0118C:      	slz		AX, 1
0118D:      	slc		DX, 1
            
            	; ~~ 8-bit exp
            
0118E:      	AR=		R0
0118F:      	sra		AR, 2
01190:      	src		DX, 2
01191:      	src		AX, 2
01192:      	sra		AR, 2
01193:      	src		DX, 2
01194:      	src		AX, 2
01195:      	sra		AR, 2
01196:      	src		DX, 2
01197:      	src		AX, 2
01198:      	sra		AR, 2
01199:      	src		DX, 2
0119A:      	src		AX, 2
            
0119B:      	slz		AR, 1		; ~~ sign bit (sra duplicate)
0119C:      	src		DX, 1
0119D:      	src		AX, 1
0119E:      	rets
            
            sfx_ReturnINF_DA_FS:
0119F:      	AX=		0
011A0:      	DX=		0xFF00
011A2:      	AR=		R0
011A3:      	slz		AR, 1
011A4:      	src		DX, 1
011A5:      	rets
            
            sfx_ReturnNaN_DA_FS:
011A6:      	AX=		0
011A7:      	DX=		0x7FC0
011A9:      	rets
            
            ; }
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; --------------------------
            ; ~~ int type -> float point
            ; --------------------------
            
            
            ; --------------------------
            ; DX:AX		- in  (long)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_LONGTOFP32:
011AA:      	R0=		0x009E		; ~~ E+31
            
            sfx_LONG2FS_CORE:			; ~~ without exp
011AC:      	test		DX.b15
011AD:      	if ZR jmp	@sfx_long2fs_label_1004
            
            	; ~~ make it positive if value is negative
            
011AE:      	set		R0.b15		; ~~ sign
011AF:      	AR=		0
011B0:      	AX=		AR - AX
011B1:      	DX=		AR - DX + C - 1
            @sfx_long2fs_label_1004:
011B2:      	call		sfx_Normalize_DA_FS
011B3:      	jmp		sfx_RoundRet_DA_FS
            
            
            
            sfx_LONGTOFP32_BXCX:
011B4:      	call		sfx_FP32SWAP
011B5:      	call		sfx_LONGTOFP32
011B6:      	call		sfx_FP32SWAP
011B7:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in  (unsigned long)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_ULONGTOFP32:
            ; {
011B8:      	R0=		0x009E		; ~~ E+31
            sfx_ULONG2FS_CORE:
011BA:      	call		sfx_Normalize_DA_FS
011BB:      	jmp		sfx_RoundRet_DA_FS
            ; }
            
            
            ; --------------------------
            
            
            sfx_ULONGTOFP32_BXCX:
011BC:      	call		sfx_FP32SWAP
011BD:      	call		sfx_ULONGTOFP32
011BE:      	call		sfx_FP32SWAP
011BF:      	rets
            
            
            ; --------------------------
            ; AX		- in  (int)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_INTTOFP32:
011C0:      	AR=		AX
011C1:      	DX=		AR
011C2:      	AX=		0
011C3:      	R0=		0x008E
011C5:      	jmp		sfx_LONG2FS_CORE
            
            
            ; --------------------------
            
            
            sfx_INTTOFP32_BXCX:
011C6:      	call		sfx_FP32SWAP
011C7:      	call		sfx_INTTOFP32
011C8:      	call		sfx_FP32SWAP
011C9:      	rets
            
            
            ; --------------------------
            ; AX		- in  (unsigned int)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_UINTTOFP32:
011CA:      	AR=		AX
011CB:      	DX=		AR
011CC:      	AX=		0
011CD:      	R0=		0x008E
011CF:      	jmp		sfx_ULONG2FS_CORE
            
            ; --------------------------
            
            sfx_UINTTOFP32_BXCX:
011D0:      	call		sfx_FP32SWAP
011D1:      	call		sfx_UINTTOFP32
011D2:      	call		sfx_FP32SWAP
011D3:      	rets
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            
            
            ; --------------------------
            ; DX:AX - mantissa
            ; R0    - sign & exp
            ; AR    - shift count
            ; --------------------------
            sfx_RSHIFT_DA:
            	; ~~ check if 0 shift count
            
011D4:      	if ZR jmp	@sfx_rshift_label_1132
            
            	; ~~ adjust exp
011D5:      	push		CX
011D6:      	CX=		AR
011D7:      	AR=		AR + R0
011D8:      	test		AR.b8
011D9:      	if ZR jmp	@sfx_rshift_label_1333
            
011DA:      	AR=		R0
011DB:      	AL=		0xFF
            
            @sfx_rshift_label_1333:
011DC:      	R0=		AR
011DD:      	jmp		@sfx_rshift_label_1335
            @sfx_rshift_loop_1335:
011DE:      	clr		C
011DF:      	src		DX, 1
011E0:      	src		AX, 1
            @sfx_rshift_label_1335:
011E1:      	loop		@sfx_rshift_loop_1335
011E2:      	pop		CX
            @sfx_rshift_label_1132:
011E3:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; DX:AX		- out (long)
            ; --------------------------
            sfx_FP32TOLONG:
011E4:      	call		sfx_GETARG_DA_FS
011E5:      	AR=		0x009E
011E7:      	AR=		AR - R0
011E8:      	test		AR.b8
011E9:      	if NZ jmp	@sfx_fs2long_label_1709		; ~~ |X| >= 2^32
            
            	; ~~ lowest 8-bit already zero
            
011EA:      	AH=		0
011EB:      	call		sfx_RSHIFT_DA
            
011EC:      	test		R0.b15
011ED:      	if ZR jmp	@sfx_fs2long_label_1339
            	
            	; ~~ check zero
            
011EE:      	AR=		AX
011EF:      	AR=		AR | DX
011F0:      	if NZ jmp	@sfx_fs2long_label_1116
011F1:      	rets
            @sfx_fs2long_label_1116:
            
            	; ~~ negative
            
011F2:      	AR=		0
011F3:      	AX=		AR - AX
011F4:      	DX=		AR - DX + C - 1
011F5:      	AR=		AR - 0 + C - 1
            
            	; ~~ x < -0x80000000
011F6:      	if AN jmp	@sfx_fs2long_label_1420
011F7:      	rets
            
            @sfx_fs2long_label_1339:
            	; ~~ postive
011F8:      	test		DX.b15
011F9:      	if NZ jmp	@sfx_fs2long_label_1421
011FA:      	rets
            
            @sfx_fs2long_label_1709:
            	; ~~ fs2slong_maxval
011FB:      	test		R0.b15
011FC:      	if ZR jmp	@sfx_fs2long_label_1421
            
            @sfx_fs2long_label_1420:
            	; ~~ check sign bit
011FD:      	test		DX.b15
011FE:      	if ZR jmp	@sfx_fs2long_label_1118
011FF:      	rets
            @sfx_fs2long_label_1118:
            	; ~~ fs2slong_maxval_neg
01200:      	AX=		0
01201:      	DX=		0x8000
01203:      	rets
            
            @sfx_fs2long_label_1421:
            	; ~~ fs2long_maxval_pos
01204:      	AX=		0xFFFF
01206:      	DX=		0x7FFF
01208:      	rets
            
            ; --------------------------
            
            sfx_FP32TOLONG_BXCX:
01209:      	call		sfx_FP32SWAP
0120A:      	call		sfx_FP32TOLONG
0120B:      	call		sfx_FP32SWAP
0120C:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; DX:AX		- out (ulong)
            ; --------------------------
            sfx_FP32TOULONG:
0120D:      	call		sfx_GETARG_DA_FS
0120E:      	test		R0.b15
0120F:      	if ZR jmp	@sfx_fs2ulong_label_1536
            
            	; ~~ return 0
            
01210:      	AX=		0
01211:      	DX=		0
01212:      	rets
            
            @sfx_fs2ulong_label_1536:
            	; ~~ fs2ulong_int
            
01213:      	AR=		0x009E
01215:      	AR=		AR - R0
01216:      	test		AR.b8
01217:      	if ZR jmp	@sfx_fs2ulong_label_1541
            
            	; ~~ x >= 2^32
            
01218:      	AX=		0xFF		; ~~ 0xFFFF
01219:      	DX=		0xFF		; ~~ 0xFFFF
0121A:      	rets
            
            @sfx_fs2ulong_label_1541:
0121B:      	AH=		0
0121C:      	call		sfx_RSHIFT_DA
0121D:      	rets
            
            	
            ; --------------------------
            
            sfx_FP32TOULONG_BXCX:
0121E:      	call		sfx_FP32SWAP
0121F:      	call		sfx_FP32TOULONG
01220:      	call		sfx_FP32SWAP
01221:      	rets
            	
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; AX		- out (short)
            ; --------------------------
            sfx_FP32TOINT:
01222:      	call		sfx_FP32TOLONG
01223:      	AR=		AX
01224:      	AR=		AR | DX
01225:      	if NZ jmp	@sfx_fs2int_label_1138
01226:      	rets
            @sfx_fs2int_label_1138:
01227:      	test		R0.b15
01228:      	if ZR jmp	@sfx_fs2int_label_1553
            
            	; ~~ negative
            
01229:      	AR=		-1
0122A:      	SF=		AR - DX
0122B:      	if NE jmp	@sfx_fs2int_label_1609
0122C:      	test		AX.b15
0122D:      	if ZR jmp	@sfx_fs2int_label_1609
0122E:      	rets
            @sfx_fs2int_label_1609:
0122F:      	AX=		0x8000
01231:      	rets
            
            
            @sfx_fs2int_label_1553:
            
            	; ~~ positive check
            
01232:      	AR=		DX
01233:      	if NZ jmp	@sfx_fs2int_label_1603_2
01234:      	test		AX.b15
01235:      	if NZ jmp	@sfx_fs2int_label_1603_2
01236:      	rets
            @sfx_fs2int_label_1603_2:
01237:      	AX=		0x7FFF
01239:      	rets
            
            
            ; --------------------------
            
            sfx_FP32TOINT_BXCX:
0123A:      	call		sfx_FP32SWAP
0123B:      	call		sfx_FP32TOINT
0123C:      	call		sfx_FP32SWAP
0123D:      	rets
            	
            
            	
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; AX		- out (ushort)
            ; --------------------------
            sfx_FP32TOUINT:
0123E:      	call		sfx_FP32TOULONG
0123F:      	AR=		DX
01240:      	if NZ jmp	@sfx_fs2uint_label_1644
01241:      	rets
            @sfx_fs2uint_label_1644:
01242:      	AX=		0xFFFF
01244:      	rets
            
            
            ; --------------------------
            
            sfx_FP32TOUINT_BXCX:
01245:      	call		sfx_FP32SWAP
01246:      	call		sfx_FP32TOUINT
01247:      	call		sfx_FP32SWAP
01248:      	rets
            	
            
            ; ~~-------------------------------
            ; DX:AX		- in (fp32)
            ; AX		- out (fp16)
            ; ~~-------------------------------
            sfx_FP32TOFP16:
01249:      	call		sfx_GETARG_DA_FS
            
0124A:      	AR=		0x70
0124B:      	R0=		R0 - AR
0124C:      	test		R0.b5
0124D:      	if NZ jmp	@sfx_fs2f16_label_1647
0124E:      	AR=		R0
0124F:      	AH=		0
01250:      	if ZR jmp	@sfx_fs2f16_label_1647
01251:      	SF=		AR - 0x1F
01252:      	if GE jmp	@sfx_fs2f16_label_1647
            
            	; ~~ no round
            
            	; ~~ drop hidden 1
01253:      	slz		AX, 1
01254:      	slc		DX, 1
            
01255:      	AR=		DX
01256:      	AX=		0xE0		; ~~ FFE0
01257:      	AX=		AR & AX
            
01258:      	AR=		R0
01259:      	sra		AR, 2
0125A:      	src		AX, 2
0125B:      	sra		AR, 2
0125C:      	src		AX, 2
0125D:      	sra		AR, 1
0125E:      	src		AX, 1
0125F:      	slz		AR, 1
01260:      	src		AX, 1
01261:      	rets
            
            @sfx_fs2f16_label_1647:
            	; ~~ FP16 INF
01262:      	AX=		0xF800
01264:      	AR=		R0
01265:      	slz		AR, 1
01266:      	src		AX, 1
01267:      	rets
            
            
            ; --------------------------
            
            sfx_FP32TOFP16_BXCX:
01268:      	call		sfx_FP32SWAP
01269:      	call		sfx_FP32TOFP16
0126A:      	call		sfx_FP32SWAP
0126B:      	rets
            
            ; -------------------------------------------
            ; ~~ swap two fp32 value
            ; R0:DX:AX  <-> R1:BX:CX
            ; -------------------------------------------
            
            
            sfx_FP32SWAP_AB:
0126C:      	push		R0
0126D:      	push		R1
0126E:      	pop		R0
0126F:      	pop		R1
01270:      	push		AX
01271:      	push		CX
01272:      	pop		AX
01273:      	pop		CX
01274:      	push		DX
01275:      	push		BX
01276:      	pop		DX
01277:      	pop		BX
01278:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; DX:AX		- out (fp32)
            ; --------------------------
            
            sfx_FP32ADD:
01279:      	call		sfx_GETARG_DA_FS
0127A:      	call		sfx_GETARG_BC_FS
            
            	; ~~ which exponent is greater ?
            
0127B:      	AR=		R1
0127C:      	push		R0
0127D:      	pop		R2
0127E:      	clr		AR.b15
0127F:      	clr		R2.b15
01280:      	SF=		AR - R2
01281:      	if GE jmp	@sfx_fp32add_label_1043
            
01282:      	call		sfx_FP32SWAP_AB
            
            @sfx_fp32add_label_1043:
01283:      	AR=		R1
01284:      	push		R0
01285:      	pop		R2
01286:      	clr		AR.b15
01287:      	clr		R2.b15
01288:      	AR=		AR - R2
01289:      	call		sfx_RSHIFT_DA
            
            	; ~~ decide if we need to add or subtract
            
0128A:      	AR=		R0
0128B:      	AR=		AR ^ R1
0128C:      	slz		AR, 1
0128D:      	if AC jmp	@sfx_fp32add_label_1714
            
            	; ~~ add the mantissa (both positive or both negative)
            
0128E:      	AR=		CX
0128F:      	AX=		AX + AR
01290:      	AR=		BX
01291:      	DX=		DX + AR + C
01292:      	if NC jmp	@sfx_fp32add_label_1718
01293:      	AR=		1
01294:      	call		sfx_RSHIFT_DA
01295:      	set		DX.b15			; ~~ hidden 1
            @sfx_fp32add_label_1718:
01296:      	jmp		@sfx_fp32add_label_1720
            
            @sfx_fp32add_label_1714:
            
            	; ~~ subtract the mantissa (one of them is negative)
            
01297:      	AR=		CX
01298:      	AX=		AX - AR
01299:      	AR=		BX
0129A:      	DX=		DX - AR + C - 1
0129B:      	if AC jmp	@sfx_fp32add_label_1720
            
0129C:      	AR=		0
0129D:      	AX=		AR - AX
0129E:      	DX=		AR - DX + C - 1
0129F:      	not		R0.b15
            @sfx_fp32add_label_1720:
012A0:      	call		sfx_Normalize_DA_FS
012A1:      	jmp		sfx_RoundRet_DA_FS
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_FP32SUB:
012A2:      	not		BX.b15
012A3:      	jmp		sfx_FP32ADD
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_FP32MUL:
            	; ~~ first check if either input is zero
            
012A4:      	AR=		DX
012A5:      	if ZR jmp	sfx_RetZero_DA_FS
012A6:      	AR=		BX
012A7:      	if ZR jmp	sfx_RetZero_DA_FS
            
012A8:      	call		sfx_GETARG_DANS_FS
012A9:      	call		sfx_GETARG_BCNS_FS
            
            	; ~~ compare final sign bit
            
012AA:      	test		R1.b15
012AB:      	if ZR jmp	@sfx_fp32mul_label_1026
            
012AC:      	not		R0.b15
            @sfx_fp32mul_label_1026:
            
            	; ~~ check if either input is infinity
            
012AD:      	AR=		R1
012AE:      	AH=		0xFF
012AF:      	SF=		AR - 0xFF		; ~~ 0xFFFF
012B0:      	if EQ jmp	sfx_ReturnINF_DA_FS
            
012B1:      	AR=		R0
012B2:      	AH=		0xFF
012B3:      	SF=		AR - 0xFF		; ~~ 0xFFFF
012B4:      	if EQ jmp	sfx_ReturnINF_DA_FS
            
            
            	; ~~ add the exponents
            
012B5:      	AR=		R1
012B6:      	clr		AR.b15
012B7:      	AR=		AR + R0
012B8:      	test		AR.b8
012B9:      	if NZ jmp	@sfx_fp32mul_label_1322
            
            	; ~~ minus exponents
            
012BA:      	AR=		AR - 126
012BB:      	test		AR.b8
012BC:      	if ZR jmp	@sfx_fp32mul_label_1103
            
012BD:      	jmp		sfx_RetZero_DA_FS
            @sfx_fp32mul_label_1322:
            
012BE:      	AR=		AR - 126
012BF:      	test		AR.b8
012C0:      	if ZR jmp	@sfx_fp32mul_label_1103
            
012C1:      	jmp		sfx_ReturnINF_DA_FS
            
            @sfx_fp32mul_label_1103:
012C2:      	R0=		AR
            
            	; ~~ unsigned multiplay
012C3:      	PCH=		sfx_MULLONG
012C4:      	lcall		sfx_MULLONG
            
            	; ~~ 48-bit result in CX:DX:AX
            
            	; ~~ drop low 16-bit
            
012C5:      	push		DX
012C6:      	pop		AX
012C7:      	push		CX
012C8:      	pop		DX
012C9:      	test		DX.b15
012CA:      	if NZ jmp	@sfx_fs32mul_label_1326
            
012CB:      	call		sfx_Normalize_DA_FS
            @sfx_fs32mul_label_1326:
012CC:      	jmp		sfx_RoundRet_DA_FS
            
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; DX:AX		- out (fp32)
            ; --------------------------
            sfx_FP32DIV:
            	; ~~ compute final sign bit
012CD:      	test		BX.b15
012CE:      	if ZR jmp	@sfx_fp32div_label_1629
            
012CF:      	not		DX.b15
            @sfx_fp32div_label_1629:
            
            	; ~~ if divisor is zero, ...
012D0:      	AR=		BX
012D1:      	if NZ jmp	@sfx_fp32div_label_1639
            	; ~~ if dividend is also zero, return NaN
012D2:      	AR=		DX
012D3:      	if NZ jmp	@sfx_fp32div_label_1641
012D4:      	jmp		sfx_ReturnNaN_DA_FS
            @sfx_fp32div_label_1641:
            	; ~~ but dividend is non-zero, return infinity
012D5:      	jmp		sfx_ReturnINF_DA_FS
            @sfx_fp32div_label_1639:
            	; ~~ if dividend is zero, return zero
012D6:      	AR=		DX
012D7:      	if NZ jmp	@sfx_fp32div_label_1644
012D8:      	jmp		sfx_RetZero_DA_FS
            @sfx_fp32div_label_1644:
012D9:      	call		sfx_GETARG_DANS_FS
012DA:      	call		sfx_GETARG_BCNS_FS
            
            	; ~~ if divisor is infinity, ...
012DB:      	AR=		R1
012DC:      	AH=		0xFF
012DD:      	SF=		AR - 0xFF	; ~~ 0xFFFF
012DE:      	if NE jmp	@sfx_fp32div_label_1646
012DF:      	AR=		R0
012E0:      	AH=		0xFF
012E1:      	SF=		AR - 0xFF	; ~~ 0xFFFF
012E2:      	if NE jmp	@sfx_fp32div_label_1647
012E3:      	jmp		sfx_ReturnNaN_DA_FS
            @sfx_fp32div_label_1647:
012E4:      	jmp		sfx_RetZero_DA_FS
            
            @sfx_fp32div_label_1646:
            	; ~~ subtract exponents
            
012E5:      	AR=		R1
012E6:      	clr		AR.b15
012E7:      	AR=		R0 - AR
012E8:      	test		AR.b8
012E9:      	if ZR jmp	@sfx_fp32div_label_1649
            
012EA:      	AR=		AR + 127
012EB:      	test		AR.b8
012EC:      	if ZR jmp	@sfx_fp32div_label_1753
012ED:      	jmp		sfx_RetZero_DA_FS
            @sfx_fp32div_label_1649:
            
012EE:      	AR=		AR + 127
012EF:      	test		AR.b8
012F0:      	if ZR jmp	@sfx_fp32div_label_1753
012F1:      	jmp		sfx_ReturnINF_DA_FS
            @sfx_fp32div_label_1753:
012F2:      	R0=		AR
            
012F3:      	AR=		AX
012F4:      	AR=		AR - CX
012F5:      	AR=		DX
012F6:      	AR=		AR - BX + C - 1
012F7:      	test		AR.b15
012F8:      	if ZR jmp	@sfx_fp32div_label_1638
            
            	; ~~ need extra bits on a's mantissa
            
012F9:      	slz		AX, 1
012FA:      	slc		DX, 1
012FB:      	R0--				; ~~ exponent
            @sfx_fp32div_label_1638:
            
            	; ~~ now we perform repeated substraction of float2 from float1
            
            	; ~~ result - DX:AX
            	; ~~ using 25-bit to make float more accuracy
            
012FC:      	push		AX
012FD:      	pop		R2
012FE:      	push		DX
012FF:      	pop		R3
01300:      	DX=		0
01301:      	AX=		0
01302:      	P1=		25
01303:      	push		R0
            @sfx_fp32div_loop_1642:
01304:      	slz		AX, 1
01305:      	slc		DX, 1
            
            	; ~~ mant1 < mant2
01306:      		AR=		R2
01307:      		R0=		AR
01308:      		AR=		R3
01309:      		R1=		AR
0130A:      		AR=		CX
0130B:      		R0=		R0 - AR
0130C:      		AR=		BX
0130D:      		R1=		R1 - AR + C - 1
0130E:      		test		R1.b15
0130F:      		if NZ jmp	@sfx_fp32div_label_1651
            
            	; result |= mask
01310:      		set		AX.b7
            
            	; mant1 -= mant2
01311:      		AR=		CX
01312:      		R2=		R2 - AR
01313:      		AR=		BX
01314:      		R3=		R3 - AR + C - 1
            @sfx_fp32div_label_1651:
            
            	; mantl <<= 1;
01315:      		slz		R2, 1
01316:      		slc		R3, 1
            
01317:      	P1--
01318:      	if NZ jmp	@sfx_fp32div_loop_1642
01319:      	pop		R0
            
            @sfx_fp32div_label_0921:
            
0131A:      	call		sfx_Normalize_DA_FS
0131B:      	jmp		sfx_RoundRet_DA_FS
            
            ; ~~ -- compare support functions -- ~~ ;
            ; ~~    internal                     ~~ ;
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; Z		- EQU
            ; NZ		- not EQU
            ; --------------------------
            
            sfx_FP32CMPU32:
0131C:      	clr		DX.b15
0131D:      	clr		BX.b15
0131E:      	AR=		AX
0131F:      	SF=		AR - CX
01320:      	if NE jmp	@sfx_fp32cmpu32_label_1615
01321:      	AR=		DX
01322:      	SF=		AR - BX
01323:      	if NE jmp	@sfx_fp32cmpu32_label_1615
            
01324:      	set		Z
01325:      	rets
            @sfx_fp32cmpu32_label_1615:
01326:      	clr		Z
01327:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; Z		- EQU
            ; NZ		- not EQU
            ; --------------------------
            sfx_FP32CHKZERO:
01328:      	AR=		AX
01329:      	AR=		AR | CX
0132A:      	if NZ jmp	@sfx_fp32chkzero_label_1620
0132B:      	AR=		DX
0132C:      	AR=		AR | BX
0132D:      	clr		AR.b15
0132E:      	if NZ jmp	@sfx_fp32chkzero_label_1620
0132F:      	set		Z
01330:      	rets
            @sfx_fp32chkzero_label_1620:
01331:      	clr		Z
01332:      	rets
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; DX:AX  <-->   BX:CX
            
            sfx_FP32SWAP:
01333:      	push		AX
01334:      	push		DX
01335:      	push		CX
01336:      	push		BX
01337:      	pop		DX
01338:      	pop		AX
01339:      	pop		BX
0133A:      	pop		CX
0133B:      	rets
            
            ; ~~ -- compare support functions -- ~~ ;
            ; ~~    subcc                        ~~ ;
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : EQU
            ;                 0 : not EQU
            ; --------------------------
            
            sfx_CMPFP32_BCDA_JE:
0133C:      	call		sfx_FP32SWAP
            sfx_CMPFP32_JE:
0133D:      	call		sfx_FP32CHKZERO
0133E:      	if ZR jmp	@sfx_fp32equ_label_1622
0133F:      	call		sfx_FP32CMPU32
01340:      	if ZR jmp	@sfx_fp32equ_label_1622
01341:      	clr		Z
01342:      	rets
            @sfx_fp32equ_label_1622:
01343:      	set		Z
01344:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : >
            ;                 0 : <=
            ; --------------------------
            
            sfx_CMPFP32_BCDA_JG:
            sfx_CMPFP32_BCDA_JA:
01345:      	call		sfx_FP32SWAP
            sfx_CMPFP32_JG:
            sfx_CMPFP32_JA:
            	; ~~ backup sign bit
01346:      	R0=		0
01347:      	AR=		DX
01348:      	slz		AR, 1
01349:      	slc		R0, 1
0134A:      	AR=		BX
0134B:      	slz		AR, 1
0134C:      	slc		R0, 1
            
            	; ~~ check zero and equ (sign bit gone)
            
0134D:      	call		sfx_FP32CHKZERO
0134E:      	if ZR jmp	@sfx_cmpfp32_jg_label_1641
0134F:      	call		sfx_FP32CMPU32
01350:      	if ZR jmp	@sfx_cmpfp32_jg_label_1641
            
            	; ~~ check sign bit
            	; ~~ ---------------------
            	;          A      B
            	; ~~ ---------------------
            	; ~~ 0  =  +  vs  +
            	; ~~ 1  =  +  vs  -
            	; ~~ 2  =  -  vs  +
            	; ~~ 3  =  -  vs  -
            
01351:      	AR=		R0
01352:      	if EQ jmp	@sfx_comfp32_jg_label_1645
01353:      	SF=		AR - 3
01354:      	if EQ jmp	@sfx_comfp32_jg_label_1645
            
            	; ~~ sign bit different
            	; ~~ 1  =  +  vs  -   = >
01355:      	SF=		AR - 1
01356:      	if EQ jmp	@sfx_comfp32_jg_label_1657
            	; ~~ 2  =  -  vs  +   = <
01357:      	jmp		@sfx_cmpfp32_jg_label_1641
            @sfx_comfp32_jg_label_1645:
            	; ~~ sign bit the same
            
01358:      	AR=		CX
01359:      	AX=		AX - AR
0135A:      	AR=		BX
0135B:      	DX=		DX - AR + C - 1
            
0135C:      	AR=		R0
0135D:      	SF=		AR - 3
0135E:      	if NE jmp	@sfx_cmpfp32_jg_label_1558
0135F:      	not		DX.b15
            @sfx_cmpfp32_jg_label_1558:
01360:      	test		DX.b15
01361:      	if ZR jmp	@sfx_comfp32_jg_label_1657
            
            @sfx_cmpfp32_jg_label_1641:
01362:      	clr		Z		; ~~ false
01363:      	rets
            
            @sfx_comfp32_jg_label_1657:
01364:      	set		Z		; ~~ true
01365:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : <
            ;                 0 : >=
            ; --------------------------
            
            sfx_CMPFP32_BCDA_JL:
            sfx_CMPFP32_BCDA_JB:
01366:      	call		sfx_FP32SWAP
            sfx_CMPFP32_JL:
            sfx_CMPFP32_JB:
            	; ~~ backup sign bit
01367:      	R0=		0
01368:      	AR=		DX
01369:      	slz		AR, 1
0136A:      	slc		R0, 1
0136B:      	AR=		BX
0136C:      	slz		AR, 1
0136D:      	slc		R0, 1
            
            	; ~~ check zero and equ (sign bit gone)
            
0136E:      	call		sfx_FP32CHKZERO
0136F:      	if ZR jmp	@sfx_cmpfp32_jl_label_1641
01370:      	call		sfx_FP32CMPU32
01371:      	if ZR jmp	@sfx_cmpfp32_jl_label_1641
            
            	; ~~ check sign bit
            	; ~~ ---------------------
            	;          A      B
            	; ~~ ---------------------
            	; ~~ 0  =  +  vs  +
            	; ~~ 1  =  +  vs  -
            	; ~~ 2  =  -  vs  +
            	; ~~ 3  =  -  vs  -
            
01372:      	AR=		R0
01373:      	if EQ jmp	@sfx_comfp32_jl_label_1645
01374:      	SF=		AR - 3
01375:      	if EQ jmp	@sfx_comfp32_jl_label_1645
            
            	; ~~ sign bit different
            	; ~~ 1  =  +  vs  -   = >
01376:      	SF=		AR - 1
01377:      	if EQ jmp	@sfx_cmpfp32_jl_label_1641
            	; ~~ 2  =  -  vs  +   = <
01378:      	jmp		@sfx_comfp32_jl_label_1657
            
            @sfx_comfp32_jl_label_1645:
            	; ~~ sign bit the same
            
01379:      	AR=		CX
0137A:      	AX=		AX - AR
0137B:      	AR=		BX
0137C:      	DX=		DX - AR + C - 1
            
0137D:      	AR=		R0
0137E:      	SF=		AR - 3
0137F:      	if NE jmp	@sfx_cmpfp32_jl_label_1558
01380:      	not		DX.b15
            @sfx_cmpfp32_jl_label_1558:
01381:      	test		DX.b15
01382:      	if NZ jmp	@sfx_comfp32_jl_label_1657
            
            @sfx_cmpfp32_jl_label_1641:
01383:      	clr		Z		; ~~ false
01384:      	rets
            
            @sfx_comfp32_jl_label_1657:
01385:      	set		Z		; ~~ true
01386:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : not EQU
            ;                 0 : EQU
            ; --------------------------
            
            sfx_CMPFP32_JNE:
01387:      	call		sfx_CMPFP32_JE
01388:      	if ZR jmp	@sfx_cmpfp32_jne_label_false
01389:      	set		Z
0138A:      	rets
            @sfx_cmpfp32_jne_label_false:
0138B:      	clr		Z
0138C:      	rets
            
            
            ; --------------------------
            ; BX:CX		- in (fp32)
            ; DX:AX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : not EQU
            ;                 0 : EQU
            ; --------------------------
            
            sfx_CMPFP32_BCDA_JNE:
0138D:      	call		sfx_CMPFP32_BCDA_JE
0138E:      	if ZR jmp	@sfx_cmpfp32_bcda_jne_label_false
0138F:      	set		Z
01390:      	rets
            @sfx_cmpfp32_bcda_jne_label_false:
01391:      	clr		Z
01392:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : <=
            ;                 0 : >
            ; --------------------------
            
            sfx_CMPFP32_JLE:
            sfx_CMPFP32_JBE:
01393:      	call		sfx_CMPFP32_JG
01394:      	if ZR jmp	@sfx_cmpfp32_jle_label_false
01395:      	set		Z
01396:      	rets
            @sfx_cmpfp32_jle_label_false:
01397:      	clr		Z
01398:      	rets
            
            
            sfx_CMPFP32_BCDA_JLE:
            sfx_CMPFP32_BCDA_JBE:
01399:      	call		sfx_CMPFP32_BCDA_JG
0139A:      	if ZR jmp	@sfx_cmpfp32_bcda_jle_label_false
0139B:      	set		Z
0139C:      	rets
            @sfx_cmpfp32_bcda_jle_label_false:
0139D:      	clr		Z
0139E:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; BX:CX		- in (fp32)
            ; --------------------------
            ; AX		- 1 : >=
            ;                 0 : <
            ; --------------------------
            
            sfx_CMPFP32_JGE:
            sfx_CMPFP32_JAE:
0139F:      	call		sfx_CMPFP32_JL
013A0:      	if ZR jmp	@sfx_cmpfp32_jge_label_false
013A1:      	set		Z
013A2:      	rets
            @sfx_cmpfp32_jge_label_false:
013A3:      	clr		Z
013A4:      	rets
            
            
            sfx_CMPFP32_BCDA_JGE:
            sfx_CMPFP32_BCDA_JAE:
013A5:      	call		sfx_CMPFP32_BCDA_JL
013A6:      	if ZR jmp	@sfx_cmpfp32_bcda_jge_label_false
013A7:      	set		Z
013A8:      	rets
            @sfx_cmpfp32_bcda_jge_label_false:
013A9:      	clr		Z
013AA:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; --------------------------
            sfx_FP32NEG:
013AB:      	not		DX.b15
013AC:      	rets
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\FP32RT.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\FP16RT.ASM> Start=========================
            
            ; ~~-----------------------------------------------------
            ; half precision number (16-bit) float point support for DSP
            ; -------------------------------------------------------
            
            ; -------------------------------------------------------
            ; -------------------------------------------------------
            
            ; +-----------------------------------------------------+
            ; | AX (CX)                                             |
            ; +------+---------------+------------------------------+
            ; |  0   | 4  3  2  1  0 | 9  8  7  6  5  4  3  2  1  0 |
            ; +------+---------------+------------------------------+
            ; | sign | e  e  e  e  e | m  m  m  m  m  m  m  m  m  m |
            ; +------+----------------------------------------------+
            ;    15   14 13 12 11 10   9  8  7  6  5  4  3  2  1  0
            
            
            
            ; ~~ float -> sign / exp / mantissa
            
            ; ~~ AX / CX - mantissa
            
            ; +-------------------------------------------------+
            ; | AX (CX)                                         |
            ; +---+---------------------------------------------+
            ; | 1 | m  m  m  m  m  m  m  m  m  m  0  0  0  0  0 |
            ; +---+---------------------------------------------+
            ;   H   9  8  7  6  5  4  3  2  1  0  -  -  -  -  -
            ;
            
            ; ~~ R0    / R1    - sign and exp
            ; +------------------------+---------+---------------+
            ; | S  -  -  -  -  -  -  - | 0  0  0 | e  e  e  e  e |
            ; +------------------------+---------+---------------+
            ;  15 14 13 12 11 10  9  8   7  6  5   4  3  2  1  0
            
            ; ~~ --
            
            sfx_GETARG_ANS_FP16:
013AD:      	AR=		AX
013AE:      	xchg		AR
013AF:      	sra		AR, 2
013B0:      	AR=		AR & 0x1F
013B1:      	R0=		AR
013B2:      	test		AX.b15
013B3:      	if ZR jmp	@sfx_getarg_aFP16_label_1736
013B4:      	set		R0.b15
            @sfx_getarg_aFP16_label_1736:
013B5:      	AR=		0x03FF
013B7:      	AX=		AX & AR
013B8:      	set		AX.b10		; ~~ HIDDEN 1
013B9:      	rets
            
            
            sfx_GETARG_A_FP16:
013BA:      	call		sfx_GETARG_ANS_FP16
013BB:      	slz		AX, 2
013BC:      	slz		AX, 2
013BD:      	slz		AX, 1
013BE:      	rets
            
            ; ~~ -----------
            
            ; ~~ --
            
            sfx_GETARG_CNS_FP16:
013BF:      	AR=		CX
013C0:      	xchg		AR
013C1:      	sra		AR, 2
013C2:      	AR=		AR & 0x1F
013C3:      	R1=		AR
013C4:      	test		CX.b15
013C5:      	if ZR jmp	@sfx_getarg_cFP16_label_1736
013C6:      	set		R1.b15
            @sfx_getarg_cFP16_label_1736:
013C7:      	AR=		0x03FF
013C9:      	CX=		CX & AR
013CA:      	set		CX.b10		; ~~ HIDDEN 1
013CB:      	rets
            
            
            sfx_GETARG_C_FP16:
013CC:      	call		sfx_GETARG_CNS_FP16
013CD:      	slz		CX, 2
013CE:      	slz		CX, 2
013CF:      	slz		CX, 1
013D0:      	rets
            
            ; ~~ -----------
            ; ~~ AX    - mantissa
            ; ~~ R0    - sign and exp
            
            sfx_Normalize_A_FP16:
            ; {
013D1:      	push		CX
013D2:      	CX=		15
            @sfx_normalize_aFP16_loop_1609:
013D3:      	test		AX.b15
013D4:      	if NZ jmp	@sfx_normalize_aFP16_label_1609
013D5:      	slz		AX, 1
013D6:      	R0--
013D7:      	AR=		R0
013D8:      	clr		AR.b15
013D9:      	if ZR jmp	@sfx_normalize_aFP16_label_1609
013DA:      	loop		@sfx_normalize_aFP16_loop_1609
            @sfx_normalize_aFP16_label_1609:
013DB:      	pop		CX
013DC:      	rets
            ; }
            
            
            ; ~~ AX    - mantissa
            ; ~~ R0    - sign and exp
            
            sfx_RoundRet_A_FP16:
            ; {
            	; ~~ for register save
            
            	; ~~ round lowest 5-bit to increase accuracy ??
            
            	; AR=		AX
            	; AR=		AR & 0x1F
            	; AR=		AR - 0x0F
            	; if LE jmp	@sfx_roundret_aFP16_label_1033
            
            	; test		AX.b5
            	; if ZR jmp	@sfx_roundret_aFP16_label_1033
            
            	; ~~ +1
            
013DD:      	AR=		0x10
013DE:      	AX=		AX + AR
013DF:      	if NC jmp	@sfx_roundret_aFP16_label_1033
            	; ~~ overflow
013E0:      	AX.h=		0x80
013E1:      	R0++
            @sfx_roundret_aFP16_label_1033:
013E2:      	AR=		0xFFE0
013E4:      	AR=		AR & AX
013E5:      	if NZ jmp	sfx_DirectRet_A_FP16
            
            sfx_RetZero_A_FP16:
            	; ~~ float 0.0
013E6:      	AX=		0
013E7:      	rets
            
            
            sfx_DirectRet_A_FP16:
            	; ~~ drop 1-bit  (1.xxx)
013E8:      	slz		AX, 1
            
            	; 5-bit exp
            
013E9:      	AR=		R0
013EA:      	sra		AR, 2
013EB:      	src		AX, 2
013EC:      	sra		AR, 2
013ED:      	src		AX, 2
013EE:      	sra		AR, 1
013EF:      	src		AX, 1
            
            	; ~~ sign bit (sra duplicate)
            
013F0:      	slz		AR, 1
013F1:      	src		AX, 1
013F2:      	rets
            
            sfx_ReturnINF_A_FP16:
013F3:      	AX=		0xF800
013F5:      	AR=		R0
013F6:      	slz		AR, 1
013F7:      	src		AX, 1
013F8:      	rets
            
            sfx_ReturnNaN_A_FP16:
013F9:      	AX=		0x7E00
013FB:      	rets
            ; }
            
            
            
            ; --------------------------
            ; ~~ int type -> float point
            ; --------------------------
            
            
            ; --------------------------
            ; DX:AX		- in  (long)
            ; AX		- out (fp16)
            ; --------------------------
            sfx_LONGTOFP16:
013FC:      	R0=		0x001E		; ~~ E+15
            
            ; sfx_LONG2FP16_CORE:
013FD:      	test		DX.b15
013FE:      	if ZR jmp	@sfx_long2FP16_label_1416
            
            	; ~~ make it positive if value is negative
            
013FF:      	set		R0.b15		; ~~ sign
01400:      	AR=		0
01401:      	AX=		AR - AX
01402:      	DX=		AR - DX + C - 1
            
            @sfx_long2FP16_label_1416:
            	; ~~ check INF
01403:      	AR=		DX
01404:      	if NZ jmp	sfx_ReturnINF_A_FP16
01405:      	call		sfx_Normalize_A_FP16
01406:      	jmp		sfx_RoundRet_A_FP16
            
            ; --------------------------
            
            sfx_LONGTOFP16_CX:
01407:      	call		sfx_FP16SWAP
01408:      	call		sfx_LONGTOFP16
01409:      	call		sfx_FP16SWAP
0140A:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in  (unsigned long)
            ; AX		- out (fp16)
            ; --------------------------
            sfx_ULONGTOFP16:
            ; {
0140B:      	R0=		0x001E		; ~~ E+31
            ; sfx_ULONG2FP16_CORE:
0140C:      	AR=		DX
0140D:      	if NZ jmp	sfx_ReturnINF_A_FP16
0140E:      	call		sfx_Normalize_A_FP16
0140F:      	jmp		sfx_RoundRet_A_FP16
            ; }
            
            ; --------------------------
            
            sfx_ULONGTOFP16_CX:
01410:      	call		sfx_FP16SWAP
01411:      	call		sfx_ULONGTOFP16
01412:      	call		sfx_FP16SWAP
01413:      	rets
            
            
            ; --------------------------
            ; AX		- in  (int)
            ; AX		- out (fp16)
            ; --------------------------
            sfx_INTTOFP16:
01414:      	R0=		0x001E		; ~~ E+15
            
            ; sfx_INT2FS_CORE:
01415:      	test		AX.b15
01416:      	if ZR jmp	@sfx_int2FP16_label_1004
            
01417:      	set		R0.b15
01418:      	AR=		0
01419:      	AX=		AR - AX
            @sfx_int2FP16_label_1004:
0141A:      	call		sfx_Normalize_A_FP16
0141B:      	jmp		sfx_RoundRet_A_FP16
            
            ; --------------------------
            
            sfx_INTTOFP16_CX:
0141C:      	call		sfx_FP16SWAP
0141D:      	call		sfx_INTTOFP16
0141E:      	call		sfx_FP16SWAP
0141F:      	rets
            
            
            ; --------------------------
            ; AX		- in  (int)
            ; AX		- out (fp32)
            ; --------------------------
            sfx_UINTTOFP16:
01420:      	R0=		0x001E		; ~~ E+15
01421:      	call		sfx_Normalize_A_FP16
01422:      	jmp		sfx_RoundRet_A_FP16
            
            ; --------------------------
            
            sfx_UINTTOFP16_CX:
01423:      	call		sfx_FP16SWAP
01424:      	call		sfx_UINTTOFP16
01425:      	call		sfx_FP16SWAP
01426:      	rets
            
            ; ~~--------------------------------------------------------------------
            
            ; --------------------------
            ; AX    - mantissa
            ; R0    - sign & exp
            ; CX    - shift count
            ; --------------------------
            sfx_RSHIFT_A:
            	; ~~ check if 0 shift count
            
01427:      	if ZR jmp	@sfx_rshifta_label_1132
            
            	; ~~ adjust exp
01428:      	push		CX
01429:      	CX=		AR
0142A:      	AR=		AR + R0
0142B:      	test		AR.b5
0142C:      	if ZR jmp	@sfx_rshifta_label_1333
            
0142D:      	AR=		R0
0142E:      	AL=		0x1F
            
            @sfx_rshifta_label_1333:
0142F:      	R0=		AR
01430:      	jmp		@sfx_rshifta_label_1335
            @sfx_rshifta_loop_1335:
01431:      	clr		C
01432:      	src		AX, 1
            @sfx_rshifta_label_1335:
01433:      	loop		@sfx_rshifta_loop_1335
01434:      	pop		CX
            @sfx_rshifta_label_1132:
01435:      	rets
            
            
            ; ~~--
            
            ; --------------------------
            ; AX		- in (fp16)
            ; DX:AX		- out (long)
            ; --------------------------
            sfx_FP16TOLONG:
01436:      	call		sfx_GETARG_A_FP16
01437:      	AR=		0x001E
01438:      	AR=		AR - R0
01439:      	test		AR.b5
0143A:      	if NZ jmp	@sfx_FP162long_label_1709		; ~~ |X| >= 2^16
            
            	; ~~ lowest 5-bit already zero
            
0143B:      	AH=		0
0143C:      	CX=		AR
0143D:      	call		sfx_RSHIFT_A
            
0143E:      	DX=		0
            
0143F:      	test		R0.b15
01440:      	if ZR jmp	@sfx_FP162long_label_1339
            
            	; ~~ negative
            
01441:      	AR=		0
01442:      	AX=		AR - AX
01443:      	AR=		AR - 0 + C - 1
            
            	; ~~ x < -0x80000000
01444:      	if AN jmp	@sfx_FP162long_label_1420
01445:      	rets
            
            @sfx_FP162long_label_1339:
            	; ~~ postive
01446:      	test		DX.b15
01447:      	if NZ jmp	@sfx_FP162long_label_1421
01448:      	rets
            
            @sfx_FP162long_label_1709:
            	; ~~ fs2slong_maxval
01449:      	test		R0.b15
0144A:      	if ZR jmp	@sfx_FP162long_label_1421
            
            @sfx_FP162long_label_1420:
            	; ~~ check sign bit
0144B:      	test		DX.b15
0144C:      	if ZR jmp	@sfx_FP162long_label_1118
0144D:      	rets
            @sfx_FP162long_label_1118:
            	; ~~ fs2slong_maxval_neg
0144E:      	AX=		0
0144F:      	DX=		0x8000
01451:      	rets
            
            @sfx_FP162long_label_1421:
            	; ~~ fs2long_maxval_pos
01452:      	AX=		0xFFFF
01454:      	DX=		0x7FFF
01456:      	rets
            
            
            ; --------------------------
            
            sfx_FP16TOLONG_CX:
01457:      	call		sfx_FP16SWAP
01458:      	call		sfx_FP16TOLONG
01459:      	call		sfx_FP16SWAP
0145A:      	rets
            
            ; ~~--
            
            ; --------------------------
            ; AX		- in (fp16)
            ; DX:AX		- out (ulong)
            ; --------------------------
            sfx_FP16TOULONG:
0145B:      	call		sfx_GETARG_A_FP16
0145C:      	DX=		0
0145D:      	test		R0.b15
0145E:      	if ZR jmp	@sfx_FP162ulong_label_1536
            
            	; ~~ return 0
0145F:      	AX=		0
01460:      	rets
            
            @sfx_FP162ulong_label_1536:
            	; ~~ fs2ulong_int
            
01461:      	AR=		0x001E
01462:      	AR=		AR - R0
01463:      	test		AR.b5
01464:      	if ZR jmp	@sfx_FP162ulong_label_1541
            
            	; ~~ x >= 2^16
            
01465:      	AX=		0xFF		; ~~ 0xFFFF
01466:      	DX=		0xFF		; ~~ 0xFFFF
01467:      	rets
            
            @sfx_FP162ulong_label_1541:
01468:      	AH=		0
01469:      	CX=		AR
0146A:      	call		sfx_RSHIFT_A
0146B:      	rets
            
            ; --------------------------
            
            sfx_FP16TOULONG_CX:
0146C:      	call		sfx_FP16SWAP
0146D:      	call		sfx_FP16TOULONG
0146E:      	call		sfx_FP16SWAP
0146F:      	rets
            
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; AX		- out (short)
            ; --------------------------
            sfx_FP16TOINT:
01470:      	call		sfx_GETARG_A_FP16
01471:      	AR=		0x001E
01472:      	AR=		AR - R0
01473:      	test		AR.b5
01474:      	if NZ jmp	@sfx_FP162int_label_1709		; ~~ |X| >= 2^16
            
            	; ~~ lowest 5-bit already zero
            
01475:      	AH=		0
01476:      	CX=		AR
01477:      	call		sfx_RSHIFT_A
            
01478:      	test		R0.b15
01479:      	if ZR jmp	@sfx_FP162int_label_1339
            
            	; ~~ negative
            
0147A:      	AR=		0
0147B:      	AX=		AR - AX
0147C:      	if NZ jmp	@sfx_FP162int_label_1406
0147D:      	rets
            @sfx_FP162int_label_1406:
0147E:      	test		AX.b15
0147F:      	if ZR jmp	@sfx_FP162int_label_1420
01480:      	rets
            
            @sfx_FP162int_label_1339:
            	; ~~ postive
01481:      	test		AX.b15
01482:      	if NZ jmp	@sfx_FP162int_label_1421
01483:      	rets
            
            
            @sfx_FP162int_label_1709:
            	; ~~ fs2slong_maxval
01484:      	test		R0.b15
01485:      	if ZR jmp	@sfx_FP162int_label_1421
            
            @sfx_FP162int_label_1420:
            	; ~~ FP162int_maxval_neg
01486:      	AX=		0x8000
01488:      	rets
            
            @sfx_FP162int_label_1421:
            	; ~~ FP162int_maxval_pos
01489:      	AX=		0x7FFF
0148B:      	rets
            
            ; --------------------------
            
            sfx_FP16TOINT_CX:
0148C:      	call		sfx_FP16SWAP
0148D:      	call		sfx_FP16TOINT
0148E:      	call		sfx_FP16SWAP
0148F:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; DX:AX		- out (ulong)
            ; --------------------------
            sfx_FP16TOUINT:
01490:      	call		sfx_GETARG_A_FP16
01491:      	test		R0.b15
01492:      	if ZR jmp	@sfx_FP162uint_label_1536
            
            	; ~~ return 0
01493:      	AX=		0
01494:      	rets
            
            @sfx_FP162uint_label_1536:
            	; ~~ fs2ulong_int
            
01495:      	AR=		0x001E
01496:      	AR=		AR - R0
01497:      	test		AR.b5
01498:      	if ZR jmp	@sfx_FP162uint_label_1541
            
            	; ~~ x >= 2^16
            
01499:      	AX=		0xFF		; ~~ 0xFFFF
0149A:      	rets
            
            @sfx_FP162uint_label_1541:
0149B:      	AH=		0
0149C:      	CX=		AR
0149D:      	call		sfx_RSHIFT_A
0149E:      	rets
            
            
            ; --------------------------
            
            sfx_FP16TOUINT_CX:
0149F:      	call		sfx_FP16SWAP
014A0:      	call		sfx_FP16TOUINT
014A1:      	call		sfx_FP16SWAP
014A2:      	rets
            
            
            ; ~~-------------------------------
            ; AX		- in (fp16)
            ; DX:AX		- out (fp32)
            ; ~~-------------------------------
            sfx_FP16TOFP32:
            	; ~~ wait code .....  NaN / INF check
            
014A3:      	call		sfx_GETARG_A_FP16
014A4:      	AR=		0x70
014A5:      	R0=		R0 + AR
            
            	; ~~ drop hidden 1
014A6:      	slz		AX, 1
            
014A7:      	AR=		AX
014A8:      	DX=		AR
014A9:      	AX=		0
            
            	; ~~ generate fp32 format
            
014AA:      	AR=		R0
014AB:      	sra		AR, 2
014AC:      	src		DX, 2
014AD:      	src		AX, 2
014AE:      	sra		AR, 2
014AF:      	src		DX, 2
014B0:      	src		AX, 2
014B1:      	sra		AR, 2
014B2:      	src		DX, 2
014B3:      	src		AX, 2
014B4:      	sra		AR, 2
014B5:      	src		DX, 2
014B6:      	src		AX, 2
            	; ~~ sign bit (sra duplicate)
014B7:      	slz		AR, 1
014B8:      	src		DX, 1
014B9:      	src		AX, 1
014BA:      	rets
            
            
            ; --------------------------
            
            sfx_FP16TOFP32_CX:
014BB:      	call		sfx_FP16SWAP
014BC:      	call		sfx_FP16TOFP32
014BD:      	call		sfx_FP16SWAP
014BE:      	rets
            
            
            ; -------------------------------------------
            ; ~~ swap two fp16 value
            ; R0:AX  <-> R1:CX
            ; -------------------------------------------
            
            sfx_FP16SWAP_AB:
014BF:      	push		R0
014C0:      	push		R1
014C1:      	pop		R0
014C2:      	pop		R1
014C3:      	push		AX
014C4:      	push		CX
014C5:      	pop		AX
014C6:      	pop		CX
014C7:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; AX		- out (fp16)
            ; --------------------------
            
            sfx_FP16ADD:
014C8:      	call		sfx_GETARG_A_FP16
014C9:      	call		sfx_GETARG_C_FP16
            
            	; ~~ which exponent is greater ?
            
014CA:      	AR=		R1
014CB:      	push		R0
014CC:      	pop		R2
014CD:      	clr		AR.b15
014CE:      	clr		R2.b15
014CF:      	SF=		AR - R2
014D0:      	if GE jmp	@sfx_fp16add_label_1043
            
014D1:      	call		sfx_FP16SWAP_AB
            
            @sfx_fp16add_label_1043:
014D2:      	AR=		R1
014D3:      	push		R0
014D4:      	pop		R2
014D5:      	clr		AR.b15
014D6:      	clr		R2.b15
014D7:      	AR=		AR - R2
014D8:      	call		sfx_RSHIFT_A
            
            	; ~~ decide if we need to add or subtract
            
014D9:      	AR=		R0
014DA:      	AR=		AR ^ R1
014DB:      	slz		AR, 1
014DC:      	if AC jmp	@sfx_fp16add_label_1714
            
            	; ~~ add the mantissa (both positive or both negative)
            
014DD:      	AR=		CX
014DE:      	AX=		AX + AR
014DF:      	if NC jmp	@sfx_fp16add_label_1718
014E0:      	AR=		1
014E1:      	call		sfx_RSHIFT_A
014E2:      	set		AX.b15			; ~~ hidden 1
            @sfx_fp16add_label_1718:
014E3:      	jmp		@sfx_fp16add_label_1720
            
            @sfx_fp16add_label_1714:
            
            	; ~~ subtract the mantissa (one of them is negative)
            
014E4:      	AR=		CX
014E5:      	AX=		AX - AR
014E6:      	AR=		0
014E7:      	AR=		AR - 0 + C - 1
014E8:      	if AC jmp	@sfx_fp16add_label_1720
            
014E9:      	AR=		0
014EA:      	AX=		AR - AX
014EB:      	not		R0.b15
            @sfx_fp16add_label_1720:
014EC:      	call		sfx_Normalize_A_FP16
014ED:      	jmp		sfx_RoundRet_A_FP16
            
            ; ~~ --
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; AX		- out (fp16)
            ; --------------------------
            
            sfx_FP16SUB:
014EE:      	not		CX.b15
014EF:      	jmp		sfx_FP16ADD
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; AX		- out (fp16)
            ; --------------------------
            sfx_FP16MUL:
            	; ~~ first check if either input is zero
            
014F0:      	AR=		AX
014F1:      	if ZR jmp	sfx_RetZero_A_FP16
014F2:      	AR=		CX
014F3:      	if ZR jmp	sfx_RetZero_A_FP16
            
014F4:      	call		sfx_GETARG_A_FP16
014F5:      	call		sfx_GETARG_C_FP16
            
            	; ~~ compare final sign bit
            
014F6:      	test		R1.b15
014F7:      	if ZR jmp	@sfx_fp16mul_label_1410
            
014F8:      	not		R0.b15
            @sfx_fp16mul_label_1410:
            
            	; ~~ check if either input is infinity
            
014F9:      	AR=		R1
014FA:      	clr		AR.b15
014FB:      	SF=		AR - 0x1F
014FC:      	if EQ jmp	sfx_ReturnINF_A_FP16
            
014FD:      	AR=		R0
014FE:      	clr		AR.b15
014FF:      	SF=		AR - 0x1F
01500:      	if EQ jmp	sfx_ReturnINF_A_FP16
            
            	; ~~ add the exponent
            
01501:      	AR=		R1
01502:      	clr		AR.b15
01503:      	AR=		AR + R0
01504:      	test		AR.b5
01505:      	if NZ jmp	@sfx_fp16mul_label_1413
            
            	; ~~ + 17 ??
            
01506:      	AR=		AR - 14
01507:      	test		AR.b5
01508:      	if ZR jmp	@sfx_fp16mul_label_1501
            
01509:      	jmp		sfx_RetZero_A_FP16
            @sfx_fp16mul_label_1413:
            
0150A:      	AR=		AR - 14
0150B:      	test		AR.b5
0150C:      	if ZR jmp	@sfx_fp16mul_label_1501
            
0150D:      	jmp		sfx_ReturnINF_A_FP16
            @sfx_fp16mul_label_1501:
0150E:      	R0=		AR
            
            	; ~~ unsigned multiplay (32-bit)
0150F:      	PCH=		sfx_MUL_AX_CX
01510:      	lcall		sfx_MUL_AX_CX
            
            	; ~~ drop 16-bit
01511:      	AR=		DX
01512:      	AX=		AR
            
01513:      	test		AX.b15
01514:      	if NZ jmp	@sfx_fs16mul_label_1531
            
01515:      	call		sfx_Normalize_A_FP16
            @sfx_fs16mul_label_1531:
01516:      	jmp		sfx_RoundRet_A_FP16
            
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; AX		- out (fp16)
            ; --------------------------
            sfx_FP16DIV:
            	; ~~ compare final sign bit
            
01517:      	test		CX.b15
01518:      	if ZR jmp	@sfx_fp16div_label_1629
            
01519:      	not		AX.b15
            @sfx_fp16div_label_1629:
            
            	; ~~ if divisor is zero, ...
0151A:      	AR=		CX
0151B:      	if NZ jmp	@sfx_fp16div_label_1639
            	; ~~ if dividend is also zero, return NaN
0151C:      	AR=		AX
0151D:      	if NZ jmp	@sfx_fp16div_label_1641
0151E:      	jmp		sfx_ReturnNaN_A_FP16
            @sfx_fp16div_label_1641:
            	; ~~ but dividend is non-zero, return infinity
0151F:      	jmp		sfx_ReturnINF_A_FP16
            @sfx_fp16div_label_1639:
            	; ~~ if dividend is zero, return zero
01520:      	AR=		AX
01521:      	if NZ jmp	@sfx_fp16div_label_1644
01522:      	jmp		sfx_RetZero_A_FP16
            @sfx_fp16div_label_1644:
01523:      	call		sfx_GETARG_ANS_FP16
01524:      	call		sfx_GETARG_CNS_FP16
            
            	; ~~ if divisor is infinity, ...
01525:      	AR=		R1
01526:      	AH=		0
01527:      	SF=		AR - 0x1F
01528:      	if NE jmp	@sfx_fp16div_label_1646
01529:      	AR=		R0
0152A:      	AH=		0
0152B:      	SF=		AR - 0x1F
0152C:      	if NE jmp	@sfx_fp16div_label_1647
0152D:      	jmp		sfx_ReturnNaN_A_FP16
            @sfx_fp16div_label_1647:
0152E:      	jmp		sfx_RetZero_A_FP16
            
            @sfx_fp16div_label_1646:
            	; ~~ subtract exponents
            
0152F:      	AR=		R1
01530:      	clr		AR.b15
01531:      	AR=		R0 - AR
01532:      	test		AR.b5
01533:      	if ZR jmp	@sfx_fp16div_label_1649
            
01534:      	AR=		AR + 15
01535:      	test		AR.b5
01536:      	if ZR jmp	@sfx_fp16div_label_1753
01537:      	jmp		sfx_RetZero_A_FP16
            @sfx_fp16div_label_1649:
            
01538:      	AR=		AR + 15
01539:      	test		AR.b5
0153A:      	if ZR jmp	@sfx_fp16div_label_1753
0153B:      	jmp		sfx_ReturnINF_A_FP16
            @sfx_fp16div_label_1753:
0153C:      	R0=		AR
            
            	; ~~ unsigned check !!
            
0153D:      	AR=		AX
0153E:      	AR=		AR - CX
0153F:      	test		AR.b15
01540:      	if ZR jmp	@sfx_fp16div_label_1638
            
01541:      	slz		AX, 1
01542:      	R0--				; ~~ exponent
            
            @sfx_fp16div_label_1638:
            
            	; ~~ now we perform repeated substraction of float2 from float1
            
            	; ~~ result - AX
            	; ~~ using 12-bit to make float more accuracy
            
01543:      	push		AX
01544:      	pop		DX
01545:      	AX=		0
01546:      	P1=		12
            @sfx_fp16div_loop_1642:
01547:      	slz		AX, 1
            
            	; ~~ mant1 < mant2
01548:      		AR=		DX
01549:      		R2=		AR
0154A:      		AR=		CX
0154B:      		R2=		R2 - AR
0154C:      		test		R2.b15
0154D:      		if NZ jmp	@sfx_fp16div_label_1651
            
            	; result |= mask;
0154E:      		set		AX.b4
            
            	; mant1 -= mant2
0154F:      		AR=		CX
01550:      		DX=		DX - AR
            @sfx_fp16div_label_1651:
            
            	; mant1 <<= 1;
01551:      		slz		DX, 1
            
01552:      	P1--
01553:      	if NZ jmp	@sfx_fp16div_loop_1642
            
01554:      	call		sfx_Normalize_A_FP16
01555:      	jmp		sfx_RoundRet_A_FP16
            
            
            ; ~~ -- compare support functions -- ~~ ;
            ; ~~    internal                     ~~ ;
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; Z		- EQU
            ; NZ		- not EQU
            ; --------------------------
            
            sfx_FP16CMPU16:
01556:      	clr		AX.b15
01557:      	clr		CX.b15
01558:      	AR=		AX
01559:      	SF=		AR - CX
0155A:      	if NE jmp	@sfx_fp16cmpu16_label_1615
            
0155B:      	set		Z
0155C:      	rets
            @sfx_fp16cmpu16_label_1615:
0155D:      	clr		Z
0155E:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; Z		- EQU
            ; NZ		- not EQU
            ; --------------------------
            sfx_FP16CHKZERO:
0155F:      	AR=		AX
01560:      	AR=		AR | CX
01561:      	clr		AR.b15
01562:      	AR=		AR + 0
01563:      	if NZ jmp	@sfx_fp16chkzero_label_1620
01564:      	set		Z
01565:      	rets
            @sfx_fp16chkzero_label_1620:
01566:      	clr		Z
01567:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX  <-->   CX
            
            sfx_FP16SWAP:
01568:      	push		AX
01569:      	push		CX
0156A:      	pop		AX
0156B:      	pop		CX
0156C:      	rets
            
            
            ; ~~ -- compare support functions -- ~~ ;
            ; ~~    subcc                        ~~ ;
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : EQU
            ;                 0 : not EQU
            ; --------------------------
            
            sfx_CMPFP16_CX_AX_JE:
0156D:      	call		sfx_FP16SWAP
            sfx_CMPFP16_JE:
0156E:      	call		sfx_FP16CHKZERO
0156F:      	if ZR jmp	@sfx_fp16equ_label_1622
01570:      	call		sfx_FP16CMPU16
01571:      	if ZR jmp	@sfx_fp16equ_label_1622
01572:      	clr		Z
01573:      	rets
            @sfx_fp16equ_label_1622:
01574:      	set		Z
01575:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : >
            ;                 0 : <=
            ; --------------------------
            sfx_CMPFP16_CX_AX_JG:
            sfx_CMPFP16_CX_AX_JA:
01576:      	call		sfx_FP16SWAP
            sfx_CMPFP16_JG:
            sfx_CMPFP16_JA:
            	; ~~ backup sign bit
01577:      	R0=		0
01578:      	AR=		AX
01579:      	slz		AR, 1
0157A:      	slc		R0, 1
0157B:      	AR=		CX
0157C:      	slz		AR, 1
0157D:      	slc		R0, 1
            
            	; ~~ check zero and equ (sign bit gone)
            
0157E:      	call		sfx_FP16CHKZERO
0157F:      	if ZR jmp	@sfx_cmpfp16_jg_label_1641
01580:      	call		sfx_FP16CMPU16
01581:      	if ZR jmp	@sfx_cmpfp16_jg_label_1641
            
            	; ~~ check sign bit
            	; ~~ ---------------------
            	;          A      B
            	; ~~ ---------------------
            	; ~~ 0  =  +  vs  +
            	; ~~ 1  =  +  vs  -
            	; ~~ 2  =  -  vs  +
            	; ~~ 3  =  -  vs  -
            
01582:      	AR=		R0
01583:      	if EQ jmp	@sfx_comfp16_jg_label_1645
01584:      	SF=		AR - 3
01585:      	if EQ jmp	@sfx_comfp16_jg_label_1645
            
            	; ~~ sign bit different
            	; ~~ 1  =  +  vs  -   = >
01586:      	SF=		AR - 1
01587:      	if EQ jmp	@sfx_comfp16_jg_label_1657
            	; ~~ 2  =  -  vs  +   = <
01588:      	jmp		@sfx_cmpfp16_jg_label_1641
            @sfx_comfp16_jg_label_1645:
            	; ~~ sign bit the same
            
01589:      	AR=		CX
0158A:      	AX=		AX - AR
            
0158B:      	AR=		R0
0158C:      	SF=		AR - 3
0158D:      	if NE jmp	@sfx_cmpfp16_jg_label_1558
0158E:      	not		AX.b15
            @sfx_cmpfp16_jg_label_1558:
0158F:      	test		AX.b15
01590:      	if ZR jmp	@sfx_comfp16_jg_label_1657
            
            @sfx_cmpfp16_jg_label_1641:
01591:      	clr		Z		; ~~ false
01592:      	rets
            
            @sfx_comfp16_jg_label_1657:
01593:      	set		Z		; ~~ true
01594:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : <
            ;                 0 : >=
            ; --------------------------
            
            sfx_CMPFP16_CX_AX_JL:
            sfx_CMPFP16_CX_AX_JB:
01595:      	call		sfx_FP16SWAP
            sfx_CMPFP16_JL:
            sfx_CMPFP16_JB:
            	; ~~ backup sign bit
01596:      	R0=		0
01597:      	AR=		AX
01598:      	slz		AR, 1
01599:      	slc		R0, 1
0159A:      	AR=		CX
0159B:      	slz		AR, 1
0159C:      	slc		R0, 1
            
            	; ~~ check zero and equ (sign bit gone)
            
0159D:      	call		sfx_FP16CHKZERO
0159E:      	if ZR jmp	@sfx_cmpfp16_jl_label_1641
0159F:      	call		sfx_FP16CMPU16
015A0:      	if ZR jmp	@sfx_cmpfp16_jl_label_1641
            
            	; ~~ check sign bit
            	; ~~ ---------------------
            	;          A      B
            	; ~~ ---------------------
            	; ~~ 0  =  +  vs  +
            	; ~~ 1  =  +  vs  -
            	; ~~ 2  =  -  vs  +
            	; ~~ 3  =  -  vs  -
            
015A1:      	AR=		R0
015A2:      	if EQ jmp	@sfx_comfp16_jl_label_1645
015A3:      	SF=		AR - 3
015A4:      	if EQ jmp	@sfx_comfp16_jl_label_1645
            
            	; ~~ sign bit different
            	; ~~ 1  =  +  vs  -   = >
015A5:      	SF=		AR - 1
015A6:      	if EQ jmp	@sfx_cmpfp16_jl_label_1641
            	; ~~ 2  =  -  vs  +   = <
015A7:      	jmp		@sfx_comfp16_jl_label_1657
            
            @sfx_comfp16_jl_label_1645:
            	; ~~ sign bit the same
            
015A8:      	AR=		CX
015A9:      	AX=		AX - AR
            
015AA:      	AR=		R0
015AB:      	SF=		AR - 3
015AC:      	if NE jmp	@sfx_cmpfp16_jl_label_1558
015AD:      	not		AX.b15
            @sfx_cmpfp16_jl_label_1558:
015AE:      	test		AX.b15
015AF:      	if NZ jmp	@sfx_comfp16_jl_label_1657
            
            @sfx_cmpfp16_jl_label_1641:
015B0:      	clr		Z		; ~~ false
015B1:      	rets
            
            @sfx_comfp16_jl_label_1657:
015B2:      	set		Z		; ~~ true
015B3:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : not EQU
            ;                 0 : EQU
            ; --------------------------
            
            sfx_CMPFP16_JNE:
015B4:      	call		sfx_CMPFP16_JE
015B5:      	if ZR jmp	@sfx_cmpfp16_jne_label_false
015B6:      	set		Z
015B7:      	rets
            @sfx_cmpfp16_jne_label_false:
015B8:      	clr		Z
015B9:      	rets
            
            ; --------------------------
            ; CX		- in (fp16)
            ; AX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : not EQU
            ;                 0 : EQU
            ; --------------------------
            
            sfx_CMPFP16_CX_AX_JNE:
015BA:      	call		sfx_CMPFP16_CX_AX_JE
015BB:      	if ZR jmp	@sfx_cmpfp16_ca_jne_label_false
015BC:      	set		Z
015BD:      	rets
            @sfx_cmpfp16_ca_jne_label_false:
015BE:      	clr		Z
015BF:      	rets
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : <=
            ;                 0 : >
            ; --------------------------
            
            sfx_CMPFP16_JLE:
            sfx_CMPFP16_JBE:
015C0:      	call		sfx_CMPFP16_JG
015C1:      	if ZR jmp	@sfx_cmpfp16_jle_label_false
015C2:      	set		Z
015C3:      	rets
            @sfx_cmpfp16_jle_label_false:
015C4:      	clr		Z
015C5:      	rets
            
            
            sfx_CMPFP16_CX_AX_JLE:
            sfx_CMPFP16_CX_AX_JBE:
015C6:      	call		sfx_CMPFP16_CX_AX_JG
015C7:      	if ZR jmp	@sfx_cmpfp16_ca_jle_label_false
015C8:      	set		Z
015C9:      	rets
            @sfx_cmpfp16_ca_jle_label_false:
015CA:      	clr		Z
015CB:      	rets
            
            
            ; --------------------------
            ; AX		- in (fp16)
            ; CX		- in (fp16)
            ; --------------------------
            ; AX		- 1 : >=
            ;                 0 : <
            ; --------------------------
            
            sfx_CMPFP16_JGE:
            sfx_CMPFP16_JAE:
015CC:      	call		sfx_CMPFP16_JL
015CD:      	if ZR jmp	@sfx_cmpfp16_jge_label_false
015CE:      	set		Z
015CF:      	rets
            @sfx_cmpfp16_jge_label_false:
015D0:      	clr		Z
015D1:      	rets
            
            
            sfx_CMPFP16_CX_AX_JGE:
            sfx_CMPFP16_CX_AX_JAE:
015D2:      	call		sfx_CMPFP16_CX_AX_JL
015D3:      	if ZR jmp	@sfx_cmpfp16_ca_jge_label_false
015D4:      	set		Z
015D5:      	rets
            @sfx_cmpfp16_ca_jge_label_false:
015D6:      	clr		Z
015D7:      	rets
            
            ; --------------------------
            ; DX:AX		- in (fp32)
            ; --------------------------
            sfx_FP16NEG:
015D8:      	not		AX.b15
015D9:      	rets
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\FP16RT.ASM> End=========================
            
            
            
            // .code segment
            
            WAKEUP_PROC:
015DA:      	PCH=	SYS_PROG_ENTRY
015DB:      	ljmp	SYS_PROG_ENTRY
            
            IntVectTable:
015DC:      	DW #EMPTY_INTENTRY
015DD:      	DW #EMPTY_INTENTRY
015DE:      	DW #EMPTY_INTENTRY
015DF:      	DW #EMPTY_INTENTRY
015E0:      	DW #EMPTY_INTENTRY
015E1:      	DW #EMPTY_INTENTRY
            
            // .code ends
            ;;FDSP-IDE V2.53
            _SYSTEM_MAIN_PROGRAM_END_ADDRESS: 
