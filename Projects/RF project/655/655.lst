            ;=========================Include <OPTION.INC> Start=========================
            //--------------------------------------------------------------------------------------------------
            // TRITAN FDSP-IDE Option define file.
            // WARNING! All changes made in this file will be lost when recompiling.
            //--------------------------------------------------------------------------------------------------
            // Part number    : TRSF16127A
            // Option version : 2.2
            // Base Information--------------------------------------------------------------------------------
            #define       _OPT_TRSF16127A_                
            #define       _OPT_PROMSize_                0x20000   //PROM Size
            #define       _OPT_SRAMSize_                3072      //SRAM Size
            // I/O Configuration--------------------------------------------------------------------------------
            #define       _OPT_EXTReset_EN_             0         //EXT Reset Enable,0:Disable,1:Enable
            #define       _OPT_EXTINT1_EN_              0         //EXTINT1_EN,0:Disable,1:Enable
            #define       _OPT_EXTINT0_EN_              0         //EXTINT0_EN,0:Disable,1:Enable
            #define       _OPT_SpreadSpectrum_          0         //Spread Spectrum Enable,0:Disable,1:Enable
            #define       _OPT_EXTResetPin_             0         //EXT Reset Pin Select,0:PB3,1:PC3
            #define       _OPT_EXTINT1_INV_             0         //EXTINT1_INV,0:Disable,1:Enable
            #define       _OPT_EXTINT0_INV_             0         //EXTINT0_INV,0:Disable,1:Enable
            // Memory Configuration-----------------------------------------------------------------------------
            #define       _OPT_PRAMBank_                0         //PRAM Bank
            #define       _OPT_PRAMSize_                0         //PRAM Size(Words)
            #define       _OPT_WriteSegmentProtection_  0x0FFFF   //Write Segment Protection(0000H~ )
            // System Control Setup-----------------------------------------------------------------------------
            #define       _OPT_Bank0Speed_              11        //Bank0 Speed(MHz)
            #define       _OPT_RTCINT_                  1         //RTC interrupt,0:Disable,1:Enable
            #define       _OPT_RTCinHalt_               0         //RTC LP32K in Halt Mode,0:Disable,1:Enable
            #define       _OPT_LVR_                     2200      //LVR(mv)
            #define       _OPT_WatchDog_                256       //Watch dog(ms)
            #define       _OPT_ICEEnable_               1         //ICE Disable/Enable,0:Disable,1:Enable
            // Audio Configuration------------------------------------------------------------------------------
            #define       _OPT_AudioSamplingRate_       32        //Audio Sampling Rate(KHz)
            #define       _OPT_PWMBit_                  16        //PWM Bit
            #define       _OPT_DACFIFO_                 1         //DAC FIFO,0:Disable,1:Enable
            //--------------------------------------------------------------------------------------------------
            ;=========================Include <OPTION.INC> End=========================
            
            #define DSP_SRAM_SIZE		3072
            #define DSP_VECT_SUPPORT		6
            #define _PROJECT_CONFIG_FILE_		
            #define _PWM_32K_		
            #define MD2_USE_PROM		
            #define MD2_WORD_ADR		
            #define RAMBANK 		 15
            #define MD2_PRAM_START_BASE 		 0x0000
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> Start=========================
            
            ; =====================
            ;      COMMON I/O
            ; =====================
            
            #ifdef _MFDSP_
            
            ; {
            	STATUS          EQU             00H             ;R/W, BIT0: Zero.
            							;R/W, BIT1: Carry.
            							;R/W, BIT2: Overflow.
            							;R/W, BIT3: Negative.
            							;R/W, BIT7: Global Interrupt Enable.
            							;R/W, BIT[12:8]: SD_EN, TRA_EN, ADH_EN, SPIS_EN, SPIM_EN.
            							;R/W, BIT13: Interrupt Vector Table Access Enable.
            							;R/W, BIT14: Filter Buffer Available.
            							;R/W, BIT15: Parser Buffer Available.
            
            	INTENA          EQU             01H             ;R/W, Int Enable.
            	INTREQ          EQU             02H             ;R/W, Int Request.
            	IntVect         EQU             03H             ;R/W, Interrupt Table
            	IOC_PA          EQU             04H             ;R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB          EQU             05H             ;R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PCI         EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PC          EQU             06H             ;R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA           EQU             07H             ;R/W, General input/output port.
            	PortB           EQU             08H             ;R/W, General input/output port.
            	PortCI          EQU             09H             ;R/W, General input/output port.
            	PortC           EQU             09H             ;R/W, General input/output port.
            	INTMASK         EQU             0AH             ;R/W, Int Mask.
            	SPIS_CTL        EQU             0BH             ;R/W, SPI slaver control register.
            	SPIS_DAT        EQU             0CH             ;R/W, SPI slaver data    register.
            	SPI_CTL         EQU             0DH             ;R/W, SPI master control register.
            	SPI_DAT         EQU             0EH             ;R/W, SPI master data    register.
            	SD_CTL          EQU             0FH             ;R/W, SD card interface control register.
            	SD_DAT          EQU             10H             ;R/W, SD card interface data.
            	SD_RSP          EQU             11H             ;R/W, SD card interface response register.
            	UART_CTL        EQU             12H
            	UART_DAT        EQU             13H
            	DPPWM           EQU             14H
            	//------------------------------------
            	PUPD_PA         EQU             15H             ;R/W, PortA  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	DACL            EQU             16H
            	DACR            EQU             17H
            	USB_CTL         EQU             18H
            	USB_DAT         EQU             19H
            	PUPD_PB         EQU             1AH             ;R/W, PortB  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	PUPD_PC         EQU             1BH             ;R/W, PortC  Pull-Up(b15~b8)/Pull-Down(b7~b0)
            	MISC            EQU             1CH
            	ClrWDT          EQU             1DH             ;W, Clear Watch-dog reset.
            	Real_T          EQU             1DH             ;R, System Real-Time Counter, base on 31.25us
            	IOP_IX          EQU             1EH             ;W, Programming IO Port index .
            	IOP_DAT         EQU             1FH             ;W, Programming IO Port Data .
            
            	//------------------------------------
            	// Virtual         Program IO Port
            	IOP_Timer1      EQU             00H
            	IOP_Timer2      EQU             01H
            	IOP_RTC32K      EQU             02H
            	IOP_PreScale    EQU             03H
            	IOP_FGREEN32K   EQU             04H
            	IOP_ODEN_PA     EQU             05H
            	IOP_ODEN_PB     EQU             06H
            	IOP_ODEN_PC     EQU             07H
            
            	IOP_TOUCH_CFG   EQU             08H
            	IOP_TOUCH_DAT   EQU             09H
            
            	IOP_CLK_CFG     EQU             0AH
            	IOP_CLK_DAT1    EQU             0BH
            	IOP_CLK_DAT2    EQU             0CH
            	IOP_CUR_PA      EQU             0DH
            	IOP_CUR_PB      EQU             0EH
            	IOP_CUR_PC      EQU             0FH
            
            	//------------------------------------
            	// IO[0x40-0x7F]
            	ADH_CFG0        EQU             40H
            	ADH_CFG1        EQU             41H
            	ADH_CFG2        EQU             42H
            	ADH_CFG3        EQU             43H
            	ADH_DO          EQU             44H
            
            	ADL_CFG         EQU             45H
            
            	TRA_CFG         EQU             46H
            	TRA_DAT         EQU             47H
            
            	I2C_CTL         EQU             48H
            	I2C_DAT         EQU             49H
            	I2C_CMD         EQU             4AH
            	I2C_SR          EQU             4AH             ; same as I2C_CMD
            
            	I80_CTL         EQU             4BH
            	I80_INX         EQU             4CH
            	I80_DAT         EQU             4DH
            	I80_RADR        EQU             4EH
            	I80_DMANUM      EQU             4FH
            
            	SD_DMA_CTL      EQU             50H
            	SD_DMA_RADR     EQU             51H
            	SD_DMA_DMANUM   EQU             52H
            
            	SPI_DMA_CTL     EQU             53H
            	SPI_DMA_RADR    EQU             54H
            	SPI_DMA_DMANUM  EQU             55H
            
            	USB_DMA_CTL     EQU             56H
            	USB_DMA_RADR    EQU             57H
            	USB_DMA_DMANUM  EQU             58H
            
            	SSC             EQU             63H
            	MIC             EQU             64H
            	GREEN           EQU             65H
            	SLEEP           EQU             66H
            	SPEED           EQU             67H
            	PR              EQU             68H
            
            	//------------------------------------
            	IOP_WAKEN_PA    EQU             10H
            	IOP_WAKEN_PB    EQU             11H
            	IOP_WAKEN_PC    EQU             12H
            ; }
            
            #endif
            
            
            
            
            #ifdef _MSPEECHDSP_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            #ifdef _MSPEECHDSP2_
            
            	STATUS		EQU    00H	 ; R/W, BIT0:  Zero.
            					 ; R/W, BIT1:  Carry.
            					 ; R/W, BIT2:  Overflow.
            					 ; R/W, BIT3:  Negative.
            					 ; R/W, BIT7:  Global Interrupt Enable.
            					 ; R/W, BIT8:  SPIM_EN.
            					 ; R/W, BIT13: Interrupt Vector Table Access Enable.
            					 ; R/W, BIT14: Filter Buffer Available.
            					 ; R/W, BIT15: Parser Buffer Available.
            
            	INTENA		EQU    01H	 ; R/W, Int Enable.
            	INTREQ		EQU    02H	 ; R/W, Int Request.
            	IntVect		EQU    03H	 ; R/W, Interrupt Table
            	IOC_PA		EQU    04H	 ; R/W, PortA IO control. ('0' = input,'1' = output)
            	IOC_PB		EQU    05H	 ; R/W, PortB IO control. ('0' = input,'1' = output)
            	IOC_PC		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	IOC_PCI		EQU    06H	 ; R/W, PortCI IO control. ('0' = input,'1' = output)
            	PortA		EQU    07H	 ; R/W, General input/output port.
            	PortB		EQU    08H	 ; R/W, General input/output port.
            	PortC		EQU    09H	 ; R/W, General input/output port.
            	PortCI		EQU    09H	 ; R/W, General input/output port.
            	INTMASK		EQU    0AH	 ; R/W, Int Mask.
            	DACL		EQU    16H
            	MISC5		EQU    18H	 ; R/W, Miscellanea register #5
            	MISC4		EQU    19H	 ; R/W, Miscellanea register #4
            	MISC3		EQU    1AH	 ; R/W, Miscellanea register #3
            	MISC2		EQU    1BH	 ; R/W, Miscellanea register #2
            	MISC		EQU    1CH	 ; R/W, Miscellanea register #1
            	ClrWDT		EQU    1DH	 ; W, Clear Watch-dog reset.
            	Real_T		EQU    1DH	 ; R, System Real-Time Counter, base on 31.25us
            	IOP_IX		EQU    1EH	 ; W, Programming IO Port index .
            	IOP_DAT		EQU    1FH	 ; W, Programming IO Port Data .
            
            	; Virtual Program IO Port
            	IOP_Timer1	EQU    00H
            	IOP_Timer2	EQU    01H
            	IOP_RTC32K	EQU    02H
            	IOP_FetchCNT	EQU    03H
            
            	IOP_PA_PD50K	EQU    05H
            	IOP_PB_PD50K	EQU    06H
            	IOP_PCI_PD50K	EQU    07H
            	IOP_PA_PD220K	EQU    08H
            	IOP_PB_PD220K	EQU    09H
            	IOP_PCI_PD220K	EQU    0AH
            	IOP_PA_PD1M	EQU    0BH
            	IOP_PB_PD1M	EQU    0CH
            	IOP_PCI_PD1M	EQU    0DH
            	IOP_PA_4MA	EQU    0EH
            	IOP_PB_4MA	EQU    0FH
            	IOP_PCI_4MA	EQU    10H
            	IOP_PA_WLOW	EQU    11H
            	IOP_PB_WLOW	EQU    12H
            	IOP_PCI_WLOW	EQU    13H
            	IOP_WAKEN_PA	EQU    14H
            	IOP_WAKEN_PB	EQU    15H
            	IOP_WAKEN_PC	EQU    16H
            	IOP_WAKELV_PA	EQU    17H
            	IOP_WAKELV_PB	EQU    18H
            	IOP_WAKELV_PC	EQU    19H
            	IOP_WAKEDLV_PB	EQU    1AH
            
            	; IO[0x40-0x7F]
            	ENC_DAT		EQU    54H
            	SPI_CTL		EQU    55H
            	SPI_DAT		EQU    56H
            	EP		EQU    5EH
            	SSC		EQU    63H
            	SPEED		EQU    67H
            #endif
            
            
            
            
            ;-----------------------------------------------------------
            
            #ifdef NO_OPTIMAL_RM
            
            
            #else
            
            #define Optimal_RM	; Optimal RAM function Enable
            
            #endif
            
            
            VarRM[0:127] = {
            BP_SAVE,
            
            }
            
            VarRM[128:511] = {
            
            }
            
            VarRM[512:4095] = {
            
            }
            
            ShareVar = {
            
            }
            
            ;--------------------------------------------------------------------
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.INC> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> Start=========================
            
            	org	0000h
            RSTB_ENTRY:
00000:      	PCH=		SYS_PROG_ENTRY
00001:      	ljmp		SYS_PROG_ENTRY
            
            
            	org	0004h
            WAKEUP_ENTRY:
00004:      	PCH=		WAKEUP_PROC
00005:      	ljmp		WAKEUP_PROC
            
            
            	org	0100h
            
            
            
            SYS_PROG_ENTRY:
            	; ~~ DSP initial
            
00100:      	dsi
00101:      	nop
00102:      	AR=		@STACKBOTTOM
00104:      	BP=		AR
00105:      	AR=		DSP_SRAM_SIZE
00107:      	AR--
00108:      	CX=		AR
00109:      	I1=		AR
0010A:      	AR=		0
            @clearram_loop_1705:
0010B:      	rm[I1--]=	AR
0010C:      	loop		@clearram_loop_1705
            
0010D:      	io[ClrWDT]=	AR
            
0010E:      	set		io[STATUS].b13
0010F:      	CX=		DSP_VECT_SUPPORT
00110:      	P1=		#IntVectTable
00113:      	jmp		@setintvect_label_1548
            @setintvect_loop_1548:
00114:      	AR=		pm[P1++]
00115:      	io[IntVect]=	AR
            @setintvect_label_1548:
00116:      	loop		@setintvect_loop_1548
            
00117:      	clr		io[STATUS].b13
            
            	; ~~ C code
            
            #ifdef PRAM_BANK
            	PCH=		sfx_DynFastCallInit
            	lcall		sfx_DynFastCallInit
            #endif
            
00118:      	PCH=		ginit_code
00119:      	lcall		ginit_code
            
0011A:      	PCH=		_main
0011B:      	lcall		_main
0011C:      	jmp		SYS_PROG_ENTRY
            
            
            /* ================================================================= */
            // ------------- Interrupt Service Routine--------------------------
            /* ================================================================= */
            
            EMPTY_INTENTRY:
0011D:      	reti
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\CRT0.ASM> End=========================
            
            ;=========================Include <DEPS\655_99B6FC89.S.CODE.ASM> Start=========================
            ; 655.C Code Start!!;
            VarRM[0:4095]={
             LD1B663E8_2,_flagD698DD9D,_Key_press_flag14FFF825,_TFSF_Color_BufA76B681D[5] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _main();
            ; //rjmp void _InitSound5CCD501D();
            ; //rjmp void _INITIAL0C18377D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _main()				
            _main:
            ; //{
            ; //_AED4A60EA_0:;					
            _AED4A60EA_0:
            ; //	
            ; //_AED4A60EA_1:;					
            _AED4A60EA_1:
            ; //	sAX	= 0x0000;			
0011E:      	AX	= 0x00
            ; //	asm I1 = _sub_vol980B1B83+0;		
0011F:      	I1 = _sub_vol980B1B83+0//
            ; //	*(__int16*)sSI	= sAX			
00120:      	rm[I1]	= AX
            ; //_AED4A60EA_2:;					
            _AED4A60EA_2:
            ; //_AED4A60EA_3:;					
            _AED4A60EA_3:
            ; //	_INITIAL0C18377D();			
00121:      	pch	= _INITIAL0C18377D
00122:      	lcall	_INITIAL0C18377D
            ; //_AED4A60EA_4:;					
            _AED4A60EA_4:
            ; //_AED4A60EA_5:;					
            _AED4A60EA_5:
            ; //	_InitialDA4A7CC4();			
00123:      	pch	= _InitialDA4A7CC4
00124:      	lcall	_InitialDA4A7CC4
            ; //LD1B663E8_5:;					
            LD1B663E8_5:
            ; //_AED4A60EA_6:;					
            _AED4A60EA_6:
            ; //_AED4A60EA_7:;					
            _AED4A60EA_7:
            ; //	asm	io[ClrWDT] = AR			
00125:      	io[ClrWDT] = AR
            ; //	
            ; //_AED4A60EA_8:;					
            _AED4A60EA_8:
            ; //	sAX	= 0;				
00126:      	AX	= 0x00
            ; //	asm test io[0x08].b2;			
00127:      	test io[0x08].b2//
            ; //	if(__jz__) goto LD1B663E8_8;		
00128:      	if ZR	jmp LD1B663E8_8
            ; //	sAX	= 1;				
00129:      	AX	= 0x01
            ; //LD1B663E8_8:;					
            LD1B663E8_8:
            ; //	sCX	= 0x0001;			
0012A:      	CX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
0012B:      	pch	= sfx_CMP_AX_CX_JE
0012C:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto LD1B663E8_9;	
0012D:      	if ZR	jmp LD1B663E8_9
            ; //	goto	LD1B663E8_6;			
0012E:      	jmp	LD1B663E8_6
            ; //LD1B663E8_9:;					
            LD1B663E8_9:
            ; //	sAX	= 0x0001;			
0012F:      	AX	= 0x01
            ; //	goto LD1B663E8_7;			
00130:      	jmp	LD1B663E8_7
            ; //LD1B663E8_6:;					
            LD1B663E8_6:
            ; //	sAX	= 0x0000;			
00131:      	AX	= 0x00
            ; //LD1B663E8_7:;					
            LD1B663E8_7:
            ; //	asm I1 = _Key_press_flag14FFF825+0;	
00132:      	I1 = _Key_press_flag14FFF825+0//
            ; //	*(__int16*)sSI	= sAX			
00133:      	rm[I1]	= AX
            ; //_AED4A60EA_9:;					
            _AED4A60EA_9:
            ; //_AED4A60EA_10:;					
            _AED4A60EA_10:
            ; //	sAX	= 0x0003;			
00134:      	AX	= 0x03
            ; //	PUSH(sAX);				
00135:      	push	AX
            ; //	sAX	= 0x0005;			
00136:      	AX	= 0x05
            ; //	PUSH(sAX);				
00137:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00138:      	pch	= _WS_TRSF_color_setE1CC300C
00139:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
0013A:      	pop	AR
0013B:      	pop	AR
            ; //_AED4A60EA_11:;					
            _AED4A60EA_11:
            ; //_AED4A60EA_12:;					
            _AED4A60EA_12:
            ; //	sAX	= 0x0005;			
0013C:      	AX	= 0x05
            ; //	PUSH(sAX);				
0013D:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
0013E:      	pch	= _delay6F9F34ED
0013F:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
00140:      	pop	AR
            ; //_AED4A60EA_13:;					
            _AED4A60EA_13:
            ; //_AED4A60EA_14:;					
            _AED4A60EA_14:
            ; //	sAX	= 0x0003;			
00141:      	AX	= 0x03
            ; //	PUSH(sAX);				
00142:      	push	AX
            ; //	sAX	= 0x0003;			
00143:      	AX	= 0x03
            ; //	PUSH(sAX);				
00144:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00145:      	pch	= _WS_TRSF_color_setE1CC300C
00146:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00147:      	pop	AR
00148:      	pop	AR
            ; //_AED4A60EA_15:;					
            _AED4A60EA_15:
            ; //_AED4A60EA_16:;					
            _AED4A60EA_16:
            ; //	sAX	= 0x0005;			
00149:      	AX	= 0x05
            ; //	PUSH(sAX);				
0014A:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
0014B:      	pch	= _delay6F9F34ED
0014C:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
0014D:      	pop	AR
            ; //_AED4A60EA_17:;					
            _AED4A60EA_17:
            ; //_AED4A60EA_18:;					
            _AED4A60EA_18:
            ; //	sAX	= 0x0003;			
0014E:      	AX	= 0x03
            ; //	PUSH(sAX);				
0014F:      	push	AX
            ; //	sAX	= 0x0004;			
00150:      	AX	= 0x04
            ; //	PUSH(sAX);				
00151:      	push	AX
            ; //	_WS_TRSF_color_setE1CC300C(STACK[sSP + 0], STACK[sSP + 1]);
00152:      	pch	= _WS_TRSF_color_setE1CC300C
00153:      	lcall	_WS_TRSF_color_setE1CC300C
            ; //	RESTORESP(2);				
00154:      	pop	AR
00155:      	pop	AR
            ; //	goto LD1B663E8_5;			
00156:      	jmp	LD1B663E8_5
            ; //LD1B663E8_4:;					
            LD1B663E8_4:
            ; //LD1B663E8_3:;					
            LD1B663E8_3:
            ; //_AED4A60EA_19:;					
            _AED4A60EA_19:
            ; //	return;					
00157:      	rets
            ; //_main_end:;					
            _main_end:
            ; //_AED4A60EA_20:;					
            _AED4A60EA_20:
            ; //}
            ; //
            ; //rjmp void _InitSound5CCD501D()			
            _InitSound5CCD501D:
            ; //{
            ; //_AED4A60EA_21:;					
            _AED4A60EA_21:
            ; //	
            ; //_AED4A60EA_22:;					
            _AED4A60EA_22:
            ; //	io[0x3E]	= 0x3FFF;		
00158:      	AR	= 0x3FFF
0015A:      	io[0x3E]	= AR
            ; //_AED4A60EA_23:;					
            _AED4A60EA_23:
            ; //	io[0x16]	= 0x0000;		
0015B:      	AR	= 0x00
0015C:      	io[0x16]	= AR
            ; //_AED4A60EA_24:;					
            _AED4A60EA_24:
            ; //	io[0x16]	= 0x0000;		
0015D:      	AR	= 0x00
0015E:      	io[0x16]	= AR
            ; //_AED4A60EA_25:;					
            _AED4A60EA_25:
            ; //	io[0x16]	= 0x0000;		
0015F:      	AR	= 0x00
00160:      	io[0x16]	= AR
            ; //_AED4A60EA_26:;					
            _AED4A60EA_26:
            ; //	io[0x16]	= 0x0000;		
00161:      	AR	= 0x00
00162:      	io[0x16]	= AR
            ; //_AED4A60EA_27:;					
            _AED4A60EA_27:
            ; //	io[0x36]	= 0x0000;		
00163:      	AR	= 0x00
00164:      	io[0x36]	= AR
            ; //_AED4A60EA_28:;					
            _AED4A60EA_28:
            ; //	io[0x36]	= 0x0000;		
00165:      	AR	= 0x00
00166:      	io[0x36]	= AR
            ; //_AED4A60EA_29:;					
            _AED4A60EA_29:
            ; //	io[0x36]	= 0x0000;		
00167:      	AR	= 0x00
00168:      	io[0x36]	= AR
            ; //_AED4A60EA_30:;					
            _AED4A60EA_30:
            ; //	io[0x36]	= 0x0000;		
00169:      	AR	= 0x00
0016A:      	io[0x36]	= AR
            ; //_AED4A60EA_31:;					
            _AED4A60EA_31:
            ; //	io[0x36]	= 0x0000;		
0016B:      	AR	= 0x00
0016C:      	io[0x36]	= AR
            ; //_AED4A60EA_32:;					
            _AED4A60EA_32:
            ; //	io[0x36]	= 0x0000;		
0016D:      	AR	= 0x00
0016E:      	io[0x36]	= AR
            ; //_AED4A60EA_33:;					
            _AED4A60EA_33:
            ; //	io[0x36]	= 0x0000;		
0016F:      	AR	= 0x00
00170:      	io[0x36]	= AR
            ; //_AED4A60EA_34:;					
            _AED4A60EA_34:
            ; //	io[0x36]	= 0x0000;		
00171:      	AR	= 0x00
00172:      	io[0x36]	= AR
            ; //_AED4A60EA_35:;					
            _AED4A60EA_35:
            ; //	io[0x3C]	= 0x0000;		
00173:      	AR	= 0x00
00174:      	io[0x3C]	= AR
            ; //_AED4A60EA_36:;					
            _AED4A60EA_36:
            ; //	sAX	= io[0x3C];			
00175:      	AR	= io[0x3C]
00176:      	AX	= AR
            ; //_AED4A60EA_37:;					
            _AED4A60EA_37:
            ; //	asm	set io[MISC].b9			
00177:      	set io[MISC].b9
            ; //_AED4A60EA_38:;					
            _AED4A60EA_38:
            ; //	asm	set io[MISC].b8			
00178:      	set io[MISC].b8
            ; //_AED4A60EA_39:;					
            _AED4A60EA_39:
            ; //	asm	set io[MISC].b4			
00179:      	set io[MISC].b4
            ; //LD1B663E8_10:;					
            LD1B663E8_10:
            ; //_AED4A60EA_40:;					
            _AED4A60EA_40:
            ; //	return;					
0017A:      	rets
            ; //_InitSound5CCD501D_end:;			
            _InitSound5CCD501D_end:
            ; //_AED4A60EA_41:;					
            _AED4A60EA_41:
            ; //}
            ; //
            ; //rjmp void _INITIAL0C18377D()			
            _INITIAL0C18377D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
0017B:      	AR	= rm[BP_SAVE]
0017C:      	push	AR
0017D:      	AR	= BP
0017E:      	rm[BP_SAVE]	= AR
0017F:      	AR	 = -1
00180:      	BP	+= AR
            ; //_AED4A60EA_42:;					
            _AED4A60EA_42:
            ; //_AED4A60EA_43:;					
            _AED4A60EA_43:
            ; //_AED4A60EA_44:;					
            _AED4A60EA_44:
            ; //	NEARCALL(_InitSound5CCD501D);		
00181:      	call	_InitSound5CCD501D
            ; //	
            ; //_AED4A60EA_45:;					
            _AED4A60EA_45:
            ; //	asm AX = PCMY+0;			
00182:      	AX = PCMY+0//
            ; //_AED4A60EA_46:;					
            _AED4A60EA_46:
            ; //	asm	AR = AX				
00184:      	AR = AX
            ; //_AED4A60EA_47:;					
            _AED4A60EA_47:
            ; //	asm	I0 = AR				
00185:      	I0 = AR
            ; //_AED4A60EA_48:;					
            _AED4A60EA_48:
            ; //	_i_1_2+0	= 0x0200;		
00186:      	I1	= rm[BP_SAVE]
00187:      	AR	= 0x0200
00189:      	rm[I1]	= AR
            ; //LD1B663E8_13:;					
            LD1B663E8_13:
            ; //_AED4A60EA_49:;					
            _AED4A60EA_49:
            ; //	sSI	= (int)&_i_1_2;			
0018A:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
0018B:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
0018C:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
0018D:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
0018E:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
0018F:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
00190:      	AR	= AX
            ; //	if(__jnz__)	goto LD1B663E8_14;	
00191:      	if NZ	jmp LD1B663E8_14
            ; //	goto	LD1B663E8_12;			
00192:      	jmp	LD1B663E8_12
            ; //LD1B663E8_14:;					
            LD1B663E8_14:
            ; //	
            ; //_AED4A60EA_50:;					
            _AED4A60EA_50:
            ; //	sAX	= 0x0000;			
00193:      	AX	= 0x00
            ; //_AED4A60EA_51:;					
            _AED4A60EA_51:
            ; //	asm	rm[I0++] = AX			
00194:      	rm[I0++] = AX
            ; //	goto LD1B663E8_13;			
00195:      	jmp	LD1B663E8_13
            ; //LD1B663E8_12:;					
            LD1B663E8_12:
            ; //_AED4A60EA_52:;					
            _AED4A60EA_52:
            ; //	asm AX = PCMY+0;			
00196:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
00198:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00199:      	rm[I1]	= AX
            ; //_AED4A60EA_53:;					
            _AED4A60EA_53:
            ; //	asm AX = PCMY+0;			
0019A:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
0019C:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
0019D:      	rm[I1]	= AX
            ; //_AED4A60EA_54:;					
            _AED4A60EA_54:
            ; //	asm I1 = _sub_vol980B1B83+0;		
0019E:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
0019F:      	AX	= rm[I1]
            ; //	io[0x3C]	= sAX;			
001A0:      	AR	= AX
001A1:      	io[0x3C]	= AR
            ; //_AED4A60EA_55:;					
            _AED4A60EA_55:
            ; //	io[0x3E]	= 0x1FFF;		
001A2:      	AR	= 0x1FFF
001A4:      	io[0x3E]	= AR
            ; //_AED4A60EA_56:;					
            _AED4A60EA_56:
            ; //	io[0x3B]	= 0x0000;		
001A5:      	AR	= 0x00
001A6:      	io[0x3B]	= AR
            ; //LD1B663E8_11:;					
            LD1B663E8_11:
            ; //_AED4A60EA_57:;					
            _AED4A60EA_57:
            ; //	return;					
001A7:      	AR	= 1
001A8:      	BP	+= AR
001A9:      	pop	AR
001AA:      	rm[BP_SAVE]	= AR
001AB:      	rets
            ; //_INITIAL0C18377D_end:;				
            _INITIAL0C18377D_end:
            ; //_AED4A60EA_58:;					
            _AED4A60EA_58:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_655_99B6FC89_s(void)	
            ginit_code_655_99B6FC89_s:
            ; //{
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+0;	
001AC:      	P1 = #ginit_seg_655_99B6FC89_s+0//
            ; //	asm I1 = LD1B663E8_2;			
001AF:      	I1 = LD1B663E8_2//
            ; //	sCX = 1;				
001B0:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
001B1:      	pch	= sfx_GLOBALINIT
001B2:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+1;	
001B3:      	P1 = #ginit_seg_655_99B6FC89_s+1//
            ; //	asm I1 = _flagD698DD9D;			
001B6:      	I1 = _flagD698DD9D//
            ; //	sCX = 1;				
001B7:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
001B8:      	pch	= sfx_GLOBALINIT
001B9:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_655_99B6FC89_s+2;	
001BA:      	P1 = #ginit_seg_655_99B6FC89_s+2//
            ; //	asm I1 = _Key_press_flag14FFF825;	
001BD:      	I1 = _Key_press_flag14FFF825//
            ; //	sCX = 1;				
001BE:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
001BF:      	pch	= sfx_GLOBALINIT
001C0:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
001C1:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_655_99B6FC89_s[3] = {		
            ginit_seg_655_99B6FC89_s:
            ; //						
            DW 
            ; //	0x0000,					
001C2:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000,					
001C3:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0001					
001C4:      DW 0x0001,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\655_99B6FC89.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> Start=========================
            ; WS2811.c Code Start!!;
            VarRM[0:4095]={
             LD63FD439_15,LD63FD439_72,_LED_Buf98A4A35A[20],_sum6BC8EB73,LD63FD439_28 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4);
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6);
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8);
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6);
            ; //void _WS_RefreshAD7B99B1();
            ; //void _WS_Key_RGBC5B96B6D();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //void _WS_Send24bits851C5C55(__int16 _color_0_4)	
            _WS_Send24bits851C5C55:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
001C5:      	AR	= rm[BP_SAVE]
001C6:      	push	AR
001C7:      	AR	= BP
001C8:      	rm[BP_SAVE]	= AR
001C9:      	AR	 = -1
001CA:      	BP	+= AR
            ; //_AED4A60EA_59:;					
            _AED4A60EA_59:
            ; //_AED4A60EA_60:;					
            _AED4A60EA_60:
            ; //	_i_1_2+0	= 0x00;			
001CB:      	I1	= rm[BP_SAVE]
001CC:      	AR	= 0x00
001CD:      	rm[I1]	= AR
            ; //LD63FD439_18:;					
            LD63FD439_18:
            ; //	sSI	= (int)&_i_1_2;			
001CE:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
001CF:      	AX	= rm[I1]
            ; //	sCX	= 0x0018;			
001D0:      	CX	= 0x18
            ; //	sfx_CMP_AX_CX_JB();			
001D1:      	pch	= sfx_CMP_AX_CX_JB
001D2:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_22;	
001D3:      	if ZR	jmp LD63FD439_22
            ; //	goto	LD63FD439_20;			
001D4:      	pch =	LD63FD439_20
001D5:      	ljmp	LD63FD439_20
            ; //LD63FD439_22:;					
            LD63FD439_22:
            ; //	goto LD63FD439_19;			
001D6:      	pch =	LD63FD439_19
001D7:      	ljmp	LD63FD439_19
            ; //LD63FD439_21:;					
            LD63FD439_21:
            ; //	sSI	= (int)&_i_1_2;			
001D8:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
001D9:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
001DA:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
001DB:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
001DC:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
001DD:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_18;			
001DE:      	pch =	LD63FD439_18
001DF:      	ljmp	LD63FD439_18
            ; //LD63FD439_19:;					
            LD63FD439_19:
            ; //	
            ; //_AED4A60EA_61:;					
            _AED4A60EA_61:
            ; //	sSI	= (int)&_color_0_4;		
001E0:      	AR	= 2
001E1:      	I1	= rm[BP_SAVE]
001E2:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
001E3:      	AX	= rm[I1]
            ; //	asm AR = 0x0000;			
001E4:      	AR = 0x0000//
            ; //	asm AX = AX & AR;			
001E5:      	AX = AX & AR//
            ; //	sfx_CHECKZERO();			
001E6:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_24;	
001E7:      	if NZ	jmp LD63FD439_24
            ; //	goto	LD63FD439_23;			
001E8:      	pch =	LD63FD439_23
001E9:      	ljmp	LD63FD439_23
            ; //LD63FD439_24:;					
            LD63FD439_24:
            ; //	
            ; //_AED4A60EA_62:;					
            _AED4A60EA_62:
            ; //	asm set io[0x09].b14;			
001EA:      	set io[0x09].b14//
            ; //_AED4A60EA_63:;					
            _AED4A60EA_63:
            ; //	asm	nop				
001EB:      	nop
            ; //_AED4A60EA_64:;					
            _AED4A60EA_64:
            ; //	asm	nop				
001EC:      	nop
            ; //_AED4A60EA_65:;					
            _AED4A60EA_65:
            ; //	asm	nop				
001ED:      	nop
            ; //_AED4A60EA_66:;					
            _AED4A60EA_66:
            ; //	asm	nop				
001EE:      	nop
            ; //_AED4A60EA_67:;					
            _AED4A60EA_67:
            ; //	asm	nop				
001EF:      	nop
            ; //_AED4A60EA_68:;					
            _AED4A60EA_68:
            ; //	asm	nop				
001F0:      	nop
            ; //_AED4A60EA_69:;					
            _AED4A60EA_69:
            ; //	asm	nop				
001F1:      	nop
            ; //_AED4A60EA_70:;					
            _AED4A60EA_70:
            ; //	asm	nop				
001F2:      	nop
            ; //_AED4A60EA_71:;					
            _AED4A60EA_71:
            ; //	asm	nop				
001F3:      	nop
            ; //_AED4A60EA_72:;					
            _AED4A60EA_72:
            ; //	asm	nop				
001F4:      	nop
            ; //_AED4A60EA_73:;					
            _AED4A60EA_73:
            ; //	asm	nop				
001F5:      	nop
            ; //_AED4A60EA_74:;					
            _AED4A60EA_74:
            ; //	asm	nop				
001F6:      	nop
            ; //_AED4A60EA_75:;					
            _AED4A60EA_75:
            ; //	asm clr io[0x09].b14;			
001F7:      	clr io[0x09].b14//
            ; //_AED4A60EA_76:;					
            _AED4A60EA_76:
            ; //	asm	nop				
001F8:      	nop
            ; //_AED4A60EA_77:;					
            _AED4A60EA_77:
            ; //	asm	nop				
001F9:      	nop
            ; //_AED4A60EA_78:;					
            _AED4A60EA_78:
            ; //	asm	nop				
001FA:      	nop
            ; //	goto LD63FD439_25;			
001FB:      	pch =	LD63FD439_25
001FC:      	ljmp	LD63FD439_25
            ; //LD63FD439_23:;					
            LD63FD439_23:
            ; //_AED4A60EA_79:;					
            _AED4A60EA_79:
            ; //	asm set io[0x09].b14;			
001FD:      	set io[0x09].b14//
            ; //LD63FD439_25:;					
            LD63FD439_25:
            ; //_AED4A60EA_80:;					
            _AED4A60EA_80:
            ; //_AED4A60EA_81:;					
            _AED4A60EA_81:
            ; //	asm	nop				
001FE:      	nop
            ; //_AED4A60EA_82:;					
            _AED4A60EA_82:
            ; //	asm	nop				
001FF:      	nop
            ; //_AED4A60EA_83:;					
            _AED4A60EA_83:
            ; //	asm	nop				
00200:      	nop
            ; //_AED4A60EA_84:;					
            _AED4A60EA_84:
            ; //	asm clr io[0x09].b14;			
00201:      	clr io[0x09].b14//
            ; //_AED4A60EA_85:;					
            _AED4A60EA_85:
            ; //	asm	nop				
00202:      	nop
            ; //_AED4A60EA_86:;					
            _AED4A60EA_86:
            ; //	asm	nop				
00203:      	nop
            ; //_AED4A60EA_87:;					
            _AED4A60EA_87:
            ; //	asm	nop				
00204:      	nop
            ; //_AED4A60EA_88:;					
            _AED4A60EA_88:
            ; //	asm	nop				
00205:      	nop
            ; //_AED4A60EA_89:;					
            _AED4A60EA_89:
            ; //	asm	nop				
00206:      	nop
            ; //_AED4A60EA_90:;					
            _AED4A60EA_90:
            ; //	asm	nop				
00207:      	nop
            ; //_AED4A60EA_91:;					
            _AED4A60EA_91:
            ; //	asm	nop				
00208:      	nop
            ; //_AED4A60EA_92:;					
            _AED4A60EA_92:
            ; //	asm	nop				
00209:      	nop
            ; //_AED4A60EA_93:;					
            _AED4A60EA_93:
            ; //	asm	nop				
0020A:      	nop
            ; //_AED4A60EA_94:;					
            _AED4A60EA_94:
            ; //	asm	nop				
0020B:      	nop
            ; //_AED4A60EA_95:;					
            _AED4A60EA_95:
            ; //	asm	nop				
0020C:      	nop
            ; //_AED4A60EA_96:;					
            _AED4A60EA_96:
            ; //	asm	nop				
0020D:      	nop
            ; //_AED4A60EA_97:;					
            _AED4A60EA_97:
            ; //	sSI	= (int)&_color_0_4;		
0020E:      	AR	= 2
0020F:      	I1	= rm[BP_SAVE]
00210:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00211:      	AX	= rm[I1]
            ; //	asm slz AX, 1;				
00212:      	slz AX, 1//
            ; //	sSI	= (int)&_color_0_4;		
00213:      	AR	= 2
00214:      	I1	= rm[BP_SAVE]
00215:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00216:      	rm[I1]	= AX
            ; //	goto LD63FD439_21;			
00217:      	pch =	LD63FD439_21
00218:      	ljmp	LD63FD439_21
            ; //LD63FD439_20:;					
            LD63FD439_20:
            ; //_AED4A60EA_98:;					
            _AED4A60EA_98:
            ; //LD63FD439_17:;					
            LD63FD439_17:
            ; //_AED4A60EA_99:;					
            _AED4A60EA_99:
            ; //	return;					
00219:      	AR	= 1
0021A:      	BP	+= AR
0021B:      	pop	AR
0021C:      	rm[BP_SAVE]	= AR
0021D:      	rets
            ; //_WS_Send24bits851C5C55_end:;			
            _WS_Send24bits851C5C55_end:
            ; //_AED4A60EA_100:;				
            _AED4A60EA_100:
            ; //}
            ; //
            ; //void _WS_Color_copyADB1DFED(__int16 _No_0_4, __int16 _color_0_6)
            _WS_Color_copyADB1DFED:
            ; //{						
0021E:      	AR	= rm[BP_SAVE]
0021F:      	push	AR
00220:      	AR	= BP
00221:      	rm[BP_SAVE]	= AR
            ; //_AED4A60EA_101:;				
            _AED4A60EA_101:
            ; //	
            ; //_AED4A60EA_102:;				
            _AED4A60EA_102:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00222:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00223:      	push	AX
            ; //	sSI	= (int)&_No_0_4;		
00224:      	AR	= 2
00225:      	I1	= rm[BP_SAVE]
00226:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00227:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
00228:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
00229:      	pch	= sfx_IMUL_AX_CX
0022A:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
0022B:      	pop	CX
            ; //	sAX	= sAX + sCX;			
0022C:      	AR	= CX
0022D:      	AX	+= AR
            ; //	PUSH(sAX);				
0022E:      	push	AX
            ; //	sSI	= (int)&_color_0_6;		
0022F:      	AR	= 3
00230:      	I1	= rm[BP_SAVE]
00231:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00232:      	AX	= rm[I1]
            ; //	sfx_UINT2ULONG_AX();			
00233:      	DX	= 0
            ; //	sSI	= POP();			
00234:      	pop	I1
            ; //	sfx_STORSILONG();			
00235:      	rm[I1++]	= AX
00236:      	rm[I1--]	= DX
            ; //LD63FD439_26:;					
            LD63FD439_26:
            ; //_AED4A60EA_103:;				
            _AED4A60EA_103:
            ; //	return;					
00237:      	pop	AR
00238:      	rm[BP_SAVE]	= AR
00239:      	rets
            ; //_WS_Color_copyADB1DFED_end:;			
            _WS_Color_copyADB1DFED_end:
            ; //_AED4A60EA_104:;				
            _AED4A60EA_104:
            ; //}
            ; //
            ; //void _WS_ColorSet_LEDCA3DEB8C(__int16 _from_0_4, __int16 _to_0_6, __int16 _color_0_8)
            _WS_ColorSet_LEDCA3DEB8C:
            ; //{						
0023A:      	AR	= rm[BP_SAVE]
0023B:      	push	AR
0023C:      	AR	= BP
0023D:      	rm[BP_SAVE]	= AR
            ; //_AED4A60EA_105:;				
            _AED4A60EA_105:
            ; //	
            ; //_AED4A60EA_106:;				
            _AED4A60EA_106:
            ; //	sSI	= (int)&_to_0_6;		
0023E:      	AR	= 3
0023F:      	I1	= rm[BP_SAVE]
00240:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00241:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00242:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00243:      	pch	= sfx_CMP_AX_CX_JBE
00244:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_30;	
00245:      	if ZR	jmp LD63FD439_30
            ; //	sAX	= 1;				
00246:      	AX	= 0x01
            ; //	goto	LD63FD439_31;			
00247:      	pch =	LD63FD439_31
00248:      	ljmp	LD63FD439_31
            ; //LD63FD439_30:;					
            LD63FD439_30:
            ; //	sAX	= 0;				
00249:      	AX	= 0x00
            ; //LD63FD439_31:;					
            LD63FD439_31:
            ; //	sfx_CHECKZERO();			
0024A:      	AR	= AX
            ; //	if(__jz__)	goto LD63FD439_32;	
0024B:      	if ZR	jmp LD63FD439_32
            ; //	goto	LD63FD439_29;			
0024C:      	pch =	LD63FD439_29
0024D:      	ljmp	LD63FD439_29
            ; //LD63FD439_32:;					
            LD63FD439_32:
            ; //	sSI	= (int)&_from_0_4;		
0024E:      	AR	= 2
0024F:      	I1	= rm[BP_SAVE]
00250:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00251:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
00252:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JAE();			
00253:      	pch	= sfx_CMP_AX_CX_JAE
00254:      	lcall	sfx_CMP_AX_CX_JAE
            ; //	if(__je__)	goto LD63FD439_33;	
00255:      	if ZR	jmp LD63FD439_33
            ; //	sAX	= 1;				
00256:      	AX	= 0x01
            ; //	goto	LD63FD439_34;			
00257:      	pch =	LD63FD439_34
00258:      	ljmp	LD63FD439_34
            ; //LD63FD439_33:;					
            LD63FD439_33:
            ; //	sAX	= 0;				
00259:      	AX	= 0x00
            ; //LD63FD439_34:;					
            LD63FD439_34:
            ; //LD63FD439_29:;					
            LD63FD439_29:
            ; //	sfx_CHECKZERO();			
0025A:      	AR	= AX
            ; //	if(__jnz__)	goto LD63FD439_36;	
0025B:      	if NZ	jmp LD63FD439_36
            ; //	goto	LD63FD439_35;			
0025C:      	pch =	LD63FD439_35
0025D:      	ljmp	LD63FD439_35
            ; //LD63FD439_36:;					
            LD63FD439_36:
            ; //	
            ; //_AED4A60EA_107:;				
            _AED4A60EA_107:
            ; //	_to_0_6+0	= 0x03;			
0025E:      	AR	= 3
0025F:      	I1	= rm[BP_SAVE]
00260:      	I1	+= AR
00261:      	AR	= 0x03
00262:      	rm[I1]	= AR
            ; //_AED4A60EA_108:;				
            _AED4A60EA_108:
            ; //	_from_0_4+0	= 0x00;			
00263:      	AR	= 2
00264:      	I1	= rm[BP_SAVE]
00265:      	I1	+= AR
00266:      	AR	= 0x00
00267:      	rm[I1]	= AR
            ; //LD63FD439_35:;					
            LD63FD439_35:
            ; //_AED4A60EA_109:;				
            _AED4A60EA_109:
            ; //_AED4A60EA_110:;				
            _AED4A60EA_110:
            ; //	sAX	= 0xFFFF;			
00268:      	AX	= 0xFFFF
            ; //	sSI	= (int)&_color_0_8;		
0026A:      	AR	= 4
0026B:      	I1	= rm[BP_SAVE]
0026C:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
0026D:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
0026E:      	AR	= CX
0026F:      	AX	&= AR
            ; //	sSI	= (int)&_color_0_8;		
00270:      	AR	= 4
00271:      	I1	= rm[BP_SAVE]
00272:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00273:      	rm[I1]	= AX
            ; //_AED4A60EA_111:;				
            _AED4A60EA_111:
            ; //	sSI	= (int)&_from_0_4;		
00274:      	AR	= 2
00275:      	I1	= rm[BP_SAVE]
00276:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00277:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
00278:      	AR	= 3
00279:      	I1	= rm[BP_SAVE]
0027A:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
0027B:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JA();			
0027C:      	pch	= sfx_CMP_AX_CX_JA
0027D:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_38;	
0027E:      	if ZR	jmp LD63FD439_38
            ; //	goto	LD63FD439_37;			
0027F:      	pch =	LD63FD439_37
00280:      	ljmp	LD63FD439_37
            ; //LD63FD439_38:;					
            LD63FD439_38:
            ; //	
            ; //_AED4A60EA_112:;				
            _AED4A60EA_112:
            ; //	sSI	= (int)&_from_0_4;		
00281:      	AR	= 2
00282:      	I1	= rm[BP_SAVE]
00283:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00284:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_28;		
00285:      	I1	= LD63FD439_28
            ; //	*(__int16*)sSI	= sAX			
00286:      	rm[I1]	= AX
            ; //_AED4A60EA_113:;				
            _AED4A60EA_113:
            ; //	sSI	= (int)&_to_0_6;		
00287:      	AR	= 3
00288:      	I1	= rm[BP_SAVE]
00289:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
0028A:      	AX	= rm[I1]
            ; //	sSI	= (int)&_from_0_4;		
0028B:      	AR	= 2
0028C:      	I1	= rm[BP_SAVE]
0028D:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
0028E:      	rm[I1]	= AX
            ; //_AED4A60EA_114:;				
            _AED4A60EA_114:
            ; //	asm I1 = LD63FD439_28+0;		
0028F:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
00290:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
00291:      	AR	= 3
00292:      	I1	= rm[BP_SAVE]
00293:      	I1	+= AR
            ; //	*(__int16*)sSI	= sAX;			
00294:      	rm[I1]	= AX
            ; //LD63FD439_37:;					
            LD63FD439_37:
            ; //_AED4A60EA_115:;				
            _AED4A60EA_115:
            ; //_AED4A60EA_116:;				
            _AED4A60EA_116:
            ; //	sSI	= (int)&_from_0_4;		
00295:      	AR	= 2
00296:      	I1	= rm[BP_SAVE]
00297:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
00298:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_28;		
00299:      	I1	= LD63FD439_28
            ; //	*(__int16*)sSI	= sAX			
0029A:      	rm[I1]	= AX
            ; //LD63FD439_39:;					
            LD63FD439_39:
            ; //	asm I1 = LD63FD439_28+0;		
0029B:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
0029C:      	AX	= rm[I1]
            ; //	sSI	= (int)&_to_0_6;		
0029D:      	AR	= 3
0029E:      	I1	= rm[BP_SAVE]
0029F:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
002A0:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JLE();			
002A1:      	pch	= sfx_CMP_AX_CX_JLE
002A2:      	lcall	sfx_CMP_AX_CX_JLE
            ; //	if(__je__)	goto LD63FD439_43;	
002A3:      	if ZR	jmp LD63FD439_43
            ; //	goto	LD63FD439_41;			
002A4:      	pch =	LD63FD439_41
002A5:      	ljmp	LD63FD439_41
            ; //LD63FD439_43:;					
            LD63FD439_43:
            ; //	goto LD63FD439_40;			
002A6:      	pch =	LD63FD439_40
002A7:      	ljmp	LD63FD439_40
            ; //LD63FD439_42:;					
            LD63FD439_42:
            ; //	asm I1 = LD63FD439_28+0;		
002A8:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
002A9:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_28;		
002AA:      	I1	= LD63FD439_28
            ; //	PUSH(sAX);				
002AB:      	push	AX
            ; //	sAX	= 0x0001;			
002AC:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
002AD:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
002AE:      	AR	= AX
002AF:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
002B0:      	rm[I1]	= CX
            ; //	sAX	= POP();			
002B1:      	pop	AX
            ; //	goto LD63FD439_39;			
002B2:      	pch =	LD63FD439_39
002B3:      	ljmp	LD63FD439_39
            ; //LD63FD439_40:;					
            LD63FD439_40:
            ; //	
            ; //_AED4A60EA_117:;				
            _AED4A60EA_117:
            ; //_AED4A60EA_118:;				
            _AED4A60EA_118:
            ; //	sSI	= (int)&_color_0_8;		
002B4:      	AR	= 4
002B5:      	I1	= rm[BP_SAVE]
002B6:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002B7:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
002B8:      	push	AX
            ; //	asm I1 = LD63FD439_28+0;		
002B9:      	I1 = LD63FD439_28+0//
            ; //	sAX	= *(__int16*)sSI;		
002BA:      	AX	= rm[I1]
            ; //	PUSH(sAX);				
002BB:      	push	AX
            ; //	_WS_Color_copyADB1DFED(STACK[sSP + 0], STACK[sSP + 1]);
002BC:      	pch	= _WS_Color_copyADB1DFED
002BD:      	lcall	_WS_Color_copyADB1DFED
            ; //	RESTORESP(2);				
002BE:      	pop	AR
002BF:      	pop	AR
            ; //	goto LD63FD439_42;			
002C0:      	pch =	LD63FD439_42
002C1:      	ljmp	LD63FD439_42
            ; //LD63FD439_41:;					
            LD63FD439_41:
            ; //_AED4A60EA_119:;				
            _AED4A60EA_119:
            ; //LD63FD439_27:;					
            LD63FD439_27:
            ; //_AED4A60EA_120:;				
            _AED4A60EA_120:
            ; //	return;					
002C2:      	pop	AR
002C3:      	rm[BP_SAVE]	= AR
002C4:      	rets
            ; //_WS_ColorSet_LEDCA3DEB8C_end:;			
            _WS_ColorSet_LEDCA3DEB8C_end:
            ; //_AED4A60EA_121:;				
            _AED4A60EA_121:
            ; //}
            ; //
            ; //void _WS_TRSF_color_setE1CC300C(__int16 _color_0_4, __int16 _Led_num_0_6)
            _WS_TRSF_color_setE1CC300C:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
002C5:      	AR	= rm[BP_SAVE]
002C6:      	push	AR
002C7:      	AR	= BP
002C8:      	rm[BP_SAVE]	= AR
002C9:      	AR	 = -1
002CA:      	BP	+= AR
            ; //_AED4A60EA_122:;				
            _AED4A60EA_122:
            ; //_AED4A60EA_123:;				
            _AED4A60EA_123:
            ; //	_i_1_2+0	= 0x00;			
002CB:      	I1	= rm[BP_SAVE]
002CC:      	AR	= 0x00
002CD:      	rm[I1]	= AR
            ; //LD63FD439_45:;					
            LD63FD439_45:
            ; //	sSI	= (int)&_i_1_2;			
002CE:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002CF:      	AX	= rm[I1]
            ; //	sSI	= (int)&_Led_num_0_6;		
002D0:      	AR	= 3
002D1:      	I1	= rm[BP_SAVE]
002D2:      	I1	+= AR
            ; //	sCX	= *(__int16*)sSI;		
002D3:      	CX	= rm[I1]
            ; //	sfx_CMP_AX_CX_JB();			
002D4:      	pch	= sfx_CMP_AX_CX_JB
002D5:      	lcall	sfx_CMP_AX_CX_JB
            ; //	if(__je__)	goto LD63FD439_49;	
002D6:      	if ZR	jmp LD63FD439_49
            ; //	goto	LD63FD439_47;			
002D7:      	pch =	LD63FD439_47
002D8:      	ljmp	LD63FD439_47
            ; //LD63FD439_49:;					
            LD63FD439_49:
            ; //	goto LD63FD439_46;			
002D9:      	pch =	LD63FD439_46
002DA:      	ljmp	LD63FD439_46
            ; //LD63FD439_48:;					
            LD63FD439_48:
            ; //	sSI	= (int)&_i_1_2;			
002DB:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
002DC:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
002DD:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
002DE:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
002DF:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
002E0:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_45;			
002E1:      	pch =	LD63FD439_45
002E2:      	ljmp	LD63FD439_45
            ; //LD63FD439_46:;					
            LD63FD439_46:
            ; //	
            ; //_AED4A60EA_124:;				
            _AED4A60EA_124:
            ; //	sSI	= (int)&_color_0_4;		
002E3:      	AR	= 2
002E4:      	I1	= rm[BP_SAVE]
002E5:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI;		
002E6:      	AX	= rm[I1]
            ; //	goto LD63FD439_51;			
002E7:      	pch =	LD63FD439_51
002E8:      	ljmp	LD63FD439_51
            ; //LD63FD439_52:;					
            LD63FD439_52:
            ; //_AED4A60EA_125:;				
            _AED4A60EA_125:
            ; //	asm set io[0x09].b14;			
002E9:      	set io[0x09].b14//
            ; //_AED4A60EA_126:;				
            _AED4A60EA_126:
            ; //	asm	nop				
002EA:      	nop
            ; //_AED4A60EA_127:;				
            _AED4A60EA_127:
            ; //	asm	nop				
002EB:      	nop
            ; //_AED4A60EA_128:;				
            _AED4A60EA_128:
            ; //	asm	nop				
002EC:      	nop
            ; //_AED4A60EA_129:;				
            _AED4A60EA_129:
            ; //	asm	nop				
002ED:      	nop
            ; //_AED4A60EA_130:;				
            _AED4A60EA_130:
            ; //	asm	nop				
002EE:      	nop
            ; //_AED4A60EA_131:;				
            _AED4A60EA_131:
            ; //	asm	nop				
002EF:      	nop
            ; //_AED4A60EA_132:;				
            _AED4A60EA_132:
            ; //	asm	nop				
002F0:      	nop
            ; //_AED4A60EA_133:;				
            _AED4A60EA_133:
            ; //	asm	nop				
002F1:      	nop
            ; //_AED4A60EA_134:;				
            _AED4A60EA_134:
            ; //	asm	nop				
002F2:      	nop
            ; //_AED4A60EA_135:;				
            _AED4A60EA_135:
            ; //	asm	nop				
002F3:      	nop
            ; //_AED4A60EA_136:;				
            _AED4A60EA_136:
            ; //	asm	nop				
002F4:      	nop
            ; //_AED4A60EA_137:;				
            _AED4A60EA_137:
            ; //	asm	nop				
002F5:      	nop
            ; //_AED4A60EA_138:;				
            _AED4A60EA_138:
            ; //	asm clr io[0x09].b14;			
002F6:      	clr io[0x09].b14//
            ; //_AED4A60EA_139:;				
            _AED4A60EA_139:
            ; //	asm	nop				
002F7:      	nop
            ; //_AED4A60EA_140:;				
            _AED4A60EA_140:
            ; //	asm	nop				
002F8:      	nop
            ; //_AED4A60EA_141:;				
            _AED4A60EA_141:
            ; //	asm	nop				
002F9:      	nop
            ; //_AED4A60EA_142:;				
            _AED4A60EA_142:
            ; //	asm set io[0x09].b14;			
002FA:      	set io[0x09].b14//
            ; //_AED4A60EA_143:;				
            _AED4A60EA_143:
            ; //	asm	nop				
002FB:      	nop
            ; //_AED4A60EA_144:;				
            _AED4A60EA_144:
            ; //	asm	nop				
002FC:      	nop
            ; //_AED4A60EA_145:;				
            _AED4A60EA_145:
            ; //	asm	nop				
002FD:      	nop
            ; //_AED4A60EA_146:;				
            _AED4A60EA_146:
            ; //	asm	nop				
002FE:      	nop
            ; //_AED4A60EA_147:;				
            _AED4A60EA_147:
            ; //	asm	nop				
002FF:      	nop
            ; //_AED4A60EA_148:;				
            _AED4A60EA_148:
            ; //	asm	nop				
00300:      	nop
            ; //_AED4A60EA_149:;				
            _AED4A60EA_149:
            ; //	asm	nop				
00301:      	nop
            ; //_AED4A60EA_150:;				
            _AED4A60EA_150:
            ; //	asm	nop				
00302:      	nop
            ; //_AED4A60EA_151:;				
            _AED4A60EA_151:
            ; //	asm	nop				
00303:      	nop
            ; //_AED4A60EA_152:;				
            _AED4A60EA_152:
            ; //	asm	nop				
00304:      	nop
            ; //_AED4A60EA_153:;				
            _AED4A60EA_153:
            ; //	asm	nop				
00305:      	nop
            ; //_AED4A60EA_154:;				
            _AED4A60EA_154:
            ; //	asm	nop				
00306:      	nop
            ; //_AED4A60EA_155:;				
            _AED4A60EA_155:
            ; //	asm clr io[0x09].b14;			
00307:      	clr io[0x09].b14//
            ; //_AED4A60EA_156:;				
            _AED4A60EA_156:
            ; //	asm	nop				
00308:      	nop
            ; //_AED4A60EA_157:;				
            _AED4A60EA_157:
            ; //	asm	nop				
00309:      	nop
            ; //_AED4A60EA_158:;				
            _AED4A60EA_158:
            ; //	asm	nop				
0030A:      	nop
            ; //_AED4A60EA_159:;				
            _AED4A60EA_159:
            ; //	asm set io[0x09].b14;			
0030B:      	set io[0x09].b14//
            ; //_AED4A60EA_160:;				
            _AED4A60EA_160:
            ; //	asm	nop				
0030C:      	nop
            ; //_AED4A60EA_161:;				
            _AED4A60EA_161:
            ; //	asm	nop				
0030D:      	nop
            ; //_AED4A60EA_162:;				
            _AED4A60EA_162:
            ; //	asm	nop				
0030E:      	nop
            ; //_AED4A60EA_163:;				
            _AED4A60EA_163:
            ; //	asm	nop				
0030F:      	nop
            ; //_AED4A60EA_164:;				
            _AED4A60EA_164:
            ; //	asm	nop				
00310:      	nop
            ; //_AED4A60EA_165:;				
            _AED4A60EA_165:
            ; //	asm	nop				
00311:      	nop
            ; //_AED4A60EA_166:;				
            _AED4A60EA_166:
            ; //	asm	nop				
00312:      	nop
            ; //_AED4A60EA_167:;				
            _AED4A60EA_167:
            ; //	asm	nop				
00313:      	nop
            ; //_AED4A60EA_168:;				
            _AED4A60EA_168:
            ; //	asm	nop				
00314:      	nop
            ; //_AED4A60EA_169:;				
            _AED4A60EA_169:
            ; //	asm	nop				
00315:      	nop
            ; //_AED4A60EA_170:;				
            _AED4A60EA_170:
            ; //	asm	nop				
00316:      	nop
            ; //_AED4A60EA_171:;				
            _AED4A60EA_171:
            ; //	asm	nop				
00317:      	nop
            ; //_AED4A60EA_172:;				
            _AED4A60EA_172:
            ; //	asm clr io[0x09].b14;			
00318:      	clr io[0x09].b14//
            ; //_AED4A60EA_173:;				
            _AED4A60EA_173:
            ; //	asm	nop				
00319:      	nop
            ; //_AED4A60EA_174:;				
            _AED4A60EA_174:
            ; //	asm	nop				
0031A:      	nop
            ; //_AED4A60EA_175:;				
            _AED4A60EA_175:
            ; //	asm	nop				
0031B:      	nop
            ; //_AED4A60EA_176:;				
            _AED4A60EA_176:
            ; //	asm set io[0x09].b14;			
0031C:      	set io[0x09].b14//
            ; //_AED4A60EA_177:;				
            _AED4A60EA_177:
            ; //	asm	nop				
0031D:      	nop
            ; //_AED4A60EA_178:;				
            _AED4A60EA_178:
            ; //	asm	nop				
0031E:      	nop
            ; //_AED4A60EA_179:;				
            _AED4A60EA_179:
            ; //	asm	nop				
0031F:      	nop
            ; //_AED4A60EA_180:;				
            _AED4A60EA_180:
            ; //	asm	nop				
00320:      	nop
            ; //_AED4A60EA_181:;				
            _AED4A60EA_181:
            ; //	asm	nop				
00321:      	nop
            ; //_AED4A60EA_182:;				
            _AED4A60EA_182:
            ; //	asm	nop				
00322:      	nop
            ; //_AED4A60EA_183:;				
            _AED4A60EA_183:
            ; //	asm	nop				
00323:      	nop
            ; //_AED4A60EA_184:;				
            _AED4A60EA_184:
            ; //	asm	nop				
00324:      	nop
            ; //_AED4A60EA_185:;				
            _AED4A60EA_185:
            ; //	asm	nop				
00325:      	nop
            ; //_AED4A60EA_186:;				
            _AED4A60EA_186:
            ; //	asm	nop				
00326:      	nop
            ; //_AED4A60EA_187:;				
            _AED4A60EA_187:
            ; //	asm	nop				
00327:      	nop
            ; //_AED4A60EA_188:;				
            _AED4A60EA_188:
            ; //	asm	nop				
00328:      	nop
            ; //_AED4A60EA_189:;				
            _AED4A60EA_189:
            ; //	asm clr io[0x09].b14;			
00329:      	clr io[0x09].b14//
            ; //_AED4A60EA_190:;				
            _AED4A60EA_190:
            ; //	asm	nop				
0032A:      	nop
            ; //_AED4A60EA_191:;				
            _AED4A60EA_191:
            ; //	asm	nop				
0032B:      	nop
            ; //_AED4A60EA_192:;				
            _AED4A60EA_192:
            ; //	asm	nop				
0032C:      	nop
            ; //_AED4A60EA_193:;				
            _AED4A60EA_193:
            ; //	asm set io[0x09].b14;			
0032D:      	set io[0x09].b14//
            ; //_AED4A60EA_194:;				
            _AED4A60EA_194:
            ; //	asm	nop				
0032E:      	nop
            ; //_AED4A60EA_195:;				
            _AED4A60EA_195:
            ; //	asm	nop				
0032F:      	nop
            ; //_AED4A60EA_196:;				
            _AED4A60EA_196:
            ; //	asm	nop				
00330:      	nop
            ; //_AED4A60EA_197:;				
            _AED4A60EA_197:
            ; //	asm	nop				
00331:      	nop
            ; //_AED4A60EA_198:;				
            _AED4A60EA_198:
            ; //	asm	nop				
00332:      	nop
            ; //_AED4A60EA_199:;				
            _AED4A60EA_199:
            ; //	asm	nop				
00333:      	nop
            ; //_AED4A60EA_200:;				
            _AED4A60EA_200:
            ; //	asm	nop				
00334:      	nop
            ; //_AED4A60EA_201:;				
            _AED4A60EA_201:
            ; //	asm	nop				
00335:      	nop
            ; //_AED4A60EA_202:;				
            _AED4A60EA_202:
            ; //	asm	nop				
00336:      	nop
            ; //_AED4A60EA_203:;				
            _AED4A60EA_203:
            ; //	asm	nop				
00337:      	nop
            ; //_AED4A60EA_204:;				
            _AED4A60EA_204:
            ; //	asm	nop				
00338:      	nop
            ; //_AED4A60EA_205:;				
            _AED4A60EA_205:
            ; //	asm	nop				
00339:      	nop
            ; //_AED4A60EA_206:;				
            _AED4A60EA_206:
            ; //	asm clr io[0x09].b14;			
0033A:      	clr io[0x09].b14//
            ; //_AED4A60EA_207:;				
            _AED4A60EA_207:
            ; //	asm	nop				
0033B:      	nop
            ; //_AED4A60EA_208:;				
            _AED4A60EA_208:
            ; //	asm	nop				
0033C:      	nop
            ; //_AED4A60EA_209:;				
            _AED4A60EA_209:
            ; //	asm	nop				
0033D:      	nop
            ; //_AED4A60EA_210:;				
            _AED4A60EA_210:
            ; //	asm set io[0x09].b14;			
0033E:      	set io[0x09].b14//
            ; //_AED4A60EA_211:;				
            _AED4A60EA_211:
            ; //	asm	nop				
0033F:      	nop
            ; //_AED4A60EA_212:;				
            _AED4A60EA_212:
            ; //	asm	nop				
00340:      	nop
            ; //_AED4A60EA_213:;				
            _AED4A60EA_213:
            ; //	asm	nop				
00341:      	nop
            ; //_AED4A60EA_214:;				
            _AED4A60EA_214:
            ; //	asm	nop				
00342:      	nop
            ; //_AED4A60EA_215:;				
            _AED4A60EA_215:
            ; //	asm	nop				
00343:      	nop
            ; //_AED4A60EA_216:;				
            _AED4A60EA_216:
            ; //	asm	nop				
00344:      	nop
            ; //_AED4A60EA_217:;				
            _AED4A60EA_217:
            ; //	asm	nop				
00345:      	nop
            ; //_AED4A60EA_218:;				
            _AED4A60EA_218:
            ; //	asm	nop				
00346:      	nop
            ; //_AED4A60EA_219:;				
            _AED4A60EA_219:
            ; //	asm	nop				
00347:      	nop
            ; //_AED4A60EA_220:;				
            _AED4A60EA_220:
            ; //	asm	nop				
00348:      	nop
            ; //_AED4A60EA_221:;				
            _AED4A60EA_221:
            ; //	asm	nop				
00349:      	nop
            ; //_AED4A60EA_222:;				
            _AED4A60EA_222:
            ; //	asm	nop				
0034A:      	nop
            ; //_AED4A60EA_223:;				
            _AED4A60EA_223:
            ; //	asm clr io[0x09].b14;			
0034B:      	clr io[0x09].b14//
            ; //_AED4A60EA_224:;				
            _AED4A60EA_224:
            ; //	asm	nop				
0034C:      	nop
            ; //_AED4A60EA_225:;				
            _AED4A60EA_225:
            ; //	asm	nop				
0034D:      	nop
            ; //_AED4A60EA_226:;				
            _AED4A60EA_226:
            ; //	asm	nop				
0034E:      	nop
            ; //_AED4A60EA_227:;				
            _AED4A60EA_227:
            ; //	asm set io[0x09].b14;			
0034F:      	set io[0x09].b14//
            ; //_AED4A60EA_228:;				
            _AED4A60EA_228:
            ; //	asm	nop				
00350:      	nop
            ; //_AED4A60EA_229:;				
            _AED4A60EA_229:
            ; //	asm	nop				
00351:      	nop
            ; //_AED4A60EA_230:;				
            _AED4A60EA_230:
            ; //	asm	nop				
00352:      	nop
            ; //_AED4A60EA_231:;				
            _AED4A60EA_231:
            ; //	asm	nop				
00353:      	nop
            ; //_AED4A60EA_232:;				
            _AED4A60EA_232:
            ; //	asm	nop				
00354:      	nop
            ; //_AED4A60EA_233:;				
            _AED4A60EA_233:
            ; //	asm	nop				
00355:      	nop
            ; //_AED4A60EA_234:;				
            _AED4A60EA_234:
            ; //	asm	nop				
00356:      	nop
            ; //_AED4A60EA_235:;				
            _AED4A60EA_235:
            ; //	asm	nop				
00357:      	nop
            ; //_AED4A60EA_236:;				
            _AED4A60EA_236:
            ; //	asm	nop				
00358:      	nop
            ; //_AED4A60EA_237:;				
            _AED4A60EA_237:
            ; //	asm	nop				
00359:      	nop
            ; //_AED4A60EA_238:;				
            _AED4A60EA_238:
            ; //	asm	nop				
0035A:      	nop
            ; //_AED4A60EA_239:;				
            _AED4A60EA_239:
            ; //	asm	nop				
0035B:      	nop
            ; //_AED4A60EA_240:;				
            _AED4A60EA_240:
            ; //	asm clr io[0x09].b14;			
0035C:      	clr io[0x09].b14//
            ; //_AED4A60EA_241:;				
            _AED4A60EA_241:
            ; //	asm	nop				
0035D:      	nop
            ; //_AED4A60EA_242:;				
            _AED4A60EA_242:
            ; //	asm	nop				
0035E:      	nop
            ; //_AED4A60EA_243:;				
            _AED4A60EA_243:
            ; //	asm	nop				
0035F:      	nop
            ; //_AED4A60EA_244:;				
            _AED4A60EA_244:
            ; //	asm set io[0x09].b14;			
00360:      	set io[0x09].b14//
            ; //_AED4A60EA_245:;				
            _AED4A60EA_245:
            ; //	asm	nop				
00361:      	nop
            ; //_AED4A60EA_246:;				
            _AED4A60EA_246:
            ; //	asm	nop				
00362:      	nop
            ; //_AED4A60EA_247:;				
            _AED4A60EA_247:
            ; //	asm	nop				
00363:      	nop
            ; //_AED4A60EA_248:;				
            _AED4A60EA_248:
            ; //	asm	nop				
00364:      	nop
            ; //_AED4A60EA_249:;				
            _AED4A60EA_249:
            ; //	asm	nop				
00365:      	nop
            ; //_AED4A60EA_250:;				
            _AED4A60EA_250:
            ; //	asm	nop				
00366:      	nop
            ; //_AED4A60EA_251:;				
            _AED4A60EA_251:
            ; //	asm	nop				
00367:      	nop
            ; //_AED4A60EA_252:;				
            _AED4A60EA_252:
            ; //	asm	nop				
00368:      	nop
            ; //_AED4A60EA_253:;				
            _AED4A60EA_253:
            ; //	asm	nop				
00369:      	nop
            ; //_AED4A60EA_254:;				
            _AED4A60EA_254:
            ; //	asm	nop				
0036A:      	nop
            ; //_AED4A60EA_255:;				
            _AED4A60EA_255:
            ; //	asm	nop				
0036B:      	nop
            ; //_AED4A60EA_256:;				
            _AED4A60EA_256:
            ; //	asm	nop				
0036C:      	nop
            ; //_AED4A60EA_257:;				
            _AED4A60EA_257:
            ; //	asm clr io[0x09].b14;			
0036D:      	clr io[0x09].b14//
            ; //_AED4A60EA_258:;				
            _AED4A60EA_258:
            ; //	asm	nop				
0036E:      	nop
            ; //_AED4A60EA_259:;				
            _AED4A60EA_259:
            ; //	asm	nop				
0036F:      	nop
            ; //_AED4A60EA_260:;				
            _AED4A60EA_260:
            ; //	asm	nop				
00370:      	nop
            ; //_AED4A60EA_261:;				
            _AED4A60EA_261:
            ; //	asm set io[0x09].b14;			
00371:      	set io[0x09].b14//
            ; //_AED4A60EA_262:;				
            _AED4A60EA_262:
            ; //	asm	nop				
00372:      	nop
            ; //_AED4A60EA_263:;				
            _AED4A60EA_263:
            ; //	asm	nop				
00373:      	nop
            ; //_AED4A60EA_264:;				
            _AED4A60EA_264:
            ; //	asm	nop				
00374:      	nop
            ; //_AED4A60EA_265:;				
            _AED4A60EA_265:
            ; //	asm	nop				
00375:      	nop
            ; //_AED4A60EA_266:;				
            _AED4A60EA_266:
            ; //	asm	nop				
00376:      	nop
            ; //_AED4A60EA_267:;				
            _AED4A60EA_267:
            ; //	asm	nop				
00377:      	nop
            ; //_AED4A60EA_268:;				
            _AED4A60EA_268:
            ; //	asm	nop				
00378:      	nop
            ; //_AED4A60EA_269:;				
            _AED4A60EA_269:
            ; //	asm	nop				
00379:      	nop
            ; //_AED4A60EA_270:;				
            _AED4A60EA_270:
            ; //	asm	nop				
0037A:      	nop
            ; //_AED4A60EA_271:;				
            _AED4A60EA_271:
            ; //	asm	nop				
0037B:      	nop
            ; //_AED4A60EA_272:;				
            _AED4A60EA_272:
            ; //	asm	nop				
0037C:      	nop
            ; //_AED4A60EA_273:;				
            _AED4A60EA_273:
            ; //	asm	nop				
0037D:      	nop
            ; //_AED4A60EA_274:;				
            _AED4A60EA_274:
            ; //	asm clr io[0x09].b14;			
0037E:      	clr io[0x09].b14//
            ; //_AED4A60EA_275:;				
            _AED4A60EA_275:
            ; //	asm	nop				
0037F:      	nop
            ; //_AED4A60EA_276:;				
            _AED4A60EA_276:
            ; //	asm	nop				
00380:      	nop
            ; //_AED4A60EA_277:;				
            _AED4A60EA_277:
            ; //	asm	nop				
00381:      	nop
            ; //_AED4A60EA_278:;				
            _AED4A60EA_278:
            ; //	asm set io[0x09].b14;			
00382:      	set io[0x09].b14//
            ; //_AED4A60EA_279:;				
            _AED4A60EA_279:
            ; //	asm	nop				
00383:      	nop
            ; //_AED4A60EA_280:;				
            _AED4A60EA_280:
            ; //	asm	nop				
00384:      	nop
            ; //_AED4A60EA_281:;				
            _AED4A60EA_281:
            ; //	asm	nop				
00385:      	nop
            ; //_AED4A60EA_282:;				
            _AED4A60EA_282:
            ; //	asm	nop				
00386:      	nop
            ; //_AED4A60EA_283:;				
            _AED4A60EA_283:
            ; //	asm	nop				
00387:      	nop
            ; //_AED4A60EA_284:;				
            _AED4A60EA_284:
            ; //	asm	nop				
00388:      	nop
            ; //_AED4A60EA_285:;				
            _AED4A60EA_285:
            ; //	asm	nop				
00389:      	nop
            ; //_AED4A60EA_286:;				
            _AED4A60EA_286:
            ; //	asm	nop				
0038A:      	nop
            ; //_AED4A60EA_287:;				
            _AED4A60EA_287:
            ; //	asm	nop				
0038B:      	nop
            ; //_AED4A60EA_288:;				
            _AED4A60EA_288:
            ; //	asm	nop				
0038C:      	nop
            ; //_AED4A60EA_289:;				
            _AED4A60EA_289:
            ; //	asm	nop				
0038D:      	nop
            ; //_AED4A60EA_290:;				
            _AED4A60EA_290:
            ; //	asm	nop				
0038E:      	nop
            ; //_AED4A60EA_291:;				
            _AED4A60EA_291:
            ; //	asm clr io[0x09].b14;			
0038F:      	clr io[0x09].b14//
            ; //_AED4A60EA_292:;				
            _AED4A60EA_292:
            ; //	asm	nop				
00390:      	nop
            ; //_AED4A60EA_293:;				
            _AED4A60EA_293:
            ; //	asm	nop				
00391:      	nop
            ; //_AED4A60EA_294:;				
            _AED4A60EA_294:
            ; //	asm	nop				
00392:      	nop
            ; //_AED4A60EA_295:;				
            _AED4A60EA_295:
            ; //	asm set io[0x09].b14;			
00393:      	set io[0x09].b14//
            ; //_AED4A60EA_296:;				
            _AED4A60EA_296:
            ; //	asm	nop				
00394:      	nop
            ; //_AED4A60EA_297:;				
            _AED4A60EA_297:
            ; //	asm	nop				
00395:      	nop
            ; //_AED4A60EA_298:;				
            _AED4A60EA_298:
            ; //	asm	nop				
00396:      	nop
            ; //_AED4A60EA_299:;				
            _AED4A60EA_299:
            ; //	asm	nop				
00397:      	nop
            ; //_AED4A60EA_300:;				
            _AED4A60EA_300:
            ; //	asm	nop				
00398:      	nop
            ; //_AED4A60EA_301:;				
            _AED4A60EA_301:
            ; //	asm	nop				
00399:      	nop
            ; //_AED4A60EA_302:;				
            _AED4A60EA_302:
            ; //	asm	nop				
0039A:      	nop
            ; //_AED4A60EA_303:;				
            _AED4A60EA_303:
            ; //	asm	nop				
0039B:      	nop
            ; //_AED4A60EA_304:;				
            _AED4A60EA_304:
            ; //	asm	nop				
0039C:      	nop
            ; //_AED4A60EA_305:;				
            _AED4A60EA_305:
            ; //	asm	nop				
0039D:      	nop
            ; //_AED4A60EA_306:;				
            _AED4A60EA_306:
            ; //	asm	nop				
0039E:      	nop
            ; //_AED4A60EA_307:;				
            _AED4A60EA_307:
            ; //	asm	nop				
0039F:      	nop
            ; //_AED4A60EA_308:;				
            _AED4A60EA_308:
            ; //	asm clr io[0x09].b14;			
003A0:      	clr io[0x09].b14//
            ; //_AED4A60EA_309:;				
            _AED4A60EA_309:
            ; //	asm	nop				
003A1:      	nop
            ; //_AED4A60EA_310:;				
            _AED4A60EA_310:
            ; //	asm	nop				
003A2:      	nop
            ; //_AED4A60EA_311:;				
            _AED4A60EA_311:
            ; //	asm	nop				
003A3:      	nop
            ; //_AED4A60EA_312:;				
            _AED4A60EA_312:
            ; //	asm set io[0x09].b14;			
003A4:      	set io[0x09].b14//
            ; //_AED4A60EA_313:;				
            _AED4A60EA_313:
            ; //	asm	nop				
003A5:      	nop
            ; //_AED4A60EA_314:;				
            _AED4A60EA_314:
            ; //	asm	nop				
003A6:      	nop
            ; //_AED4A60EA_315:;				
            _AED4A60EA_315:
            ; //	asm	nop				
003A7:      	nop
            ; //_AED4A60EA_316:;				
            _AED4A60EA_316:
            ; //	asm	nop				
003A8:      	nop
            ; //_AED4A60EA_317:;				
            _AED4A60EA_317:
            ; //	asm	nop				
003A9:      	nop
            ; //_AED4A60EA_318:;				
            _AED4A60EA_318:
            ; //	asm	nop				
003AA:      	nop
            ; //_AED4A60EA_319:;				
            _AED4A60EA_319:
            ; //	asm	nop				
003AB:      	nop
            ; //_AED4A60EA_320:;				
            _AED4A60EA_320:
            ; //	asm	nop				
003AC:      	nop
            ; //_AED4A60EA_321:;				
            _AED4A60EA_321:
            ; //	asm	nop				
003AD:      	nop
            ; //_AED4A60EA_322:;				
            _AED4A60EA_322:
            ; //	asm	nop				
003AE:      	nop
            ; //_AED4A60EA_323:;				
            _AED4A60EA_323:
            ; //	asm	nop				
003AF:      	nop
            ; //_AED4A60EA_324:;				
            _AED4A60EA_324:
            ; //	asm	nop				
003B0:      	nop
            ; //_AED4A60EA_325:;				
            _AED4A60EA_325:
            ; //	asm clr io[0x09].b14;			
003B1:      	clr io[0x09].b14//
            ; //_AED4A60EA_326:;				
            _AED4A60EA_326:
            ; //	asm	nop				
003B2:      	nop
            ; //_AED4A60EA_327:;				
            _AED4A60EA_327:
            ; //	asm	nop				
003B3:      	nop
            ; //_AED4A60EA_328:;				
            _AED4A60EA_328:
            ; //	asm	nop				
003B4:      	nop
            ; //_AED4A60EA_329:;				
            _AED4A60EA_329:
            ; //	asm set io[0x09].b14;			
003B5:      	set io[0x09].b14//
            ; //_AED4A60EA_330:;				
            _AED4A60EA_330:
            ; //	asm	nop				
003B6:      	nop
            ; //_AED4A60EA_331:;				
            _AED4A60EA_331:
            ; //	asm	nop				
003B7:      	nop
            ; //_AED4A60EA_332:;				
            _AED4A60EA_332:
            ; //	asm	nop				
003B8:      	nop
            ; //_AED4A60EA_333:;				
            _AED4A60EA_333:
            ; //	asm	nop				
003B9:      	nop
            ; //_AED4A60EA_334:;				
            _AED4A60EA_334:
            ; //	asm	nop				
003BA:      	nop
            ; //_AED4A60EA_335:;				
            _AED4A60EA_335:
            ; //	asm	nop				
003BB:      	nop
            ; //_AED4A60EA_336:;				
            _AED4A60EA_336:
            ; //	asm	nop				
003BC:      	nop
            ; //_AED4A60EA_337:;				
            _AED4A60EA_337:
            ; //	asm	nop				
003BD:      	nop
            ; //_AED4A60EA_338:;				
            _AED4A60EA_338:
            ; //	asm	nop				
003BE:      	nop
            ; //_AED4A60EA_339:;				
            _AED4A60EA_339:
            ; //	asm	nop				
003BF:      	nop
            ; //_AED4A60EA_340:;				
            _AED4A60EA_340:
            ; //	asm	nop				
003C0:      	nop
            ; //_AED4A60EA_341:;				
            _AED4A60EA_341:
            ; //	asm	nop				
003C1:      	nop
            ; //_AED4A60EA_342:;				
            _AED4A60EA_342:
            ; //	asm clr io[0x09].b14;			
003C2:      	clr io[0x09].b14//
            ; //_AED4A60EA_343:;				
            _AED4A60EA_343:
            ; //	asm	nop				
003C3:      	nop
            ; //_AED4A60EA_344:;				
            _AED4A60EA_344:
            ; //	asm	nop				
003C4:      	nop
            ; //_AED4A60EA_345:;				
            _AED4A60EA_345:
            ; //	asm	nop				
003C5:      	nop
            ; //_AED4A60EA_346:;				
            _AED4A60EA_346:
            ; //	asm set io[0x09].b14;			
003C6:      	set io[0x09].b14//
            ; //_AED4A60EA_347:;				
            _AED4A60EA_347:
            ; //	asm	nop				
003C7:      	nop
            ; //_AED4A60EA_348:;				
            _AED4A60EA_348:
            ; //	asm	nop				
003C8:      	nop
            ; //_AED4A60EA_349:;				
            _AED4A60EA_349:
            ; //	asm	nop				
003C9:      	nop
            ; //_AED4A60EA_350:;				
            _AED4A60EA_350:
            ; //	asm	nop				
003CA:      	nop
            ; //_AED4A60EA_351:;				
            _AED4A60EA_351:
            ; //	asm	nop				
003CB:      	nop
            ; //_AED4A60EA_352:;				
            _AED4A60EA_352:
            ; //	asm	nop				
003CC:      	nop
            ; //_AED4A60EA_353:;				
            _AED4A60EA_353:
            ; //	asm	nop				
003CD:      	nop
            ; //_AED4A60EA_354:;				
            _AED4A60EA_354:
            ; //	asm	nop				
003CE:      	nop
            ; //_AED4A60EA_355:;				
            _AED4A60EA_355:
            ; //	asm	nop				
003CF:      	nop
            ; //_AED4A60EA_356:;				
            _AED4A60EA_356:
            ; //	asm	nop				
003D0:      	nop
            ; //_AED4A60EA_357:;				
            _AED4A60EA_357:
            ; //	asm	nop				
003D1:      	nop
            ; //_AED4A60EA_358:;				
            _AED4A60EA_358:
            ; //	asm	nop				
003D2:      	nop
            ; //_AED4A60EA_359:;				
            _AED4A60EA_359:
            ; //	asm clr io[0x09].b14;			
003D3:      	clr io[0x09].b14//
            ; //_AED4A60EA_360:;				
            _AED4A60EA_360:
            ; //	asm	nop				
003D4:      	nop
            ; //_AED4A60EA_361:;				
            _AED4A60EA_361:
            ; //	asm	nop				
003D5:      	nop
            ; //_AED4A60EA_362:;				
            _AED4A60EA_362:
            ; //	asm	nop				
003D6:      	nop
            ; //_AED4A60EA_363:;				
            _AED4A60EA_363:
            ; //	asm set io[0x09].b14;			
003D7:      	set io[0x09].b14//
            ; //_AED4A60EA_364:;				
            _AED4A60EA_364:
            ; //	asm	nop				
003D8:      	nop
            ; //_AED4A60EA_365:;				
            _AED4A60EA_365:
            ; //	asm	nop				
003D9:      	nop
            ; //_AED4A60EA_366:;				
            _AED4A60EA_366:
            ; //	asm	nop				
003DA:      	nop
            ; //_AED4A60EA_367:;				
            _AED4A60EA_367:
            ; //	asm	nop				
003DB:      	nop
            ; //_AED4A60EA_368:;				
            _AED4A60EA_368:
            ; //	asm	nop				
003DC:      	nop
            ; //_AED4A60EA_369:;				
            _AED4A60EA_369:
            ; //	asm	nop				
003DD:      	nop
            ; //_AED4A60EA_370:;				
            _AED4A60EA_370:
            ; //	asm	nop				
003DE:      	nop
            ; //_AED4A60EA_371:;				
            _AED4A60EA_371:
            ; //	asm	nop				
003DF:      	nop
            ; //_AED4A60EA_372:;				
            _AED4A60EA_372:
            ; //	asm	nop				
003E0:      	nop
            ; //_AED4A60EA_373:;				
            _AED4A60EA_373:
            ; //	asm	nop				
003E1:      	nop
            ; //_AED4A60EA_374:;				
            _AED4A60EA_374:
            ; //	asm	nop				
003E2:      	nop
            ; //_AED4A60EA_375:;				
            _AED4A60EA_375:
            ; //	asm	nop				
003E3:      	nop
            ; //_AED4A60EA_376:;				
            _AED4A60EA_376:
            ; //	asm clr io[0x09].b14;			
003E4:      	clr io[0x09].b14//
            ; //_AED4A60EA_377:;				
            _AED4A60EA_377:
            ; //	asm	nop				
003E5:      	nop
            ; //_AED4A60EA_378:;				
            _AED4A60EA_378:
            ; //	asm	nop				
003E6:      	nop
            ; //_AED4A60EA_379:;				
            _AED4A60EA_379:
            ; //	asm	nop				
003E7:      	nop
            ; //_AED4A60EA_380:;				
            _AED4A60EA_380:
            ; //	asm set io[0x09].b14;			
003E8:      	set io[0x09].b14//
            ; //_AED4A60EA_381:;				
            _AED4A60EA_381:
            ; //	asm	nop				
003E9:      	nop
            ; //_AED4A60EA_382:;				
            _AED4A60EA_382:
            ; //	asm	nop				
003EA:      	nop
            ; //_AED4A60EA_383:;				
            _AED4A60EA_383:
            ; //	asm	nop				
003EB:      	nop
            ; //_AED4A60EA_384:;				
            _AED4A60EA_384:
            ; //	asm	nop				
003EC:      	nop
            ; //_AED4A60EA_385:;				
            _AED4A60EA_385:
            ; //	asm	nop				
003ED:      	nop
            ; //_AED4A60EA_386:;				
            _AED4A60EA_386:
            ; //	asm	nop				
003EE:      	nop
            ; //_AED4A60EA_387:;				
            _AED4A60EA_387:
            ; //	asm	nop				
003EF:      	nop
            ; //_AED4A60EA_388:;				
            _AED4A60EA_388:
            ; //	asm	nop				
003F0:      	nop
            ; //_AED4A60EA_389:;				
            _AED4A60EA_389:
            ; //	asm	nop				
003F1:      	nop
            ; //_AED4A60EA_390:;				
            _AED4A60EA_390:
            ; //	asm	nop				
003F2:      	nop
            ; //_AED4A60EA_391:;				
            _AED4A60EA_391:
            ; //	asm	nop				
003F3:      	nop
            ; //_AED4A60EA_392:;				
            _AED4A60EA_392:
            ; //	asm	nop				
003F4:      	nop
            ; //_AED4A60EA_393:;				
            _AED4A60EA_393:
            ; //	asm clr io[0x09].b14;			
003F5:      	clr io[0x09].b14//
            ; //_AED4A60EA_394:;				
            _AED4A60EA_394:
            ; //	asm	nop				
003F6:      	nop
            ; //_AED4A60EA_395:;				
            _AED4A60EA_395:
            ; //	asm	nop				
003F7:      	nop
            ; //_AED4A60EA_396:;				
            _AED4A60EA_396:
            ; //	asm	nop				
003F8:      	nop
            ; //_AED4A60EA_397:;				
            _AED4A60EA_397:
            ; //	asm set io[0x09].b14;			
003F9:      	set io[0x09].b14//
            ; //_AED4A60EA_398:;				
            _AED4A60EA_398:
            ; //	asm	nop				
003FA:      	nop
            ; //_AED4A60EA_399:;				
            _AED4A60EA_399:
            ; //	asm	nop				
003FB:      	nop
            ; //_AED4A60EA_400:;				
            _AED4A60EA_400:
            ; //	asm	nop				
003FC:      	nop
            ; //_AED4A60EA_401:;				
            _AED4A60EA_401:
            ; //	asm	nop				
003FD:      	nop
            ; //_AED4A60EA_402:;				
            _AED4A60EA_402:
            ; //	asm	nop				
003FE:      	nop
            ; //_AED4A60EA_403:;				
            _AED4A60EA_403:
            ; //	asm	nop				
003FF:      	nop
            ; //_AED4A60EA_404:;				
            _AED4A60EA_404:
            ; //	asm	nop				
00400:      	nop
            ; //_AED4A60EA_405:;				
            _AED4A60EA_405:
            ; //	asm	nop				
00401:      	nop
            ; //_AED4A60EA_406:;				
            _AED4A60EA_406:
            ; //	asm	nop				
00402:      	nop
            ; //_AED4A60EA_407:;				
            _AED4A60EA_407:
            ; //	asm	nop				
00403:      	nop
            ; //_AED4A60EA_408:;				
            _AED4A60EA_408:
            ; //	asm	nop				
00404:      	nop
            ; //_AED4A60EA_409:;				
            _AED4A60EA_409:
            ; //	asm	nop				
00405:      	nop
            ; //_AED4A60EA_410:;				
            _AED4A60EA_410:
            ; //	asm clr io[0x09].b14;			
00406:      	clr io[0x09].b14//
            ; //_AED4A60EA_411:;				
            _AED4A60EA_411:
            ; //	asm	nop				
00407:      	nop
            ; //_AED4A60EA_412:;				
            _AED4A60EA_412:
            ; //	asm	nop				
00408:      	nop
            ; //_AED4A60EA_413:;				
            _AED4A60EA_413:
            ; //	asm	nop				
00409:      	nop
            ; //_AED4A60EA_414:;				
            _AED4A60EA_414:
            ; //	asm set io[0x09].b14;			
0040A:      	set io[0x09].b14//
            ; //_AED4A60EA_415:;				
            _AED4A60EA_415:
            ; //	asm	nop				
0040B:      	nop
            ; //_AED4A60EA_416:;				
            _AED4A60EA_416:
            ; //	asm	nop				
0040C:      	nop
            ; //_AED4A60EA_417:;				
            _AED4A60EA_417:
            ; //	asm	nop				
0040D:      	nop
            ; //_AED4A60EA_418:;				
            _AED4A60EA_418:
            ; //	asm	nop				
0040E:      	nop
            ; //_AED4A60EA_419:;				
            _AED4A60EA_419:
            ; //	asm	nop				
0040F:      	nop
            ; //_AED4A60EA_420:;				
            _AED4A60EA_420:
            ; //	asm	nop				
00410:      	nop
            ; //_AED4A60EA_421:;				
            _AED4A60EA_421:
            ; //	asm	nop				
00411:      	nop
            ; //_AED4A60EA_422:;				
            _AED4A60EA_422:
            ; //	asm	nop				
00412:      	nop
            ; //_AED4A60EA_423:;				
            _AED4A60EA_423:
            ; //	asm	nop				
00413:      	nop
            ; //_AED4A60EA_424:;				
            _AED4A60EA_424:
            ; //	asm	nop				
00414:      	nop
            ; //_AED4A60EA_425:;				
            _AED4A60EA_425:
            ; //	asm	nop				
00415:      	nop
            ; //_AED4A60EA_426:;				
            _AED4A60EA_426:
            ; //	asm	nop				
00416:      	nop
            ; //_AED4A60EA_427:;				
            _AED4A60EA_427:
            ; //	asm clr io[0x09].b14;			
00417:      	clr io[0x09].b14//
            ; //_AED4A60EA_428:;				
            _AED4A60EA_428:
            ; //	asm	nop				
00418:      	nop
            ; //_AED4A60EA_429:;				
            _AED4A60EA_429:
            ; //	asm	nop				
00419:      	nop
            ; //_AED4A60EA_430:;				
            _AED4A60EA_430:
            ; //	asm	nop				
0041A:      	nop
            ; //_AED4A60EA_431:;				
            _AED4A60EA_431:
            ; //	asm set io[0x09].b14;			
0041B:      	set io[0x09].b14//
            ; //_AED4A60EA_432:;				
            _AED4A60EA_432:
            ; //	asm	nop				
0041C:      	nop
            ; //_AED4A60EA_433:;				
            _AED4A60EA_433:
            ; //	asm	nop				
0041D:      	nop
            ; //_AED4A60EA_434:;				
            _AED4A60EA_434:
            ; //	asm	nop				
0041E:      	nop
            ; //_AED4A60EA_435:;				
            _AED4A60EA_435:
            ; //	asm	nop				
0041F:      	nop
            ; //_AED4A60EA_436:;				
            _AED4A60EA_436:
            ; //	asm	nop				
00420:      	nop
            ; //_AED4A60EA_437:;				
            _AED4A60EA_437:
            ; //	asm	nop				
00421:      	nop
            ; //_AED4A60EA_438:;				
            _AED4A60EA_438:
            ; //	asm	nop				
00422:      	nop
            ; //_AED4A60EA_439:;				
            _AED4A60EA_439:
            ; //	asm	nop				
00423:      	nop
            ; //_AED4A60EA_440:;				
            _AED4A60EA_440:
            ; //	asm	nop				
00424:      	nop
            ; //_AED4A60EA_441:;				
            _AED4A60EA_441:
            ; //	asm	nop				
00425:      	nop
            ; //_AED4A60EA_442:;				
            _AED4A60EA_442:
            ; //	asm	nop				
00426:      	nop
            ; //_AED4A60EA_443:;				
            _AED4A60EA_443:
            ; //	asm	nop				
00427:      	nop
            ; //_AED4A60EA_444:;				
            _AED4A60EA_444:
            ; //	asm clr io[0x09].b14;			
00428:      	clr io[0x09].b14//
            ; //_AED4A60EA_445:;				
            _AED4A60EA_445:
            ; //	asm	nop				
00429:      	nop
            ; //_AED4A60EA_446:;				
            _AED4A60EA_446:
            ; //	asm	nop				
0042A:      	nop
            ; //_AED4A60EA_447:;				
            _AED4A60EA_447:
            ; //	asm	nop				
0042B:      	nop
            ; //_AED4A60EA_448:;				
            _AED4A60EA_448:
            ; //	asm set io[0x09].b14;			
0042C:      	set io[0x09].b14//
            ; //_AED4A60EA_449:;				
            _AED4A60EA_449:
            ; //	asm	nop				
0042D:      	nop
            ; //_AED4A60EA_450:;				
            _AED4A60EA_450:
            ; //	asm	nop				
0042E:      	nop
            ; //_AED4A60EA_451:;				
            _AED4A60EA_451:
            ; //	asm	nop				
0042F:      	nop
            ; //_AED4A60EA_452:;				
            _AED4A60EA_452:
            ; //	asm	nop				
00430:      	nop
            ; //_AED4A60EA_453:;				
            _AED4A60EA_453:
            ; //	asm	nop				
00431:      	nop
            ; //_AED4A60EA_454:;				
            _AED4A60EA_454:
            ; //	asm	nop				
00432:      	nop
            ; //_AED4A60EA_455:;				
            _AED4A60EA_455:
            ; //	asm	nop				
00433:      	nop
            ; //_AED4A60EA_456:;				
            _AED4A60EA_456:
            ; //	asm	nop				
00434:      	nop
            ; //_AED4A60EA_457:;				
            _AED4A60EA_457:
            ; //	asm	nop				
00435:      	nop
            ; //_AED4A60EA_458:;				
            _AED4A60EA_458:
            ; //	asm	nop				
00436:      	nop
            ; //_AED4A60EA_459:;				
            _AED4A60EA_459:
            ; //	asm	nop				
00437:      	nop
            ; //_AED4A60EA_460:;				
            _AED4A60EA_460:
            ; //	asm	nop				
00438:      	nop
            ; //_AED4A60EA_461:;				
            _AED4A60EA_461:
            ; //	asm clr io[0x09].b14;			
00439:      	clr io[0x09].b14//
            ; //_AED4A60EA_462:;				
            _AED4A60EA_462:
            ; //	asm	nop				
0043A:      	nop
            ; //_AED4A60EA_463:;				
            _AED4A60EA_463:
            ; //	asm	nop				
0043B:      	nop
            ; //_AED4A60EA_464:;				
            _AED4A60EA_464:
            ; //	asm	nop				
0043C:      	nop
            ; //_AED4A60EA_465:;				
            _AED4A60EA_465:
            ; //	asm set io[0x09].b14;			
0043D:      	set io[0x09].b14//
            ; //_AED4A60EA_466:;				
            _AED4A60EA_466:
            ; //	asm	nop				
0043E:      	nop
            ; //_AED4A60EA_467:;				
            _AED4A60EA_467:
            ; //	asm	nop				
0043F:      	nop
            ; //_AED4A60EA_468:;				
            _AED4A60EA_468:
            ; //	asm	nop				
00440:      	nop
            ; //_AED4A60EA_469:;				
            _AED4A60EA_469:
            ; //	asm	nop				
00441:      	nop
            ; //_AED4A60EA_470:;				
            _AED4A60EA_470:
            ; //	asm	nop				
00442:      	nop
            ; //_AED4A60EA_471:;				
            _AED4A60EA_471:
            ; //	asm	nop				
00443:      	nop
            ; //_AED4A60EA_472:;				
            _AED4A60EA_472:
            ; //	asm	nop				
00444:      	nop
            ; //_AED4A60EA_473:;				
            _AED4A60EA_473:
            ; //	asm	nop				
00445:      	nop
            ; //_AED4A60EA_474:;				
            _AED4A60EA_474:
            ; //	asm	nop				
00446:      	nop
            ; //_AED4A60EA_475:;				
            _AED4A60EA_475:
            ; //	asm	nop				
00447:      	nop
            ; //_AED4A60EA_476:;				
            _AED4A60EA_476:
            ; //	asm	nop				
00448:      	nop
            ; //_AED4A60EA_477:;				
            _AED4A60EA_477:
            ; //	asm	nop				
00449:      	nop
            ; //_AED4A60EA_478:;				
            _AED4A60EA_478:
            ; //	asm clr io[0x09].b14;			
0044A:      	clr io[0x09].b14//
            ; //_AED4A60EA_479:;				
            _AED4A60EA_479:
            ; //	asm	nop				
0044B:      	nop
            ; //_AED4A60EA_480:;				
            _AED4A60EA_480:
            ; //	asm	nop				
0044C:      	nop
            ; //_AED4A60EA_481:;				
            _AED4A60EA_481:
            ; //	asm	nop				
0044D:      	nop
            ; //_AED4A60EA_482:;				
            _AED4A60EA_482:
            ; //	asm set io[0x09].b14;			
0044E:      	set io[0x09].b14//
            ; //_AED4A60EA_483:;				
            _AED4A60EA_483:
            ; //	asm	nop				
0044F:      	nop
            ; //_AED4A60EA_484:;				
            _AED4A60EA_484:
            ; //	asm	nop				
00450:      	nop
            ; //_AED4A60EA_485:;				
            _AED4A60EA_485:
            ; //	asm	nop				
00451:      	nop
            ; //_AED4A60EA_486:;				
            _AED4A60EA_486:
            ; //	asm	nop				
00452:      	nop
            ; //_AED4A60EA_487:;				
            _AED4A60EA_487:
            ; //	asm	nop				
00453:      	nop
            ; //_AED4A60EA_488:;				
            _AED4A60EA_488:
            ; //	asm	nop				
00454:      	nop
            ; //_AED4A60EA_489:;				
            _AED4A60EA_489:
            ; //	asm	nop				
00455:      	nop
            ; //_AED4A60EA_490:;				
            _AED4A60EA_490:
            ; //	asm	nop				
00456:      	nop
            ; //_AED4A60EA_491:;				
            _AED4A60EA_491:
            ; //	asm	nop				
00457:      	nop
            ; //_AED4A60EA_492:;				
            _AED4A60EA_492:
            ; //	asm	nop				
00458:      	nop
            ; //_AED4A60EA_493:;				
            _AED4A60EA_493:
            ; //	asm	nop				
00459:      	nop
            ; //_AED4A60EA_494:;				
            _AED4A60EA_494:
            ; //	asm	nop				
0045A:      	nop
            ; //_AED4A60EA_495:;				
            _AED4A60EA_495:
            ; //	asm clr io[0x09].b14;			
0045B:      	clr io[0x09].b14//
            ; //_AED4A60EA_496:;				
            _AED4A60EA_496:
            ; //	asm	nop				
0045C:      	nop
            ; //_AED4A60EA_497:;				
            _AED4A60EA_497:
            ; //	asm	nop				
0045D:      	nop
            ; //_AED4A60EA_498:;				
            _AED4A60EA_498:
            ; //	asm	nop				
0045E:      	nop
            ; //_AED4A60EA_499:;				
            _AED4A60EA_499:
            ; //	asm set io[0x09].b14;			
0045F:      	set io[0x09].b14//
            ; //_AED4A60EA_500:;				
            _AED4A60EA_500:
            ; //	asm	nop				
00460:      	nop
            ; //_AED4A60EA_501:;				
            _AED4A60EA_501:
            ; //	asm	nop				
00461:      	nop
            ; //_AED4A60EA_502:;				
            _AED4A60EA_502:
            ; //	asm	nop				
00462:      	nop
            ; //_AED4A60EA_503:;				
            _AED4A60EA_503:
            ; //	asm	nop				
00463:      	nop
            ; //_AED4A60EA_504:;				
            _AED4A60EA_504:
            ; //	asm	nop				
00464:      	nop
            ; //_AED4A60EA_505:;				
            _AED4A60EA_505:
            ; //	asm	nop				
00465:      	nop
            ; //_AED4A60EA_506:;				
            _AED4A60EA_506:
            ; //	asm	nop				
00466:      	nop
            ; //_AED4A60EA_507:;				
            _AED4A60EA_507:
            ; //	asm	nop				
00467:      	nop
            ; //_AED4A60EA_508:;				
            _AED4A60EA_508:
            ; //	asm	nop				
00468:      	nop
            ; //_AED4A60EA_509:;				
            _AED4A60EA_509:
            ; //	asm	nop				
00469:      	nop
            ; //_AED4A60EA_510:;				
            _AED4A60EA_510:
            ; //	asm	nop				
0046A:      	nop
            ; //_AED4A60EA_511:;				
            _AED4A60EA_511:
            ; //	asm	nop				
0046B:      	nop
            ; //_AED4A60EA_512:;				
            _AED4A60EA_512:
            ; //	asm clr io[0x09].b14;			
0046C:      	clr io[0x09].b14//
            ; //_AED4A60EA_513:;				
            _AED4A60EA_513:
            ; //	asm	nop				
0046D:      	nop
            ; //_AED4A60EA_514:;				
            _AED4A60EA_514:
            ; //	asm	nop				
0046E:      	nop
            ; //_AED4A60EA_515:;				
            _AED4A60EA_515:
            ; //	asm	nop				
0046F:      	nop
            ; //_AED4A60EA_516:;				
            _AED4A60EA_516:
            ; //	asm set io[0x09].b14;			
00470:      	set io[0x09].b14//
            ; //_AED4A60EA_517:;				
            _AED4A60EA_517:
            ; //	asm	nop				
00471:      	nop
            ; //_AED4A60EA_518:;				
            _AED4A60EA_518:
            ; //	asm	nop				
00472:      	nop
            ; //_AED4A60EA_519:;				
            _AED4A60EA_519:
            ; //	asm	nop				
00473:      	nop
            ; //_AED4A60EA_520:;				
            _AED4A60EA_520:
            ; //	asm	nop				
00474:      	nop
            ; //_AED4A60EA_521:;				
            _AED4A60EA_521:
            ; //	asm	nop				
00475:      	nop
            ; //_AED4A60EA_522:;				
            _AED4A60EA_522:
            ; //	asm	nop				
00476:      	nop
            ; //_AED4A60EA_523:;				
            _AED4A60EA_523:
            ; //	asm	nop				
00477:      	nop
            ; //_AED4A60EA_524:;				
            _AED4A60EA_524:
            ; //	asm	nop				
00478:      	nop
            ; //_AED4A60EA_525:;				
            _AED4A60EA_525:
            ; //	asm	nop				
00479:      	nop
            ; //_AED4A60EA_526:;				
            _AED4A60EA_526:
            ; //	asm	nop				
0047A:      	nop
            ; //_AED4A60EA_527:;				
            _AED4A60EA_527:
            ; //	asm	nop				
0047B:      	nop
            ; //_AED4A60EA_528:;				
            _AED4A60EA_528:
            ; //	asm	nop				
0047C:      	nop
            ; //_AED4A60EA_529:;				
            _AED4A60EA_529:
            ; //	asm clr io[0x09].b14;			
0047D:      	clr io[0x09].b14//
            ; //_AED4A60EA_530:;				
            _AED4A60EA_530:
            ; //	asm	nop				
0047E:      	nop
            ; //_AED4A60EA_531:;				
            _AED4A60EA_531:
            ; //	asm	nop				
0047F:      	nop
            ; //_AED4A60EA_532:;				
            _AED4A60EA_532:
            ; //	asm	nop				
00480:      	nop
            ; //_AED4A60EA_533:;				
            _AED4A60EA_533:
            ; //	goto LD63FD439_50;			
00481:      	pch =	LD63FD439_50
00482:      	ljmp	LD63FD439_50
            ; //LD63FD439_53:;					
            LD63FD439_53:
            ; //_AED4A60EA_534:;				
            _AED4A60EA_534:
            ; //	asm set io[0x09].b14;			
00483:      	set io[0x09].b14//
            ; //_AED4A60EA_535:;				
            _AED4A60EA_535:
            ; //	asm	nop				
00484:      	nop
            ; //_AED4A60EA_536:;				
            _AED4A60EA_536:
            ; //	asm	nop				
00485:      	nop
            ; //_AED4A60EA_537:;				
            _AED4A60EA_537:
            ; //	asm	nop				
00486:      	nop
            ; //_AED4A60EA_538:;				
            _AED4A60EA_538:
            ; //	asm clr io[0x09].b14;			
00487:      	clr io[0x09].b14//
            ; //_AED4A60EA_539:;				
            _AED4A60EA_539:
            ; //	asm	nop				
00488:      	nop
            ; //_AED4A60EA_540:;				
            _AED4A60EA_540:
            ; //	asm	nop				
00489:      	nop
            ; //_AED4A60EA_541:;				
            _AED4A60EA_541:
            ; //	asm	nop				
0048A:      	nop
            ; //_AED4A60EA_542:;				
            _AED4A60EA_542:
            ; //	asm	nop				
0048B:      	nop
            ; //_AED4A60EA_543:;				
            _AED4A60EA_543:
            ; //	asm	nop				
0048C:      	nop
            ; //_AED4A60EA_544:;				
            _AED4A60EA_544:
            ; //	asm	nop				
0048D:      	nop
            ; //_AED4A60EA_545:;				
            _AED4A60EA_545:
            ; //	asm	nop				
0048E:      	nop
            ; //_AED4A60EA_546:;				
            _AED4A60EA_546:
            ; //	asm	nop				
0048F:      	nop
            ; //_AED4A60EA_547:;				
            _AED4A60EA_547:
            ; //	asm	nop				
00490:      	nop
            ; //_AED4A60EA_548:;				
            _AED4A60EA_548:
            ; //	asm	nop				
00491:      	nop
            ; //_AED4A60EA_549:;				
            _AED4A60EA_549:
            ; //	asm	nop				
00492:      	nop
            ; //_AED4A60EA_550:;				
            _AED4A60EA_550:
            ; //	asm	nop				
00493:      	nop
            ; //_AED4A60EA_551:;				
            _AED4A60EA_551:
            ; //	asm set io[0x09].b14;			
00494:      	set io[0x09].b14//
            ; //_AED4A60EA_552:;				
            _AED4A60EA_552:
            ; //	asm	nop				
00495:      	nop
            ; //_AED4A60EA_553:;				
            _AED4A60EA_553:
            ; //	asm	nop				
00496:      	nop
            ; //_AED4A60EA_554:;				
            _AED4A60EA_554:
            ; //	asm	nop				
00497:      	nop
            ; //_AED4A60EA_555:;				
            _AED4A60EA_555:
            ; //	asm clr io[0x09].b14;			
00498:      	clr io[0x09].b14//
            ; //_AED4A60EA_556:;				
            _AED4A60EA_556:
            ; //	asm	nop				
00499:      	nop
            ; //_AED4A60EA_557:;				
            _AED4A60EA_557:
            ; //	asm	nop				
0049A:      	nop
            ; //_AED4A60EA_558:;				
            _AED4A60EA_558:
            ; //	asm	nop				
0049B:      	nop
            ; //_AED4A60EA_559:;				
            _AED4A60EA_559:
            ; //	asm	nop				
0049C:      	nop
            ; //_AED4A60EA_560:;				
            _AED4A60EA_560:
            ; //	asm	nop				
0049D:      	nop
            ; //_AED4A60EA_561:;				
            _AED4A60EA_561:
            ; //	asm	nop				
0049E:      	nop
            ; //_AED4A60EA_562:;				
            _AED4A60EA_562:
            ; //	asm	nop				
0049F:      	nop
            ; //_AED4A60EA_563:;				
            _AED4A60EA_563:
            ; //	asm	nop				
004A0:      	nop
            ; //_AED4A60EA_564:;				
            _AED4A60EA_564:
            ; //	asm	nop				
004A1:      	nop
            ; //_AED4A60EA_565:;				
            _AED4A60EA_565:
            ; //	asm	nop				
004A2:      	nop
            ; //_AED4A60EA_566:;				
            _AED4A60EA_566:
            ; //	asm	nop				
004A3:      	nop
            ; //_AED4A60EA_567:;				
            _AED4A60EA_567:
            ; //	asm	nop				
004A4:      	nop
            ; //_AED4A60EA_568:;				
            _AED4A60EA_568:
            ; //	asm set io[0x09].b14;			
004A5:      	set io[0x09].b14//
            ; //_AED4A60EA_569:;				
            _AED4A60EA_569:
            ; //	asm	nop				
004A6:      	nop
            ; //_AED4A60EA_570:;				
            _AED4A60EA_570:
            ; //	asm	nop				
004A7:      	nop
            ; //_AED4A60EA_571:;				
            _AED4A60EA_571:
            ; //	asm	nop				
004A8:      	nop
            ; //_AED4A60EA_572:;				
            _AED4A60EA_572:
            ; //	asm clr io[0x09].b14;			
004A9:      	clr io[0x09].b14//
            ; //_AED4A60EA_573:;				
            _AED4A60EA_573:
            ; //	asm	nop				
004AA:      	nop
            ; //_AED4A60EA_574:;				
            _AED4A60EA_574:
            ; //	asm	nop				
004AB:      	nop
            ; //_AED4A60EA_575:;				
            _AED4A60EA_575:
            ; //	asm	nop				
004AC:      	nop
            ; //_AED4A60EA_576:;				
            _AED4A60EA_576:
            ; //	asm	nop				
004AD:      	nop
            ; //_AED4A60EA_577:;				
            _AED4A60EA_577:
            ; //	asm	nop				
004AE:      	nop
            ; //_AED4A60EA_578:;				
            _AED4A60EA_578:
            ; //	asm	nop				
004AF:      	nop
            ; //_AED4A60EA_579:;				
            _AED4A60EA_579:
            ; //	asm	nop				
004B0:      	nop
            ; //_AED4A60EA_580:;				
            _AED4A60EA_580:
            ; //	asm	nop				
004B1:      	nop
            ; //_AED4A60EA_581:;				
            _AED4A60EA_581:
            ; //	asm	nop				
004B2:      	nop
            ; //_AED4A60EA_582:;				
            _AED4A60EA_582:
            ; //	asm	nop				
004B3:      	nop
            ; //_AED4A60EA_583:;				
            _AED4A60EA_583:
            ; //	asm	nop				
004B4:      	nop
            ; //_AED4A60EA_584:;				
            _AED4A60EA_584:
            ; //	asm	nop				
004B5:      	nop
            ; //_AED4A60EA_585:;				
            _AED4A60EA_585:
            ; //	asm set io[0x09].b14;			
004B6:      	set io[0x09].b14//
            ; //_AED4A60EA_586:;				
            _AED4A60EA_586:
            ; //	asm	nop				
004B7:      	nop
            ; //_AED4A60EA_587:;				
            _AED4A60EA_587:
            ; //	asm	nop				
004B8:      	nop
            ; //_AED4A60EA_588:;				
            _AED4A60EA_588:
            ; //	asm	nop				
004B9:      	nop
            ; //_AED4A60EA_589:;				
            _AED4A60EA_589:
            ; //	asm clr io[0x09].b14;			
004BA:      	clr io[0x09].b14//
            ; //_AED4A60EA_590:;				
            _AED4A60EA_590:
            ; //	asm	nop				
004BB:      	nop
            ; //_AED4A60EA_591:;				
            _AED4A60EA_591:
            ; //	asm	nop				
004BC:      	nop
            ; //_AED4A60EA_592:;				
            _AED4A60EA_592:
            ; //	asm	nop				
004BD:      	nop
            ; //_AED4A60EA_593:;				
            _AED4A60EA_593:
            ; //	asm	nop				
004BE:      	nop
            ; //_AED4A60EA_594:;				
            _AED4A60EA_594:
            ; //	asm	nop				
004BF:      	nop
            ; //_AED4A60EA_595:;				
            _AED4A60EA_595:
            ; //	asm	nop				
004C0:      	nop
            ; //_AED4A60EA_596:;				
            _AED4A60EA_596:
            ; //	asm	nop				
004C1:      	nop
            ; //_AED4A60EA_597:;				
            _AED4A60EA_597:
            ; //	asm	nop				
004C2:      	nop
            ; //_AED4A60EA_598:;				
            _AED4A60EA_598:
            ; //	asm	nop				
004C3:      	nop
            ; //_AED4A60EA_599:;				
            _AED4A60EA_599:
            ; //	asm	nop				
004C4:      	nop
            ; //_AED4A60EA_600:;				
            _AED4A60EA_600:
            ; //	asm	nop				
004C5:      	nop
            ; //_AED4A60EA_601:;				
            _AED4A60EA_601:
            ; //	asm	nop				
004C6:      	nop
            ; //_AED4A60EA_602:;				
            _AED4A60EA_602:
            ; //	asm set io[0x09].b14;			
004C7:      	set io[0x09].b14//
            ; //_AED4A60EA_603:;				
            _AED4A60EA_603:
            ; //	asm	nop				
004C8:      	nop
            ; //_AED4A60EA_604:;				
            _AED4A60EA_604:
            ; //	asm	nop				
004C9:      	nop
            ; //_AED4A60EA_605:;				
            _AED4A60EA_605:
            ; //	asm	nop				
004CA:      	nop
            ; //_AED4A60EA_606:;				
            _AED4A60EA_606:
            ; //	asm clr io[0x09].b14;			
004CB:      	clr io[0x09].b14//
            ; //_AED4A60EA_607:;				
            _AED4A60EA_607:
            ; //	asm	nop				
004CC:      	nop
            ; //_AED4A60EA_608:;				
            _AED4A60EA_608:
            ; //	asm	nop				
004CD:      	nop
            ; //_AED4A60EA_609:;				
            _AED4A60EA_609:
            ; //	asm	nop				
004CE:      	nop
            ; //_AED4A60EA_610:;				
            _AED4A60EA_610:
            ; //	asm	nop				
004CF:      	nop
            ; //_AED4A60EA_611:;				
            _AED4A60EA_611:
            ; //	asm	nop				
004D0:      	nop
            ; //_AED4A60EA_612:;				
            _AED4A60EA_612:
            ; //	asm	nop				
004D1:      	nop
            ; //_AED4A60EA_613:;				
            _AED4A60EA_613:
            ; //	asm	nop				
004D2:      	nop
            ; //_AED4A60EA_614:;				
            _AED4A60EA_614:
            ; //	asm	nop				
004D3:      	nop
            ; //_AED4A60EA_615:;				
            _AED4A60EA_615:
            ; //	asm	nop				
004D4:      	nop
            ; //_AED4A60EA_616:;				
            _AED4A60EA_616:
            ; //	asm	nop				
004D5:      	nop
            ; //_AED4A60EA_617:;				
            _AED4A60EA_617:
            ; //	asm	nop				
004D6:      	nop
            ; //_AED4A60EA_618:;				
            _AED4A60EA_618:
            ; //	asm	nop				
004D7:      	nop
            ; //_AED4A60EA_619:;				
            _AED4A60EA_619:
            ; //	asm set io[0x09].b14;			
004D8:      	set io[0x09].b14//
            ; //_AED4A60EA_620:;				
            _AED4A60EA_620:
            ; //	asm	nop				
004D9:      	nop
            ; //_AED4A60EA_621:;				
            _AED4A60EA_621:
            ; //	asm	nop				
004DA:      	nop
            ; //_AED4A60EA_622:;				
            _AED4A60EA_622:
            ; //	asm	nop				
004DB:      	nop
            ; //_AED4A60EA_623:;				
            _AED4A60EA_623:
            ; //	asm clr io[0x09].b14;			
004DC:      	clr io[0x09].b14//
            ; //_AED4A60EA_624:;				
            _AED4A60EA_624:
            ; //	asm	nop				
004DD:      	nop
            ; //_AED4A60EA_625:;				
            _AED4A60EA_625:
            ; //	asm	nop				
004DE:      	nop
            ; //_AED4A60EA_626:;				
            _AED4A60EA_626:
            ; //	asm	nop				
004DF:      	nop
            ; //_AED4A60EA_627:;				
            _AED4A60EA_627:
            ; //	asm	nop				
004E0:      	nop
            ; //_AED4A60EA_628:;				
            _AED4A60EA_628:
            ; //	asm	nop				
004E1:      	nop
            ; //_AED4A60EA_629:;				
            _AED4A60EA_629:
            ; //	asm	nop				
004E2:      	nop
            ; //_AED4A60EA_630:;				
            _AED4A60EA_630:
            ; //	asm	nop				
004E3:      	nop
            ; //_AED4A60EA_631:;				
            _AED4A60EA_631:
            ; //	asm	nop				
004E4:      	nop
            ; //_AED4A60EA_632:;				
            _AED4A60EA_632:
            ; //	asm	nop				
004E5:      	nop
            ; //_AED4A60EA_633:;				
            _AED4A60EA_633:
            ; //	asm	nop				
004E6:      	nop
            ; //_AED4A60EA_634:;				
            _AED4A60EA_634:
            ; //	asm	nop				
004E7:      	nop
            ; //_AED4A60EA_635:;				
            _AED4A60EA_635:
            ; //	asm	nop				
004E8:      	nop
            ; //_AED4A60EA_636:;				
            _AED4A60EA_636:
            ; //	asm set io[0x09].b14;			
004E9:      	set io[0x09].b14//
            ; //_AED4A60EA_637:;				
            _AED4A60EA_637:
            ; //	asm	nop				
004EA:      	nop
            ; //_AED4A60EA_638:;				
            _AED4A60EA_638:
            ; //	asm	nop				
004EB:      	nop
            ; //_AED4A60EA_639:;				
            _AED4A60EA_639:
            ; //	asm	nop				
004EC:      	nop
            ; //_AED4A60EA_640:;				
            _AED4A60EA_640:
            ; //	asm clr io[0x09].b14;			
004ED:      	clr io[0x09].b14//
            ; //_AED4A60EA_641:;				
            _AED4A60EA_641:
            ; //	asm	nop				
004EE:      	nop
            ; //_AED4A60EA_642:;				
            _AED4A60EA_642:
            ; //	asm	nop				
004EF:      	nop
            ; //_AED4A60EA_643:;				
            _AED4A60EA_643:
            ; //	asm	nop				
004F0:      	nop
            ; //_AED4A60EA_644:;				
            _AED4A60EA_644:
            ; //	asm	nop				
004F1:      	nop
            ; //_AED4A60EA_645:;				
            _AED4A60EA_645:
            ; //	asm	nop				
004F2:      	nop
            ; //_AED4A60EA_646:;				
            _AED4A60EA_646:
            ; //	asm	nop				
004F3:      	nop
            ; //_AED4A60EA_647:;				
            _AED4A60EA_647:
            ; //	asm	nop				
004F4:      	nop
            ; //_AED4A60EA_648:;				
            _AED4A60EA_648:
            ; //	asm	nop				
004F5:      	nop
            ; //_AED4A60EA_649:;				
            _AED4A60EA_649:
            ; //	asm	nop				
004F6:      	nop
            ; //_AED4A60EA_650:;				
            _AED4A60EA_650:
            ; //	asm	nop				
004F7:      	nop
            ; //_AED4A60EA_651:;				
            _AED4A60EA_651:
            ; //	asm	nop				
004F8:      	nop
            ; //_AED4A60EA_652:;				
            _AED4A60EA_652:
            ; //	asm	nop				
004F9:      	nop
            ; //_AED4A60EA_653:;				
            _AED4A60EA_653:
            ; //	asm set io[0x09].b14;			
004FA:      	set io[0x09].b14//
            ; //_AED4A60EA_654:;				
            _AED4A60EA_654:
            ; //	asm	nop				
004FB:      	nop
            ; //_AED4A60EA_655:;				
            _AED4A60EA_655:
            ; //	asm	nop				
004FC:      	nop
            ; //_AED4A60EA_656:;				
            _AED4A60EA_656:
            ; //	asm	nop				
004FD:      	nop
            ; //_AED4A60EA_657:;				
            _AED4A60EA_657:
            ; //	asm clr io[0x09].b14;			
004FE:      	clr io[0x09].b14//
            ; //_AED4A60EA_658:;				
            _AED4A60EA_658:
            ; //	asm	nop				
004FF:      	nop
            ; //_AED4A60EA_659:;				
            _AED4A60EA_659:
            ; //	asm	nop				
00500:      	nop
            ; //_AED4A60EA_660:;				
            _AED4A60EA_660:
            ; //	asm	nop				
00501:      	nop
            ; //_AED4A60EA_661:;				
            _AED4A60EA_661:
            ; //	asm	nop				
00502:      	nop
            ; //_AED4A60EA_662:;				
            _AED4A60EA_662:
            ; //	asm	nop				
00503:      	nop
            ; //_AED4A60EA_663:;				
            _AED4A60EA_663:
            ; //	asm	nop				
00504:      	nop
            ; //_AED4A60EA_664:;				
            _AED4A60EA_664:
            ; //	asm	nop				
00505:      	nop
            ; //_AED4A60EA_665:;				
            _AED4A60EA_665:
            ; //	asm	nop				
00506:      	nop
            ; //_AED4A60EA_666:;				
            _AED4A60EA_666:
            ; //	asm	nop				
00507:      	nop
            ; //_AED4A60EA_667:;				
            _AED4A60EA_667:
            ; //	asm	nop				
00508:      	nop
            ; //_AED4A60EA_668:;				
            _AED4A60EA_668:
            ; //	asm	nop				
00509:      	nop
            ; //_AED4A60EA_669:;				
            _AED4A60EA_669:
            ; //	asm	nop				
0050A:      	nop
            ; //_AED4A60EA_670:;				
            _AED4A60EA_670:
            ; //	asm set io[0x09].b14;			
0050B:      	set io[0x09].b14//
            ; //_AED4A60EA_671:;				
            _AED4A60EA_671:
            ; //	asm	nop				
0050C:      	nop
            ; //_AED4A60EA_672:;				
            _AED4A60EA_672:
            ; //	asm	nop				
0050D:      	nop
            ; //_AED4A60EA_673:;				
            _AED4A60EA_673:
            ; //	asm	nop				
0050E:      	nop
            ; //_AED4A60EA_674:;				
            _AED4A60EA_674:
            ; //	asm clr io[0x09].b14;			
0050F:      	clr io[0x09].b14//
            ; //_AED4A60EA_675:;				
            _AED4A60EA_675:
            ; //	asm	nop				
00510:      	nop
            ; //_AED4A60EA_676:;				
            _AED4A60EA_676:
            ; //	asm	nop				
00511:      	nop
            ; //_AED4A60EA_677:;				
            _AED4A60EA_677:
            ; //	asm	nop				
00512:      	nop
            ; //_AED4A60EA_678:;				
            _AED4A60EA_678:
            ; //	asm	nop				
00513:      	nop
            ; //_AED4A60EA_679:;				
            _AED4A60EA_679:
            ; //	asm	nop				
00514:      	nop
            ; //_AED4A60EA_680:;				
            _AED4A60EA_680:
            ; //	asm	nop				
00515:      	nop
            ; //_AED4A60EA_681:;				
            _AED4A60EA_681:
            ; //	asm	nop				
00516:      	nop
            ; //_AED4A60EA_682:;				
            _AED4A60EA_682:
            ; //	asm	nop				
00517:      	nop
            ; //_AED4A60EA_683:;				
            _AED4A60EA_683:
            ; //	asm	nop				
00518:      	nop
            ; //_AED4A60EA_684:;				
            _AED4A60EA_684:
            ; //	asm	nop				
00519:      	nop
            ; //_AED4A60EA_685:;				
            _AED4A60EA_685:
            ; //	asm	nop				
0051A:      	nop
            ; //_AED4A60EA_686:;				
            _AED4A60EA_686:
            ; //	asm	nop				
0051B:      	nop
            ; //_AED4A60EA_687:;				
            _AED4A60EA_687:
            ; //	asm set io[0x09].b14;			
0051C:      	set io[0x09].b14//
            ; //_AED4A60EA_688:;				
            _AED4A60EA_688:
            ; //	asm	nop				
0051D:      	nop
            ; //_AED4A60EA_689:;				
            _AED4A60EA_689:
            ; //	asm	nop				
0051E:      	nop
            ; //_AED4A60EA_690:;				
            _AED4A60EA_690:
            ; //	asm	nop				
0051F:      	nop
            ; //_AED4A60EA_691:;				
            _AED4A60EA_691:
            ; //	asm clr io[0x09].b14;			
00520:      	clr io[0x09].b14//
            ; //_AED4A60EA_692:;				
            _AED4A60EA_692:
            ; //	asm	nop				
00521:      	nop
            ; //_AED4A60EA_693:;				
            _AED4A60EA_693:
            ; //	asm	nop				
00522:      	nop
            ; //_AED4A60EA_694:;				
            _AED4A60EA_694:
            ; //	asm	nop				
00523:      	nop
            ; //_AED4A60EA_695:;				
            _AED4A60EA_695:
            ; //	asm	nop				
00524:      	nop
            ; //_AED4A60EA_696:;				
            _AED4A60EA_696:
            ; //	asm	nop				
00525:      	nop
            ; //_AED4A60EA_697:;				
            _AED4A60EA_697:
            ; //	asm	nop				
00526:      	nop
            ; //_AED4A60EA_698:;				
            _AED4A60EA_698:
            ; //	asm	nop				
00527:      	nop
            ; //_AED4A60EA_699:;				
            _AED4A60EA_699:
            ; //	asm	nop				
00528:      	nop
            ; //_AED4A60EA_700:;				
            _AED4A60EA_700:
            ; //	asm	nop				
00529:      	nop
            ; //_AED4A60EA_701:;				
            _AED4A60EA_701:
            ; //	asm	nop				
0052A:      	nop
            ; //_AED4A60EA_702:;				
            _AED4A60EA_702:
            ; //	asm	nop				
0052B:      	nop
            ; //_AED4A60EA_703:;				
            _AED4A60EA_703:
            ; //	asm	nop				
0052C:      	nop
            ; //_AED4A60EA_704:;				
            _AED4A60EA_704:
            ; //	asm set io[0x09].b14;			
0052D:      	set io[0x09].b14//
            ; //_AED4A60EA_705:;				
            _AED4A60EA_705:
            ; //	asm	nop				
0052E:      	nop
            ; //_AED4A60EA_706:;				
            _AED4A60EA_706:
            ; //	asm	nop				
0052F:      	nop
            ; //_AED4A60EA_707:;				
            _AED4A60EA_707:
            ; //	asm	nop				
00530:      	nop
            ; //_AED4A60EA_708:;				
            _AED4A60EA_708:
            ; //	asm clr io[0x09].b14;			
00531:      	clr io[0x09].b14//
            ; //_AED4A60EA_709:;				
            _AED4A60EA_709:
            ; //	asm	nop				
00532:      	nop
            ; //_AED4A60EA_710:;				
            _AED4A60EA_710:
            ; //	asm	nop				
00533:      	nop
            ; //_AED4A60EA_711:;				
            _AED4A60EA_711:
            ; //	asm	nop				
00534:      	nop
            ; //_AED4A60EA_712:;				
            _AED4A60EA_712:
            ; //	asm	nop				
00535:      	nop
            ; //_AED4A60EA_713:;				
            _AED4A60EA_713:
            ; //	asm	nop				
00536:      	nop
            ; //_AED4A60EA_714:;				
            _AED4A60EA_714:
            ; //	asm	nop				
00537:      	nop
            ; //_AED4A60EA_715:;				
            _AED4A60EA_715:
            ; //	asm	nop				
00538:      	nop
            ; //_AED4A60EA_716:;				
            _AED4A60EA_716:
            ; //	asm	nop				
00539:      	nop
            ; //_AED4A60EA_717:;				
            _AED4A60EA_717:
            ; //	asm	nop				
0053A:      	nop
            ; //_AED4A60EA_718:;				
            _AED4A60EA_718:
            ; //	asm	nop				
0053B:      	nop
            ; //_AED4A60EA_719:;				
            _AED4A60EA_719:
            ; //	asm	nop				
0053C:      	nop
            ; //_AED4A60EA_720:;				
            _AED4A60EA_720:
            ; //	asm	nop				
0053D:      	nop
            ; //_AED4A60EA_721:;				
            _AED4A60EA_721:
            ; //	asm set io[0x09].b14;			
0053E:      	set io[0x09].b14//
            ; //_AED4A60EA_722:;				
            _AED4A60EA_722:
            ; //	asm	nop				
0053F:      	nop
            ; //_AED4A60EA_723:;				
            _AED4A60EA_723:
            ; //	asm	nop				
00540:      	nop
            ; //_AED4A60EA_724:;				
            _AED4A60EA_724:
            ; //	asm	nop				
00541:      	nop
            ; //_AED4A60EA_725:;				
            _AED4A60EA_725:
            ; //	asm clr io[0x09].b14;			
00542:      	clr io[0x09].b14//
            ; //_AED4A60EA_726:;				
            _AED4A60EA_726:
            ; //	asm	nop				
00543:      	nop
            ; //_AED4A60EA_727:;				
            _AED4A60EA_727:
            ; //	asm	nop				
00544:      	nop
            ; //_AED4A60EA_728:;				
            _AED4A60EA_728:
            ; //	asm	nop				
00545:      	nop
            ; //_AED4A60EA_729:;				
            _AED4A60EA_729:
            ; //	asm	nop				
00546:      	nop
            ; //_AED4A60EA_730:;				
            _AED4A60EA_730:
            ; //	asm	nop				
00547:      	nop
            ; //_AED4A60EA_731:;				
            _AED4A60EA_731:
            ; //	asm	nop				
00548:      	nop
            ; //_AED4A60EA_732:;				
            _AED4A60EA_732:
            ; //	asm	nop				
00549:      	nop
            ; //_AED4A60EA_733:;				
            _AED4A60EA_733:
            ; //	asm	nop				
0054A:      	nop
            ; //_AED4A60EA_734:;				
            _AED4A60EA_734:
            ; //	asm	nop				
0054B:      	nop
            ; //_AED4A60EA_735:;				
            _AED4A60EA_735:
            ; //	asm	nop				
0054C:      	nop
            ; //_AED4A60EA_736:;				
            _AED4A60EA_736:
            ; //	asm	nop				
0054D:      	nop
            ; //_AED4A60EA_737:;				
            _AED4A60EA_737:
            ; //	asm	nop				
0054E:      	nop
            ; //_AED4A60EA_738:;				
            _AED4A60EA_738:
            ; //	asm set io[0x09].b14;			
0054F:      	set io[0x09].b14//
            ; //_AED4A60EA_739:;				
            _AED4A60EA_739:
            ; //	asm	nop				
00550:      	nop
            ; //_AED4A60EA_740:;				
            _AED4A60EA_740:
            ; //	asm	nop				
00551:      	nop
            ; //_AED4A60EA_741:;				
            _AED4A60EA_741:
            ; //	asm	nop				
00552:      	nop
            ; //_AED4A60EA_742:;				
            _AED4A60EA_742:
            ; //	asm clr io[0x09].b14;			
00553:      	clr io[0x09].b14//
            ; //_AED4A60EA_743:;				
            _AED4A60EA_743:
            ; //	asm	nop				
00554:      	nop
            ; //_AED4A60EA_744:;				
            _AED4A60EA_744:
            ; //	asm	nop				
00555:      	nop
            ; //_AED4A60EA_745:;				
            _AED4A60EA_745:
            ; //	asm	nop				
00556:      	nop
            ; //_AED4A60EA_746:;				
            _AED4A60EA_746:
            ; //	asm	nop				
00557:      	nop
            ; //_AED4A60EA_747:;				
            _AED4A60EA_747:
            ; //	asm	nop				
00558:      	nop
            ; //_AED4A60EA_748:;				
            _AED4A60EA_748:
            ; //	asm	nop				
00559:      	nop
            ; //_AED4A60EA_749:;				
            _AED4A60EA_749:
            ; //	asm	nop				
0055A:      	nop
            ; //_AED4A60EA_750:;				
            _AED4A60EA_750:
            ; //	asm	nop				
0055B:      	nop
            ; //_AED4A60EA_751:;				
            _AED4A60EA_751:
            ; //	asm	nop				
0055C:      	nop
            ; //_AED4A60EA_752:;				
            _AED4A60EA_752:
            ; //	asm	nop				
0055D:      	nop
            ; //_AED4A60EA_753:;				
            _AED4A60EA_753:
            ; //	asm	nop				
0055E:      	nop
            ; //_AED4A60EA_754:;				
            _AED4A60EA_754:
            ; //	asm	nop				
0055F:      	nop
            ; //_AED4A60EA_755:;				
            _AED4A60EA_755:
            ; //	asm set io[0x09].b14;			
00560:      	set io[0x09].b14//
            ; //_AED4A60EA_756:;				
            _AED4A60EA_756:
            ; //	asm	nop				
00561:      	nop
            ; //_AED4A60EA_757:;				
            _AED4A60EA_757:
            ; //	asm	nop				
00562:      	nop
            ; //_AED4A60EA_758:;				
            _AED4A60EA_758:
            ; //	asm	nop				
00563:      	nop
            ; //_AED4A60EA_759:;				
            _AED4A60EA_759:
            ; //	asm clr io[0x09].b14;			
00564:      	clr io[0x09].b14//
            ; //_AED4A60EA_760:;				
            _AED4A60EA_760:
            ; //	asm	nop				
00565:      	nop
            ; //_AED4A60EA_761:;				
            _AED4A60EA_761:
            ; //	asm	nop				
00566:      	nop
            ; //_AED4A60EA_762:;				
            _AED4A60EA_762:
            ; //	asm	nop				
00567:      	nop
            ; //_AED4A60EA_763:;				
            _AED4A60EA_763:
            ; //	asm	nop				
00568:      	nop
            ; //_AED4A60EA_764:;				
            _AED4A60EA_764:
            ; //	asm	nop				
00569:      	nop
            ; //_AED4A60EA_765:;				
            _AED4A60EA_765:
            ; //	asm	nop				
0056A:      	nop
            ; //_AED4A60EA_766:;				
            _AED4A60EA_766:
            ; //	asm	nop				
0056B:      	nop
            ; //_AED4A60EA_767:;				
            _AED4A60EA_767:
            ; //	asm	nop				
0056C:      	nop
            ; //_AED4A60EA_768:;				
            _AED4A60EA_768:
            ; //	asm	nop				
0056D:      	nop
            ; //_AED4A60EA_769:;				
            _AED4A60EA_769:
            ; //	asm	nop				
0056E:      	nop
            ; //_AED4A60EA_770:;				
            _AED4A60EA_770:
            ; //	asm	nop				
0056F:      	nop
            ; //_AED4A60EA_771:;				
            _AED4A60EA_771:
            ; //	asm	nop				
00570:      	nop
            ; //_AED4A60EA_772:;				
            _AED4A60EA_772:
            ; //	asm set io[0x09].b14;			
00571:      	set io[0x09].b14//
            ; //_AED4A60EA_773:;				
            _AED4A60EA_773:
            ; //	asm	nop				
00572:      	nop
            ; //_AED4A60EA_774:;				
            _AED4A60EA_774:
            ; //	asm	nop				
00573:      	nop
            ; //_AED4A60EA_775:;				
            _AED4A60EA_775:
            ; //	asm	nop				
00574:      	nop
            ; //_AED4A60EA_776:;				
            _AED4A60EA_776:
            ; //	asm clr io[0x09].b14;			
00575:      	clr io[0x09].b14//
            ; //_AED4A60EA_777:;				
            _AED4A60EA_777:
            ; //	asm	nop				
00576:      	nop
            ; //_AED4A60EA_778:;				
            _AED4A60EA_778:
            ; //	asm	nop				
00577:      	nop
            ; //_AED4A60EA_779:;				
            _AED4A60EA_779:
            ; //	asm	nop				
00578:      	nop
            ; //_AED4A60EA_780:;				
            _AED4A60EA_780:
            ; //	asm	nop				
00579:      	nop
            ; //_AED4A60EA_781:;				
            _AED4A60EA_781:
            ; //	asm	nop				
0057A:      	nop
            ; //_AED4A60EA_782:;				
            _AED4A60EA_782:
            ; //	asm	nop				
0057B:      	nop
            ; //_AED4A60EA_783:;				
            _AED4A60EA_783:
            ; //	asm	nop				
0057C:      	nop
            ; //_AED4A60EA_784:;				
            _AED4A60EA_784:
            ; //	asm	nop				
0057D:      	nop
            ; //_AED4A60EA_785:;				
            _AED4A60EA_785:
            ; //	asm	nop				
0057E:      	nop
            ; //_AED4A60EA_786:;				
            _AED4A60EA_786:
            ; //	asm	nop				
0057F:      	nop
            ; //_AED4A60EA_787:;				
            _AED4A60EA_787:
            ; //	asm	nop				
00580:      	nop
            ; //_AED4A60EA_788:;				
            _AED4A60EA_788:
            ; //	asm	nop				
00581:      	nop
            ; //_AED4A60EA_789:;				
            _AED4A60EA_789:
            ; //	asm set io[0x09].b14;			
00582:      	set io[0x09].b14//
            ; //_AED4A60EA_790:;				
            _AED4A60EA_790:
            ; //	asm	nop				
00583:      	nop
            ; //_AED4A60EA_791:;				
            _AED4A60EA_791:
            ; //	asm	nop				
00584:      	nop
            ; //_AED4A60EA_792:;				
            _AED4A60EA_792:
            ; //	asm	nop				
00585:      	nop
            ; //_AED4A60EA_793:;				
            _AED4A60EA_793:
            ; //	asm clr io[0x09].b14;			
00586:      	clr io[0x09].b14//
            ; //_AED4A60EA_794:;				
            _AED4A60EA_794:
            ; //	asm	nop				
00587:      	nop
            ; //_AED4A60EA_795:;				
            _AED4A60EA_795:
            ; //	asm	nop				
00588:      	nop
            ; //_AED4A60EA_796:;				
            _AED4A60EA_796:
            ; //	asm	nop				
00589:      	nop
            ; //_AED4A60EA_797:;				
            _AED4A60EA_797:
            ; //	asm	nop				
0058A:      	nop
            ; //_AED4A60EA_798:;				
            _AED4A60EA_798:
            ; //	asm	nop				
0058B:      	nop
            ; //_AED4A60EA_799:;				
            _AED4A60EA_799:
            ; //	asm	nop				
0058C:      	nop
            ; //_AED4A60EA_800:;				
            _AED4A60EA_800:
            ; //	asm	nop				
0058D:      	nop
            ; //_AED4A60EA_801:;				
            _AED4A60EA_801:
            ; //	asm	nop				
0058E:      	nop
            ; //_AED4A60EA_802:;				
            _AED4A60EA_802:
            ; //	asm	nop				
0058F:      	nop
            ; //_AED4A60EA_803:;				
            _AED4A60EA_803:
            ; //	asm	nop				
00590:      	nop
            ; //_AED4A60EA_804:;				
            _AED4A60EA_804:
            ; //	asm	nop				
00591:      	nop
            ; //_AED4A60EA_805:;				
            _AED4A60EA_805:
            ; //	asm	nop				
00592:      	nop
            ; //_AED4A60EA_806:;				
            _AED4A60EA_806:
            ; //	asm set io[0x09].b14;			
00593:      	set io[0x09].b14//
            ; //_AED4A60EA_807:;				
            _AED4A60EA_807:
            ; //	asm	nop				
00594:      	nop
            ; //_AED4A60EA_808:;				
            _AED4A60EA_808:
            ; //	asm	nop				
00595:      	nop
            ; //_AED4A60EA_809:;				
            _AED4A60EA_809:
            ; //	asm	nop				
00596:      	nop
            ; //_AED4A60EA_810:;				
            _AED4A60EA_810:
            ; //	asm clr io[0x09].b14;			
00597:      	clr io[0x09].b14//
            ; //_AED4A60EA_811:;				
            _AED4A60EA_811:
            ; //	asm	nop				
00598:      	nop
            ; //_AED4A60EA_812:;				
            _AED4A60EA_812:
            ; //	asm	nop				
00599:      	nop
            ; //_AED4A60EA_813:;				
            _AED4A60EA_813:
            ; //	asm	nop				
0059A:      	nop
            ; //_AED4A60EA_814:;				
            _AED4A60EA_814:
            ; //	asm	nop				
0059B:      	nop
            ; //_AED4A60EA_815:;				
            _AED4A60EA_815:
            ; //	asm	nop				
0059C:      	nop
            ; //_AED4A60EA_816:;				
            _AED4A60EA_816:
            ; //	asm	nop				
0059D:      	nop
            ; //_AED4A60EA_817:;				
            _AED4A60EA_817:
            ; //	asm	nop				
0059E:      	nop
            ; //_AED4A60EA_818:;				
            _AED4A60EA_818:
            ; //	asm	nop				
0059F:      	nop
            ; //_AED4A60EA_819:;				
            _AED4A60EA_819:
            ; //	asm	nop				
005A0:      	nop
            ; //_AED4A60EA_820:;				
            _AED4A60EA_820:
            ; //	asm	nop				
005A1:      	nop
            ; //_AED4A60EA_821:;				
            _AED4A60EA_821:
            ; //	asm	nop				
005A2:      	nop
            ; //_AED4A60EA_822:;				
            _AED4A60EA_822:
            ; //	asm	nop				
005A3:      	nop
            ; //_AED4A60EA_823:;				
            _AED4A60EA_823:
            ; //	asm set io[0x09].b14;			
005A4:      	set io[0x09].b14//
            ; //_AED4A60EA_824:;				
            _AED4A60EA_824:
            ; //	asm	nop				
005A5:      	nop
            ; //_AED4A60EA_825:;				
            _AED4A60EA_825:
            ; //	asm	nop				
005A6:      	nop
            ; //_AED4A60EA_826:;				
            _AED4A60EA_826:
            ; //	asm	nop				
005A7:      	nop
            ; //_AED4A60EA_827:;				
            _AED4A60EA_827:
            ; //	asm clr io[0x09].b14;			
005A8:      	clr io[0x09].b14//
            ; //_AED4A60EA_828:;				
            _AED4A60EA_828:
            ; //	asm	nop				
005A9:      	nop
            ; //_AED4A60EA_829:;				
            _AED4A60EA_829:
            ; //	asm	nop				
005AA:      	nop
            ; //_AED4A60EA_830:;				
            _AED4A60EA_830:
            ; //	asm	nop				
005AB:      	nop
            ; //_AED4A60EA_831:;				
            _AED4A60EA_831:
            ; //	asm	nop				
005AC:      	nop
            ; //_AED4A60EA_832:;				
            _AED4A60EA_832:
            ; //	asm	nop				
005AD:      	nop
            ; //_AED4A60EA_833:;				
            _AED4A60EA_833:
            ; //	asm	nop				
005AE:      	nop
            ; //_AED4A60EA_834:;				
            _AED4A60EA_834:
            ; //	asm	nop				
005AF:      	nop
            ; //_AED4A60EA_835:;				
            _AED4A60EA_835:
            ; //	asm	nop				
005B0:      	nop
            ; //_AED4A60EA_836:;				
            _AED4A60EA_836:
            ; //	asm	nop				
005B1:      	nop
            ; //_AED4A60EA_837:;				
            _AED4A60EA_837:
            ; //	asm	nop				
005B2:      	nop
            ; //_AED4A60EA_838:;				
            _AED4A60EA_838:
            ; //	asm	nop				
005B3:      	nop
            ; //_AED4A60EA_839:;				
            _AED4A60EA_839:
            ; //	asm	nop				
005B4:      	nop
            ; //_AED4A60EA_840:;				
            _AED4A60EA_840:
            ; //	asm set io[0x09].b14;			
005B5:      	set io[0x09].b14//
            ; //_AED4A60EA_841:;				
            _AED4A60EA_841:
            ; //	asm	nop				
005B6:      	nop
            ; //_AED4A60EA_842:;				
            _AED4A60EA_842:
            ; //	asm	nop				
005B7:      	nop
            ; //_AED4A60EA_843:;				
            _AED4A60EA_843:
            ; //	asm	nop				
005B8:      	nop
            ; //_AED4A60EA_844:;				
            _AED4A60EA_844:
            ; //	asm clr io[0x09].b14;			
005B9:      	clr io[0x09].b14//
            ; //_AED4A60EA_845:;				
            _AED4A60EA_845:
            ; //	asm	nop				
005BA:      	nop
            ; //_AED4A60EA_846:;				
            _AED4A60EA_846:
            ; //	asm	nop				
005BB:      	nop
            ; //_AED4A60EA_847:;				
            _AED4A60EA_847:
            ; //	asm	nop				
005BC:      	nop
            ; //_AED4A60EA_848:;				
            _AED4A60EA_848:
            ; //	asm	nop				
005BD:      	nop
            ; //_AED4A60EA_849:;				
            _AED4A60EA_849:
            ; //	asm	nop				
005BE:      	nop
            ; //_AED4A60EA_850:;				
            _AED4A60EA_850:
            ; //	asm	nop				
005BF:      	nop
            ; //_AED4A60EA_851:;				
            _AED4A60EA_851:
            ; //	asm	nop				
005C0:      	nop
            ; //_AED4A60EA_852:;				
            _AED4A60EA_852:
            ; //	asm	nop				
005C1:      	nop
            ; //_AED4A60EA_853:;				
            _AED4A60EA_853:
            ; //	asm	nop				
005C2:      	nop
            ; //_AED4A60EA_854:;				
            _AED4A60EA_854:
            ; //	asm	nop				
005C3:      	nop
            ; //_AED4A60EA_855:;				
            _AED4A60EA_855:
            ; //	asm	nop				
005C4:      	nop
            ; //_AED4A60EA_856:;				
            _AED4A60EA_856:
            ; //	asm	nop				
005C5:      	nop
            ; //_AED4A60EA_857:;				
            _AED4A60EA_857:
            ; //	asm set io[0x09].b14;			
005C6:      	set io[0x09].b14//
            ; //_AED4A60EA_858:;				
            _AED4A60EA_858:
            ; //	asm	nop				
005C7:      	nop
            ; //_AED4A60EA_859:;				
            _AED4A60EA_859:
            ; //	asm	nop				
005C8:      	nop
            ; //_AED4A60EA_860:;				
            _AED4A60EA_860:
            ; //	asm	nop				
005C9:      	nop
            ; //_AED4A60EA_861:;				
            _AED4A60EA_861:
            ; //	asm clr io[0x09].b14;			
005CA:      	clr io[0x09].b14//
            ; //_AED4A60EA_862:;				
            _AED4A60EA_862:
            ; //	asm	nop				
005CB:      	nop
            ; //_AED4A60EA_863:;				
            _AED4A60EA_863:
            ; //	asm	nop				
005CC:      	nop
            ; //_AED4A60EA_864:;				
            _AED4A60EA_864:
            ; //	asm	nop				
005CD:      	nop
            ; //_AED4A60EA_865:;				
            _AED4A60EA_865:
            ; //	asm	nop				
005CE:      	nop
            ; //_AED4A60EA_866:;				
            _AED4A60EA_866:
            ; //	asm	nop				
005CF:      	nop
            ; //_AED4A60EA_867:;				
            _AED4A60EA_867:
            ; //	asm	nop				
005D0:      	nop
            ; //_AED4A60EA_868:;				
            _AED4A60EA_868:
            ; //	asm	nop				
005D1:      	nop
            ; //_AED4A60EA_869:;				
            _AED4A60EA_869:
            ; //	asm	nop				
005D2:      	nop
            ; //_AED4A60EA_870:;				
            _AED4A60EA_870:
            ; //	asm	nop				
005D3:      	nop
            ; //_AED4A60EA_871:;				
            _AED4A60EA_871:
            ; //	asm	nop				
005D4:      	nop
            ; //_AED4A60EA_872:;				
            _AED4A60EA_872:
            ; //	asm	nop				
005D5:      	nop
            ; //_AED4A60EA_873:;				
            _AED4A60EA_873:
            ; //	asm	nop				
005D6:      	nop
            ; //_AED4A60EA_874:;				
            _AED4A60EA_874:
            ; //	asm set io[0x09].b14;			
005D7:      	set io[0x09].b14//
            ; //_AED4A60EA_875:;				
            _AED4A60EA_875:
            ; //	asm	nop				
005D8:      	nop
            ; //_AED4A60EA_876:;				
            _AED4A60EA_876:
            ; //	asm	nop				
005D9:      	nop
            ; //_AED4A60EA_877:;				
            _AED4A60EA_877:
            ; //	asm	nop				
005DA:      	nop
            ; //_AED4A60EA_878:;				
            _AED4A60EA_878:
            ; //	asm clr io[0x09].b14;			
005DB:      	clr io[0x09].b14//
            ; //_AED4A60EA_879:;				
            _AED4A60EA_879:
            ; //	asm	nop				
005DC:      	nop
            ; //_AED4A60EA_880:;				
            _AED4A60EA_880:
            ; //	asm	nop				
005DD:      	nop
            ; //_AED4A60EA_881:;				
            _AED4A60EA_881:
            ; //	asm	nop				
005DE:      	nop
            ; //_AED4A60EA_882:;				
            _AED4A60EA_882:
            ; //	asm	nop				
005DF:      	nop
            ; //_AED4A60EA_883:;				
            _AED4A60EA_883:
            ; //	asm	nop				
005E0:      	nop
            ; //_AED4A60EA_884:;				
            _AED4A60EA_884:
            ; //	asm	nop				
005E1:      	nop
            ; //_AED4A60EA_885:;				
            _AED4A60EA_885:
            ; //	asm	nop				
005E2:      	nop
            ; //_AED4A60EA_886:;				
            _AED4A60EA_886:
            ; //	asm	nop				
005E3:      	nop
            ; //_AED4A60EA_887:;				
            _AED4A60EA_887:
            ; //	asm	nop				
005E4:      	nop
            ; //_AED4A60EA_888:;				
            _AED4A60EA_888:
            ; //	asm	nop				
005E5:      	nop
            ; //_AED4A60EA_889:;				
            _AED4A60EA_889:
            ; //	asm	nop				
005E6:      	nop
            ; //_AED4A60EA_890:;				
            _AED4A60EA_890:
            ; //	asm	nop				
005E7:      	nop
            ; //_AED4A60EA_891:;				
            _AED4A60EA_891:
            ; //	asm set io[0x09].b14;			
005E8:      	set io[0x09].b14//
            ; //_AED4A60EA_892:;				
            _AED4A60EA_892:
            ; //	asm	nop				
005E9:      	nop
            ; //_AED4A60EA_893:;				
            _AED4A60EA_893:
            ; //	asm	nop				
005EA:      	nop
            ; //_AED4A60EA_894:;				
            _AED4A60EA_894:
            ; //	asm	nop				
005EB:      	nop
            ; //_AED4A60EA_895:;				
            _AED4A60EA_895:
            ; //	asm clr io[0x09].b14;			
005EC:      	clr io[0x09].b14//
            ; //_AED4A60EA_896:;				
            _AED4A60EA_896:
            ; //	asm	nop				
005ED:      	nop
            ; //_AED4A60EA_897:;				
            _AED4A60EA_897:
            ; //	asm	nop				
005EE:      	nop
            ; //_AED4A60EA_898:;				
            _AED4A60EA_898:
            ; //	asm	nop				
005EF:      	nop
            ; //_AED4A60EA_899:;				
            _AED4A60EA_899:
            ; //	asm	nop				
005F0:      	nop
            ; //_AED4A60EA_900:;				
            _AED4A60EA_900:
            ; //	asm	nop				
005F1:      	nop
            ; //_AED4A60EA_901:;				
            _AED4A60EA_901:
            ; //	asm	nop				
005F2:      	nop
            ; //_AED4A60EA_902:;				
            _AED4A60EA_902:
            ; //	asm	nop				
005F3:      	nop
            ; //_AED4A60EA_903:;				
            _AED4A60EA_903:
            ; //	asm	nop				
005F4:      	nop
            ; //_AED4A60EA_904:;				
            _AED4A60EA_904:
            ; //	asm	nop				
005F5:      	nop
            ; //_AED4A60EA_905:;				
            _AED4A60EA_905:
            ; //	asm	nop				
005F6:      	nop
            ; //_AED4A60EA_906:;				
            _AED4A60EA_906:
            ; //	asm	nop				
005F7:      	nop
            ; //_AED4A60EA_907:;				
            _AED4A60EA_907:
            ; //	asm	nop				
005F8:      	nop
            ; //_AED4A60EA_908:;				
            _AED4A60EA_908:
            ; //	asm set io[0x09].b14;			
005F9:      	set io[0x09].b14//
            ; //_AED4A60EA_909:;				
            _AED4A60EA_909:
            ; //	asm	nop				
005FA:      	nop
            ; //_AED4A60EA_910:;				
            _AED4A60EA_910:
            ; //	asm	nop				
005FB:      	nop
            ; //_AED4A60EA_911:;				
            _AED4A60EA_911:
            ; //	asm	nop				
005FC:      	nop
            ; //_AED4A60EA_912:;				
            _AED4A60EA_912:
            ; //	asm clr io[0x09].b14;			
005FD:      	clr io[0x09].b14//
            ; //_AED4A60EA_913:;				
            _AED4A60EA_913:
            ; //	asm	nop				
005FE:      	nop
            ; //_AED4A60EA_914:;				
            _AED4A60EA_914:
            ; //	asm	nop				
005FF:      	nop
            ; //_AED4A60EA_915:;				
            _AED4A60EA_915:
            ; //	asm	nop				
00600:      	nop
            ; //_AED4A60EA_916:;				
            _AED4A60EA_916:
            ; //	asm	nop				
00601:      	nop
            ; //_AED4A60EA_917:;				
            _AED4A60EA_917:
            ; //	asm	nop				
00602:      	nop
            ; //_AED4A60EA_918:;				
            _AED4A60EA_918:
            ; //	asm	nop				
00603:      	nop
            ; //_AED4A60EA_919:;				
            _AED4A60EA_919:
            ; //	asm	nop				
00604:      	nop
            ; //_AED4A60EA_920:;				
            _AED4A60EA_920:
            ; //	asm	nop				
00605:      	nop
            ; //_AED4A60EA_921:;				
            _AED4A60EA_921:
            ; //	asm	nop				
00606:      	nop
            ; //_AED4A60EA_922:;				
            _AED4A60EA_922:
            ; //	asm	nop				
00607:      	nop
            ; //_AED4A60EA_923:;				
            _AED4A60EA_923:
            ; //	asm	nop				
00608:      	nop
            ; //_AED4A60EA_924:;				
            _AED4A60EA_924:
            ; //	asm	nop				
00609:      	nop
            ; //_AED4A60EA_925:;				
            _AED4A60EA_925:
            ; //	asm set io[0x09].b14;			
0060A:      	set io[0x09].b14//
            ; //_AED4A60EA_926:;				
            _AED4A60EA_926:
            ; //	asm	nop				
0060B:      	nop
            ; //_AED4A60EA_927:;				
            _AED4A60EA_927:
            ; //	asm	nop				
0060C:      	nop
            ; //_AED4A60EA_928:;				
            _AED4A60EA_928:
            ; //	asm	nop				
0060D:      	nop
            ; //_AED4A60EA_929:;				
            _AED4A60EA_929:
            ; //	asm clr io[0x09].b14;			
0060E:      	clr io[0x09].b14//
            ; //_AED4A60EA_930:;				
            _AED4A60EA_930:
            ; //	asm	nop				
0060F:      	nop
            ; //_AED4A60EA_931:;				
            _AED4A60EA_931:
            ; //	asm	nop				
00610:      	nop
            ; //_AED4A60EA_932:;				
            _AED4A60EA_932:
            ; //	asm	nop				
00611:      	nop
            ; //_AED4A60EA_933:;				
            _AED4A60EA_933:
            ; //	asm	nop				
00612:      	nop
            ; //_AED4A60EA_934:;				
            _AED4A60EA_934:
            ; //	asm	nop				
00613:      	nop
            ; //_AED4A60EA_935:;				
            _AED4A60EA_935:
            ; //	asm	nop				
00614:      	nop
            ; //_AED4A60EA_936:;				
            _AED4A60EA_936:
            ; //	asm	nop				
00615:      	nop
            ; //_AED4A60EA_937:;				
            _AED4A60EA_937:
            ; //	asm	nop				
00616:      	nop
            ; //_AED4A60EA_938:;				
            _AED4A60EA_938:
            ; //	asm	nop				
00617:      	nop
            ; //_AED4A60EA_939:;				
            _AED4A60EA_939:
            ; //	asm	nop				
00618:      	nop
            ; //_AED4A60EA_940:;				
            _AED4A60EA_940:
            ; //	asm	nop				
00619:      	nop
            ; //_AED4A60EA_941:;				
            _AED4A60EA_941:
            ; //	asm	nop				
0061A:      	nop
            ; //_AED4A60EA_942:;				
            _AED4A60EA_942:
            ; //	goto LD63FD439_50;			
0061B:      	pch =	LD63FD439_50
0061C:      	ljmp	LD63FD439_50
            ; //LD63FD439_54:;					
            LD63FD439_54:
            ; //_AED4A60EA_943:;				
            _AED4A60EA_943:
            ; //	asm set io[0x09].b14;			
0061D:      	set io[0x09].b14//
            ; //_AED4A60EA_944:;				
            _AED4A60EA_944:
            ; //	asm	nop				
0061E:      	nop
            ; //_AED4A60EA_945:;				
            _AED4A60EA_945:
            ; //	asm	nop				
0061F:      	nop
            ; //_AED4A60EA_946:;				
            _AED4A60EA_946:
            ; //	asm	nop				
00620:      	nop
            ; //_AED4A60EA_947:;				
            _AED4A60EA_947:
            ; //	asm clr io[0x09].b14;			
00621:      	clr io[0x09].b14//
            ; //_AED4A60EA_948:;				
            _AED4A60EA_948:
            ; //	asm	nop				
00622:      	nop
            ; //_AED4A60EA_949:;				
            _AED4A60EA_949:
            ; //	asm	nop				
00623:      	nop
            ; //_AED4A60EA_950:;				
            _AED4A60EA_950:
            ; //	asm	nop				
00624:      	nop
            ; //_AED4A60EA_951:;				
            _AED4A60EA_951:
            ; //	asm	nop				
00625:      	nop
            ; //_AED4A60EA_952:;				
            _AED4A60EA_952:
            ; //	asm	nop				
00626:      	nop
            ; //_AED4A60EA_953:;				
            _AED4A60EA_953:
            ; //	asm	nop				
00627:      	nop
            ; //_AED4A60EA_954:;				
            _AED4A60EA_954:
            ; //	asm	nop				
00628:      	nop
            ; //_AED4A60EA_955:;				
            _AED4A60EA_955:
            ; //	asm	nop				
00629:      	nop
            ; //_AED4A60EA_956:;				
            _AED4A60EA_956:
            ; //	asm	nop				
0062A:      	nop
            ; //_AED4A60EA_957:;				
            _AED4A60EA_957:
            ; //	asm	nop				
0062B:      	nop
            ; //_AED4A60EA_958:;				
            _AED4A60EA_958:
            ; //	asm	nop				
0062C:      	nop
            ; //_AED4A60EA_959:;				
            _AED4A60EA_959:
            ; //	asm	nop				
0062D:      	nop
            ; //_AED4A60EA_960:;				
            _AED4A60EA_960:
            ; //	asm set io[0x09].b14;			
0062E:      	set io[0x09].b14//
            ; //_AED4A60EA_961:;				
            _AED4A60EA_961:
            ; //	asm	nop				
0062F:      	nop
            ; //_AED4A60EA_962:;				
            _AED4A60EA_962:
            ; //	asm	nop				
00630:      	nop
            ; //_AED4A60EA_963:;				
            _AED4A60EA_963:
            ; //	asm	nop				
00631:      	nop
            ; //_AED4A60EA_964:;				
            _AED4A60EA_964:
            ; //	asm clr io[0x09].b14;			
00632:      	clr io[0x09].b14//
            ; //_AED4A60EA_965:;				
            _AED4A60EA_965:
            ; //	asm	nop				
00633:      	nop
            ; //_AED4A60EA_966:;				
            _AED4A60EA_966:
            ; //	asm	nop				
00634:      	nop
            ; //_AED4A60EA_967:;				
            _AED4A60EA_967:
            ; //	asm	nop				
00635:      	nop
            ; //_AED4A60EA_968:;				
            _AED4A60EA_968:
            ; //	asm	nop				
00636:      	nop
            ; //_AED4A60EA_969:;				
            _AED4A60EA_969:
            ; //	asm	nop				
00637:      	nop
            ; //_AED4A60EA_970:;				
            _AED4A60EA_970:
            ; //	asm	nop				
00638:      	nop
            ; //_AED4A60EA_971:;				
            _AED4A60EA_971:
            ; //	asm	nop				
00639:      	nop
            ; //_AED4A60EA_972:;				
            _AED4A60EA_972:
            ; //	asm	nop				
0063A:      	nop
            ; //_AED4A60EA_973:;				
            _AED4A60EA_973:
            ; //	asm	nop				
0063B:      	nop
            ; //_AED4A60EA_974:;				
            _AED4A60EA_974:
            ; //	asm	nop				
0063C:      	nop
            ; //_AED4A60EA_975:;				
            _AED4A60EA_975:
            ; //	asm	nop				
0063D:      	nop
            ; //_AED4A60EA_976:;				
            _AED4A60EA_976:
            ; //	asm	nop				
0063E:      	nop
            ; //_AED4A60EA_977:;				
            _AED4A60EA_977:
            ; //	asm set io[0x09].b14;			
0063F:      	set io[0x09].b14//
            ; //_AED4A60EA_978:;				
            _AED4A60EA_978:
            ; //	asm	nop				
00640:      	nop
            ; //_AED4A60EA_979:;				
            _AED4A60EA_979:
            ; //	asm	nop				
00641:      	nop
            ; //_AED4A60EA_980:;				
            _AED4A60EA_980:
            ; //	asm	nop				
00642:      	nop
            ; //_AED4A60EA_981:;				
            _AED4A60EA_981:
            ; //	asm clr io[0x09].b14;			
00643:      	clr io[0x09].b14//
            ; //_AED4A60EA_982:;				
            _AED4A60EA_982:
            ; //	asm	nop				
00644:      	nop
            ; //_AED4A60EA_983:;				
            _AED4A60EA_983:
            ; //	asm	nop				
00645:      	nop
            ; //_AED4A60EA_984:;				
            _AED4A60EA_984:
            ; //	asm	nop				
00646:      	nop
            ; //_AED4A60EA_985:;				
            _AED4A60EA_985:
            ; //	asm	nop				
00647:      	nop
            ; //_AED4A60EA_986:;				
            _AED4A60EA_986:
            ; //	asm	nop				
00648:      	nop
            ; //_AED4A60EA_987:;				
            _AED4A60EA_987:
            ; //	asm	nop				
00649:      	nop
            ; //_AED4A60EA_988:;				
            _AED4A60EA_988:
            ; //	asm	nop				
0064A:      	nop
            ; //_AED4A60EA_989:;				
            _AED4A60EA_989:
            ; //	asm	nop				
0064B:      	nop
            ; //_AED4A60EA_990:;				
            _AED4A60EA_990:
            ; //	asm	nop				
0064C:      	nop
            ; //_AED4A60EA_991:;				
            _AED4A60EA_991:
            ; //	asm	nop				
0064D:      	nop
            ; //_AED4A60EA_992:;				
            _AED4A60EA_992:
            ; //	asm	nop				
0064E:      	nop
            ; //_AED4A60EA_993:;				
            _AED4A60EA_993:
            ; //	asm	nop				
0064F:      	nop
            ; //_AED4A60EA_994:;				
            _AED4A60EA_994:
            ; //	asm set io[0x09].b14;			
00650:      	set io[0x09].b14//
            ; //_AED4A60EA_995:;				
            _AED4A60EA_995:
            ; //	asm	nop				
00651:      	nop
            ; //_AED4A60EA_996:;				
            _AED4A60EA_996:
            ; //	asm	nop				
00652:      	nop
            ; //_AED4A60EA_997:;				
            _AED4A60EA_997:
            ; //	asm	nop				
00653:      	nop
            ; //_AED4A60EA_998:;				
            _AED4A60EA_998:
            ; //	asm clr io[0x09].b14;			
00654:      	clr io[0x09].b14//
            ; //_AED4A60EA_999:;				
            _AED4A60EA_999:
            ; //	asm	nop				
00655:      	nop
            ; //_AED4A60EA_1000:;				
            _AED4A60EA_1000:
            ; //	asm	nop				
00656:      	nop
            ; //_AED4A60EA_1001:;				
            _AED4A60EA_1001:
            ; //	asm	nop				
00657:      	nop
            ; //_AED4A60EA_1002:;				
            _AED4A60EA_1002:
            ; //	asm	nop				
00658:      	nop
            ; //_AED4A60EA_1003:;				
            _AED4A60EA_1003:
            ; //	asm	nop				
00659:      	nop
            ; //_AED4A60EA_1004:;				
            _AED4A60EA_1004:
            ; //	asm	nop				
0065A:      	nop
            ; //_AED4A60EA_1005:;				
            _AED4A60EA_1005:
            ; //	asm	nop				
0065B:      	nop
            ; //_AED4A60EA_1006:;				
            _AED4A60EA_1006:
            ; //	asm	nop				
0065C:      	nop
            ; //_AED4A60EA_1007:;				
            _AED4A60EA_1007:
            ; //	asm	nop				
0065D:      	nop
            ; //_AED4A60EA_1008:;				
            _AED4A60EA_1008:
            ; //	asm	nop				
0065E:      	nop
            ; //_AED4A60EA_1009:;				
            _AED4A60EA_1009:
            ; //	asm	nop				
0065F:      	nop
            ; //_AED4A60EA_1010:;				
            _AED4A60EA_1010:
            ; //	asm	nop				
00660:      	nop
            ; //_AED4A60EA_1011:;				
            _AED4A60EA_1011:
            ; //	asm set io[0x09].b14;			
00661:      	set io[0x09].b14//
            ; //_AED4A60EA_1012:;				
            _AED4A60EA_1012:
            ; //	asm	nop				
00662:      	nop
            ; //_AED4A60EA_1013:;				
            _AED4A60EA_1013:
            ; //	asm	nop				
00663:      	nop
            ; //_AED4A60EA_1014:;				
            _AED4A60EA_1014:
            ; //	asm	nop				
00664:      	nop
            ; //_AED4A60EA_1015:;				
            _AED4A60EA_1015:
            ; //	asm clr io[0x09].b14;			
00665:      	clr io[0x09].b14//
            ; //_AED4A60EA_1016:;				
            _AED4A60EA_1016:
            ; //	asm	nop				
00666:      	nop
            ; //_AED4A60EA_1017:;				
            _AED4A60EA_1017:
            ; //	asm	nop				
00667:      	nop
            ; //_AED4A60EA_1018:;				
            _AED4A60EA_1018:
            ; //	asm	nop				
00668:      	nop
            ; //_AED4A60EA_1019:;				
            _AED4A60EA_1019:
            ; //	asm	nop				
00669:      	nop
            ; //_AED4A60EA_1020:;				
            _AED4A60EA_1020:
            ; //	asm	nop				
0066A:      	nop
            ; //_AED4A60EA_1021:;				
            _AED4A60EA_1021:
            ; //	asm	nop				
0066B:      	nop
            ; //_AED4A60EA_1022:;				
            _AED4A60EA_1022:
            ; //	asm	nop				
0066C:      	nop
            ; //_AED4A60EA_1023:;				
            _AED4A60EA_1023:
            ; //	asm	nop				
0066D:      	nop
            ; //_AED4A60EA_1024:;				
            _AED4A60EA_1024:
            ; //	asm	nop				
0066E:      	nop
            ; //_AED4A60EA_1025:;				
            _AED4A60EA_1025:
            ; //	asm	nop				
0066F:      	nop
            ; //_AED4A60EA_1026:;				
            _AED4A60EA_1026:
            ; //	asm	nop				
00670:      	nop
            ; //_AED4A60EA_1027:;				
            _AED4A60EA_1027:
            ; //	asm	nop				
00671:      	nop
            ; //_AED4A60EA_1028:;				
            _AED4A60EA_1028:
            ; //	asm set io[0x09].b14;			
00672:      	set io[0x09].b14//
            ; //_AED4A60EA_1029:;				
            _AED4A60EA_1029:
            ; //	asm	nop				
00673:      	nop
            ; //_AED4A60EA_1030:;				
            _AED4A60EA_1030:
            ; //	asm	nop				
00674:      	nop
            ; //_AED4A60EA_1031:;				
            _AED4A60EA_1031:
            ; //	asm	nop				
00675:      	nop
            ; //_AED4A60EA_1032:;				
            _AED4A60EA_1032:
            ; //	asm clr io[0x09].b14;			
00676:      	clr io[0x09].b14//
            ; //_AED4A60EA_1033:;				
            _AED4A60EA_1033:
            ; //	asm	nop				
00677:      	nop
            ; //_AED4A60EA_1034:;				
            _AED4A60EA_1034:
            ; //	asm	nop				
00678:      	nop
            ; //_AED4A60EA_1035:;				
            _AED4A60EA_1035:
            ; //	asm	nop				
00679:      	nop
            ; //_AED4A60EA_1036:;				
            _AED4A60EA_1036:
            ; //	asm	nop				
0067A:      	nop
            ; //_AED4A60EA_1037:;				
            _AED4A60EA_1037:
            ; //	asm	nop				
0067B:      	nop
            ; //_AED4A60EA_1038:;				
            _AED4A60EA_1038:
            ; //	asm	nop				
0067C:      	nop
            ; //_AED4A60EA_1039:;				
            _AED4A60EA_1039:
            ; //	asm	nop				
0067D:      	nop
            ; //_AED4A60EA_1040:;				
            _AED4A60EA_1040:
            ; //	asm	nop				
0067E:      	nop
            ; //_AED4A60EA_1041:;				
            _AED4A60EA_1041:
            ; //	asm	nop				
0067F:      	nop
            ; //_AED4A60EA_1042:;				
            _AED4A60EA_1042:
            ; //	asm	nop				
00680:      	nop
            ; //_AED4A60EA_1043:;				
            _AED4A60EA_1043:
            ; //	asm	nop				
00681:      	nop
            ; //_AED4A60EA_1044:;				
            _AED4A60EA_1044:
            ; //	asm	nop				
00682:      	nop
            ; //_AED4A60EA_1045:;				
            _AED4A60EA_1045:
            ; //	asm set io[0x09].b14;			
00683:      	set io[0x09].b14//
            ; //_AED4A60EA_1046:;				
            _AED4A60EA_1046:
            ; //	asm	nop				
00684:      	nop
            ; //_AED4A60EA_1047:;				
            _AED4A60EA_1047:
            ; //	asm	nop				
00685:      	nop
            ; //_AED4A60EA_1048:;				
            _AED4A60EA_1048:
            ; //	asm	nop				
00686:      	nop
            ; //_AED4A60EA_1049:;				
            _AED4A60EA_1049:
            ; //	asm clr io[0x09].b14;			
00687:      	clr io[0x09].b14//
            ; //_AED4A60EA_1050:;				
            _AED4A60EA_1050:
            ; //	asm	nop				
00688:      	nop
            ; //_AED4A60EA_1051:;				
            _AED4A60EA_1051:
            ; //	asm	nop				
00689:      	nop
            ; //_AED4A60EA_1052:;				
            _AED4A60EA_1052:
            ; //	asm	nop				
0068A:      	nop
            ; //_AED4A60EA_1053:;				
            _AED4A60EA_1053:
            ; //	asm	nop				
0068B:      	nop
            ; //_AED4A60EA_1054:;				
            _AED4A60EA_1054:
            ; //	asm	nop				
0068C:      	nop
            ; //_AED4A60EA_1055:;				
            _AED4A60EA_1055:
            ; //	asm	nop				
0068D:      	nop
            ; //_AED4A60EA_1056:;				
            _AED4A60EA_1056:
            ; //	asm	nop				
0068E:      	nop
            ; //_AED4A60EA_1057:;				
            _AED4A60EA_1057:
            ; //	asm	nop				
0068F:      	nop
            ; //_AED4A60EA_1058:;				
            _AED4A60EA_1058:
            ; //	asm	nop				
00690:      	nop
            ; //_AED4A60EA_1059:;				
            _AED4A60EA_1059:
            ; //	asm	nop				
00691:      	nop
            ; //_AED4A60EA_1060:;				
            _AED4A60EA_1060:
            ; //	asm	nop				
00692:      	nop
            ; //_AED4A60EA_1061:;				
            _AED4A60EA_1061:
            ; //	asm	nop				
00693:      	nop
            ; //_AED4A60EA_1062:;				
            _AED4A60EA_1062:
            ; //	asm set io[0x09].b14;			
00694:      	set io[0x09].b14//
            ; //_AED4A60EA_1063:;				
            _AED4A60EA_1063:
            ; //	asm	nop				
00695:      	nop
            ; //_AED4A60EA_1064:;				
            _AED4A60EA_1064:
            ; //	asm	nop				
00696:      	nop
            ; //_AED4A60EA_1065:;				
            _AED4A60EA_1065:
            ; //	asm	nop				
00697:      	nop
            ; //_AED4A60EA_1066:;				
            _AED4A60EA_1066:
            ; //	asm clr io[0x09].b14;			
00698:      	clr io[0x09].b14//
            ; //_AED4A60EA_1067:;				
            _AED4A60EA_1067:
            ; //	asm	nop				
00699:      	nop
            ; //_AED4A60EA_1068:;				
            _AED4A60EA_1068:
            ; //	asm	nop				
0069A:      	nop
            ; //_AED4A60EA_1069:;				
            _AED4A60EA_1069:
            ; //	asm	nop				
0069B:      	nop
            ; //_AED4A60EA_1070:;				
            _AED4A60EA_1070:
            ; //	asm	nop				
0069C:      	nop
            ; //_AED4A60EA_1071:;				
            _AED4A60EA_1071:
            ; //	asm	nop				
0069D:      	nop
            ; //_AED4A60EA_1072:;				
            _AED4A60EA_1072:
            ; //	asm	nop				
0069E:      	nop
            ; //_AED4A60EA_1073:;				
            _AED4A60EA_1073:
            ; //	asm	nop				
0069F:      	nop
            ; //_AED4A60EA_1074:;				
            _AED4A60EA_1074:
            ; //	asm	nop				
006A0:      	nop
            ; //_AED4A60EA_1075:;				
            _AED4A60EA_1075:
            ; //	asm	nop				
006A1:      	nop
            ; //_AED4A60EA_1076:;				
            _AED4A60EA_1076:
            ; //	asm	nop				
006A2:      	nop
            ; //_AED4A60EA_1077:;				
            _AED4A60EA_1077:
            ; //	asm	nop				
006A3:      	nop
            ; //_AED4A60EA_1078:;				
            _AED4A60EA_1078:
            ; //	asm	nop				
006A4:      	nop
            ; //_AED4A60EA_1079:;				
            _AED4A60EA_1079:
            ; //	asm set io[0x09].b14;			
006A5:      	set io[0x09].b14//
            ; //_AED4A60EA_1080:;				
            _AED4A60EA_1080:
            ; //	asm	nop				
006A6:      	nop
            ; //_AED4A60EA_1081:;				
            _AED4A60EA_1081:
            ; //	asm	nop				
006A7:      	nop
            ; //_AED4A60EA_1082:;				
            _AED4A60EA_1082:
            ; //	asm	nop				
006A8:      	nop
            ; //_AED4A60EA_1083:;				
            _AED4A60EA_1083:
            ; //	asm	nop				
006A9:      	nop
            ; //_AED4A60EA_1084:;				
            _AED4A60EA_1084:
            ; //	asm	nop				
006AA:      	nop
            ; //_AED4A60EA_1085:;				
            _AED4A60EA_1085:
            ; //	asm	nop				
006AB:      	nop
            ; //_AED4A60EA_1086:;				
            _AED4A60EA_1086:
            ; //	asm	nop				
006AC:      	nop
            ; //_AED4A60EA_1087:;				
            _AED4A60EA_1087:
            ; //	asm	nop				
006AD:      	nop
            ; //_AED4A60EA_1088:;				
            _AED4A60EA_1088:
            ; //	asm	nop				
006AE:      	nop
            ; //_AED4A60EA_1089:;				
            _AED4A60EA_1089:
            ; //	asm	nop				
006AF:      	nop
            ; //_AED4A60EA_1090:;				
            _AED4A60EA_1090:
            ; //	asm	nop				
006B0:      	nop
            ; //_AED4A60EA_1091:;				
            _AED4A60EA_1091:
            ; //	asm	nop				
006B1:      	nop
            ; //_AED4A60EA_1092:;				
            _AED4A60EA_1092:
            ; //	asm clr io[0x09].b14;			
006B2:      	clr io[0x09].b14//
            ; //_AED4A60EA_1093:;				
            _AED4A60EA_1093:
            ; //	asm	nop				
006B3:      	nop
            ; //_AED4A60EA_1094:;				
            _AED4A60EA_1094:
            ; //	asm	nop				
006B4:      	nop
            ; //_AED4A60EA_1095:;				
            _AED4A60EA_1095:
            ; //	asm	nop				
006B5:      	nop
            ; //_AED4A60EA_1096:;				
            _AED4A60EA_1096:
            ; //	asm set io[0x09].b14;			
006B6:      	set io[0x09].b14//
            ; //_AED4A60EA_1097:;				
            _AED4A60EA_1097:
            ; //	asm	nop				
006B7:      	nop
            ; //_AED4A60EA_1098:;				
            _AED4A60EA_1098:
            ; //	asm	nop				
006B8:      	nop
            ; //_AED4A60EA_1099:;				
            _AED4A60EA_1099:
            ; //	asm	nop				
006B9:      	nop
            ; //_AED4A60EA_1100:;				
            _AED4A60EA_1100:
            ; //	asm	nop				
006BA:      	nop
            ; //_AED4A60EA_1101:;				
            _AED4A60EA_1101:
            ; //	asm	nop				
006BB:      	nop
            ; //_AED4A60EA_1102:;				
            _AED4A60EA_1102:
            ; //	asm	nop				
006BC:      	nop
            ; //_AED4A60EA_1103:;				
            _AED4A60EA_1103:
            ; //	asm	nop				
006BD:      	nop
            ; //_AED4A60EA_1104:;				
            _AED4A60EA_1104:
            ; //	asm	nop				
006BE:      	nop
            ; //_AED4A60EA_1105:;				
            _AED4A60EA_1105:
            ; //	asm	nop				
006BF:      	nop
            ; //_AED4A60EA_1106:;				
            _AED4A60EA_1106:
            ; //	asm	nop				
006C0:      	nop
            ; //_AED4A60EA_1107:;				
            _AED4A60EA_1107:
            ; //	asm	nop				
006C1:      	nop
            ; //_AED4A60EA_1108:;				
            _AED4A60EA_1108:
            ; //	asm	nop				
006C2:      	nop
            ; //_AED4A60EA_1109:;				
            _AED4A60EA_1109:
            ; //	asm clr io[0x09].b14;			
006C3:      	clr io[0x09].b14//
            ; //_AED4A60EA_1110:;				
            _AED4A60EA_1110:
            ; //	asm	nop				
006C4:      	nop
            ; //_AED4A60EA_1111:;				
            _AED4A60EA_1111:
            ; //	asm	nop				
006C5:      	nop
            ; //_AED4A60EA_1112:;				
            _AED4A60EA_1112:
            ; //	asm	nop				
006C6:      	nop
            ; //_AED4A60EA_1113:;				
            _AED4A60EA_1113:
            ; //	asm set io[0x09].b14;			
006C7:      	set io[0x09].b14//
            ; //_AED4A60EA_1114:;				
            _AED4A60EA_1114:
            ; //	asm	nop				
006C8:      	nop
            ; //_AED4A60EA_1115:;				
            _AED4A60EA_1115:
            ; //	asm	nop				
006C9:      	nop
            ; //_AED4A60EA_1116:;				
            _AED4A60EA_1116:
            ; //	asm	nop				
006CA:      	nop
            ; //_AED4A60EA_1117:;				
            _AED4A60EA_1117:
            ; //	asm	nop				
006CB:      	nop
            ; //_AED4A60EA_1118:;				
            _AED4A60EA_1118:
            ; //	asm	nop				
006CC:      	nop
            ; //_AED4A60EA_1119:;				
            _AED4A60EA_1119:
            ; //	asm	nop				
006CD:      	nop
            ; //_AED4A60EA_1120:;				
            _AED4A60EA_1120:
            ; //	asm	nop				
006CE:      	nop
            ; //_AED4A60EA_1121:;				
            _AED4A60EA_1121:
            ; //	asm	nop				
006CF:      	nop
            ; //_AED4A60EA_1122:;				
            _AED4A60EA_1122:
            ; //	asm	nop				
006D0:      	nop
            ; //_AED4A60EA_1123:;				
            _AED4A60EA_1123:
            ; //	asm	nop				
006D1:      	nop
            ; //_AED4A60EA_1124:;				
            _AED4A60EA_1124:
            ; //	asm	nop				
006D2:      	nop
            ; //_AED4A60EA_1125:;				
            _AED4A60EA_1125:
            ; //	asm	nop				
006D3:      	nop
            ; //_AED4A60EA_1126:;				
            _AED4A60EA_1126:
            ; //	asm clr io[0x09].b14;			
006D4:      	clr io[0x09].b14//
            ; //_AED4A60EA_1127:;				
            _AED4A60EA_1127:
            ; //	asm	nop				
006D5:      	nop
            ; //_AED4A60EA_1128:;				
            _AED4A60EA_1128:
            ; //	asm	nop				
006D6:      	nop
            ; //_AED4A60EA_1129:;				
            _AED4A60EA_1129:
            ; //	asm	nop				
006D7:      	nop
            ; //_AED4A60EA_1130:;				
            _AED4A60EA_1130:
            ; //	asm set io[0x09].b14;			
006D8:      	set io[0x09].b14//
            ; //_AED4A60EA_1131:;				
            _AED4A60EA_1131:
            ; //	asm	nop				
006D9:      	nop
            ; //_AED4A60EA_1132:;				
            _AED4A60EA_1132:
            ; //	asm	nop				
006DA:      	nop
            ; //_AED4A60EA_1133:;				
            _AED4A60EA_1133:
            ; //	asm	nop				
006DB:      	nop
            ; //_AED4A60EA_1134:;				
            _AED4A60EA_1134:
            ; //	asm	nop				
006DC:      	nop
            ; //_AED4A60EA_1135:;				
            _AED4A60EA_1135:
            ; //	asm	nop				
006DD:      	nop
            ; //_AED4A60EA_1136:;				
            _AED4A60EA_1136:
            ; //	asm	nop				
006DE:      	nop
            ; //_AED4A60EA_1137:;				
            _AED4A60EA_1137:
            ; //	asm	nop				
006DF:      	nop
            ; //_AED4A60EA_1138:;				
            _AED4A60EA_1138:
            ; //	asm	nop				
006E0:      	nop
            ; //_AED4A60EA_1139:;				
            _AED4A60EA_1139:
            ; //	asm	nop				
006E1:      	nop
            ; //_AED4A60EA_1140:;				
            _AED4A60EA_1140:
            ; //	asm	nop				
006E2:      	nop
            ; //_AED4A60EA_1141:;				
            _AED4A60EA_1141:
            ; //	asm	nop				
006E3:      	nop
            ; //_AED4A60EA_1142:;				
            _AED4A60EA_1142:
            ; //	asm	nop				
006E4:      	nop
            ; //_AED4A60EA_1143:;				
            _AED4A60EA_1143:
            ; //	asm clr io[0x09].b14;			
006E5:      	clr io[0x09].b14//
            ; //_AED4A60EA_1144:;				
            _AED4A60EA_1144:
            ; //	asm	nop				
006E6:      	nop
            ; //_AED4A60EA_1145:;				
            _AED4A60EA_1145:
            ; //	asm	nop				
006E7:      	nop
            ; //_AED4A60EA_1146:;				
            _AED4A60EA_1146:
            ; //	asm	nop				
006E8:      	nop
            ; //_AED4A60EA_1147:;				
            _AED4A60EA_1147:
            ; //	asm set io[0x09].b14;			
006E9:      	set io[0x09].b14//
            ; //_AED4A60EA_1148:;				
            _AED4A60EA_1148:
            ; //	asm	nop				
006EA:      	nop
            ; //_AED4A60EA_1149:;				
            _AED4A60EA_1149:
            ; //	asm	nop				
006EB:      	nop
            ; //_AED4A60EA_1150:;				
            _AED4A60EA_1150:
            ; //	asm	nop				
006EC:      	nop
            ; //_AED4A60EA_1151:;				
            _AED4A60EA_1151:
            ; //	asm	nop				
006ED:      	nop
            ; //_AED4A60EA_1152:;				
            _AED4A60EA_1152:
            ; //	asm	nop				
006EE:      	nop
            ; //_AED4A60EA_1153:;				
            _AED4A60EA_1153:
            ; //	asm	nop				
006EF:      	nop
            ; //_AED4A60EA_1154:;				
            _AED4A60EA_1154:
            ; //	asm	nop				
006F0:      	nop
            ; //_AED4A60EA_1155:;				
            _AED4A60EA_1155:
            ; //	asm	nop				
006F1:      	nop
            ; //_AED4A60EA_1156:;				
            _AED4A60EA_1156:
            ; //	asm	nop				
006F2:      	nop
            ; //_AED4A60EA_1157:;				
            _AED4A60EA_1157:
            ; //	asm	nop				
006F3:      	nop
            ; //_AED4A60EA_1158:;				
            _AED4A60EA_1158:
            ; //	asm	nop				
006F4:      	nop
            ; //_AED4A60EA_1159:;				
            _AED4A60EA_1159:
            ; //	asm	nop				
006F5:      	nop
            ; //_AED4A60EA_1160:;				
            _AED4A60EA_1160:
            ; //	asm clr io[0x09].b14;			
006F6:      	clr io[0x09].b14//
            ; //_AED4A60EA_1161:;				
            _AED4A60EA_1161:
            ; //	asm	nop				
006F7:      	nop
            ; //_AED4A60EA_1162:;				
            _AED4A60EA_1162:
            ; //	asm	nop				
006F8:      	nop
            ; //_AED4A60EA_1163:;				
            _AED4A60EA_1163:
            ; //	asm	nop				
006F9:      	nop
            ; //_AED4A60EA_1164:;				
            _AED4A60EA_1164:
            ; //	asm set io[0x09].b14;			
006FA:      	set io[0x09].b14//
            ; //_AED4A60EA_1165:;				
            _AED4A60EA_1165:
            ; //	asm	nop				
006FB:      	nop
            ; //_AED4A60EA_1166:;				
            _AED4A60EA_1166:
            ; //	asm	nop				
006FC:      	nop
            ; //_AED4A60EA_1167:;				
            _AED4A60EA_1167:
            ; //	asm	nop				
006FD:      	nop
            ; //_AED4A60EA_1168:;				
            _AED4A60EA_1168:
            ; //	asm	nop				
006FE:      	nop
            ; //_AED4A60EA_1169:;				
            _AED4A60EA_1169:
            ; //	asm	nop				
006FF:      	nop
            ; //_AED4A60EA_1170:;				
            _AED4A60EA_1170:
            ; //	asm	nop				
00700:      	nop
            ; //_AED4A60EA_1171:;				
            _AED4A60EA_1171:
            ; //	asm	nop				
00701:      	nop
            ; //_AED4A60EA_1172:;				
            _AED4A60EA_1172:
            ; //	asm	nop				
00702:      	nop
            ; //_AED4A60EA_1173:;				
            _AED4A60EA_1173:
            ; //	asm	nop				
00703:      	nop
            ; //_AED4A60EA_1174:;				
            _AED4A60EA_1174:
            ; //	asm	nop				
00704:      	nop
            ; //_AED4A60EA_1175:;				
            _AED4A60EA_1175:
            ; //	asm	nop				
00705:      	nop
            ; //_AED4A60EA_1176:;				
            _AED4A60EA_1176:
            ; //	asm	nop				
00706:      	nop
            ; //_AED4A60EA_1177:;				
            _AED4A60EA_1177:
            ; //	asm clr io[0x09].b14;			
00707:      	clr io[0x09].b14//
            ; //_AED4A60EA_1178:;				
            _AED4A60EA_1178:
            ; //	asm	nop				
00708:      	nop
            ; //_AED4A60EA_1179:;				
            _AED4A60EA_1179:
            ; //	asm	nop				
00709:      	nop
            ; //_AED4A60EA_1180:;				
            _AED4A60EA_1180:
            ; //	asm	nop				
0070A:      	nop
            ; //_AED4A60EA_1181:;				
            _AED4A60EA_1181:
            ; //	asm set io[0x09].b14;			
0070B:      	set io[0x09].b14//
            ; //_AED4A60EA_1182:;				
            _AED4A60EA_1182:
            ; //	asm	nop				
0070C:      	nop
            ; //_AED4A60EA_1183:;				
            _AED4A60EA_1183:
            ; //	asm	nop				
0070D:      	nop
            ; //_AED4A60EA_1184:;				
            _AED4A60EA_1184:
            ; //	asm	nop				
0070E:      	nop
            ; //_AED4A60EA_1185:;				
            _AED4A60EA_1185:
            ; //	asm	nop				
0070F:      	nop
            ; //_AED4A60EA_1186:;				
            _AED4A60EA_1186:
            ; //	asm	nop				
00710:      	nop
            ; //_AED4A60EA_1187:;				
            _AED4A60EA_1187:
            ; //	asm	nop				
00711:      	nop
            ; //_AED4A60EA_1188:;				
            _AED4A60EA_1188:
            ; //	asm	nop				
00712:      	nop
            ; //_AED4A60EA_1189:;				
            _AED4A60EA_1189:
            ; //	asm	nop				
00713:      	nop
            ; //_AED4A60EA_1190:;				
            _AED4A60EA_1190:
            ; //	asm	nop				
00714:      	nop
            ; //_AED4A60EA_1191:;				
            _AED4A60EA_1191:
            ; //	asm	nop				
00715:      	nop
            ; //_AED4A60EA_1192:;				
            _AED4A60EA_1192:
            ; //	asm	nop				
00716:      	nop
            ; //_AED4A60EA_1193:;				
            _AED4A60EA_1193:
            ; //	asm	nop				
00717:      	nop
            ; //_AED4A60EA_1194:;				
            _AED4A60EA_1194:
            ; //	asm clr io[0x09].b14;			
00718:      	clr io[0x09].b14//
            ; //_AED4A60EA_1195:;				
            _AED4A60EA_1195:
            ; //	asm	nop				
00719:      	nop
            ; //_AED4A60EA_1196:;				
            _AED4A60EA_1196:
            ; //	asm	nop				
0071A:      	nop
            ; //_AED4A60EA_1197:;				
            _AED4A60EA_1197:
            ; //	asm	nop				
0071B:      	nop
            ; //_AED4A60EA_1198:;				
            _AED4A60EA_1198:
            ; //	asm set io[0x09].b14;			
0071C:      	set io[0x09].b14//
            ; //_AED4A60EA_1199:;				
            _AED4A60EA_1199:
            ; //	asm	nop				
0071D:      	nop
            ; //_AED4A60EA_1200:;				
            _AED4A60EA_1200:
            ; //	asm	nop				
0071E:      	nop
            ; //_AED4A60EA_1201:;				
            _AED4A60EA_1201:
            ; //	asm	nop				
0071F:      	nop
            ; //_AED4A60EA_1202:;				
            _AED4A60EA_1202:
            ; //	asm	nop				
00720:      	nop
            ; //_AED4A60EA_1203:;				
            _AED4A60EA_1203:
            ; //	asm	nop				
00721:      	nop
            ; //_AED4A60EA_1204:;				
            _AED4A60EA_1204:
            ; //	asm	nop				
00722:      	nop
            ; //_AED4A60EA_1205:;				
            _AED4A60EA_1205:
            ; //	asm	nop				
00723:      	nop
            ; //_AED4A60EA_1206:;				
            _AED4A60EA_1206:
            ; //	asm	nop				
00724:      	nop
            ; //_AED4A60EA_1207:;				
            _AED4A60EA_1207:
            ; //	asm	nop				
00725:      	nop
            ; //_AED4A60EA_1208:;				
            _AED4A60EA_1208:
            ; //	asm	nop				
00726:      	nop
            ; //_AED4A60EA_1209:;				
            _AED4A60EA_1209:
            ; //	asm	nop				
00727:      	nop
            ; //_AED4A60EA_1210:;				
            _AED4A60EA_1210:
            ; //	asm	nop				
00728:      	nop
            ; //_AED4A60EA_1211:;				
            _AED4A60EA_1211:
            ; //	asm clr io[0x09].b14;			
00729:      	clr io[0x09].b14//
            ; //_AED4A60EA_1212:;				
            _AED4A60EA_1212:
            ; //	asm	nop				
0072A:      	nop
            ; //_AED4A60EA_1213:;				
            _AED4A60EA_1213:
            ; //	asm	nop				
0072B:      	nop
            ; //_AED4A60EA_1214:;				
            _AED4A60EA_1214:
            ; //	asm	nop				
0072C:      	nop
            ; //_AED4A60EA_1215:;				
            _AED4A60EA_1215:
            ; //	asm set io[0x09].b14;			
0072D:      	set io[0x09].b14//
            ; //_AED4A60EA_1216:;				
            _AED4A60EA_1216:
            ; //	asm	nop				
0072E:      	nop
            ; //_AED4A60EA_1217:;				
            _AED4A60EA_1217:
            ; //	asm	nop				
0072F:      	nop
            ; //_AED4A60EA_1218:;				
            _AED4A60EA_1218:
            ; //	asm	nop				
00730:      	nop
            ; //_AED4A60EA_1219:;				
            _AED4A60EA_1219:
            ; //	asm clr io[0x09].b14;			
00731:      	clr io[0x09].b14//
            ; //_AED4A60EA_1220:;				
            _AED4A60EA_1220:
            ; //	asm	nop				
00732:      	nop
            ; //_AED4A60EA_1221:;				
            _AED4A60EA_1221:
            ; //	asm	nop				
00733:      	nop
            ; //_AED4A60EA_1222:;				
            _AED4A60EA_1222:
            ; //	asm	nop				
00734:      	nop
            ; //_AED4A60EA_1223:;				
            _AED4A60EA_1223:
            ; //	asm	nop				
00735:      	nop
            ; //_AED4A60EA_1224:;				
            _AED4A60EA_1224:
            ; //	asm	nop				
00736:      	nop
            ; //_AED4A60EA_1225:;				
            _AED4A60EA_1225:
            ; //	asm	nop				
00737:      	nop
            ; //_AED4A60EA_1226:;				
            _AED4A60EA_1226:
            ; //	asm	nop				
00738:      	nop
            ; //_AED4A60EA_1227:;				
            _AED4A60EA_1227:
            ; //	asm	nop				
00739:      	nop
            ; //_AED4A60EA_1228:;				
            _AED4A60EA_1228:
            ; //	asm	nop				
0073A:      	nop
            ; //_AED4A60EA_1229:;				
            _AED4A60EA_1229:
            ; //	asm	nop				
0073B:      	nop
            ; //_AED4A60EA_1230:;				
            _AED4A60EA_1230:
            ; //	asm	nop				
0073C:      	nop
            ; //_AED4A60EA_1231:;				
            _AED4A60EA_1231:
            ; //	asm	nop				
0073D:      	nop
            ; //_AED4A60EA_1232:;				
            _AED4A60EA_1232:
            ; //	asm set io[0x09].b14;			
0073E:      	set io[0x09].b14//
            ; //_AED4A60EA_1233:;				
            _AED4A60EA_1233:
            ; //	asm	nop				
0073F:      	nop
            ; //_AED4A60EA_1234:;				
            _AED4A60EA_1234:
            ; //	asm	nop				
00740:      	nop
            ; //_AED4A60EA_1235:;				
            _AED4A60EA_1235:
            ; //	asm	nop				
00741:      	nop
            ; //_AED4A60EA_1236:;				
            _AED4A60EA_1236:
            ; //	asm clr io[0x09].b14;			
00742:      	clr io[0x09].b14//
            ; //_AED4A60EA_1237:;				
            _AED4A60EA_1237:
            ; //	asm	nop				
00743:      	nop
            ; //_AED4A60EA_1238:;				
            _AED4A60EA_1238:
            ; //	asm	nop				
00744:      	nop
            ; //_AED4A60EA_1239:;				
            _AED4A60EA_1239:
            ; //	asm	nop				
00745:      	nop
            ; //_AED4A60EA_1240:;				
            _AED4A60EA_1240:
            ; //	asm	nop				
00746:      	nop
            ; //_AED4A60EA_1241:;				
            _AED4A60EA_1241:
            ; //	asm	nop				
00747:      	nop
            ; //_AED4A60EA_1242:;				
            _AED4A60EA_1242:
            ; //	asm	nop				
00748:      	nop
            ; //_AED4A60EA_1243:;				
            _AED4A60EA_1243:
            ; //	asm	nop				
00749:      	nop
            ; //_AED4A60EA_1244:;				
            _AED4A60EA_1244:
            ; //	asm	nop				
0074A:      	nop
            ; //_AED4A60EA_1245:;				
            _AED4A60EA_1245:
            ; //	asm	nop				
0074B:      	nop
            ; //_AED4A60EA_1246:;				
            _AED4A60EA_1246:
            ; //	asm	nop				
0074C:      	nop
            ; //_AED4A60EA_1247:;				
            _AED4A60EA_1247:
            ; //	asm	nop				
0074D:      	nop
            ; //_AED4A60EA_1248:;				
            _AED4A60EA_1248:
            ; //	asm	nop				
0074E:      	nop
            ; //_AED4A60EA_1249:;				
            _AED4A60EA_1249:
            ; //	asm set io[0x09].b14;			
0074F:      	set io[0x09].b14//
            ; //_AED4A60EA_1250:;				
            _AED4A60EA_1250:
            ; //	asm	nop				
00750:      	nop
            ; //_AED4A60EA_1251:;				
            _AED4A60EA_1251:
            ; //	asm	nop				
00751:      	nop
            ; //_AED4A60EA_1252:;				
            _AED4A60EA_1252:
            ; //	asm	nop				
00752:      	nop
            ; //_AED4A60EA_1253:;				
            _AED4A60EA_1253:
            ; //	asm clr io[0x09].b14;			
00753:      	clr io[0x09].b14//
            ; //_AED4A60EA_1254:;				
            _AED4A60EA_1254:
            ; //	asm	nop				
00754:      	nop
            ; //_AED4A60EA_1255:;				
            _AED4A60EA_1255:
            ; //	asm	nop				
00755:      	nop
            ; //_AED4A60EA_1256:;				
            _AED4A60EA_1256:
            ; //	asm	nop				
00756:      	nop
            ; //_AED4A60EA_1257:;				
            _AED4A60EA_1257:
            ; //	asm	nop				
00757:      	nop
            ; //_AED4A60EA_1258:;				
            _AED4A60EA_1258:
            ; //	asm	nop				
00758:      	nop
            ; //_AED4A60EA_1259:;				
            _AED4A60EA_1259:
            ; //	asm	nop				
00759:      	nop
            ; //_AED4A60EA_1260:;				
            _AED4A60EA_1260:
            ; //	asm	nop				
0075A:      	nop
            ; //_AED4A60EA_1261:;				
            _AED4A60EA_1261:
            ; //	asm	nop				
0075B:      	nop
            ; //_AED4A60EA_1262:;				
            _AED4A60EA_1262:
            ; //	asm	nop				
0075C:      	nop
            ; //_AED4A60EA_1263:;				
            _AED4A60EA_1263:
            ; //	asm	nop				
0075D:      	nop
            ; //_AED4A60EA_1264:;				
            _AED4A60EA_1264:
            ; //	asm	nop				
0075E:      	nop
            ; //_AED4A60EA_1265:;				
            _AED4A60EA_1265:
            ; //	asm	nop				
0075F:      	nop
            ; //_AED4A60EA_1266:;				
            _AED4A60EA_1266:
            ; //	asm set io[0x09].b14;			
00760:      	set io[0x09].b14//
            ; //_AED4A60EA_1267:;				
            _AED4A60EA_1267:
            ; //	asm	nop				
00761:      	nop
            ; //_AED4A60EA_1268:;				
            _AED4A60EA_1268:
            ; //	asm	nop				
00762:      	nop
            ; //_AED4A60EA_1269:;				
            _AED4A60EA_1269:
            ; //	asm	nop				
00763:      	nop
            ; //_AED4A60EA_1270:;				
            _AED4A60EA_1270:
            ; //	asm clr io[0x09].b14;			
00764:      	clr io[0x09].b14//
            ; //_AED4A60EA_1271:;				
            _AED4A60EA_1271:
            ; //	asm	nop				
00765:      	nop
            ; //_AED4A60EA_1272:;				
            _AED4A60EA_1272:
            ; //	asm	nop				
00766:      	nop
            ; //_AED4A60EA_1273:;				
            _AED4A60EA_1273:
            ; //	asm	nop				
00767:      	nop
            ; //_AED4A60EA_1274:;				
            _AED4A60EA_1274:
            ; //	asm	nop				
00768:      	nop
            ; //_AED4A60EA_1275:;				
            _AED4A60EA_1275:
            ; //	asm	nop				
00769:      	nop
            ; //_AED4A60EA_1276:;				
            _AED4A60EA_1276:
            ; //	asm	nop				
0076A:      	nop
            ; //_AED4A60EA_1277:;				
            _AED4A60EA_1277:
            ; //	asm	nop				
0076B:      	nop
            ; //_AED4A60EA_1278:;				
            _AED4A60EA_1278:
            ; //	asm	nop				
0076C:      	nop
            ; //_AED4A60EA_1279:;				
            _AED4A60EA_1279:
            ; //	asm	nop				
0076D:      	nop
            ; //_AED4A60EA_1280:;				
            _AED4A60EA_1280:
            ; //	asm	nop				
0076E:      	nop
            ; //_AED4A60EA_1281:;				
            _AED4A60EA_1281:
            ; //	asm	nop				
0076F:      	nop
            ; //_AED4A60EA_1282:;				
            _AED4A60EA_1282:
            ; //	asm	nop				
00770:      	nop
            ; //_AED4A60EA_1283:;				
            _AED4A60EA_1283:
            ; //	asm set io[0x09].b14;			
00771:      	set io[0x09].b14//
            ; //_AED4A60EA_1284:;				
            _AED4A60EA_1284:
            ; //	asm	nop				
00772:      	nop
            ; //_AED4A60EA_1285:;				
            _AED4A60EA_1285:
            ; //	asm	nop				
00773:      	nop
            ; //_AED4A60EA_1286:;				
            _AED4A60EA_1286:
            ; //	asm	nop				
00774:      	nop
            ; //_AED4A60EA_1287:;				
            _AED4A60EA_1287:
            ; //	asm clr io[0x09].b14;			
00775:      	clr io[0x09].b14//
            ; //_AED4A60EA_1288:;				
            _AED4A60EA_1288:
            ; //	asm	nop				
00776:      	nop
            ; //_AED4A60EA_1289:;				
            _AED4A60EA_1289:
            ; //	asm	nop				
00777:      	nop
            ; //_AED4A60EA_1290:;				
            _AED4A60EA_1290:
            ; //	asm	nop				
00778:      	nop
            ; //_AED4A60EA_1291:;				
            _AED4A60EA_1291:
            ; //	asm	nop				
00779:      	nop
            ; //_AED4A60EA_1292:;				
            _AED4A60EA_1292:
            ; //	asm	nop				
0077A:      	nop
            ; //_AED4A60EA_1293:;				
            _AED4A60EA_1293:
            ; //	asm	nop				
0077B:      	nop
            ; //_AED4A60EA_1294:;				
            _AED4A60EA_1294:
            ; //	asm	nop				
0077C:      	nop
            ; //_AED4A60EA_1295:;				
            _AED4A60EA_1295:
            ; //	asm	nop				
0077D:      	nop
            ; //_AED4A60EA_1296:;				
            _AED4A60EA_1296:
            ; //	asm	nop				
0077E:      	nop
            ; //_AED4A60EA_1297:;				
            _AED4A60EA_1297:
            ; //	asm	nop				
0077F:      	nop
            ; //_AED4A60EA_1298:;				
            _AED4A60EA_1298:
            ; //	asm	nop				
00780:      	nop
            ; //_AED4A60EA_1299:;				
            _AED4A60EA_1299:
            ; //	asm	nop				
00781:      	nop
            ; //_AED4A60EA_1300:;				
            _AED4A60EA_1300:
            ; //	asm set io[0x09].b14;			
00782:      	set io[0x09].b14//
            ; //_AED4A60EA_1301:;				
            _AED4A60EA_1301:
            ; //	asm	nop				
00783:      	nop
            ; //_AED4A60EA_1302:;				
            _AED4A60EA_1302:
            ; //	asm	nop				
00784:      	nop
            ; //_AED4A60EA_1303:;				
            _AED4A60EA_1303:
            ; //	asm	nop				
00785:      	nop
            ; //_AED4A60EA_1304:;				
            _AED4A60EA_1304:
            ; //	asm clr io[0x09].b14;			
00786:      	clr io[0x09].b14//
            ; //_AED4A60EA_1305:;				
            _AED4A60EA_1305:
            ; //	asm	nop				
00787:      	nop
            ; //_AED4A60EA_1306:;				
            _AED4A60EA_1306:
            ; //	asm	nop				
00788:      	nop
            ; //_AED4A60EA_1307:;				
            _AED4A60EA_1307:
            ; //	asm	nop				
00789:      	nop
            ; //_AED4A60EA_1308:;				
            _AED4A60EA_1308:
            ; //	asm	nop				
0078A:      	nop
            ; //_AED4A60EA_1309:;				
            _AED4A60EA_1309:
            ; //	asm	nop				
0078B:      	nop
            ; //_AED4A60EA_1310:;				
            _AED4A60EA_1310:
            ; //	asm	nop				
0078C:      	nop
            ; //_AED4A60EA_1311:;				
            _AED4A60EA_1311:
            ; //	asm	nop				
0078D:      	nop
            ; //_AED4A60EA_1312:;				
            _AED4A60EA_1312:
            ; //	asm	nop				
0078E:      	nop
            ; //_AED4A60EA_1313:;				
            _AED4A60EA_1313:
            ; //	asm	nop				
0078F:      	nop
            ; //_AED4A60EA_1314:;				
            _AED4A60EA_1314:
            ; //	asm	nop				
00790:      	nop
            ; //_AED4A60EA_1315:;				
            _AED4A60EA_1315:
            ; //	asm	nop				
00791:      	nop
            ; //_AED4A60EA_1316:;				
            _AED4A60EA_1316:
            ; //	asm	nop				
00792:      	nop
            ; //_AED4A60EA_1317:;				
            _AED4A60EA_1317:
            ; //	asm set io[0x09].b14;			
00793:      	set io[0x09].b14//
            ; //_AED4A60EA_1318:;				
            _AED4A60EA_1318:
            ; //	asm	nop				
00794:      	nop
            ; //_AED4A60EA_1319:;				
            _AED4A60EA_1319:
            ; //	asm	nop				
00795:      	nop
            ; //_AED4A60EA_1320:;				
            _AED4A60EA_1320:
            ; //	asm	nop				
00796:      	nop
            ; //_AED4A60EA_1321:;				
            _AED4A60EA_1321:
            ; //	asm clr io[0x09].b14;			
00797:      	clr io[0x09].b14//
            ; //_AED4A60EA_1322:;				
            _AED4A60EA_1322:
            ; //	asm	nop				
00798:      	nop
            ; //_AED4A60EA_1323:;				
            _AED4A60EA_1323:
            ; //	asm	nop				
00799:      	nop
            ; //_AED4A60EA_1324:;				
            _AED4A60EA_1324:
            ; //	asm	nop				
0079A:      	nop
            ; //_AED4A60EA_1325:;				
            _AED4A60EA_1325:
            ; //	asm	nop				
0079B:      	nop
            ; //_AED4A60EA_1326:;				
            _AED4A60EA_1326:
            ; //	asm	nop				
0079C:      	nop
            ; //_AED4A60EA_1327:;				
            _AED4A60EA_1327:
            ; //	asm	nop				
0079D:      	nop
            ; //_AED4A60EA_1328:;				
            _AED4A60EA_1328:
            ; //	asm	nop				
0079E:      	nop
            ; //_AED4A60EA_1329:;				
            _AED4A60EA_1329:
            ; //	asm	nop				
0079F:      	nop
            ; //_AED4A60EA_1330:;				
            _AED4A60EA_1330:
            ; //	asm	nop				
007A0:      	nop
            ; //_AED4A60EA_1331:;				
            _AED4A60EA_1331:
            ; //	asm	nop				
007A1:      	nop
            ; //_AED4A60EA_1332:;				
            _AED4A60EA_1332:
            ; //	asm	nop				
007A2:      	nop
            ; //_AED4A60EA_1333:;				
            _AED4A60EA_1333:
            ; //	asm	nop				
007A3:      	nop
            ; //_AED4A60EA_1334:;				
            _AED4A60EA_1334:
            ; //	asm set io[0x09].b14;			
007A4:      	set io[0x09].b14//
            ; //_AED4A60EA_1335:;				
            _AED4A60EA_1335:
            ; //	asm	nop				
007A5:      	nop
            ; //_AED4A60EA_1336:;				
            _AED4A60EA_1336:
            ; //	asm	nop				
007A6:      	nop
            ; //_AED4A60EA_1337:;				
            _AED4A60EA_1337:
            ; //	asm	nop				
007A7:      	nop
            ; //_AED4A60EA_1338:;				
            _AED4A60EA_1338:
            ; //	asm clr io[0x09].b14;			
007A8:      	clr io[0x09].b14//
            ; //_AED4A60EA_1339:;				
            _AED4A60EA_1339:
            ; //	asm	nop				
007A9:      	nop
            ; //_AED4A60EA_1340:;				
            _AED4A60EA_1340:
            ; //	asm	nop				
007AA:      	nop
            ; //_AED4A60EA_1341:;				
            _AED4A60EA_1341:
            ; //	asm	nop				
007AB:      	nop
            ; //_AED4A60EA_1342:;				
            _AED4A60EA_1342:
            ; //	asm	nop				
007AC:      	nop
            ; //_AED4A60EA_1343:;				
            _AED4A60EA_1343:
            ; //	asm	nop				
007AD:      	nop
            ; //_AED4A60EA_1344:;				
            _AED4A60EA_1344:
            ; //	asm	nop				
007AE:      	nop
            ; //_AED4A60EA_1345:;				
            _AED4A60EA_1345:
            ; //	asm	nop				
007AF:      	nop
            ; //_AED4A60EA_1346:;				
            _AED4A60EA_1346:
            ; //	asm	nop				
007B0:      	nop
            ; //_AED4A60EA_1347:;				
            _AED4A60EA_1347:
            ; //	asm	nop				
007B1:      	nop
            ; //_AED4A60EA_1348:;				
            _AED4A60EA_1348:
            ; //	asm	nop				
007B2:      	nop
            ; //_AED4A60EA_1349:;				
            _AED4A60EA_1349:
            ; //	asm	nop				
007B3:      	nop
            ; //_AED4A60EA_1350:;				
            _AED4A60EA_1350:
            ; //	asm	nop				
007B4:      	nop
            ; //_AED4A60EA_1351:;				
            _AED4A60EA_1351:
            ; //	goto LD63FD439_50;			
007B5:      	pch =	LD63FD439_50
007B6:      	ljmp	LD63FD439_50
            ; //LD63FD439_55:;					
            LD63FD439_55:
            ; //_AED4A60EA_1352:;				
            _AED4A60EA_1352:
            ; //	asm set io[0x09].b14;			
007B7:      	set io[0x09].b14//
            ; //_AED4A60EA_1353:;				
            _AED4A60EA_1353:
            ; //	asm	nop				
007B8:      	nop
            ; //_AED4A60EA_1354:;				
            _AED4A60EA_1354:
            ; //	asm	nop				
007B9:      	nop
            ; //_AED4A60EA_1355:;				
            _AED4A60EA_1355:
            ; //	asm	nop				
007BA:      	nop
            ; //_AED4A60EA_1356:;				
            _AED4A60EA_1356:
            ; //	asm	nop				
007BB:      	nop
            ; //_AED4A60EA_1357:;				
            _AED4A60EA_1357:
            ; //	asm	nop				
007BC:      	nop
            ; //_AED4A60EA_1358:;				
            _AED4A60EA_1358:
            ; //	asm	nop				
007BD:      	nop
            ; //_AED4A60EA_1359:;				
            _AED4A60EA_1359:
            ; //	asm	nop				
007BE:      	nop
            ; //_AED4A60EA_1360:;				
            _AED4A60EA_1360:
            ; //	asm	nop				
007BF:      	nop
            ; //_AED4A60EA_1361:;				
            _AED4A60EA_1361:
            ; //	asm	nop				
007C0:      	nop
            ; //_AED4A60EA_1362:;				
            _AED4A60EA_1362:
            ; //	asm	nop				
007C1:      	nop
            ; //_AED4A60EA_1363:;				
            _AED4A60EA_1363:
            ; //	asm	nop				
007C2:      	nop
            ; //_AED4A60EA_1364:;				
            _AED4A60EA_1364:
            ; //	asm	nop				
007C3:      	nop
            ; //_AED4A60EA_1365:;				
            _AED4A60EA_1365:
            ; //	asm clr io[0x09].b14;			
007C4:      	clr io[0x09].b14//
            ; //_AED4A60EA_1366:;				
            _AED4A60EA_1366:
            ; //	asm	nop				
007C5:      	nop
            ; //_AED4A60EA_1367:;				
            _AED4A60EA_1367:
            ; //	asm	nop				
007C6:      	nop
            ; //_AED4A60EA_1368:;				
            _AED4A60EA_1368:
            ; //	asm	nop				
007C7:      	nop
            ; //_AED4A60EA_1369:;				
            _AED4A60EA_1369:
            ; //	asm set io[0x09].b14;			
007C8:      	set io[0x09].b14//
            ; //_AED4A60EA_1370:;				
            _AED4A60EA_1370:
            ; //	asm	nop				
007C9:      	nop
            ; //_AED4A60EA_1371:;				
            _AED4A60EA_1371:
            ; //	asm	nop				
007CA:      	nop
            ; //_AED4A60EA_1372:;				
            _AED4A60EA_1372:
            ; //	asm	nop				
007CB:      	nop
            ; //_AED4A60EA_1373:;				
            _AED4A60EA_1373:
            ; //	asm	nop				
007CC:      	nop
            ; //_AED4A60EA_1374:;				
            _AED4A60EA_1374:
            ; //	asm	nop				
007CD:      	nop
            ; //_AED4A60EA_1375:;				
            _AED4A60EA_1375:
            ; //	asm	nop				
007CE:      	nop
            ; //_AED4A60EA_1376:;				
            _AED4A60EA_1376:
            ; //	asm	nop				
007CF:      	nop
            ; //_AED4A60EA_1377:;				
            _AED4A60EA_1377:
            ; //	asm	nop				
007D0:      	nop
            ; //_AED4A60EA_1378:;				
            _AED4A60EA_1378:
            ; //	asm	nop				
007D1:      	nop
            ; //_AED4A60EA_1379:;				
            _AED4A60EA_1379:
            ; //	asm	nop				
007D2:      	nop
            ; //_AED4A60EA_1380:;				
            _AED4A60EA_1380:
            ; //	asm	nop				
007D3:      	nop
            ; //_AED4A60EA_1381:;				
            _AED4A60EA_1381:
            ; //	asm	nop				
007D4:      	nop
            ; //_AED4A60EA_1382:;				
            _AED4A60EA_1382:
            ; //	asm clr io[0x09].b14;			
007D5:      	clr io[0x09].b14//
            ; //_AED4A60EA_1383:;				
            _AED4A60EA_1383:
            ; //	asm	nop				
007D6:      	nop
            ; //_AED4A60EA_1384:;				
            _AED4A60EA_1384:
            ; //	asm	nop				
007D7:      	nop
            ; //_AED4A60EA_1385:;				
            _AED4A60EA_1385:
            ; //	asm	nop				
007D8:      	nop
            ; //_AED4A60EA_1386:;				
            _AED4A60EA_1386:
            ; //	asm set io[0x09].b14;			
007D9:      	set io[0x09].b14//
            ; //_AED4A60EA_1387:;				
            _AED4A60EA_1387:
            ; //	asm	nop				
007DA:      	nop
            ; //_AED4A60EA_1388:;				
            _AED4A60EA_1388:
            ; //	asm	nop				
007DB:      	nop
            ; //_AED4A60EA_1389:;				
            _AED4A60EA_1389:
            ; //	asm	nop				
007DC:      	nop
            ; //_AED4A60EA_1390:;				
            _AED4A60EA_1390:
            ; //	asm	nop				
007DD:      	nop
            ; //_AED4A60EA_1391:;				
            _AED4A60EA_1391:
            ; //	asm	nop				
007DE:      	nop
            ; //_AED4A60EA_1392:;				
            _AED4A60EA_1392:
            ; //	asm	nop				
007DF:      	nop
            ; //_AED4A60EA_1393:;				
            _AED4A60EA_1393:
            ; //	asm	nop				
007E0:      	nop
            ; //_AED4A60EA_1394:;				
            _AED4A60EA_1394:
            ; //	asm	nop				
007E1:      	nop
            ; //_AED4A60EA_1395:;				
            _AED4A60EA_1395:
            ; //	asm	nop				
007E2:      	nop
            ; //_AED4A60EA_1396:;				
            _AED4A60EA_1396:
            ; //	asm	nop				
007E3:      	nop
            ; //_AED4A60EA_1397:;				
            _AED4A60EA_1397:
            ; //	asm	nop				
007E4:      	nop
            ; //_AED4A60EA_1398:;				
            _AED4A60EA_1398:
            ; //	asm	nop				
007E5:      	nop
            ; //_AED4A60EA_1399:;				
            _AED4A60EA_1399:
            ; //	asm clr io[0x09].b14;			
007E6:      	clr io[0x09].b14//
            ; //_AED4A60EA_1400:;				
            _AED4A60EA_1400:
            ; //	asm	nop				
007E7:      	nop
            ; //_AED4A60EA_1401:;				
            _AED4A60EA_1401:
            ; //	asm	nop				
007E8:      	nop
            ; //_AED4A60EA_1402:;				
            _AED4A60EA_1402:
            ; //	asm	nop				
007E9:      	nop
            ; //_AED4A60EA_1403:;				
            _AED4A60EA_1403:
            ; //	asm set io[0x09].b14;			
007EA:      	set io[0x09].b14//
            ; //_AED4A60EA_1404:;				
            _AED4A60EA_1404:
            ; //	asm	nop				
007EB:      	nop
            ; //_AED4A60EA_1405:;				
            _AED4A60EA_1405:
            ; //	asm	nop				
007EC:      	nop
            ; //_AED4A60EA_1406:;				
            _AED4A60EA_1406:
            ; //	asm	nop				
007ED:      	nop
            ; //_AED4A60EA_1407:;				
            _AED4A60EA_1407:
            ; //	asm	nop				
007EE:      	nop
            ; //_AED4A60EA_1408:;				
            _AED4A60EA_1408:
            ; //	asm	nop				
007EF:      	nop
            ; //_AED4A60EA_1409:;				
            _AED4A60EA_1409:
            ; //	asm	nop				
007F0:      	nop
            ; //_AED4A60EA_1410:;				
            _AED4A60EA_1410:
            ; //	asm	nop				
007F1:      	nop
            ; //_AED4A60EA_1411:;				
            _AED4A60EA_1411:
            ; //	asm	nop				
007F2:      	nop
            ; //_AED4A60EA_1412:;				
            _AED4A60EA_1412:
            ; //	asm	nop				
007F3:      	nop
            ; //_AED4A60EA_1413:;				
            _AED4A60EA_1413:
            ; //	asm	nop				
007F4:      	nop
            ; //_AED4A60EA_1414:;				
            _AED4A60EA_1414:
            ; //	asm	nop				
007F5:      	nop
            ; //_AED4A60EA_1415:;				
            _AED4A60EA_1415:
            ; //	asm	nop				
007F6:      	nop
            ; //_AED4A60EA_1416:;				
            _AED4A60EA_1416:
            ; //	asm clr io[0x09].b14;			
007F7:      	clr io[0x09].b14//
            ; //_AED4A60EA_1417:;				
            _AED4A60EA_1417:
            ; //	asm	nop				
007F8:      	nop
            ; //_AED4A60EA_1418:;				
            _AED4A60EA_1418:
            ; //	asm	nop				
007F9:      	nop
            ; //_AED4A60EA_1419:;				
            _AED4A60EA_1419:
            ; //	asm	nop				
007FA:      	nop
            ; //_AED4A60EA_1420:;				
            _AED4A60EA_1420:
            ; //	asm set io[0x09].b14;			
007FB:      	set io[0x09].b14//
            ; //_AED4A60EA_1421:;				
            _AED4A60EA_1421:
            ; //	asm	nop				
007FC:      	nop
            ; //_AED4A60EA_1422:;				
            _AED4A60EA_1422:
            ; //	asm	nop				
007FD:      	nop
            ; //_AED4A60EA_1423:;				
            _AED4A60EA_1423:
            ; //	asm	nop				
007FE:      	nop
            ; //_AED4A60EA_1424:;				
            _AED4A60EA_1424:
            ; //	asm	nop				
007FF:      	nop
            ; //_AED4A60EA_1425:;				
            _AED4A60EA_1425:
            ; //	asm	nop				
00800:      	nop
            ; //_AED4A60EA_1426:;				
            _AED4A60EA_1426:
            ; //	asm	nop				
00801:      	nop
            ; //_AED4A60EA_1427:;				
            _AED4A60EA_1427:
            ; //	asm	nop				
00802:      	nop
            ; //_AED4A60EA_1428:;				
            _AED4A60EA_1428:
            ; //	asm	nop				
00803:      	nop
            ; //_AED4A60EA_1429:;				
            _AED4A60EA_1429:
            ; //	asm	nop				
00804:      	nop
            ; //_AED4A60EA_1430:;				
            _AED4A60EA_1430:
            ; //	asm	nop				
00805:      	nop
            ; //_AED4A60EA_1431:;				
            _AED4A60EA_1431:
            ; //	asm	nop				
00806:      	nop
            ; //_AED4A60EA_1432:;				
            _AED4A60EA_1432:
            ; //	asm	nop				
00807:      	nop
            ; //_AED4A60EA_1433:;				
            _AED4A60EA_1433:
            ; //	asm clr io[0x09].b14;			
00808:      	clr io[0x09].b14//
            ; //_AED4A60EA_1434:;				
            _AED4A60EA_1434:
            ; //	asm	nop				
00809:      	nop
            ; //_AED4A60EA_1435:;				
            _AED4A60EA_1435:
            ; //	asm	nop				
0080A:      	nop
            ; //_AED4A60EA_1436:;				
            _AED4A60EA_1436:
            ; //	asm	nop				
0080B:      	nop
            ; //_AED4A60EA_1437:;				
            _AED4A60EA_1437:
            ; //	asm set io[0x09].b14;			
0080C:      	set io[0x09].b14//
            ; //_AED4A60EA_1438:;				
            _AED4A60EA_1438:
            ; //	asm	nop				
0080D:      	nop
            ; //_AED4A60EA_1439:;				
            _AED4A60EA_1439:
            ; //	asm	nop				
0080E:      	nop
            ; //_AED4A60EA_1440:;				
            _AED4A60EA_1440:
            ; //	asm	nop				
0080F:      	nop
            ; //_AED4A60EA_1441:;				
            _AED4A60EA_1441:
            ; //	asm	nop				
00810:      	nop
            ; //_AED4A60EA_1442:;				
            _AED4A60EA_1442:
            ; //	asm	nop				
00811:      	nop
            ; //_AED4A60EA_1443:;				
            _AED4A60EA_1443:
            ; //	asm	nop				
00812:      	nop
            ; //_AED4A60EA_1444:;				
            _AED4A60EA_1444:
            ; //	asm	nop				
00813:      	nop
            ; //_AED4A60EA_1445:;				
            _AED4A60EA_1445:
            ; //	asm	nop				
00814:      	nop
            ; //_AED4A60EA_1446:;				
            _AED4A60EA_1446:
            ; //	asm	nop				
00815:      	nop
            ; //_AED4A60EA_1447:;				
            _AED4A60EA_1447:
            ; //	asm	nop				
00816:      	nop
            ; //_AED4A60EA_1448:;				
            _AED4A60EA_1448:
            ; //	asm	nop				
00817:      	nop
            ; //_AED4A60EA_1449:;				
            _AED4A60EA_1449:
            ; //	asm	nop				
00818:      	nop
            ; //_AED4A60EA_1450:;				
            _AED4A60EA_1450:
            ; //	asm clr io[0x09].b14;			
00819:      	clr io[0x09].b14//
            ; //_AED4A60EA_1451:;				
            _AED4A60EA_1451:
            ; //	asm	nop				
0081A:      	nop
            ; //_AED4A60EA_1452:;				
            _AED4A60EA_1452:
            ; //	asm	nop				
0081B:      	nop
            ; //_AED4A60EA_1453:;				
            _AED4A60EA_1453:
            ; //	asm	nop				
0081C:      	nop
            ; //_AED4A60EA_1454:;				
            _AED4A60EA_1454:
            ; //	asm set io[0x09].b14;			
0081D:      	set io[0x09].b14//
            ; //_AED4A60EA_1455:;				
            _AED4A60EA_1455:
            ; //	asm	nop				
0081E:      	nop
            ; //_AED4A60EA_1456:;				
            _AED4A60EA_1456:
            ; //	asm	nop				
0081F:      	nop
            ; //_AED4A60EA_1457:;				
            _AED4A60EA_1457:
            ; //	asm	nop				
00820:      	nop
            ; //_AED4A60EA_1458:;				
            _AED4A60EA_1458:
            ; //	asm	nop				
00821:      	nop
            ; //_AED4A60EA_1459:;				
            _AED4A60EA_1459:
            ; //	asm	nop				
00822:      	nop
            ; //_AED4A60EA_1460:;				
            _AED4A60EA_1460:
            ; //	asm	nop				
00823:      	nop
            ; //_AED4A60EA_1461:;				
            _AED4A60EA_1461:
            ; //	asm	nop				
00824:      	nop
            ; //_AED4A60EA_1462:;				
            _AED4A60EA_1462:
            ; //	asm	nop				
00825:      	nop
            ; //_AED4A60EA_1463:;				
            _AED4A60EA_1463:
            ; //	asm	nop				
00826:      	nop
            ; //_AED4A60EA_1464:;				
            _AED4A60EA_1464:
            ; //	asm	nop				
00827:      	nop
            ; //_AED4A60EA_1465:;				
            _AED4A60EA_1465:
            ; //	asm	nop				
00828:      	nop
            ; //_AED4A60EA_1466:;				
            _AED4A60EA_1466:
            ; //	asm	nop				
00829:      	nop
            ; //_AED4A60EA_1467:;				
            _AED4A60EA_1467:
            ; //	asm clr io[0x09].b14;			
0082A:      	clr io[0x09].b14//
            ; //_AED4A60EA_1468:;				
            _AED4A60EA_1468:
            ; //	asm	nop				
0082B:      	nop
            ; //_AED4A60EA_1469:;				
            _AED4A60EA_1469:
            ; //	asm	nop				
0082C:      	nop
            ; //_AED4A60EA_1470:;				
            _AED4A60EA_1470:
            ; //	asm	nop				
0082D:      	nop
            ; //_AED4A60EA_1471:;				
            _AED4A60EA_1471:
            ; //	asm set io[0x09].b14;			
0082E:      	set io[0x09].b14//
            ; //_AED4A60EA_1472:;				
            _AED4A60EA_1472:
            ; //	asm	nop				
0082F:      	nop
            ; //_AED4A60EA_1473:;				
            _AED4A60EA_1473:
            ; //	asm	nop				
00830:      	nop
            ; //_AED4A60EA_1474:;				
            _AED4A60EA_1474:
            ; //	asm	nop				
00831:      	nop
            ; //_AED4A60EA_1475:;				
            _AED4A60EA_1475:
            ; //	asm	nop				
00832:      	nop
            ; //_AED4A60EA_1476:;				
            _AED4A60EA_1476:
            ; //	asm	nop				
00833:      	nop
            ; //_AED4A60EA_1477:;				
            _AED4A60EA_1477:
            ; //	asm	nop				
00834:      	nop
            ; //_AED4A60EA_1478:;				
            _AED4A60EA_1478:
            ; //	asm	nop				
00835:      	nop
            ; //_AED4A60EA_1479:;				
            _AED4A60EA_1479:
            ; //	asm	nop				
00836:      	nop
            ; //_AED4A60EA_1480:;				
            _AED4A60EA_1480:
            ; //	asm	nop				
00837:      	nop
            ; //_AED4A60EA_1481:;				
            _AED4A60EA_1481:
            ; //	asm	nop				
00838:      	nop
            ; //_AED4A60EA_1482:;				
            _AED4A60EA_1482:
            ; //	asm	nop				
00839:      	nop
            ; //_AED4A60EA_1483:;				
            _AED4A60EA_1483:
            ; //	asm	nop				
0083A:      	nop
            ; //_AED4A60EA_1484:;				
            _AED4A60EA_1484:
            ; //	asm clr io[0x09].b14;			
0083B:      	clr io[0x09].b14//
            ; //_AED4A60EA_1485:;				
            _AED4A60EA_1485:
            ; //	asm	nop				
0083C:      	nop
            ; //_AED4A60EA_1486:;				
            _AED4A60EA_1486:
            ; //	asm	nop				
0083D:      	nop
            ; //_AED4A60EA_1487:;				
            _AED4A60EA_1487:
            ; //	asm	nop				
0083E:      	nop
            ; //_AED4A60EA_1488:;				
            _AED4A60EA_1488:
            ; //	asm set io[0x09].b14;			
0083F:      	set io[0x09].b14//
            ; //_AED4A60EA_1489:;				
            _AED4A60EA_1489:
            ; //	asm	nop				
00840:      	nop
            ; //_AED4A60EA_1490:;				
            _AED4A60EA_1490:
            ; //	asm	nop				
00841:      	nop
            ; //_AED4A60EA_1491:;				
            _AED4A60EA_1491:
            ; //	asm	nop				
00842:      	nop
            ; //_AED4A60EA_1492:;				
            _AED4A60EA_1492:
            ; //	asm clr io[0x09].b14;			
00843:      	clr io[0x09].b14//
            ; //_AED4A60EA_1493:;				
            _AED4A60EA_1493:
            ; //	asm	nop				
00844:      	nop
            ; //_AED4A60EA_1494:;				
            _AED4A60EA_1494:
            ; //	asm	nop				
00845:      	nop
            ; //_AED4A60EA_1495:;				
            _AED4A60EA_1495:
            ; //	asm	nop				
00846:      	nop
            ; //_AED4A60EA_1496:;				
            _AED4A60EA_1496:
            ; //	asm	nop				
00847:      	nop
            ; //_AED4A60EA_1497:;				
            _AED4A60EA_1497:
            ; //	asm	nop				
00848:      	nop
            ; //_AED4A60EA_1498:;				
            _AED4A60EA_1498:
            ; //	asm	nop				
00849:      	nop
            ; //_AED4A60EA_1499:;				
            _AED4A60EA_1499:
            ; //	asm	nop				
0084A:      	nop
            ; //_AED4A60EA_1500:;				
            _AED4A60EA_1500:
            ; //	asm	nop				
0084B:      	nop
            ; //_AED4A60EA_1501:;				
            _AED4A60EA_1501:
            ; //	asm	nop				
0084C:      	nop
            ; //_AED4A60EA_1502:;				
            _AED4A60EA_1502:
            ; //	asm	nop				
0084D:      	nop
            ; //_AED4A60EA_1503:;				
            _AED4A60EA_1503:
            ; //	asm	nop				
0084E:      	nop
            ; //_AED4A60EA_1504:;				
            _AED4A60EA_1504:
            ; //	asm	nop				
0084F:      	nop
            ; //_AED4A60EA_1505:;				
            _AED4A60EA_1505:
            ; //	asm set io[0x09].b14;			
00850:      	set io[0x09].b14//
            ; //_AED4A60EA_1506:;				
            _AED4A60EA_1506:
            ; //	asm	nop				
00851:      	nop
            ; //_AED4A60EA_1507:;				
            _AED4A60EA_1507:
            ; //	asm	nop				
00852:      	nop
            ; //_AED4A60EA_1508:;				
            _AED4A60EA_1508:
            ; //	asm	nop				
00853:      	nop
            ; //_AED4A60EA_1509:;				
            _AED4A60EA_1509:
            ; //	asm clr io[0x09].b14;			
00854:      	clr io[0x09].b14//
            ; //_AED4A60EA_1510:;				
            _AED4A60EA_1510:
            ; //	asm	nop				
00855:      	nop
            ; //_AED4A60EA_1511:;				
            _AED4A60EA_1511:
            ; //	asm	nop				
00856:      	nop
            ; //_AED4A60EA_1512:;				
            _AED4A60EA_1512:
            ; //	asm	nop				
00857:      	nop
            ; //_AED4A60EA_1513:;				
            _AED4A60EA_1513:
            ; //	asm	nop				
00858:      	nop
            ; //_AED4A60EA_1514:;				
            _AED4A60EA_1514:
            ; //	asm	nop				
00859:      	nop
            ; //_AED4A60EA_1515:;				
            _AED4A60EA_1515:
            ; //	asm	nop				
0085A:      	nop
            ; //_AED4A60EA_1516:;				
            _AED4A60EA_1516:
            ; //	asm	nop				
0085B:      	nop
            ; //_AED4A60EA_1517:;				
            _AED4A60EA_1517:
            ; //	asm	nop				
0085C:      	nop
            ; //_AED4A60EA_1518:;				
            _AED4A60EA_1518:
            ; //	asm	nop				
0085D:      	nop
            ; //_AED4A60EA_1519:;				
            _AED4A60EA_1519:
            ; //	asm	nop				
0085E:      	nop
            ; //_AED4A60EA_1520:;				
            _AED4A60EA_1520:
            ; //	asm	nop				
0085F:      	nop
            ; //_AED4A60EA_1521:;				
            _AED4A60EA_1521:
            ; //	asm	nop				
00860:      	nop
            ; //_AED4A60EA_1522:;				
            _AED4A60EA_1522:
            ; //	asm set io[0x09].b14;			
00861:      	set io[0x09].b14//
            ; //_AED4A60EA_1523:;				
            _AED4A60EA_1523:
            ; //	asm	nop				
00862:      	nop
            ; //_AED4A60EA_1524:;				
            _AED4A60EA_1524:
            ; //	asm	nop				
00863:      	nop
            ; //_AED4A60EA_1525:;				
            _AED4A60EA_1525:
            ; //	asm	nop				
00864:      	nop
            ; //_AED4A60EA_1526:;				
            _AED4A60EA_1526:
            ; //	asm clr io[0x09].b14;			
00865:      	clr io[0x09].b14//
            ; //_AED4A60EA_1527:;				
            _AED4A60EA_1527:
            ; //	asm	nop				
00866:      	nop
            ; //_AED4A60EA_1528:;				
            _AED4A60EA_1528:
            ; //	asm	nop				
00867:      	nop
            ; //_AED4A60EA_1529:;				
            _AED4A60EA_1529:
            ; //	asm	nop				
00868:      	nop
            ; //_AED4A60EA_1530:;				
            _AED4A60EA_1530:
            ; //	asm	nop				
00869:      	nop
            ; //_AED4A60EA_1531:;				
            _AED4A60EA_1531:
            ; //	asm	nop				
0086A:      	nop
            ; //_AED4A60EA_1532:;				
            _AED4A60EA_1532:
            ; //	asm	nop				
0086B:      	nop
            ; //_AED4A60EA_1533:;				
            _AED4A60EA_1533:
            ; //	asm	nop				
0086C:      	nop
            ; //_AED4A60EA_1534:;				
            _AED4A60EA_1534:
            ; //	asm	nop				
0086D:      	nop
            ; //_AED4A60EA_1535:;				
            _AED4A60EA_1535:
            ; //	asm	nop				
0086E:      	nop
            ; //_AED4A60EA_1536:;				
            _AED4A60EA_1536:
            ; //	asm	nop				
0086F:      	nop
            ; //_AED4A60EA_1537:;				
            _AED4A60EA_1537:
            ; //	asm	nop				
00870:      	nop
            ; //_AED4A60EA_1538:;				
            _AED4A60EA_1538:
            ; //	asm	nop				
00871:      	nop
            ; //_AED4A60EA_1539:;				
            _AED4A60EA_1539:
            ; //	asm set io[0x09].b14;			
00872:      	set io[0x09].b14//
            ; //_AED4A60EA_1540:;				
            _AED4A60EA_1540:
            ; //	asm	nop				
00873:      	nop
            ; //_AED4A60EA_1541:;				
            _AED4A60EA_1541:
            ; //	asm	nop				
00874:      	nop
            ; //_AED4A60EA_1542:;				
            _AED4A60EA_1542:
            ; //	asm	nop				
00875:      	nop
            ; //_AED4A60EA_1543:;				
            _AED4A60EA_1543:
            ; //	asm clr io[0x09].b14;			
00876:      	clr io[0x09].b14//
            ; //_AED4A60EA_1544:;				
            _AED4A60EA_1544:
            ; //	asm	nop				
00877:      	nop
            ; //_AED4A60EA_1545:;				
            _AED4A60EA_1545:
            ; //	asm	nop				
00878:      	nop
            ; //_AED4A60EA_1546:;				
            _AED4A60EA_1546:
            ; //	asm	nop				
00879:      	nop
            ; //_AED4A60EA_1547:;				
            _AED4A60EA_1547:
            ; //	asm	nop				
0087A:      	nop
            ; //_AED4A60EA_1548:;				
            _AED4A60EA_1548:
            ; //	asm	nop				
0087B:      	nop
            ; //_AED4A60EA_1549:;				
            _AED4A60EA_1549:
            ; //	asm	nop				
0087C:      	nop
            ; //_AED4A60EA_1550:;				
            _AED4A60EA_1550:
            ; //	asm	nop				
0087D:      	nop
            ; //_AED4A60EA_1551:;				
            _AED4A60EA_1551:
            ; //	asm	nop				
0087E:      	nop
            ; //_AED4A60EA_1552:;				
            _AED4A60EA_1552:
            ; //	asm	nop				
0087F:      	nop
            ; //_AED4A60EA_1553:;				
            _AED4A60EA_1553:
            ; //	asm	nop				
00880:      	nop
            ; //_AED4A60EA_1554:;				
            _AED4A60EA_1554:
            ; //	asm	nop				
00881:      	nop
            ; //_AED4A60EA_1555:;				
            _AED4A60EA_1555:
            ; //	asm	nop				
00882:      	nop
            ; //_AED4A60EA_1556:;				
            _AED4A60EA_1556:
            ; //	asm set io[0x09].b14;			
00883:      	set io[0x09].b14//
            ; //_AED4A60EA_1557:;				
            _AED4A60EA_1557:
            ; //	asm	nop				
00884:      	nop
            ; //_AED4A60EA_1558:;				
            _AED4A60EA_1558:
            ; //	asm	nop				
00885:      	nop
            ; //_AED4A60EA_1559:;				
            _AED4A60EA_1559:
            ; //	asm	nop				
00886:      	nop
            ; //_AED4A60EA_1560:;				
            _AED4A60EA_1560:
            ; //	asm clr io[0x09].b14;			
00887:      	clr io[0x09].b14//
            ; //_AED4A60EA_1561:;				
            _AED4A60EA_1561:
            ; //	asm	nop				
00888:      	nop
            ; //_AED4A60EA_1562:;				
            _AED4A60EA_1562:
            ; //	asm	nop				
00889:      	nop
            ; //_AED4A60EA_1563:;				
            _AED4A60EA_1563:
            ; //	asm	nop				
0088A:      	nop
            ; //_AED4A60EA_1564:;				
            _AED4A60EA_1564:
            ; //	asm	nop				
0088B:      	nop
            ; //_AED4A60EA_1565:;				
            _AED4A60EA_1565:
            ; //	asm	nop				
0088C:      	nop
            ; //_AED4A60EA_1566:;				
            _AED4A60EA_1566:
            ; //	asm	nop				
0088D:      	nop
            ; //_AED4A60EA_1567:;				
            _AED4A60EA_1567:
            ; //	asm	nop				
0088E:      	nop
            ; //_AED4A60EA_1568:;				
            _AED4A60EA_1568:
            ; //	asm	nop				
0088F:      	nop
            ; //_AED4A60EA_1569:;				
            _AED4A60EA_1569:
            ; //	asm	nop				
00890:      	nop
            ; //_AED4A60EA_1570:;				
            _AED4A60EA_1570:
            ; //	asm	nop				
00891:      	nop
            ; //_AED4A60EA_1571:;				
            _AED4A60EA_1571:
            ; //	asm	nop				
00892:      	nop
            ; //_AED4A60EA_1572:;				
            _AED4A60EA_1572:
            ; //	asm	nop				
00893:      	nop
            ; //_AED4A60EA_1573:;				
            _AED4A60EA_1573:
            ; //	asm set io[0x09].b14;			
00894:      	set io[0x09].b14//
            ; //_AED4A60EA_1574:;				
            _AED4A60EA_1574:
            ; //	asm	nop				
00895:      	nop
            ; //_AED4A60EA_1575:;				
            _AED4A60EA_1575:
            ; //	asm	nop				
00896:      	nop
            ; //_AED4A60EA_1576:;				
            _AED4A60EA_1576:
            ; //	asm	nop				
00897:      	nop
            ; //_AED4A60EA_1577:;				
            _AED4A60EA_1577:
            ; //	asm clr io[0x09].b14;			
00898:      	clr io[0x09].b14//
            ; //_AED4A60EA_1578:;				
            _AED4A60EA_1578:
            ; //	asm	nop				
00899:      	nop
            ; //_AED4A60EA_1579:;				
            _AED4A60EA_1579:
            ; //	asm	nop				
0089A:      	nop
            ; //_AED4A60EA_1580:;				
            _AED4A60EA_1580:
            ; //	asm	nop				
0089B:      	nop
            ; //_AED4A60EA_1581:;				
            _AED4A60EA_1581:
            ; //	asm	nop				
0089C:      	nop
            ; //_AED4A60EA_1582:;				
            _AED4A60EA_1582:
            ; //	asm	nop				
0089D:      	nop
            ; //_AED4A60EA_1583:;				
            _AED4A60EA_1583:
            ; //	asm	nop				
0089E:      	nop
            ; //_AED4A60EA_1584:;				
            _AED4A60EA_1584:
            ; //	asm	nop				
0089F:      	nop
            ; //_AED4A60EA_1585:;				
            _AED4A60EA_1585:
            ; //	asm	nop				
008A0:      	nop
            ; //_AED4A60EA_1586:;				
            _AED4A60EA_1586:
            ; //	asm	nop				
008A1:      	nop
            ; //_AED4A60EA_1587:;				
            _AED4A60EA_1587:
            ; //	asm	nop				
008A2:      	nop
            ; //_AED4A60EA_1588:;				
            _AED4A60EA_1588:
            ; //	asm	nop				
008A3:      	nop
            ; //_AED4A60EA_1589:;				
            _AED4A60EA_1589:
            ; //	asm	nop				
008A4:      	nop
            ; //_AED4A60EA_1590:;				
            _AED4A60EA_1590:
            ; //	asm set io[0x09].b14;			
008A5:      	set io[0x09].b14//
            ; //_AED4A60EA_1591:;				
            _AED4A60EA_1591:
            ; //	asm	nop				
008A6:      	nop
            ; //_AED4A60EA_1592:;				
            _AED4A60EA_1592:
            ; //	asm	nop				
008A7:      	nop
            ; //_AED4A60EA_1593:;				
            _AED4A60EA_1593:
            ; //	asm	nop				
008A8:      	nop
            ; //_AED4A60EA_1594:;				
            _AED4A60EA_1594:
            ; //	asm clr io[0x09].b14;			
008A9:      	clr io[0x09].b14//
            ; //_AED4A60EA_1595:;				
            _AED4A60EA_1595:
            ; //	asm	nop				
008AA:      	nop
            ; //_AED4A60EA_1596:;				
            _AED4A60EA_1596:
            ; //	asm	nop				
008AB:      	nop
            ; //_AED4A60EA_1597:;				
            _AED4A60EA_1597:
            ; //	asm	nop				
008AC:      	nop
            ; //_AED4A60EA_1598:;				
            _AED4A60EA_1598:
            ; //	asm	nop				
008AD:      	nop
            ; //_AED4A60EA_1599:;				
            _AED4A60EA_1599:
            ; //	asm	nop				
008AE:      	nop
            ; //_AED4A60EA_1600:;				
            _AED4A60EA_1600:
            ; //	asm	nop				
008AF:      	nop
            ; //_AED4A60EA_1601:;				
            _AED4A60EA_1601:
            ; //	asm	nop				
008B0:      	nop
            ; //_AED4A60EA_1602:;				
            _AED4A60EA_1602:
            ; //	asm	nop				
008B1:      	nop
            ; //_AED4A60EA_1603:;				
            _AED4A60EA_1603:
            ; //	asm	nop				
008B2:      	nop
            ; //_AED4A60EA_1604:;				
            _AED4A60EA_1604:
            ; //	asm	nop				
008B3:      	nop
            ; //_AED4A60EA_1605:;				
            _AED4A60EA_1605:
            ; //	asm	nop				
008B4:      	nop
            ; //_AED4A60EA_1606:;				
            _AED4A60EA_1606:
            ; //	asm	nop				
008B5:      	nop
            ; //_AED4A60EA_1607:;				
            _AED4A60EA_1607:
            ; //	asm set io[0x09].b14;			
008B6:      	set io[0x09].b14//
            ; //_AED4A60EA_1608:;				
            _AED4A60EA_1608:
            ; //	asm	nop				
008B7:      	nop
            ; //_AED4A60EA_1609:;				
            _AED4A60EA_1609:
            ; //	asm	nop				
008B8:      	nop
            ; //_AED4A60EA_1610:;				
            _AED4A60EA_1610:
            ; //	asm	nop				
008B9:      	nop
            ; //_AED4A60EA_1611:;				
            _AED4A60EA_1611:
            ; //	asm clr io[0x09].b14;			
008BA:      	clr io[0x09].b14//
            ; //_AED4A60EA_1612:;				
            _AED4A60EA_1612:
            ; //	asm	nop				
008BB:      	nop
            ; //_AED4A60EA_1613:;				
            _AED4A60EA_1613:
            ; //	asm	nop				
008BC:      	nop
            ; //_AED4A60EA_1614:;				
            _AED4A60EA_1614:
            ; //	asm	nop				
008BD:      	nop
            ; //_AED4A60EA_1615:;				
            _AED4A60EA_1615:
            ; //	asm	nop				
008BE:      	nop
            ; //_AED4A60EA_1616:;				
            _AED4A60EA_1616:
            ; //	asm	nop				
008BF:      	nop
            ; //_AED4A60EA_1617:;				
            _AED4A60EA_1617:
            ; //	asm	nop				
008C0:      	nop
            ; //_AED4A60EA_1618:;				
            _AED4A60EA_1618:
            ; //	asm	nop				
008C1:      	nop
            ; //_AED4A60EA_1619:;				
            _AED4A60EA_1619:
            ; //	asm	nop				
008C2:      	nop
            ; //_AED4A60EA_1620:;				
            _AED4A60EA_1620:
            ; //	asm	nop				
008C3:      	nop
            ; //_AED4A60EA_1621:;				
            _AED4A60EA_1621:
            ; //	asm	nop				
008C4:      	nop
            ; //_AED4A60EA_1622:;				
            _AED4A60EA_1622:
            ; //	asm	nop				
008C5:      	nop
            ; //_AED4A60EA_1623:;				
            _AED4A60EA_1623:
            ; //	asm	nop				
008C6:      	nop
            ; //_AED4A60EA_1624:;				
            _AED4A60EA_1624:
            ; //	asm set io[0x09].b14;			
008C7:      	set io[0x09].b14//
            ; //_AED4A60EA_1625:;				
            _AED4A60EA_1625:
            ; //	asm	nop				
008C8:      	nop
            ; //_AED4A60EA_1626:;				
            _AED4A60EA_1626:
            ; //	asm	nop				
008C9:      	nop
            ; //_AED4A60EA_1627:;				
            _AED4A60EA_1627:
            ; //	asm	nop				
008CA:      	nop
            ; //_AED4A60EA_1628:;				
            _AED4A60EA_1628:
            ; //	asm clr io[0x09].b14;			
008CB:      	clr io[0x09].b14//
            ; //_AED4A60EA_1629:;				
            _AED4A60EA_1629:
            ; //	asm	nop				
008CC:      	nop
            ; //_AED4A60EA_1630:;				
            _AED4A60EA_1630:
            ; //	asm	nop				
008CD:      	nop
            ; //_AED4A60EA_1631:;				
            _AED4A60EA_1631:
            ; //	asm	nop				
008CE:      	nop
            ; //_AED4A60EA_1632:;				
            _AED4A60EA_1632:
            ; //	asm	nop				
008CF:      	nop
            ; //_AED4A60EA_1633:;				
            _AED4A60EA_1633:
            ; //	asm	nop				
008D0:      	nop
            ; //_AED4A60EA_1634:;				
            _AED4A60EA_1634:
            ; //	asm	nop				
008D1:      	nop
            ; //_AED4A60EA_1635:;				
            _AED4A60EA_1635:
            ; //	asm	nop				
008D2:      	nop
            ; //_AED4A60EA_1636:;				
            _AED4A60EA_1636:
            ; //	asm	nop				
008D3:      	nop
            ; //_AED4A60EA_1637:;				
            _AED4A60EA_1637:
            ; //	asm	nop				
008D4:      	nop
            ; //_AED4A60EA_1638:;				
            _AED4A60EA_1638:
            ; //	asm	nop				
008D5:      	nop
            ; //_AED4A60EA_1639:;				
            _AED4A60EA_1639:
            ; //	asm	nop				
008D6:      	nop
            ; //_AED4A60EA_1640:;				
            _AED4A60EA_1640:
            ; //	asm	nop				
008D7:      	nop
            ; //_AED4A60EA_1641:;				
            _AED4A60EA_1641:
            ; //	asm set io[0x09].b14;			
008D8:      	set io[0x09].b14//
            ; //_AED4A60EA_1642:;				
            _AED4A60EA_1642:
            ; //	asm	nop				
008D9:      	nop
            ; //_AED4A60EA_1643:;				
            _AED4A60EA_1643:
            ; //	asm	nop				
008DA:      	nop
            ; //_AED4A60EA_1644:;				
            _AED4A60EA_1644:
            ; //	asm	nop				
008DB:      	nop
            ; //_AED4A60EA_1645:;				
            _AED4A60EA_1645:
            ; //	asm clr io[0x09].b14;			
008DC:      	clr io[0x09].b14//
            ; //_AED4A60EA_1646:;				
            _AED4A60EA_1646:
            ; //	asm	nop				
008DD:      	nop
            ; //_AED4A60EA_1647:;				
            _AED4A60EA_1647:
            ; //	asm	nop				
008DE:      	nop
            ; //_AED4A60EA_1648:;				
            _AED4A60EA_1648:
            ; //	asm	nop				
008DF:      	nop
            ; //_AED4A60EA_1649:;				
            _AED4A60EA_1649:
            ; //	asm	nop				
008E0:      	nop
            ; //_AED4A60EA_1650:;				
            _AED4A60EA_1650:
            ; //	asm	nop				
008E1:      	nop
            ; //_AED4A60EA_1651:;				
            _AED4A60EA_1651:
            ; //	asm	nop				
008E2:      	nop
            ; //_AED4A60EA_1652:;				
            _AED4A60EA_1652:
            ; //	asm	nop				
008E3:      	nop
            ; //_AED4A60EA_1653:;				
            _AED4A60EA_1653:
            ; //	asm	nop				
008E4:      	nop
            ; //_AED4A60EA_1654:;				
            _AED4A60EA_1654:
            ; //	asm	nop				
008E5:      	nop
            ; //_AED4A60EA_1655:;				
            _AED4A60EA_1655:
            ; //	asm	nop				
008E6:      	nop
            ; //_AED4A60EA_1656:;				
            _AED4A60EA_1656:
            ; //	asm	nop				
008E7:      	nop
            ; //_AED4A60EA_1657:;				
            _AED4A60EA_1657:
            ; //	asm	nop				
008E8:      	nop
            ; //_AED4A60EA_1658:;				
            _AED4A60EA_1658:
            ; //	asm set io[0x09].b14;			
008E9:      	set io[0x09].b14//
            ; //_AED4A60EA_1659:;				
            _AED4A60EA_1659:
            ; //	asm	nop				
008EA:      	nop
            ; //_AED4A60EA_1660:;				
            _AED4A60EA_1660:
            ; //	asm	nop				
008EB:      	nop
            ; //_AED4A60EA_1661:;				
            _AED4A60EA_1661:
            ; //	asm	nop				
008EC:      	nop
            ; //_AED4A60EA_1662:;				
            _AED4A60EA_1662:
            ; //	asm clr io[0x09].b14;			
008ED:      	clr io[0x09].b14//
            ; //_AED4A60EA_1663:;				
            _AED4A60EA_1663:
            ; //	asm	nop				
008EE:      	nop
            ; //_AED4A60EA_1664:;				
            _AED4A60EA_1664:
            ; //	asm	nop				
008EF:      	nop
            ; //_AED4A60EA_1665:;				
            _AED4A60EA_1665:
            ; //	asm	nop				
008F0:      	nop
            ; //_AED4A60EA_1666:;				
            _AED4A60EA_1666:
            ; //	asm	nop				
008F1:      	nop
            ; //_AED4A60EA_1667:;				
            _AED4A60EA_1667:
            ; //	asm	nop				
008F2:      	nop
            ; //_AED4A60EA_1668:;				
            _AED4A60EA_1668:
            ; //	asm	nop				
008F3:      	nop
            ; //_AED4A60EA_1669:;				
            _AED4A60EA_1669:
            ; //	asm	nop				
008F4:      	nop
            ; //_AED4A60EA_1670:;				
            _AED4A60EA_1670:
            ; //	asm	nop				
008F5:      	nop
            ; //_AED4A60EA_1671:;				
            _AED4A60EA_1671:
            ; //	asm	nop				
008F6:      	nop
            ; //_AED4A60EA_1672:;				
            _AED4A60EA_1672:
            ; //	asm	nop				
008F7:      	nop
            ; //_AED4A60EA_1673:;				
            _AED4A60EA_1673:
            ; //	asm	nop				
008F8:      	nop
            ; //_AED4A60EA_1674:;				
            _AED4A60EA_1674:
            ; //	asm	nop				
008F9:      	nop
            ; //_AED4A60EA_1675:;				
            _AED4A60EA_1675:
            ; //	asm set io[0x09].b14;			
008FA:      	set io[0x09].b14//
            ; //_AED4A60EA_1676:;				
            _AED4A60EA_1676:
            ; //	asm	nop				
008FB:      	nop
            ; //_AED4A60EA_1677:;				
            _AED4A60EA_1677:
            ; //	asm	nop				
008FC:      	nop
            ; //_AED4A60EA_1678:;				
            _AED4A60EA_1678:
            ; //	asm	nop				
008FD:      	nop
            ; //_AED4A60EA_1679:;				
            _AED4A60EA_1679:
            ; //	asm clr io[0x09].b14;			
008FE:      	clr io[0x09].b14//
            ; //_AED4A60EA_1680:;				
            _AED4A60EA_1680:
            ; //	asm	nop				
008FF:      	nop
            ; //_AED4A60EA_1681:;				
            _AED4A60EA_1681:
            ; //	asm	nop				
00900:      	nop
            ; //_AED4A60EA_1682:;				
            _AED4A60EA_1682:
            ; //	asm	nop				
00901:      	nop
            ; //_AED4A60EA_1683:;				
            _AED4A60EA_1683:
            ; //	asm	nop				
00902:      	nop
            ; //_AED4A60EA_1684:;				
            _AED4A60EA_1684:
            ; //	asm	nop				
00903:      	nop
            ; //_AED4A60EA_1685:;				
            _AED4A60EA_1685:
            ; //	asm	nop				
00904:      	nop
            ; //_AED4A60EA_1686:;				
            _AED4A60EA_1686:
            ; //	asm	nop				
00905:      	nop
            ; //_AED4A60EA_1687:;				
            _AED4A60EA_1687:
            ; //	asm	nop				
00906:      	nop
            ; //_AED4A60EA_1688:;				
            _AED4A60EA_1688:
            ; //	asm	nop				
00907:      	nop
            ; //_AED4A60EA_1689:;				
            _AED4A60EA_1689:
            ; //	asm	nop				
00908:      	nop
            ; //_AED4A60EA_1690:;				
            _AED4A60EA_1690:
            ; //	asm	nop				
00909:      	nop
            ; //_AED4A60EA_1691:;				
            _AED4A60EA_1691:
            ; //	asm	nop				
0090A:      	nop
            ; //_AED4A60EA_1692:;				
            _AED4A60EA_1692:
            ; //	asm set io[0x09].b14;			
0090B:      	set io[0x09].b14//
            ; //_AED4A60EA_1693:;				
            _AED4A60EA_1693:
            ; //	asm	nop				
0090C:      	nop
            ; //_AED4A60EA_1694:;				
            _AED4A60EA_1694:
            ; //	asm	nop				
0090D:      	nop
            ; //_AED4A60EA_1695:;				
            _AED4A60EA_1695:
            ; //	asm	nop				
0090E:      	nop
            ; //_AED4A60EA_1696:;				
            _AED4A60EA_1696:
            ; //	asm clr io[0x09].b14;			
0090F:      	clr io[0x09].b14//
            ; //_AED4A60EA_1697:;				
            _AED4A60EA_1697:
            ; //	asm	nop				
00910:      	nop
            ; //_AED4A60EA_1698:;				
            _AED4A60EA_1698:
            ; //	asm	nop				
00911:      	nop
            ; //_AED4A60EA_1699:;				
            _AED4A60EA_1699:
            ; //	asm	nop				
00912:      	nop
            ; //_AED4A60EA_1700:;				
            _AED4A60EA_1700:
            ; //	asm	nop				
00913:      	nop
            ; //_AED4A60EA_1701:;				
            _AED4A60EA_1701:
            ; //	asm	nop				
00914:      	nop
            ; //_AED4A60EA_1702:;				
            _AED4A60EA_1702:
            ; //	asm	nop				
00915:      	nop
            ; //_AED4A60EA_1703:;				
            _AED4A60EA_1703:
            ; //	asm	nop				
00916:      	nop
            ; //_AED4A60EA_1704:;				
            _AED4A60EA_1704:
            ; //	asm	nop				
00917:      	nop
            ; //_AED4A60EA_1705:;				
            _AED4A60EA_1705:
            ; //	asm	nop				
00918:      	nop
            ; //_AED4A60EA_1706:;				
            _AED4A60EA_1706:
            ; //	asm	nop				
00919:      	nop
            ; //_AED4A60EA_1707:;				
            _AED4A60EA_1707:
            ; //	asm	nop				
0091A:      	nop
            ; //_AED4A60EA_1708:;				
            _AED4A60EA_1708:
            ; //	asm	nop				
0091B:      	nop
            ; //_AED4A60EA_1709:;				
            _AED4A60EA_1709:
            ; //	asm set io[0x09].b14;			
0091C:      	set io[0x09].b14//
            ; //_AED4A60EA_1710:;				
            _AED4A60EA_1710:
            ; //	asm	nop				
0091D:      	nop
            ; //_AED4A60EA_1711:;				
            _AED4A60EA_1711:
            ; //	asm	nop				
0091E:      	nop
            ; //_AED4A60EA_1712:;				
            _AED4A60EA_1712:
            ; //	asm	nop				
0091F:      	nop
            ; //_AED4A60EA_1713:;				
            _AED4A60EA_1713:
            ; //	asm clr io[0x09].b14;			
00920:      	clr io[0x09].b14//
            ; //_AED4A60EA_1714:;				
            _AED4A60EA_1714:
            ; //	asm	nop				
00921:      	nop
            ; //_AED4A60EA_1715:;				
            _AED4A60EA_1715:
            ; //	asm	nop				
00922:      	nop
            ; //_AED4A60EA_1716:;				
            _AED4A60EA_1716:
            ; //	asm	nop				
00923:      	nop
            ; //_AED4A60EA_1717:;				
            _AED4A60EA_1717:
            ; //	asm	nop				
00924:      	nop
            ; //_AED4A60EA_1718:;				
            _AED4A60EA_1718:
            ; //	asm	nop				
00925:      	nop
            ; //_AED4A60EA_1719:;				
            _AED4A60EA_1719:
            ; //	asm	nop				
00926:      	nop
            ; //_AED4A60EA_1720:;				
            _AED4A60EA_1720:
            ; //	asm	nop				
00927:      	nop
            ; //_AED4A60EA_1721:;				
            _AED4A60EA_1721:
            ; //	asm	nop				
00928:      	nop
            ; //_AED4A60EA_1722:;				
            _AED4A60EA_1722:
            ; //	asm	nop				
00929:      	nop
            ; //_AED4A60EA_1723:;				
            _AED4A60EA_1723:
            ; //	asm	nop				
0092A:      	nop
            ; //_AED4A60EA_1724:;				
            _AED4A60EA_1724:
            ; //	asm	nop				
0092B:      	nop
            ; //_AED4A60EA_1725:;				
            _AED4A60EA_1725:
            ; //	asm	nop				
0092C:      	nop
            ; //_AED4A60EA_1726:;				
            _AED4A60EA_1726:
            ; //	asm set io[0x09].b14;			
0092D:      	set io[0x09].b14//
            ; //_AED4A60EA_1727:;				
            _AED4A60EA_1727:
            ; //	asm	nop				
0092E:      	nop
            ; //_AED4A60EA_1728:;				
            _AED4A60EA_1728:
            ; //	asm	nop				
0092F:      	nop
            ; //_AED4A60EA_1729:;				
            _AED4A60EA_1729:
            ; //	asm	nop				
00930:      	nop
            ; //_AED4A60EA_1730:;				
            _AED4A60EA_1730:
            ; //	asm clr io[0x09].b14;			
00931:      	clr io[0x09].b14//
            ; //_AED4A60EA_1731:;				
            _AED4A60EA_1731:
            ; //	asm	nop				
00932:      	nop
            ; //_AED4A60EA_1732:;				
            _AED4A60EA_1732:
            ; //	asm	nop				
00933:      	nop
            ; //_AED4A60EA_1733:;				
            _AED4A60EA_1733:
            ; //	asm	nop				
00934:      	nop
            ; //_AED4A60EA_1734:;				
            _AED4A60EA_1734:
            ; //	asm	nop				
00935:      	nop
            ; //_AED4A60EA_1735:;				
            _AED4A60EA_1735:
            ; //	asm	nop				
00936:      	nop
            ; //_AED4A60EA_1736:;				
            _AED4A60EA_1736:
            ; //	asm	nop				
00937:      	nop
            ; //_AED4A60EA_1737:;				
            _AED4A60EA_1737:
            ; //	asm	nop				
00938:      	nop
            ; //_AED4A60EA_1738:;				
            _AED4A60EA_1738:
            ; //	asm	nop				
00939:      	nop
            ; //_AED4A60EA_1739:;				
            _AED4A60EA_1739:
            ; //	asm	nop				
0093A:      	nop
            ; //_AED4A60EA_1740:;				
            _AED4A60EA_1740:
            ; //	asm	nop				
0093B:      	nop
            ; //_AED4A60EA_1741:;				
            _AED4A60EA_1741:
            ; //	asm	nop				
0093C:      	nop
            ; //_AED4A60EA_1742:;				
            _AED4A60EA_1742:
            ; //	asm	nop				
0093D:      	nop
            ; //_AED4A60EA_1743:;				
            _AED4A60EA_1743:
            ; //	asm set io[0x09].b14;			
0093E:      	set io[0x09].b14//
            ; //_AED4A60EA_1744:;				
            _AED4A60EA_1744:
            ; //	asm	nop				
0093F:      	nop
            ; //_AED4A60EA_1745:;				
            _AED4A60EA_1745:
            ; //	asm	nop				
00940:      	nop
            ; //_AED4A60EA_1746:;				
            _AED4A60EA_1746:
            ; //	asm	nop				
00941:      	nop
            ; //_AED4A60EA_1747:;				
            _AED4A60EA_1747:
            ; //	asm clr io[0x09].b14;			
00942:      	clr io[0x09].b14//
            ; //_AED4A60EA_1748:;				
            _AED4A60EA_1748:
            ; //	asm	nop				
00943:      	nop
            ; //_AED4A60EA_1749:;				
            _AED4A60EA_1749:
            ; //	asm	nop				
00944:      	nop
            ; //_AED4A60EA_1750:;				
            _AED4A60EA_1750:
            ; //	asm	nop				
00945:      	nop
            ; //_AED4A60EA_1751:;				
            _AED4A60EA_1751:
            ; //	asm	nop				
00946:      	nop
            ; //_AED4A60EA_1752:;				
            _AED4A60EA_1752:
            ; //	asm	nop				
00947:      	nop
            ; //_AED4A60EA_1753:;				
            _AED4A60EA_1753:
            ; //	asm	nop				
00948:      	nop
            ; //_AED4A60EA_1754:;				
            _AED4A60EA_1754:
            ; //	asm	nop				
00949:      	nop
            ; //_AED4A60EA_1755:;				
            _AED4A60EA_1755:
            ; //	asm	nop				
0094A:      	nop
            ; //_AED4A60EA_1756:;				
            _AED4A60EA_1756:
            ; //	asm	nop				
0094B:      	nop
            ; //_AED4A60EA_1757:;				
            _AED4A60EA_1757:
            ; //	asm	nop				
0094C:      	nop
            ; //_AED4A60EA_1758:;				
            _AED4A60EA_1758:
            ; //	asm	nop				
0094D:      	nop
            ; //_AED4A60EA_1759:;				
            _AED4A60EA_1759:
            ; //	asm	nop				
0094E:      	nop
            ; //_AED4A60EA_1760:;				
            _AED4A60EA_1760:
            ; //	goto LD63FD439_50;			
0094F:      	pch =	LD63FD439_50
00950:      	ljmp	LD63FD439_50
            ; //LD63FD439_56:;					
            LD63FD439_56:
            ; //_AED4A60EA_1761:;				
            _AED4A60EA_1761:
            ; //	asm set io[0x09].b14;			
00951:      	set io[0x09].b14//
            ; //_AED4A60EA_1762:;				
            _AED4A60EA_1762:
            ; //	asm	nop				
00952:      	nop
            ; //_AED4A60EA_1763:;				
            _AED4A60EA_1763:
            ; //	asm	nop				
00953:      	nop
            ; //_AED4A60EA_1764:;				
            _AED4A60EA_1764:
            ; //	asm	nop				
00954:      	nop
            ; //_AED4A60EA_1765:;				
            _AED4A60EA_1765:
            ; //	asm clr io[0x09].b14;			
00955:      	clr io[0x09].b14//
            ; //_AED4A60EA_1766:;				
            _AED4A60EA_1766:
            ; //	asm	nop				
00956:      	nop
            ; //_AED4A60EA_1767:;				
            _AED4A60EA_1767:
            ; //	asm	nop				
00957:      	nop
            ; //_AED4A60EA_1768:;				
            _AED4A60EA_1768:
            ; //	asm	nop				
00958:      	nop
            ; //_AED4A60EA_1769:;				
            _AED4A60EA_1769:
            ; //	asm	nop				
00959:      	nop
            ; //_AED4A60EA_1770:;				
            _AED4A60EA_1770:
            ; //	asm	nop				
0095A:      	nop
            ; //_AED4A60EA_1771:;				
            _AED4A60EA_1771:
            ; //	asm	nop				
0095B:      	nop
            ; //_AED4A60EA_1772:;				
            _AED4A60EA_1772:
            ; //	asm	nop				
0095C:      	nop
            ; //_AED4A60EA_1773:;				
            _AED4A60EA_1773:
            ; //	asm	nop				
0095D:      	nop
            ; //_AED4A60EA_1774:;				
            _AED4A60EA_1774:
            ; //	asm	nop				
0095E:      	nop
            ; //_AED4A60EA_1775:;				
            _AED4A60EA_1775:
            ; //	asm	nop				
0095F:      	nop
            ; //_AED4A60EA_1776:;				
            _AED4A60EA_1776:
            ; //	asm	nop				
00960:      	nop
            ; //_AED4A60EA_1777:;				
            _AED4A60EA_1777:
            ; //	asm	nop				
00961:      	nop
            ; //_AED4A60EA_1778:;				
            _AED4A60EA_1778:
            ; //	asm set io[0x09].b14;			
00962:      	set io[0x09].b14//
            ; //_AED4A60EA_1779:;				
            _AED4A60EA_1779:
            ; //	asm	nop				
00963:      	nop
            ; //_AED4A60EA_1780:;				
            _AED4A60EA_1780:
            ; //	asm	nop				
00964:      	nop
            ; //_AED4A60EA_1781:;				
            _AED4A60EA_1781:
            ; //	asm	nop				
00965:      	nop
            ; //_AED4A60EA_1782:;				
            _AED4A60EA_1782:
            ; //	asm clr io[0x09].b14;			
00966:      	clr io[0x09].b14//
            ; //_AED4A60EA_1783:;				
            _AED4A60EA_1783:
            ; //	asm	nop				
00967:      	nop
            ; //_AED4A60EA_1784:;				
            _AED4A60EA_1784:
            ; //	asm	nop				
00968:      	nop
            ; //_AED4A60EA_1785:;				
            _AED4A60EA_1785:
            ; //	asm	nop				
00969:      	nop
            ; //_AED4A60EA_1786:;				
            _AED4A60EA_1786:
            ; //	asm	nop				
0096A:      	nop
            ; //_AED4A60EA_1787:;				
            _AED4A60EA_1787:
            ; //	asm	nop				
0096B:      	nop
            ; //_AED4A60EA_1788:;				
            _AED4A60EA_1788:
            ; //	asm	nop				
0096C:      	nop
            ; //_AED4A60EA_1789:;				
            _AED4A60EA_1789:
            ; //	asm	nop				
0096D:      	nop
            ; //_AED4A60EA_1790:;				
            _AED4A60EA_1790:
            ; //	asm	nop				
0096E:      	nop
            ; //_AED4A60EA_1791:;				
            _AED4A60EA_1791:
            ; //	asm	nop				
0096F:      	nop
            ; //_AED4A60EA_1792:;				
            _AED4A60EA_1792:
            ; //	asm	nop				
00970:      	nop
            ; //_AED4A60EA_1793:;				
            _AED4A60EA_1793:
            ; //	asm	nop				
00971:      	nop
            ; //_AED4A60EA_1794:;				
            _AED4A60EA_1794:
            ; //	asm	nop				
00972:      	nop
            ; //_AED4A60EA_1795:;				
            _AED4A60EA_1795:
            ; //	asm set io[0x09].b14;			
00973:      	set io[0x09].b14//
            ; //_AED4A60EA_1796:;				
            _AED4A60EA_1796:
            ; //	asm	nop				
00974:      	nop
            ; //_AED4A60EA_1797:;				
            _AED4A60EA_1797:
            ; //	asm	nop				
00975:      	nop
            ; //_AED4A60EA_1798:;				
            _AED4A60EA_1798:
            ; //	asm	nop				
00976:      	nop
            ; //_AED4A60EA_1799:;				
            _AED4A60EA_1799:
            ; //	asm clr io[0x09].b14;			
00977:      	clr io[0x09].b14//
            ; //_AED4A60EA_1800:;				
            _AED4A60EA_1800:
            ; //	asm	nop				
00978:      	nop
            ; //_AED4A60EA_1801:;				
            _AED4A60EA_1801:
            ; //	asm	nop				
00979:      	nop
            ; //_AED4A60EA_1802:;				
            _AED4A60EA_1802:
            ; //	asm	nop				
0097A:      	nop
            ; //_AED4A60EA_1803:;				
            _AED4A60EA_1803:
            ; //	asm	nop				
0097B:      	nop
            ; //_AED4A60EA_1804:;				
            _AED4A60EA_1804:
            ; //	asm	nop				
0097C:      	nop
            ; //_AED4A60EA_1805:;				
            _AED4A60EA_1805:
            ; //	asm	nop				
0097D:      	nop
            ; //_AED4A60EA_1806:;				
            _AED4A60EA_1806:
            ; //	asm	nop				
0097E:      	nop
            ; //_AED4A60EA_1807:;				
            _AED4A60EA_1807:
            ; //	asm	nop				
0097F:      	nop
            ; //_AED4A60EA_1808:;				
            _AED4A60EA_1808:
            ; //	asm	nop				
00980:      	nop
            ; //_AED4A60EA_1809:;				
            _AED4A60EA_1809:
            ; //	asm	nop				
00981:      	nop
            ; //_AED4A60EA_1810:;				
            _AED4A60EA_1810:
            ; //	asm	nop				
00982:      	nop
            ; //_AED4A60EA_1811:;				
            _AED4A60EA_1811:
            ; //	asm	nop				
00983:      	nop
            ; //_AED4A60EA_1812:;				
            _AED4A60EA_1812:
            ; //	asm set io[0x09].b14;			
00984:      	set io[0x09].b14//
            ; //_AED4A60EA_1813:;				
            _AED4A60EA_1813:
            ; //	asm	nop				
00985:      	nop
            ; //_AED4A60EA_1814:;				
            _AED4A60EA_1814:
            ; //	asm	nop				
00986:      	nop
            ; //_AED4A60EA_1815:;				
            _AED4A60EA_1815:
            ; //	asm	nop				
00987:      	nop
            ; //_AED4A60EA_1816:;				
            _AED4A60EA_1816:
            ; //	asm clr io[0x09].b14;			
00988:      	clr io[0x09].b14//
            ; //_AED4A60EA_1817:;				
            _AED4A60EA_1817:
            ; //	asm	nop				
00989:      	nop
            ; //_AED4A60EA_1818:;				
            _AED4A60EA_1818:
            ; //	asm	nop				
0098A:      	nop
            ; //_AED4A60EA_1819:;				
            _AED4A60EA_1819:
            ; //	asm	nop				
0098B:      	nop
            ; //_AED4A60EA_1820:;				
            _AED4A60EA_1820:
            ; //	asm	nop				
0098C:      	nop
            ; //_AED4A60EA_1821:;				
            _AED4A60EA_1821:
            ; //	asm	nop				
0098D:      	nop
            ; //_AED4A60EA_1822:;				
            _AED4A60EA_1822:
            ; //	asm	nop				
0098E:      	nop
            ; //_AED4A60EA_1823:;				
            _AED4A60EA_1823:
            ; //	asm	nop				
0098F:      	nop
            ; //_AED4A60EA_1824:;				
            _AED4A60EA_1824:
            ; //	asm	nop				
00990:      	nop
            ; //_AED4A60EA_1825:;				
            _AED4A60EA_1825:
            ; //	asm	nop				
00991:      	nop
            ; //_AED4A60EA_1826:;				
            _AED4A60EA_1826:
            ; //	asm	nop				
00992:      	nop
            ; //_AED4A60EA_1827:;				
            _AED4A60EA_1827:
            ; //	asm	nop				
00993:      	nop
            ; //_AED4A60EA_1828:;				
            _AED4A60EA_1828:
            ; //	asm	nop				
00994:      	nop
            ; //_AED4A60EA_1829:;				
            _AED4A60EA_1829:
            ; //	asm set io[0x09].b14;			
00995:      	set io[0x09].b14//
            ; //_AED4A60EA_1830:;				
            _AED4A60EA_1830:
            ; //	asm	nop				
00996:      	nop
            ; //_AED4A60EA_1831:;				
            _AED4A60EA_1831:
            ; //	asm	nop				
00997:      	nop
            ; //_AED4A60EA_1832:;				
            _AED4A60EA_1832:
            ; //	asm	nop				
00998:      	nop
            ; //_AED4A60EA_1833:;				
            _AED4A60EA_1833:
            ; //	asm clr io[0x09].b14;			
00999:      	clr io[0x09].b14//
            ; //_AED4A60EA_1834:;				
            _AED4A60EA_1834:
            ; //	asm	nop				
0099A:      	nop
            ; //_AED4A60EA_1835:;				
            _AED4A60EA_1835:
            ; //	asm	nop				
0099B:      	nop
            ; //_AED4A60EA_1836:;				
            _AED4A60EA_1836:
            ; //	asm	nop				
0099C:      	nop
            ; //_AED4A60EA_1837:;				
            _AED4A60EA_1837:
            ; //	asm	nop				
0099D:      	nop
            ; //_AED4A60EA_1838:;				
            _AED4A60EA_1838:
            ; //	asm	nop				
0099E:      	nop
            ; //_AED4A60EA_1839:;				
            _AED4A60EA_1839:
            ; //	asm	nop				
0099F:      	nop
            ; //_AED4A60EA_1840:;				
            _AED4A60EA_1840:
            ; //	asm	nop				
009A0:      	nop
            ; //_AED4A60EA_1841:;				
            _AED4A60EA_1841:
            ; //	asm	nop				
009A1:      	nop
            ; //_AED4A60EA_1842:;				
            _AED4A60EA_1842:
            ; //	asm	nop				
009A2:      	nop
            ; //_AED4A60EA_1843:;				
            _AED4A60EA_1843:
            ; //	asm	nop				
009A3:      	nop
            ; //_AED4A60EA_1844:;				
            _AED4A60EA_1844:
            ; //	asm	nop				
009A4:      	nop
            ; //_AED4A60EA_1845:;				
            _AED4A60EA_1845:
            ; //	asm	nop				
009A5:      	nop
            ; //_AED4A60EA_1846:;				
            _AED4A60EA_1846:
            ; //	asm set io[0x09].b14;			
009A6:      	set io[0x09].b14//
            ; //_AED4A60EA_1847:;				
            _AED4A60EA_1847:
            ; //	asm	nop				
009A7:      	nop
            ; //_AED4A60EA_1848:;				
            _AED4A60EA_1848:
            ; //	asm	nop				
009A8:      	nop
            ; //_AED4A60EA_1849:;				
            _AED4A60EA_1849:
            ; //	asm	nop				
009A9:      	nop
            ; //_AED4A60EA_1850:;				
            _AED4A60EA_1850:
            ; //	asm clr io[0x09].b14;			
009AA:      	clr io[0x09].b14//
            ; //_AED4A60EA_1851:;				
            _AED4A60EA_1851:
            ; //	asm	nop				
009AB:      	nop
            ; //_AED4A60EA_1852:;				
            _AED4A60EA_1852:
            ; //	asm	nop				
009AC:      	nop
            ; //_AED4A60EA_1853:;				
            _AED4A60EA_1853:
            ; //	asm	nop				
009AD:      	nop
            ; //_AED4A60EA_1854:;				
            _AED4A60EA_1854:
            ; //	asm	nop				
009AE:      	nop
            ; //_AED4A60EA_1855:;				
            _AED4A60EA_1855:
            ; //	asm	nop				
009AF:      	nop
            ; //_AED4A60EA_1856:;				
            _AED4A60EA_1856:
            ; //	asm	nop				
009B0:      	nop
            ; //_AED4A60EA_1857:;				
            _AED4A60EA_1857:
            ; //	asm	nop				
009B1:      	nop
            ; //_AED4A60EA_1858:;				
            _AED4A60EA_1858:
            ; //	asm	nop				
009B2:      	nop
            ; //_AED4A60EA_1859:;				
            _AED4A60EA_1859:
            ; //	asm	nop				
009B3:      	nop
            ; //_AED4A60EA_1860:;				
            _AED4A60EA_1860:
            ; //	asm	nop				
009B4:      	nop
            ; //_AED4A60EA_1861:;				
            _AED4A60EA_1861:
            ; //	asm	nop				
009B5:      	nop
            ; //_AED4A60EA_1862:;				
            _AED4A60EA_1862:
            ; //	asm	nop				
009B6:      	nop
            ; //_AED4A60EA_1863:;				
            _AED4A60EA_1863:
            ; //	asm set io[0x09].b14;			
009B7:      	set io[0x09].b14//
            ; //_AED4A60EA_1864:;				
            _AED4A60EA_1864:
            ; //	asm	nop				
009B8:      	nop
            ; //_AED4A60EA_1865:;				
            _AED4A60EA_1865:
            ; //	asm	nop				
009B9:      	nop
            ; //_AED4A60EA_1866:;				
            _AED4A60EA_1866:
            ; //	asm	nop				
009BA:      	nop
            ; //_AED4A60EA_1867:;				
            _AED4A60EA_1867:
            ; //	asm clr io[0x09].b14;			
009BB:      	clr io[0x09].b14//
            ; //_AED4A60EA_1868:;				
            _AED4A60EA_1868:
            ; //	asm	nop				
009BC:      	nop
            ; //_AED4A60EA_1869:;				
            _AED4A60EA_1869:
            ; //	asm	nop				
009BD:      	nop
            ; //_AED4A60EA_1870:;				
            _AED4A60EA_1870:
            ; //	asm	nop				
009BE:      	nop
            ; //_AED4A60EA_1871:;				
            _AED4A60EA_1871:
            ; //	asm	nop				
009BF:      	nop
            ; //_AED4A60EA_1872:;				
            _AED4A60EA_1872:
            ; //	asm	nop				
009C0:      	nop
            ; //_AED4A60EA_1873:;				
            _AED4A60EA_1873:
            ; //	asm	nop				
009C1:      	nop
            ; //_AED4A60EA_1874:;				
            _AED4A60EA_1874:
            ; //	asm	nop				
009C2:      	nop
            ; //_AED4A60EA_1875:;				
            _AED4A60EA_1875:
            ; //	asm	nop				
009C3:      	nop
            ; //_AED4A60EA_1876:;				
            _AED4A60EA_1876:
            ; //	asm	nop				
009C4:      	nop
            ; //_AED4A60EA_1877:;				
            _AED4A60EA_1877:
            ; //	asm	nop				
009C5:      	nop
            ; //_AED4A60EA_1878:;				
            _AED4A60EA_1878:
            ; //	asm	nop				
009C6:      	nop
            ; //_AED4A60EA_1879:;				
            _AED4A60EA_1879:
            ; //	asm	nop				
009C7:      	nop
            ; //_AED4A60EA_1880:;				
            _AED4A60EA_1880:
            ; //	asm set io[0x09].b14;			
009C8:      	set io[0x09].b14//
            ; //_AED4A60EA_1881:;				
            _AED4A60EA_1881:
            ; //	asm	nop				
009C9:      	nop
            ; //_AED4A60EA_1882:;				
            _AED4A60EA_1882:
            ; //	asm	nop				
009CA:      	nop
            ; //_AED4A60EA_1883:;				
            _AED4A60EA_1883:
            ; //	asm	nop				
009CB:      	nop
            ; //_AED4A60EA_1884:;				
            _AED4A60EA_1884:
            ; //	asm clr io[0x09].b14;			
009CC:      	clr io[0x09].b14//
            ; //_AED4A60EA_1885:;				
            _AED4A60EA_1885:
            ; //	asm	nop				
009CD:      	nop
            ; //_AED4A60EA_1886:;				
            _AED4A60EA_1886:
            ; //	asm	nop				
009CE:      	nop
            ; //_AED4A60EA_1887:;				
            _AED4A60EA_1887:
            ; //	asm	nop				
009CF:      	nop
            ; //_AED4A60EA_1888:;				
            _AED4A60EA_1888:
            ; //	asm	nop				
009D0:      	nop
            ; //_AED4A60EA_1889:;				
            _AED4A60EA_1889:
            ; //	asm	nop				
009D1:      	nop
            ; //_AED4A60EA_1890:;				
            _AED4A60EA_1890:
            ; //	asm	nop				
009D2:      	nop
            ; //_AED4A60EA_1891:;				
            _AED4A60EA_1891:
            ; //	asm	nop				
009D3:      	nop
            ; //_AED4A60EA_1892:;				
            _AED4A60EA_1892:
            ; //	asm	nop				
009D4:      	nop
            ; //_AED4A60EA_1893:;				
            _AED4A60EA_1893:
            ; //	asm	nop				
009D5:      	nop
            ; //_AED4A60EA_1894:;				
            _AED4A60EA_1894:
            ; //	asm	nop				
009D6:      	nop
            ; //_AED4A60EA_1895:;				
            _AED4A60EA_1895:
            ; //	asm	nop				
009D7:      	nop
            ; //_AED4A60EA_1896:;				
            _AED4A60EA_1896:
            ; //	asm	nop				
009D8:      	nop
            ; //_AED4A60EA_1897:;				
            _AED4A60EA_1897:
            ; //	asm set io[0x09].b14;			
009D9:      	set io[0x09].b14//
            ; //_AED4A60EA_1898:;				
            _AED4A60EA_1898:
            ; //	asm	nop				
009DA:      	nop
            ; //_AED4A60EA_1899:;				
            _AED4A60EA_1899:
            ; //	asm	nop				
009DB:      	nop
            ; //_AED4A60EA_1900:;				
            _AED4A60EA_1900:
            ; //	asm	nop				
009DC:      	nop
            ; //_AED4A60EA_1901:;				
            _AED4A60EA_1901:
            ; //	asm	nop				
009DD:      	nop
            ; //_AED4A60EA_1902:;				
            _AED4A60EA_1902:
            ; //	asm	nop				
009DE:      	nop
            ; //_AED4A60EA_1903:;				
            _AED4A60EA_1903:
            ; //	asm	nop				
009DF:      	nop
            ; //_AED4A60EA_1904:;				
            _AED4A60EA_1904:
            ; //	asm	nop				
009E0:      	nop
            ; //_AED4A60EA_1905:;				
            _AED4A60EA_1905:
            ; //	asm	nop				
009E1:      	nop
            ; //_AED4A60EA_1906:;				
            _AED4A60EA_1906:
            ; //	asm	nop				
009E2:      	nop
            ; //_AED4A60EA_1907:;				
            _AED4A60EA_1907:
            ; //	asm	nop				
009E3:      	nop
            ; //_AED4A60EA_1908:;				
            _AED4A60EA_1908:
            ; //	asm	nop				
009E4:      	nop
            ; //_AED4A60EA_1909:;				
            _AED4A60EA_1909:
            ; //	asm	nop				
009E5:      	nop
            ; //_AED4A60EA_1910:;				
            _AED4A60EA_1910:
            ; //	asm clr io[0x09].b14;			
009E6:      	clr io[0x09].b14//
            ; //_AED4A60EA_1911:;				
            _AED4A60EA_1911:
            ; //	asm	nop				
009E7:      	nop
            ; //_AED4A60EA_1912:;				
            _AED4A60EA_1912:
            ; //	asm	nop				
009E8:      	nop
            ; //_AED4A60EA_1913:;				
            _AED4A60EA_1913:
            ; //	asm	nop				
009E9:      	nop
            ; //_AED4A60EA_1914:;				
            _AED4A60EA_1914:
            ; //	asm set io[0x09].b14;			
009EA:      	set io[0x09].b14//
            ; //_AED4A60EA_1915:;				
            _AED4A60EA_1915:
            ; //	asm	nop				
009EB:      	nop
            ; //_AED4A60EA_1916:;				
            _AED4A60EA_1916:
            ; //	asm	nop				
009EC:      	nop
            ; //_AED4A60EA_1917:;				
            _AED4A60EA_1917:
            ; //	asm	nop				
009ED:      	nop
            ; //_AED4A60EA_1918:;				
            _AED4A60EA_1918:
            ; //	asm	nop				
009EE:      	nop
            ; //_AED4A60EA_1919:;				
            _AED4A60EA_1919:
            ; //	asm	nop				
009EF:      	nop
            ; //_AED4A60EA_1920:;				
            _AED4A60EA_1920:
            ; //	asm	nop				
009F0:      	nop
            ; //_AED4A60EA_1921:;				
            _AED4A60EA_1921:
            ; //	asm	nop				
009F1:      	nop
            ; //_AED4A60EA_1922:;				
            _AED4A60EA_1922:
            ; //	asm	nop				
009F2:      	nop
            ; //_AED4A60EA_1923:;				
            _AED4A60EA_1923:
            ; //	asm	nop				
009F3:      	nop
            ; //_AED4A60EA_1924:;				
            _AED4A60EA_1924:
            ; //	asm	nop				
009F4:      	nop
            ; //_AED4A60EA_1925:;				
            _AED4A60EA_1925:
            ; //	asm	nop				
009F5:      	nop
            ; //_AED4A60EA_1926:;				
            _AED4A60EA_1926:
            ; //	asm	nop				
009F6:      	nop
            ; //_AED4A60EA_1927:;				
            _AED4A60EA_1927:
            ; //	asm clr io[0x09].b14;			
009F7:      	clr io[0x09].b14//
            ; //_AED4A60EA_1928:;				
            _AED4A60EA_1928:
            ; //	asm	nop				
009F8:      	nop
            ; //_AED4A60EA_1929:;				
            _AED4A60EA_1929:
            ; //	asm	nop				
009F9:      	nop
            ; //_AED4A60EA_1930:;				
            _AED4A60EA_1930:
            ; //	asm	nop				
009FA:      	nop
            ; //_AED4A60EA_1931:;				
            _AED4A60EA_1931:
            ; //	asm set io[0x09].b14;			
009FB:      	set io[0x09].b14//
            ; //_AED4A60EA_1932:;				
            _AED4A60EA_1932:
            ; //	asm	nop				
009FC:      	nop
            ; //_AED4A60EA_1933:;				
            _AED4A60EA_1933:
            ; //	asm	nop				
009FD:      	nop
            ; //_AED4A60EA_1934:;				
            _AED4A60EA_1934:
            ; //	asm	nop				
009FE:      	nop
            ; //_AED4A60EA_1935:;				
            _AED4A60EA_1935:
            ; //	asm	nop				
009FF:      	nop
            ; //_AED4A60EA_1936:;				
            _AED4A60EA_1936:
            ; //	asm	nop				
00A00:      	nop
            ; //_AED4A60EA_1937:;				
            _AED4A60EA_1937:
            ; //	asm	nop				
00A01:      	nop
            ; //_AED4A60EA_1938:;				
            _AED4A60EA_1938:
            ; //	asm	nop				
00A02:      	nop
            ; //_AED4A60EA_1939:;				
            _AED4A60EA_1939:
            ; //	asm	nop				
00A03:      	nop
            ; //_AED4A60EA_1940:;				
            _AED4A60EA_1940:
            ; //	asm	nop				
00A04:      	nop
            ; //_AED4A60EA_1941:;				
            _AED4A60EA_1941:
            ; //	asm	nop				
00A05:      	nop
            ; //_AED4A60EA_1942:;				
            _AED4A60EA_1942:
            ; //	asm	nop				
00A06:      	nop
            ; //_AED4A60EA_1943:;				
            _AED4A60EA_1943:
            ; //	asm	nop				
00A07:      	nop
            ; //_AED4A60EA_1944:;				
            _AED4A60EA_1944:
            ; //	asm clr io[0x09].b14;			
00A08:      	clr io[0x09].b14//
            ; //_AED4A60EA_1945:;				
            _AED4A60EA_1945:
            ; //	asm	nop				
00A09:      	nop
            ; //_AED4A60EA_1946:;				
            _AED4A60EA_1946:
            ; //	asm	nop				
00A0A:      	nop
            ; //_AED4A60EA_1947:;				
            _AED4A60EA_1947:
            ; //	asm	nop				
00A0B:      	nop
            ; //_AED4A60EA_1948:;				
            _AED4A60EA_1948:
            ; //	asm set io[0x09].b14;			
00A0C:      	set io[0x09].b14//
            ; //_AED4A60EA_1949:;				
            _AED4A60EA_1949:
            ; //	asm	nop				
00A0D:      	nop
            ; //_AED4A60EA_1950:;				
            _AED4A60EA_1950:
            ; //	asm	nop				
00A0E:      	nop
            ; //_AED4A60EA_1951:;				
            _AED4A60EA_1951:
            ; //	asm	nop				
00A0F:      	nop
            ; //_AED4A60EA_1952:;				
            _AED4A60EA_1952:
            ; //	asm	nop				
00A10:      	nop
            ; //_AED4A60EA_1953:;				
            _AED4A60EA_1953:
            ; //	asm	nop				
00A11:      	nop
            ; //_AED4A60EA_1954:;				
            _AED4A60EA_1954:
            ; //	asm	nop				
00A12:      	nop
            ; //_AED4A60EA_1955:;				
            _AED4A60EA_1955:
            ; //	asm	nop				
00A13:      	nop
            ; //_AED4A60EA_1956:;				
            _AED4A60EA_1956:
            ; //	asm	nop				
00A14:      	nop
            ; //_AED4A60EA_1957:;				
            _AED4A60EA_1957:
            ; //	asm	nop				
00A15:      	nop
            ; //_AED4A60EA_1958:;				
            _AED4A60EA_1958:
            ; //	asm	nop				
00A16:      	nop
            ; //_AED4A60EA_1959:;				
            _AED4A60EA_1959:
            ; //	asm	nop				
00A17:      	nop
            ; //_AED4A60EA_1960:;				
            _AED4A60EA_1960:
            ; //	asm	nop				
00A18:      	nop
            ; //_AED4A60EA_1961:;				
            _AED4A60EA_1961:
            ; //	asm clr io[0x09].b14;			
00A19:      	clr io[0x09].b14//
            ; //_AED4A60EA_1962:;				
            _AED4A60EA_1962:
            ; //	asm	nop				
00A1A:      	nop
            ; //_AED4A60EA_1963:;				
            _AED4A60EA_1963:
            ; //	asm	nop				
00A1B:      	nop
            ; //_AED4A60EA_1964:;				
            _AED4A60EA_1964:
            ; //	asm	nop				
00A1C:      	nop
            ; //_AED4A60EA_1965:;				
            _AED4A60EA_1965:
            ; //	asm set io[0x09].b14;			
00A1D:      	set io[0x09].b14//
            ; //_AED4A60EA_1966:;				
            _AED4A60EA_1966:
            ; //	asm	nop				
00A1E:      	nop
            ; //_AED4A60EA_1967:;				
            _AED4A60EA_1967:
            ; //	asm	nop				
00A1F:      	nop
            ; //_AED4A60EA_1968:;				
            _AED4A60EA_1968:
            ; //	asm	nop				
00A20:      	nop
            ; //_AED4A60EA_1969:;				
            _AED4A60EA_1969:
            ; //	asm	nop				
00A21:      	nop
            ; //_AED4A60EA_1970:;				
            _AED4A60EA_1970:
            ; //	asm	nop				
00A22:      	nop
            ; //_AED4A60EA_1971:;				
            _AED4A60EA_1971:
            ; //	asm	nop				
00A23:      	nop
            ; //_AED4A60EA_1972:;				
            _AED4A60EA_1972:
            ; //	asm	nop				
00A24:      	nop
            ; //_AED4A60EA_1973:;				
            _AED4A60EA_1973:
            ; //	asm	nop				
00A25:      	nop
            ; //_AED4A60EA_1974:;				
            _AED4A60EA_1974:
            ; //	asm	nop				
00A26:      	nop
            ; //_AED4A60EA_1975:;				
            _AED4A60EA_1975:
            ; //	asm	nop				
00A27:      	nop
            ; //_AED4A60EA_1976:;				
            _AED4A60EA_1976:
            ; //	asm	nop				
00A28:      	nop
            ; //_AED4A60EA_1977:;				
            _AED4A60EA_1977:
            ; //	asm	nop				
00A29:      	nop
            ; //_AED4A60EA_1978:;				
            _AED4A60EA_1978:
            ; //	asm clr io[0x09].b14;			
00A2A:      	clr io[0x09].b14//
            ; //_AED4A60EA_1979:;				
            _AED4A60EA_1979:
            ; //	asm	nop				
00A2B:      	nop
            ; //_AED4A60EA_1980:;				
            _AED4A60EA_1980:
            ; //	asm	nop				
00A2C:      	nop
            ; //_AED4A60EA_1981:;				
            _AED4A60EA_1981:
            ; //	asm	nop				
00A2D:      	nop
            ; //_AED4A60EA_1982:;				
            _AED4A60EA_1982:
            ; //	asm set io[0x09].b14;			
00A2E:      	set io[0x09].b14//
            ; //_AED4A60EA_1983:;				
            _AED4A60EA_1983:
            ; //	asm	nop				
00A2F:      	nop
            ; //_AED4A60EA_1984:;				
            _AED4A60EA_1984:
            ; //	asm	nop				
00A30:      	nop
            ; //_AED4A60EA_1985:;				
            _AED4A60EA_1985:
            ; //	asm	nop				
00A31:      	nop
            ; //_AED4A60EA_1986:;				
            _AED4A60EA_1986:
            ; //	asm	nop				
00A32:      	nop
            ; //_AED4A60EA_1987:;				
            _AED4A60EA_1987:
            ; //	asm	nop				
00A33:      	nop
            ; //_AED4A60EA_1988:;				
            _AED4A60EA_1988:
            ; //	asm	nop				
00A34:      	nop
            ; //_AED4A60EA_1989:;				
            _AED4A60EA_1989:
            ; //	asm	nop				
00A35:      	nop
            ; //_AED4A60EA_1990:;				
            _AED4A60EA_1990:
            ; //	asm	nop				
00A36:      	nop
            ; //_AED4A60EA_1991:;				
            _AED4A60EA_1991:
            ; //	asm	nop				
00A37:      	nop
            ; //_AED4A60EA_1992:;				
            _AED4A60EA_1992:
            ; //	asm	nop				
00A38:      	nop
            ; //_AED4A60EA_1993:;				
            _AED4A60EA_1993:
            ; //	asm	nop				
00A39:      	nop
            ; //_AED4A60EA_1994:;				
            _AED4A60EA_1994:
            ; //	asm	nop				
00A3A:      	nop
            ; //_AED4A60EA_1995:;				
            _AED4A60EA_1995:
            ; //	asm clr io[0x09].b14;			
00A3B:      	clr io[0x09].b14//
            ; //_AED4A60EA_1996:;				
            _AED4A60EA_1996:
            ; //	asm	nop				
00A3C:      	nop
            ; //_AED4A60EA_1997:;				
            _AED4A60EA_1997:
            ; //	asm	nop				
00A3D:      	nop
            ; //_AED4A60EA_1998:;				
            _AED4A60EA_1998:
            ; //	asm	nop				
00A3E:      	nop
            ; //_AED4A60EA_1999:;				
            _AED4A60EA_1999:
            ; //	asm set io[0x09].b14;			
00A3F:      	set io[0x09].b14//
            ; //_AED4A60EA_2000:;				
            _AED4A60EA_2000:
            ; //	asm	nop				
00A40:      	nop
            ; //_AED4A60EA_2001:;				
            _AED4A60EA_2001:
            ; //	asm	nop				
00A41:      	nop
            ; //_AED4A60EA_2002:;				
            _AED4A60EA_2002:
            ; //	asm	nop				
00A42:      	nop
            ; //_AED4A60EA_2003:;				
            _AED4A60EA_2003:
            ; //	asm	nop				
00A43:      	nop
            ; //_AED4A60EA_2004:;				
            _AED4A60EA_2004:
            ; //	asm	nop				
00A44:      	nop
            ; //_AED4A60EA_2005:;				
            _AED4A60EA_2005:
            ; //	asm	nop				
00A45:      	nop
            ; //_AED4A60EA_2006:;				
            _AED4A60EA_2006:
            ; //	asm	nop				
00A46:      	nop
            ; //_AED4A60EA_2007:;				
            _AED4A60EA_2007:
            ; //	asm	nop				
00A47:      	nop
            ; //_AED4A60EA_2008:;				
            _AED4A60EA_2008:
            ; //	asm	nop				
00A48:      	nop
            ; //_AED4A60EA_2009:;				
            _AED4A60EA_2009:
            ; //	asm	nop				
00A49:      	nop
            ; //_AED4A60EA_2010:;				
            _AED4A60EA_2010:
            ; //	asm	nop				
00A4A:      	nop
            ; //_AED4A60EA_2011:;				
            _AED4A60EA_2011:
            ; //	asm	nop				
00A4B:      	nop
            ; //_AED4A60EA_2012:;				
            _AED4A60EA_2012:
            ; //	asm clr io[0x09].b14;			
00A4C:      	clr io[0x09].b14//
            ; //_AED4A60EA_2013:;				
            _AED4A60EA_2013:
            ; //	asm	nop				
00A4D:      	nop
            ; //_AED4A60EA_2014:;				
            _AED4A60EA_2014:
            ; //	asm	nop				
00A4E:      	nop
            ; //_AED4A60EA_2015:;				
            _AED4A60EA_2015:
            ; //	asm	nop				
00A4F:      	nop
            ; //_AED4A60EA_2016:;				
            _AED4A60EA_2016:
            ; //	asm set io[0x09].b14;			
00A50:      	set io[0x09].b14//
            ; //_AED4A60EA_2017:;				
            _AED4A60EA_2017:
            ; //	asm	nop				
00A51:      	nop
            ; //_AED4A60EA_2018:;				
            _AED4A60EA_2018:
            ; //	asm	nop				
00A52:      	nop
            ; //_AED4A60EA_2019:;				
            _AED4A60EA_2019:
            ; //	asm	nop				
00A53:      	nop
            ; //_AED4A60EA_2020:;				
            _AED4A60EA_2020:
            ; //	asm	nop				
00A54:      	nop
            ; //_AED4A60EA_2021:;				
            _AED4A60EA_2021:
            ; //	asm	nop				
00A55:      	nop
            ; //_AED4A60EA_2022:;				
            _AED4A60EA_2022:
            ; //	asm	nop				
00A56:      	nop
            ; //_AED4A60EA_2023:;				
            _AED4A60EA_2023:
            ; //	asm	nop				
00A57:      	nop
            ; //_AED4A60EA_2024:;				
            _AED4A60EA_2024:
            ; //	asm	nop				
00A58:      	nop
            ; //_AED4A60EA_2025:;				
            _AED4A60EA_2025:
            ; //	asm	nop				
00A59:      	nop
            ; //_AED4A60EA_2026:;				
            _AED4A60EA_2026:
            ; //	asm	nop				
00A5A:      	nop
            ; //_AED4A60EA_2027:;				
            _AED4A60EA_2027:
            ; //	asm	nop				
00A5B:      	nop
            ; //_AED4A60EA_2028:;				
            _AED4A60EA_2028:
            ; //	asm	nop				
00A5C:      	nop
            ; //_AED4A60EA_2029:;				
            _AED4A60EA_2029:
            ; //	asm clr io[0x09].b14;			
00A5D:      	clr io[0x09].b14//
            ; //_AED4A60EA_2030:;				
            _AED4A60EA_2030:
            ; //	asm	nop				
00A5E:      	nop
            ; //_AED4A60EA_2031:;				
            _AED4A60EA_2031:
            ; //	asm	nop				
00A5F:      	nop
            ; //_AED4A60EA_2032:;				
            _AED4A60EA_2032:
            ; //	asm	nop				
00A60:      	nop
            ; //_AED4A60EA_2033:;				
            _AED4A60EA_2033:
            ; //	asm set io[0x09].b14;			
00A61:      	set io[0x09].b14//
            ; //_AED4A60EA_2034:;				
            _AED4A60EA_2034:
            ; //	asm	nop				
00A62:      	nop
            ; //_AED4A60EA_2035:;				
            _AED4A60EA_2035:
            ; //	asm	nop				
00A63:      	nop
            ; //_AED4A60EA_2036:;				
            _AED4A60EA_2036:
            ; //	asm	nop				
00A64:      	nop
            ; //_AED4A60EA_2037:;				
            _AED4A60EA_2037:
            ; //	asm	nop				
00A65:      	nop
            ; //_AED4A60EA_2038:;				
            _AED4A60EA_2038:
            ; //	asm	nop				
00A66:      	nop
            ; //_AED4A60EA_2039:;				
            _AED4A60EA_2039:
            ; //	asm	nop				
00A67:      	nop
            ; //_AED4A60EA_2040:;				
            _AED4A60EA_2040:
            ; //	asm	nop				
00A68:      	nop
            ; //_AED4A60EA_2041:;				
            _AED4A60EA_2041:
            ; //	asm	nop				
00A69:      	nop
            ; //_AED4A60EA_2042:;				
            _AED4A60EA_2042:
            ; //	asm	nop				
00A6A:      	nop
            ; //_AED4A60EA_2043:;				
            _AED4A60EA_2043:
            ; //	asm	nop				
00A6B:      	nop
            ; //_AED4A60EA_2044:;				
            _AED4A60EA_2044:
            ; //	asm	nop				
00A6C:      	nop
            ; //_AED4A60EA_2045:;				
            _AED4A60EA_2045:
            ; //	asm	nop				
00A6D:      	nop
            ; //_AED4A60EA_2046:;				
            _AED4A60EA_2046:
            ; //	asm clr io[0x09].b14;			
00A6E:      	clr io[0x09].b14//
            ; //_AED4A60EA_2047:;				
            _AED4A60EA_2047:
            ; //	asm	nop				
00A6F:      	nop
            ; //_AED4A60EA_2048:;				
            _AED4A60EA_2048:
            ; //	asm	nop				
00A70:      	nop
            ; //_AED4A60EA_2049:;				
            _AED4A60EA_2049:
            ; //	asm	nop				
00A71:      	nop
            ; //_AED4A60EA_2050:;				
            _AED4A60EA_2050:
            ; //	asm set io[0x09].b14;			
00A72:      	set io[0x09].b14//
            ; //_AED4A60EA_2051:;				
            _AED4A60EA_2051:
            ; //	asm	nop				
00A73:      	nop
            ; //_AED4A60EA_2052:;				
            _AED4A60EA_2052:
            ; //	asm	nop				
00A74:      	nop
            ; //_AED4A60EA_2053:;				
            _AED4A60EA_2053:
            ; //	asm	nop				
00A75:      	nop
            ; //_AED4A60EA_2054:;				
            _AED4A60EA_2054:
            ; //	asm	nop				
00A76:      	nop
            ; //_AED4A60EA_2055:;				
            _AED4A60EA_2055:
            ; //	asm	nop				
00A77:      	nop
            ; //_AED4A60EA_2056:;				
            _AED4A60EA_2056:
            ; //	asm	nop				
00A78:      	nop
            ; //_AED4A60EA_2057:;				
            _AED4A60EA_2057:
            ; //	asm	nop				
00A79:      	nop
            ; //_AED4A60EA_2058:;				
            _AED4A60EA_2058:
            ; //	asm	nop				
00A7A:      	nop
            ; //_AED4A60EA_2059:;				
            _AED4A60EA_2059:
            ; //	asm	nop				
00A7B:      	nop
            ; //_AED4A60EA_2060:;				
            _AED4A60EA_2060:
            ; //	asm	nop				
00A7C:      	nop
            ; //_AED4A60EA_2061:;				
            _AED4A60EA_2061:
            ; //	asm	nop				
00A7D:      	nop
            ; //_AED4A60EA_2062:;				
            _AED4A60EA_2062:
            ; //	asm	nop				
00A7E:      	nop
            ; //_AED4A60EA_2063:;				
            _AED4A60EA_2063:
            ; //	asm clr io[0x09].b14;			
00A7F:      	clr io[0x09].b14//
            ; //_AED4A60EA_2064:;				
            _AED4A60EA_2064:
            ; //	asm	nop				
00A80:      	nop
            ; //_AED4A60EA_2065:;				
            _AED4A60EA_2065:
            ; //	asm	nop				
00A81:      	nop
            ; //_AED4A60EA_2066:;				
            _AED4A60EA_2066:
            ; //	asm	nop				
00A82:      	nop
            ; //_AED4A60EA_2067:;				
            _AED4A60EA_2067:
            ; //	asm set io[0x09].b14;			
00A83:      	set io[0x09].b14//
            ; //_AED4A60EA_2068:;				
            _AED4A60EA_2068:
            ; //	asm	nop				
00A84:      	nop
            ; //_AED4A60EA_2069:;				
            _AED4A60EA_2069:
            ; //	asm	nop				
00A85:      	nop
            ; //_AED4A60EA_2070:;				
            _AED4A60EA_2070:
            ; //	asm	nop				
00A86:      	nop
            ; //_AED4A60EA_2071:;				
            _AED4A60EA_2071:
            ; //	asm	nop				
00A87:      	nop
            ; //_AED4A60EA_2072:;				
            _AED4A60EA_2072:
            ; //	asm	nop				
00A88:      	nop
            ; //_AED4A60EA_2073:;				
            _AED4A60EA_2073:
            ; //	asm	nop				
00A89:      	nop
            ; //_AED4A60EA_2074:;				
            _AED4A60EA_2074:
            ; //	asm	nop				
00A8A:      	nop
            ; //_AED4A60EA_2075:;				
            _AED4A60EA_2075:
            ; //	asm	nop				
00A8B:      	nop
            ; //_AED4A60EA_2076:;				
            _AED4A60EA_2076:
            ; //	asm	nop				
00A8C:      	nop
            ; //_AED4A60EA_2077:;				
            _AED4A60EA_2077:
            ; //	asm	nop				
00A8D:      	nop
            ; //_AED4A60EA_2078:;				
            _AED4A60EA_2078:
            ; //	asm	nop				
00A8E:      	nop
            ; //_AED4A60EA_2079:;				
            _AED4A60EA_2079:
            ; //	asm	nop				
00A8F:      	nop
            ; //_AED4A60EA_2080:;				
            _AED4A60EA_2080:
            ; //	asm clr io[0x09].b14;			
00A90:      	clr io[0x09].b14//
            ; //_AED4A60EA_2081:;				
            _AED4A60EA_2081:
            ; //	asm	nop				
00A91:      	nop
            ; //_AED4A60EA_2082:;				
            _AED4A60EA_2082:
            ; //	asm	nop				
00A92:      	nop
            ; //_AED4A60EA_2083:;				
            _AED4A60EA_2083:
            ; //	asm	nop				
00A93:      	nop
            ; //_AED4A60EA_2084:;				
            _AED4A60EA_2084:
            ; //	asm set io[0x09].b14;			
00A94:      	set io[0x09].b14//
            ; //_AED4A60EA_2085:;				
            _AED4A60EA_2085:
            ; //	asm	nop				
00A95:      	nop
            ; //_AED4A60EA_2086:;				
            _AED4A60EA_2086:
            ; //	asm	nop				
00A96:      	nop
            ; //_AED4A60EA_2087:;				
            _AED4A60EA_2087:
            ; //	asm	nop				
00A97:      	nop
            ; //_AED4A60EA_2088:;				
            _AED4A60EA_2088:
            ; //	asm	nop				
00A98:      	nop
            ; //_AED4A60EA_2089:;				
            _AED4A60EA_2089:
            ; //	asm	nop				
00A99:      	nop
            ; //_AED4A60EA_2090:;				
            _AED4A60EA_2090:
            ; //	asm	nop				
00A9A:      	nop
            ; //_AED4A60EA_2091:;				
            _AED4A60EA_2091:
            ; //	asm	nop				
00A9B:      	nop
            ; //_AED4A60EA_2092:;				
            _AED4A60EA_2092:
            ; //	asm	nop				
00A9C:      	nop
            ; //_AED4A60EA_2093:;				
            _AED4A60EA_2093:
            ; //	asm	nop				
00A9D:      	nop
            ; //_AED4A60EA_2094:;				
            _AED4A60EA_2094:
            ; //	asm	nop				
00A9E:      	nop
            ; //_AED4A60EA_2095:;				
            _AED4A60EA_2095:
            ; //	asm	nop				
00A9F:      	nop
            ; //_AED4A60EA_2096:;				
            _AED4A60EA_2096:
            ; //	asm	nop				
00AA0:      	nop
            ; //_AED4A60EA_2097:;				
            _AED4A60EA_2097:
            ; //	asm clr io[0x09].b14;			
00AA1:      	clr io[0x09].b14//
            ; //_AED4A60EA_2098:;				
            _AED4A60EA_2098:
            ; //	asm	nop				
00AA2:      	nop
            ; //_AED4A60EA_2099:;				
            _AED4A60EA_2099:
            ; //	asm	nop				
00AA3:      	nop
            ; //_AED4A60EA_2100:;				
            _AED4A60EA_2100:
            ; //	asm	nop				
00AA4:      	nop
            ; //_AED4A60EA_2101:;				
            _AED4A60EA_2101:
            ; //	asm set io[0x09].b14;			
00AA5:      	set io[0x09].b14//
            ; //_AED4A60EA_2102:;				
            _AED4A60EA_2102:
            ; //	asm	nop				
00AA6:      	nop
            ; //_AED4A60EA_2103:;				
            _AED4A60EA_2103:
            ; //	asm	nop				
00AA7:      	nop
            ; //_AED4A60EA_2104:;				
            _AED4A60EA_2104:
            ; //	asm	nop				
00AA8:      	nop
            ; //_AED4A60EA_2105:;				
            _AED4A60EA_2105:
            ; //	asm	nop				
00AA9:      	nop
            ; //_AED4A60EA_2106:;				
            _AED4A60EA_2106:
            ; //	asm	nop				
00AAA:      	nop
            ; //_AED4A60EA_2107:;				
            _AED4A60EA_2107:
            ; //	asm	nop				
00AAB:      	nop
            ; //_AED4A60EA_2108:;				
            _AED4A60EA_2108:
            ; //	asm	nop				
00AAC:      	nop
            ; //_AED4A60EA_2109:;				
            _AED4A60EA_2109:
            ; //	asm	nop				
00AAD:      	nop
            ; //_AED4A60EA_2110:;				
            _AED4A60EA_2110:
            ; //	asm	nop				
00AAE:      	nop
            ; //_AED4A60EA_2111:;				
            _AED4A60EA_2111:
            ; //	asm	nop				
00AAF:      	nop
            ; //_AED4A60EA_2112:;				
            _AED4A60EA_2112:
            ; //	asm	nop				
00AB0:      	nop
            ; //_AED4A60EA_2113:;				
            _AED4A60EA_2113:
            ; //	asm	nop				
00AB1:      	nop
            ; //_AED4A60EA_2114:;				
            _AED4A60EA_2114:
            ; //	asm clr io[0x09].b14;			
00AB2:      	clr io[0x09].b14//
            ; //_AED4A60EA_2115:;				
            _AED4A60EA_2115:
            ; //	asm	nop				
00AB3:      	nop
            ; //_AED4A60EA_2116:;				
            _AED4A60EA_2116:
            ; //	asm	nop				
00AB4:      	nop
            ; //_AED4A60EA_2117:;				
            _AED4A60EA_2117:
            ; //	asm	nop				
00AB5:      	nop
            ; //_AED4A60EA_2118:;				
            _AED4A60EA_2118:
            ; //	asm set io[0x09].b14;			
00AB6:      	set io[0x09].b14//
            ; //_AED4A60EA_2119:;				
            _AED4A60EA_2119:
            ; //	asm	nop				
00AB7:      	nop
            ; //_AED4A60EA_2120:;				
            _AED4A60EA_2120:
            ; //	asm	nop				
00AB8:      	nop
            ; //_AED4A60EA_2121:;				
            _AED4A60EA_2121:
            ; //	asm	nop				
00AB9:      	nop
            ; //_AED4A60EA_2122:;				
            _AED4A60EA_2122:
            ; //	asm	nop				
00ABA:      	nop
            ; //_AED4A60EA_2123:;				
            _AED4A60EA_2123:
            ; //	asm	nop				
00ABB:      	nop
            ; //_AED4A60EA_2124:;				
            _AED4A60EA_2124:
            ; //	asm	nop				
00ABC:      	nop
            ; //_AED4A60EA_2125:;				
            _AED4A60EA_2125:
            ; //	asm	nop				
00ABD:      	nop
            ; //_AED4A60EA_2126:;				
            _AED4A60EA_2126:
            ; //	asm	nop				
00ABE:      	nop
            ; //_AED4A60EA_2127:;				
            _AED4A60EA_2127:
            ; //	asm	nop				
00ABF:      	nop
            ; //_AED4A60EA_2128:;				
            _AED4A60EA_2128:
            ; //	asm	nop				
00AC0:      	nop
            ; //_AED4A60EA_2129:;				
            _AED4A60EA_2129:
            ; //	asm	nop				
00AC1:      	nop
            ; //_AED4A60EA_2130:;				
            _AED4A60EA_2130:
            ; //	asm	nop				
00AC2:      	nop
            ; //_AED4A60EA_2131:;				
            _AED4A60EA_2131:
            ; //	asm clr io[0x09].b14;			
00AC3:      	clr io[0x09].b14//
            ; //_AED4A60EA_2132:;				
            _AED4A60EA_2132:
            ; //	asm	nop				
00AC4:      	nop
            ; //_AED4A60EA_2133:;				
            _AED4A60EA_2133:
            ; //	asm	nop				
00AC5:      	nop
            ; //_AED4A60EA_2134:;				
            _AED4A60EA_2134:
            ; //	asm	nop				
00AC6:      	nop
            ; //_AED4A60EA_2135:;				
            _AED4A60EA_2135:
            ; //	asm set io[0x09].b14;			
00AC7:      	set io[0x09].b14//
            ; //_AED4A60EA_2136:;				
            _AED4A60EA_2136:
            ; //	asm	nop				
00AC8:      	nop
            ; //_AED4A60EA_2137:;				
            _AED4A60EA_2137:
            ; //	asm	nop				
00AC9:      	nop
            ; //_AED4A60EA_2138:;				
            _AED4A60EA_2138:
            ; //	asm	nop				
00ACA:      	nop
            ; //_AED4A60EA_2139:;				
            _AED4A60EA_2139:
            ; //	asm	nop				
00ACB:      	nop
            ; //_AED4A60EA_2140:;				
            _AED4A60EA_2140:
            ; //	asm	nop				
00ACC:      	nop
            ; //_AED4A60EA_2141:;				
            _AED4A60EA_2141:
            ; //	asm	nop				
00ACD:      	nop
            ; //_AED4A60EA_2142:;				
            _AED4A60EA_2142:
            ; //	asm	nop				
00ACE:      	nop
            ; //_AED4A60EA_2143:;				
            _AED4A60EA_2143:
            ; //	asm	nop				
00ACF:      	nop
            ; //_AED4A60EA_2144:;				
            _AED4A60EA_2144:
            ; //	asm	nop				
00AD0:      	nop
            ; //_AED4A60EA_2145:;				
            _AED4A60EA_2145:
            ; //	asm	nop				
00AD1:      	nop
            ; //_AED4A60EA_2146:;				
            _AED4A60EA_2146:
            ; //	asm	nop				
00AD2:      	nop
            ; //_AED4A60EA_2147:;				
            _AED4A60EA_2147:
            ; //	asm	nop				
00AD3:      	nop
            ; //_AED4A60EA_2148:;				
            _AED4A60EA_2148:
            ; //	asm clr io[0x09].b14;			
00AD4:      	clr io[0x09].b14//
            ; //_AED4A60EA_2149:;				
            _AED4A60EA_2149:
            ; //	asm	nop				
00AD5:      	nop
            ; //_AED4A60EA_2150:;				
            _AED4A60EA_2150:
            ; //	asm	nop				
00AD6:      	nop
            ; //_AED4A60EA_2151:;				
            _AED4A60EA_2151:
            ; //	asm	nop				
00AD7:      	nop
            ; //_AED4A60EA_2152:;				
            _AED4A60EA_2152:
            ; //	asm set io[0x09].b14;			
00AD8:      	set io[0x09].b14//
            ; //_AED4A60EA_2153:;				
            _AED4A60EA_2153:
            ; //	asm	nop				
00AD9:      	nop
            ; //_AED4A60EA_2154:;				
            _AED4A60EA_2154:
            ; //	asm	nop				
00ADA:      	nop
            ; //_AED4A60EA_2155:;				
            _AED4A60EA_2155:
            ; //	asm	nop				
00ADB:      	nop
            ; //_AED4A60EA_2156:;				
            _AED4A60EA_2156:
            ; //	asm	nop				
00ADC:      	nop
            ; //_AED4A60EA_2157:;				
            _AED4A60EA_2157:
            ; //	asm	nop				
00ADD:      	nop
            ; //_AED4A60EA_2158:;				
            _AED4A60EA_2158:
            ; //	asm	nop				
00ADE:      	nop
            ; //_AED4A60EA_2159:;				
            _AED4A60EA_2159:
            ; //	asm	nop				
00ADF:      	nop
            ; //_AED4A60EA_2160:;				
            _AED4A60EA_2160:
            ; //	asm	nop				
00AE0:      	nop
            ; //_AED4A60EA_2161:;				
            _AED4A60EA_2161:
            ; //	asm	nop				
00AE1:      	nop
            ; //_AED4A60EA_2162:;				
            _AED4A60EA_2162:
            ; //	asm	nop				
00AE2:      	nop
            ; //_AED4A60EA_2163:;				
            _AED4A60EA_2163:
            ; //	asm	nop				
00AE3:      	nop
            ; //_AED4A60EA_2164:;				
            _AED4A60EA_2164:
            ; //	asm	nop				
00AE4:      	nop
            ; //_AED4A60EA_2165:;				
            _AED4A60EA_2165:
            ; //	asm clr io[0x09].b14;			
00AE5:      	clr io[0x09].b14//
            ; //_AED4A60EA_2166:;				
            _AED4A60EA_2166:
            ; //	asm	nop				
00AE6:      	nop
            ; //_AED4A60EA_2167:;				
            _AED4A60EA_2167:
            ; //	asm	nop				
00AE7:      	nop
            ; //_AED4A60EA_2168:;				
            _AED4A60EA_2168:
            ; //	asm	nop				
00AE8:      	nop
            ; //_AED4A60EA_2169:;				
            _AED4A60EA_2169:
            ; //	goto LD63FD439_50;			
00AE9:      	pch =	LD63FD439_50
00AEA:      	ljmp	LD63FD439_50
            ; //LD63FD439_57:;					
            LD63FD439_57:
            ; //_AED4A60EA_2170:;				
            _AED4A60EA_2170:
            ; //	asm set io[0x09].b14;			
00AEB:      	set io[0x09].b14//
            ; //_AED4A60EA_2171:;				
            _AED4A60EA_2171:
            ; //	asm	nop				
00AEC:      	nop
            ; //_AED4A60EA_2172:;				
            _AED4A60EA_2172:
            ; //	asm	nop				
00AED:      	nop
            ; //_AED4A60EA_2173:;				
            _AED4A60EA_2173:
            ; //	asm	nop				
00AEE:      	nop
            ; //_AED4A60EA_2174:;				
            _AED4A60EA_2174:
            ; //	asm clr io[0x09].b14;			
00AEF:      	clr io[0x09].b14//
            ; //_AED4A60EA_2175:;				
            _AED4A60EA_2175:
            ; //	asm	nop				
00AF0:      	nop
            ; //_AED4A60EA_2176:;				
            _AED4A60EA_2176:
            ; //	asm	nop				
00AF1:      	nop
            ; //_AED4A60EA_2177:;				
            _AED4A60EA_2177:
            ; //	asm	nop				
00AF2:      	nop
            ; //_AED4A60EA_2178:;				
            _AED4A60EA_2178:
            ; //	asm	nop				
00AF3:      	nop
            ; //_AED4A60EA_2179:;				
            _AED4A60EA_2179:
            ; //	asm	nop				
00AF4:      	nop
            ; //_AED4A60EA_2180:;				
            _AED4A60EA_2180:
            ; //	asm	nop				
00AF5:      	nop
            ; //_AED4A60EA_2181:;				
            _AED4A60EA_2181:
            ; //	asm	nop				
00AF6:      	nop
            ; //_AED4A60EA_2182:;				
            _AED4A60EA_2182:
            ; //	asm	nop				
00AF7:      	nop
            ; //_AED4A60EA_2183:;				
            _AED4A60EA_2183:
            ; //	asm	nop				
00AF8:      	nop
            ; //_AED4A60EA_2184:;				
            _AED4A60EA_2184:
            ; //	asm	nop				
00AF9:      	nop
            ; //_AED4A60EA_2185:;				
            _AED4A60EA_2185:
            ; //	asm	nop				
00AFA:      	nop
            ; //_AED4A60EA_2186:;				
            _AED4A60EA_2186:
            ; //	asm	nop				
00AFB:      	nop
            ; //_AED4A60EA_2187:;				
            _AED4A60EA_2187:
            ; //	asm set io[0x09].b14;			
00AFC:      	set io[0x09].b14//
            ; //_AED4A60EA_2188:;				
            _AED4A60EA_2188:
            ; //	asm	nop				
00AFD:      	nop
            ; //_AED4A60EA_2189:;				
            _AED4A60EA_2189:
            ; //	asm	nop				
00AFE:      	nop
            ; //_AED4A60EA_2190:;				
            _AED4A60EA_2190:
            ; //	asm	nop				
00AFF:      	nop
            ; //_AED4A60EA_2191:;				
            _AED4A60EA_2191:
            ; //	asm clr io[0x09].b14;			
00B00:      	clr io[0x09].b14//
            ; //_AED4A60EA_2192:;				
            _AED4A60EA_2192:
            ; //	asm	nop				
00B01:      	nop
            ; //_AED4A60EA_2193:;				
            _AED4A60EA_2193:
            ; //	asm	nop				
00B02:      	nop
            ; //_AED4A60EA_2194:;				
            _AED4A60EA_2194:
            ; //	asm	nop				
00B03:      	nop
            ; //_AED4A60EA_2195:;				
            _AED4A60EA_2195:
            ; //	asm	nop				
00B04:      	nop
            ; //_AED4A60EA_2196:;				
            _AED4A60EA_2196:
            ; //	asm	nop				
00B05:      	nop
            ; //_AED4A60EA_2197:;				
            _AED4A60EA_2197:
            ; //	asm	nop				
00B06:      	nop
            ; //_AED4A60EA_2198:;				
            _AED4A60EA_2198:
            ; //	asm	nop				
00B07:      	nop
            ; //_AED4A60EA_2199:;				
            _AED4A60EA_2199:
            ; //	asm	nop				
00B08:      	nop
            ; //_AED4A60EA_2200:;				
            _AED4A60EA_2200:
            ; //	asm	nop				
00B09:      	nop
            ; //_AED4A60EA_2201:;				
            _AED4A60EA_2201:
            ; //	asm	nop				
00B0A:      	nop
            ; //_AED4A60EA_2202:;				
            _AED4A60EA_2202:
            ; //	asm	nop				
00B0B:      	nop
            ; //_AED4A60EA_2203:;				
            _AED4A60EA_2203:
            ; //	asm	nop				
00B0C:      	nop
            ; //_AED4A60EA_2204:;				
            _AED4A60EA_2204:
            ; //	asm set io[0x09].b14;			
00B0D:      	set io[0x09].b14//
            ; //_AED4A60EA_2205:;				
            _AED4A60EA_2205:
            ; //	asm	nop				
00B0E:      	nop
            ; //_AED4A60EA_2206:;				
            _AED4A60EA_2206:
            ; //	asm	nop				
00B0F:      	nop
            ; //_AED4A60EA_2207:;				
            _AED4A60EA_2207:
            ; //	asm	nop				
00B10:      	nop
            ; //_AED4A60EA_2208:;				
            _AED4A60EA_2208:
            ; //	asm clr io[0x09].b14;			
00B11:      	clr io[0x09].b14//
            ; //_AED4A60EA_2209:;				
            _AED4A60EA_2209:
            ; //	asm	nop				
00B12:      	nop
            ; //_AED4A60EA_2210:;				
            _AED4A60EA_2210:
            ; //	asm	nop				
00B13:      	nop
            ; //_AED4A60EA_2211:;				
            _AED4A60EA_2211:
            ; //	asm	nop				
00B14:      	nop
            ; //_AED4A60EA_2212:;				
            _AED4A60EA_2212:
            ; //	asm	nop				
00B15:      	nop
            ; //_AED4A60EA_2213:;				
            _AED4A60EA_2213:
            ; //	asm	nop				
00B16:      	nop
            ; //_AED4A60EA_2214:;				
            _AED4A60EA_2214:
            ; //	asm	nop				
00B17:      	nop
            ; //_AED4A60EA_2215:;				
            _AED4A60EA_2215:
            ; //	asm	nop				
00B18:      	nop
            ; //_AED4A60EA_2216:;				
            _AED4A60EA_2216:
            ; //	asm	nop				
00B19:      	nop
            ; //_AED4A60EA_2217:;				
            _AED4A60EA_2217:
            ; //	asm	nop				
00B1A:      	nop
            ; //_AED4A60EA_2218:;				
            _AED4A60EA_2218:
            ; //	asm	nop				
00B1B:      	nop
            ; //_AED4A60EA_2219:;				
            _AED4A60EA_2219:
            ; //	asm	nop				
00B1C:      	nop
            ; //_AED4A60EA_2220:;				
            _AED4A60EA_2220:
            ; //	asm	nop				
00B1D:      	nop
            ; //_AED4A60EA_2221:;				
            _AED4A60EA_2221:
            ; //	asm set io[0x09].b14;			
00B1E:      	set io[0x09].b14//
            ; //_AED4A60EA_2222:;				
            _AED4A60EA_2222:
            ; //	asm	nop				
00B1F:      	nop
            ; //_AED4A60EA_2223:;				
            _AED4A60EA_2223:
            ; //	asm	nop				
00B20:      	nop
            ; //_AED4A60EA_2224:;				
            _AED4A60EA_2224:
            ; //	asm	nop				
00B21:      	nop
            ; //_AED4A60EA_2225:;				
            _AED4A60EA_2225:
            ; //	asm clr io[0x09].b14;			
00B22:      	clr io[0x09].b14//
            ; //_AED4A60EA_2226:;				
            _AED4A60EA_2226:
            ; //	asm	nop				
00B23:      	nop
            ; //_AED4A60EA_2227:;				
            _AED4A60EA_2227:
            ; //	asm	nop				
00B24:      	nop
            ; //_AED4A60EA_2228:;				
            _AED4A60EA_2228:
            ; //	asm	nop				
00B25:      	nop
            ; //_AED4A60EA_2229:;				
            _AED4A60EA_2229:
            ; //	asm	nop				
00B26:      	nop
            ; //_AED4A60EA_2230:;				
            _AED4A60EA_2230:
            ; //	asm	nop				
00B27:      	nop
            ; //_AED4A60EA_2231:;				
            _AED4A60EA_2231:
            ; //	asm	nop				
00B28:      	nop
            ; //_AED4A60EA_2232:;				
            _AED4A60EA_2232:
            ; //	asm	nop				
00B29:      	nop
            ; //_AED4A60EA_2233:;				
            _AED4A60EA_2233:
            ; //	asm	nop				
00B2A:      	nop
            ; //_AED4A60EA_2234:;				
            _AED4A60EA_2234:
            ; //	asm	nop				
00B2B:      	nop
            ; //_AED4A60EA_2235:;				
            _AED4A60EA_2235:
            ; //	asm	nop				
00B2C:      	nop
            ; //_AED4A60EA_2236:;				
            _AED4A60EA_2236:
            ; //	asm	nop				
00B2D:      	nop
            ; //_AED4A60EA_2237:;				
            _AED4A60EA_2237:
            ; //	asm	nop				
00B2E:      	nop
            ; //_AED4A60EA_2238:;				
            _AED4A60EA_2238:
            ; //	asm set io[0x09].b14;			
00B2F:      	set io[0x09].b14//
            ; //_AED4A60EA_2239:;				
            _AED4A60EA_2239:
            ; //	asm	nop				
00B30:      	nop
            ; //_AED4A60EA_2240:;				
            _AED4A60EA_2240:
            ; //	asm	nop				
00B31:      	nop
            ; //_AED4A60EA_2241:;				
            _AED4A60EA_2241:
            ; //	asm	nop				
00B32:      	nop
            ; //_AED4A60EA_2242:;				
            _AED4A60EA_2242:
            ; //	asm clr io[0x09].b14;			
00B33:      	clr io[0x09].b14//
            ; //_AED4A60EA_2243:;				
            _AED4A60EA_2243:
            ; //	asm	nop				
00B34:      	nop
            ; //_AED4A60EA_2244:;				
            _AED4A60EA_2244:
            ; //	asm	nop				
00B35:      	nop
            ; //_AED4A60EA_2245:;				
            _AED4A60EA_2245:
            ; //	asm	nop				
00B36:      	nop
            ; //_AED4A60EA_2246:;				
            _AED4A60EA_2246:
            ; //	asm	nop				
00B37:      	nop
            ; //_AED4A60EA_2247:;				
            _AED4A60EA_2247:
            ; //	asm	nop				
00B38:      	nop
            ; //_AED4A60EA_2248:;				
            _AED4A60EA_2248:
            ; //	asm	nop				
00B39:      	nop
            ; //_AED4A60EA_2249:;				
            _AED4A60EA_2249:
            ; //	asm	nop				
00B3A:      	nop
            ; //_AED4A60EA_2250:;				
            _AED4A60EA_2250:
            ; //	asm	nop				
00B3B:      	nop
            ; //_AED4A60EA_2251:;				
            _AED4A60EA_2251:
            ; //	asm	nop				
00B3C:      	nop
            ; //_AED4A60EA_2252:;				
            _AED4A60EA_2252:
            ; //	asm	nop				
00B3D:      	nop
            ; //_AED4A60EA_2253:;				
            _AED4A60EA_2253:
            ; //	asm	nop				
00B3E:      	nop
            ; //_AED4A60EA_2254:;				
            _AED4A60EA_2254:
            ; //	asm	nop				
00B3F:      	nop
            ; //_AED4A60EA_2255:;				
            _AED4A60EA_2255:
            ; //	asm set io[0x09].b14;			
00B40:      	set io[0x09].b14//
            ; //_AED4A60EA_2256:;				
            _AED4A60EA_2256:
            ; //	asm	nop				
00B41:      	nop
            ; //_AED4A60EA_2257:;				
            _AED4A60EA_2257:
            ; //	asm	nop				
00B42:      	nop
            ; //_AED4A60EA_2258:;				
            _AED4A60EA_2258:
            ; //	asm	nop				
00B43:      	nop
            ; //_AED4A60EA_2259:;				
            _AED4A60EA_2259:
            ; //	asm clr io[0x09].b14;			
00B44:      	clr io[0x09].b14//
            ; //_AED4A60EA_2260:;				
            _AED4A60EA_2260:
            ; //	asm	nop				
00B45:      	nop
            ; //_AED4A60EA_2261:;				
            _AED4A60EA_2261:
            ; //	asm	nop				
00B46:      	nop
            ; //_AED4A60EA_2262:;				
            _AED4A60EA_2262:
            ; //	asm	nop				
00B47:      	nop
            ; //_AED4A60EA_2263:;				
            _AED4A60EA_2263:
            ; //	asm	nop				
00B48:      	nop
            ; //_AED4A60EA_2264:;				
            _AED4A60EA_2264:
            ; //	asm	nop				
00B49:      	nop
            ; //_AED4A60EA_2265:;				
            _AED4A60EA_2265:
            ; //	asm	nop				
00B4A:      	nop
            ; //_AED4A60EA_2266:;				
            _AED4A60EA_2266:
            ; //	asm	nop				
00B4B:      	nop
            ; //_AED4A60EA_2267:;				
            _AED4A60EA_2267:
            ; //	asm	nop				
00B4C:      	nop
            ; //_AED4A60EA_2268:;				
            _AED4A60EA_2268:
            ; //	asm	nop				
00B4D:      	nop
            ; //_AED4A60EA_2269:;				
            _AED4A60EA_2269:
            ; //	asm	nop				
00B4E:      	nop
            ; //_AED4A60EA_2270:;				
            _AED4A60EA_2270:
            ; //	asm	nop				
00B4F:      	nop
            ; //_AED4A60EA_2271:;				
            _AED4A60EA_2271:
            ; //	asm	nop				
00B50:      	nop
            ; //_AED4A60EA_2272:;				
            _AED4A60EA_2272:
            ; //	asm set io[0x09].b14;			
00B51:      	set io[0x09].b14//
            ; //_AED4A60EA_2273:;				
            _AED4A60EA_2273:
            ; //	asm	nop				
00B52:      	nop
            ; //_AED4A60EA_2274:;				
            _AED4A60EA_2274:
            ; //	asm	nop				
00B53:      	nop
            ; //_AED4A60EA_2275:;				
            _AED4A60EA_2275:
            ; //	asm	nop				
00B54:      	nop
            ; //_AED4A60EA_2276:;				
            _AED4A60EA_2276:
            ; //	asm clr io[0x09].b14;			
00B55:      	clr io[0x09].b14//
            ; //_AED4A60EA_2277:;				
            _AED4A60EA_2277:
            ; //	asm	nop				
00B56:      	nop
            ; //_AED4A60EA_2278:;				
            _AED4A60EA_2278:
            ; //	asm	nop				
00B57:      	nop
            ; //_AED4A60EA_2279:;				
            _AED4A60EA_2279:
            ; //	asm	nop				
00B58:      	nop
            ; //_AED4A60EA_2280:;				
            _AED4A60EA_2280:
            ; //	asm	nop				
00B59:      	nop
            ; //_AED4A60EA_2281:;				
            _AED4A60EA_2281:
            ; //	asm	nop				
00B5A:      	nop
            ; //_AED4A60EA_2282:;				
            _AED4A60EA_2282:
            ; //	asm	nop				
00B5B:      	nop
            ; //_AED4A60EA_2283:;				
            _AED4A60EA_2283:
            ; //	asm	nop				
00B5C:      	nop
            ; //_AED4A60EA_2284:;				
            _AED4A60EA_2284:
            ; //	asm	nop				
00B5D:      	nop
            ; //_AED4A60EA_2285:;				
            _AED4A60EA_2285:
            ; //	asm	nop				
00B5E:      	nop
            ; //_AED4A60EA_2286:;				
            _AED4A60EA_2286:
            ; //	asm	nop				
00B5F:      	nop
            ; //_AED4A60EA_2287:;				
            _AED4A60EA_2287:
            ; //	asm	nop				
00B60:      	nop
            ; //_AED4A60EA_2288:;				
            _AED4A60EA_2288:
            ; //	asm	nop				
00B61:      	nop
            ; //_AED4A60EA_2289:;				
            _AED4A60EA_2289:
            ; //	asm set io[0x09].b14;			
00B62:      	set io[0x09].b14//
            ; //_AED4A60EA_2290:;				
            _AED4A60EA_2290:
            ; //	asm	nop				
00B63:      	nop
            ; //_AED4A60EA_2291:;				
            _AED4A60EA_2291:
            ; //	asm	nop				
00B64:      	nop
            ; //_AED4A60EA_2292:;				
            _AED4A60EA_2292:
            ; //	asm	nop				
00B65:      	nop
            ; //_AED4A60EA_2293:;				
            _AED4A60EA_2293:
            ; //	asm clr io[0x09].b14;			
00B66:      	clr io[0x09].b14//
            ; //_AED4A60EA_2294:;				
            _AED4A60EA_2294:
            ; //	asm	nop				
00B67:      	nop
            ; //_AED4A60EA_2295:;				
            _AED4A60EA_2295:
            ; //	asm	nop				
00B68:      	nop
            ; //_AED4A60EA_2296:;				
            _AED4A60EA_2296:
            ; //	asm	nop				
00B69:      	nop
            ; //_AED4A60EA_2297:;				
            _AED4A60EA_2297:
            ; //	asm	nop				
00B6A:      	nop
            ; //_AED4A60EA_2298:;				
            _AED4A60EA_2298:
            ; //	asm	nop				
00B6B:      	nop
            ; //_AED4A60EA_2299:;				
            _AED4A60EA_2299:
            ; //	asm	nop				
00B6C:      	nop
            ; //_AED4A60EA_2300:;				
            _AED4A60EA_2300:
            ; //	asm	nop				
00B6D:      	nop
            ; //_AED4A60EA_2301:;				
            _AED4A60EA_2301:
            ; //	asm	nop				
00B6E:      	nop
            ; //_AED4A60EA_2302:;				
            _AED4A60EA_2302:
            ; //	asm	nop				
00B6F:      	nop
            ; //_AED4A60EA_2303:;				
            _AED4A60EA_2303:
            ; //	asm	nop				
00B70:      	nop
            ; //_AED4A60EA_2304:;				
            _AED4A60EA_2304:
            ; //	asm	nop				
00B71:      	nop
            ; //_AED4A60EA_2305:;				
            _AED4A60EA_2305:
            ; //	asm	nop				
00B72:      	nop
            ; //_AED4A60EA_2306:;				
            _AED4A60EA_2306:
            ; //	asm set io[0x09].b14;			
00B73:      	set io[0x09].b14//
            ; //_AED4A60EA_2307:;				
            _AED4A60EA_2307:
            ; //	asm	nop				
00B74:      	nop
            ; //_AED4A60EA_2308:;				
            _AED4A60EA_2308:
            ; //	asm	nop				
00B75:      	nop
            ; //_AED4A60EA_2309:;				
            _AED4A60EA_2309:
            ; //	asm	nop				
00B76:      	nop
            ; //_AED4A60EA_2310:;				
            _AED4A60EA_2310:
            ; //	asm clr io[0x09].b14;			
00B77:      	clr io[0x09].b14//
            ; //_AED4A60EA_2311:;				
            _AED4A60EA_2311:
            ; //	asm	nop				
00B78:      	nop
            ; //_AED4A60EA_2312:;				
            _AED4A60EA_2312:
            ; //	asm	nop				
00B79:      	nop
            ; //_AED4A60EA_2313:;				
            _AED4A60EA_2313:
            ; //	asm	nop				
00B7A:      	nop
            ; //_AED4A60EA_2314:;				
            _AED4A60EA_2314:
            ; //	asm	nop				
00B7B:      	nop
            ; //_AED4A60EA_2315:;				
            _AED4A60EA_2315:
            ; //	asm	nop				
00B7C:      	nop
            ; //_AED4A60EA_2316:;				
            _AED4A60EA_2316:
            ; //	asm	nop				
00B7D:      	nop
            ; //_AED4A60EA_2317:;				
            _AED4A60EA_2317:
            ; //	asm	nop				
00B7E:      	nop
            ; //_AED4A60EA_2318:;				
            _AED4A60EA_2318:
            ; //	asm	nop				
00B7F:      	nop
            ; //_AED4A60EA_2319:;				
            _AED4A60EA_2319:
            ; //	asm	nop				
00B80:      	nop
            ; //_AED4A60EA_2320:;				
            _AED4A60EA_2320:
            ; //	asm	nop				
00B81:      	nop
            ; //_AED4A60EA_2321:;				
            _AED4A60EA_2321:
            ; //	asm	nop				
00B82:      	nop
            ; //_AED4A60EA_2322:;				
            _AED4A60EA_2322:
            ; //	asm	nop				
00B83:      	nop
            ; //_AED4A60EA_2323:;				
            _AED4A60EA_2323:
            ; //	asm set io[0x09].b14;			
00B84:      	set io[0x09].b14//
            ; //_AED4A60EA_2324:;				
            _AED4A60EA_2324:
            ; //	asm	nop				
00B85:      	nop
            ; //_AED4A60EA_2325:;				
            _AED4A60EA_2325:
            ; //	asm	nop				
00B86:      	nop
            ; //_AED4A60EA_2326:;				
            _AED4A60EA_2326:
            ; //	asm	nop				
00B87:      	nop
            ; //_AED4A60EA_2327:;				
            _AED4A60EA_2327:
            ; //	asm clr io[0x09].b14;			
00B88:      	clr io[0x09].b14//
            ; //_AED4A60EA_2328:;				
            _AED4A60EA_2328:
            ; //	asm	nop				
00B89:      	nop
            ; //_AED4A60EA_2329:;				
            _AED4A60EA_2329:
            ; //	asm	nop				
00B8A:      	nop
            ; //_AED4A60EA_2330:;				
            _AED4A60EA_2330:
            ; //	asm	nop				
00B8B:      	nop
            ; //_AED4A60EA_2331:;				
            _AED4A60EA_2331:
            ; //	asm	nop				
00B8C:      	nop
            ; //_AED4A60EA_2332:;				
            _AED4A60EA_2332:
            ; //	asm	nop				
00B8D:      	nop
            ; //_AED4A60EA_2333:;				
            _AED4A60EA_2333:
            ; //	asm	nop				
00B8E:      	nop
            ; //_AED4A60EA_2334:;				
            _AED4A60EA_2334:
            ; //	asm	nop				
00B8F:      	nop
            ; //_AED4A60EA_2335:;				
            _AED4A60EA_2335:
            ; //	asm	nop				
00B90:      	nop
            ; //_AED4A60EA_2336:;				
            _AED4A60EA_2336:
            ; //	asm	nop				
00B91:      	nop
            ; //_AED4A60EA_2337:;				
            _AED4A60EA_2337:
            ; //	asm	nop				
00B92:      	nop
            ; //_AED4A60EA_2338:;				
            _AED4A60EA_2338:
            ; //	asm	nop				
00B93:      	nop
            ; //_AED4A60EA_2339:;				
            _AED4A60EA_2339:
            ; //	asm	nop				
00B94:      	nop
            ; //_AED4A60EA_2340:;				
            _AED4A60EA_2340:
            ; //	asm set io[0x09].b14;			
00B95:      	set io[0x09].b14//
            ; //_AED4A60EA_2341:;				
            _AED4A60EA_2341:
            ; //	asm	nop				
00B96:      	nop
            ; //_AED4A60EA_2342:;				
            _AED4A60EA_2342:
            ; //	asm	nop				
00B97:      	nop
            ; //_AED4A60EA_2343:;				
            _AED4A60EA_2343:
            ; //	asm	nop				
00B98:      	nop
            ; //_AED4A60EA_2344:;				
            _AED4A60EA_2344:
            ; //	asm clr io[0x09].b14;			
00B99:      	clr io[0x09].b14//
            ; //_AED4A60EA_2345:;				
            _AED4A60EA_2345:
            ; //	asm	nop				
00B9A:      	nop
            ; //_AED4A60EA_2346:;				
            _AED4A60EA_2346:
            ; //	asm	nop				
00B9B:      	nop
            ; //_AED4A60EA_2347:;				
            _AED4A60EA_2347:
            ; //	asm	nop				
00B9C:      	nop
            ; //_AED4A60EA_2348:;				
            _AED4A60EA_2348:
            ; //	asm	nop				
00B9D:      	nop
            ; //_AED4A60EA_2349:;				
            _AED4A60EA_2349:
            ; //	asm	nop				
00B9E:      	nop
            ; //_AED4A60EA_2350:;				
            _AED4A60EA_2350:
            ; //	asm	nop				
00B9F:      	nop
            ; //_AED4A60EA_2351:;				
            _AED4A60EA_2351:
            ; //	asm	nop				
00BA0:      	nop
            ; //_AED4A60EA_2352:;				
            _AED4A60EA_2352:
            ; //	asm	nop				
00BA1:      	nop
            ; //_AED4A60EA_2353:;				
            _AED4A60EA_2353:
            ; //	asm	nop				
00BA2:      	nop
            ; //_AED4A60EA_2354:;				
            _AED4A60EA_2354:
            ; //	asm	nop				
00BA3:      	nop
            ; //_AED4A60EA_2355:;				
            _AED4A60EA_2355:
            ; //	asm	nop				
00BA4:      	nop
            ; //_AED4A60EA_2356:;				
            _AED4A60EA_2356:
            ; //	asm	nop				
00BA5:      	nop
            ; //_AED4A60EA_2357:;				
            _AED4A60EA_2357:
            ; //	asm set io[0x09].b14;			
00BA6:      	set io[0x09].b14//
            ; //_AED4A60EA_2358:;				
            _AED4A60EA_2358:
            ; //	asm	nop				
00BA7:      	nop
            ; //_AED4A60EA_2359:;				
            _AED4A60EA_2359:
            ; //	asm	nop				
00BA8:      	nop
            ; //_AED4A60EA_2360:;				
            _AED4A60EA_2360:
            ; //	asm	nop				
00BA9:      	nop
            ; //_AED4A60EA_2361:;				
            _AED4A60EA_2361:
            ; //	asm clr io[0x09].b14;			
00BAA:      	clr io[0x09].b14//
            ; //_AED4A60EA_2362:;				
            _AED4A60EA_2362:
            ; //	asm	nop				
00BAB:      	nop
            ; //_AED4A60EA_2363:;				
            _AED4A60EA_2363:
            ; //	asm	nop				
00BAC:      	nop
            ; //_AED4A60EA_2364:;				
            _AED4A60EA_2364:
            ; //	asm	nop				
00BAD:      	nop
            ; //_AED4A60EA_2365:;				
            _AED4A60EA_2365:
            ; //	asm	nop				
00BAE:      	nop
            ; //_AED4A60EA_2366:;				
            _AED4A60EA_2366:
            ; //	asm	nop				
00BAF:      	nop
            ; //_AED4A60EA_2367:;				
            _AED4A60EA_2367:
            ; //	asm	nop				
00BB0:      	nop
            ; //_AED4A60EA_2368:;				
            _AED4A60EA_2368:
            ; //	asm	nop				
00BB1:      	nop
            ; //_AED4A60EA_2369:;				
            _AED4A60EA_2369:
            ; //	asm	nop				
00BB2:      	nop
            ; //_AED4A60EA_2370:;				
            _AED4A60EA_2370:
            ; //	asm	nop				
00BB3:      	nop
            ; //_AED4A60EA_2371:;				
            _AED4A60EA_2371:
            ; //	asm	nop				
00BB4:      	nop
            ; //_AED4A60EA_2372:;				
            _AED4A60EA_2372:
            ; //	asm	nop				
00BB5:      	nop
            ; //_AED4A60EA_2373:;				
            _AED4A60EA_2373:
            ; //	asm	nop				
00BB6:      	nop
            ; //_AED4A60EA_2374:;				
            _AED4A60EA_2374:
            ; //	asm set io[0x09].b14;			
00BB7:      	set io[0x09].b14//
            ; //_AED4A60EA_2375:;				
            _AED4A60EA_2375:
            ; //	asm	nop				
00BB8:      	nop
            ; //_AED4A60EA_2376:;				
            _AED4A60EA_2376:
            ; //	asm	nop				
00BB9:      	nop
            ; //_AED4A60EA_2377:;				
            _AED4A60EA_2377:
            ; //	asm	nop				
00BBA:      	nop
            ; //_AED4A60EA_2378:;				
            _AED4A60EA_2378:
            ; //	asm clr io[0x09].b14;			
00BBB:      	clr io[0x09].b14//
            ; //_AED4A60EA_2379:;				
            _AED4A60EA_2379:
            ; //	asm	nop				
00BBC:      	nop
            ; //_AED4A60EA_2380:;				
            _AED4A60EA_2380:
            ; //	asm	nop				
00BBD:      	nop
            ; //_AED4A60EA_2381:;				
            _AED4A60EA_2381:
            ; //	asm	nop				
00BBE:      	nop
            ; //_AED4A60EA_2382:;				
            _AED4A60EA_2382:
            ; //	asm	nop				
00BBF:      	nop
            ; //_AED4A60EA_2383:;				
            _AED4A60EA_2383:
            ; //	asm	nop				
00BC0:      	nop
            ; //_AED4A60EA_2384:;				
            _AED4A60EA_2384:
            ; //	asm	nop				
00BC1:      	nop
            ; //_AED4A60EA_2385:;				
            _AED4A60EA_2385:
            ; //	asm	nop				
00BC2:      	nop
            ; //_AED4A60EA_2386:;				
            _AED4A60EA_2386:
            ; //	asm	nop				
00BC3:      	nop
            ; //_AED4A60EA_2387:;				
            _AED4A60EA_2387:
            ; //	asm	nop				
00BC4:      	nop
            ; //_AED4A60EA_2388:;				
            _AED4A60EA_2388:
            ; //	asm	nop				
00BC5:      	nop
            ; //_AED4A60EA_2389:;				
            _AED4A60EA_2389:
            ; //	asm	nop				
00BC6:      	nop
            ; //_AED4A60EA_2390:;				
            _AED4A60EA_2390:
            ; //	asm	nop				
00BC7:      	nop
            ; //_AED4A60EA_2391:;				
            _AED4A60EA_2391:
            ; //	asm set io[0x09].b14;			
00BC8:      	set io[0x09].b14//
            ; //_AED4A60EA_2392:;				
            _AED4A60EA_2392:
            ; //	asm	nop				
00BC9:      	nop
            ; //_AED4A60EA_2393:;				
            _AED4A60EA_2393:
            ; //	asm	nop				
00BCA:      	nop
            ; //_AED4A60EA_2394:;				
            _AED4A60EA_2394:
            ; //	asm	nop				
00BCB:      	nop
            ; //_AED4A60EA_2395:;				
            _AED4A60EA_2395:
            ; //	asm clr io[0x09].b14;			
00BCC:      	clr io[0x09].b14//
            ; //_AED4A60EA_2396:;				
            _AED4A60EA_2396:
            ; //	asm	nop				
00BCD:      	nop
            ; //_AED4A60EA_2397:;				
            _AED4A60EA_2397:
            ; //	asm	nop				
00BCE:      	nop
            ; //_AED4A60EA_2398:;				
            _AED4A60EA_2398:
            ; //	asm	nop				
00BCF:      	nop
            ; //_AED4A60EA_2399:;				
            _AED4A60EA_2399:
            ; //	asm	nop				
00BD0:      	nop
            ; //_AED4A60EA_2400:;				
            _AED4A60EA_2400:
            ; //	asm	nop				
00BD1:      	nop
            ; //_AED4A60EA_2401:;				
            _AED4A60EA_2401:
            ; //	asm	nop				
00BD2:      	nop
            ; //_AED4A60EA_2402:;				
            _AED4A60EA_2402:
            ; //	asm	nop				
00BD3:      	nop
            ; //_AED4A60EA_2403:;				
            _AED4A60EA_2403:
            ; //	asm	nop				
00BD4:      	nop
            ; //_AED4A60EA_2404:;				
            _AED4A60EA_2404:
            ; //	asm	nop				
00BD5:      	nop
            ; //_AED4A60EA_2405:;				
            _AED4A60EA_2405:
            ; //	asm	nop				
00BD6:      	nop
            ; //_AED4A60EA_2406:;				
            _AED4A60EA_2406:
            ; //	asm	nop				
00BD7:      	nop
            ; //_AED4A60EA_2407:;				
            _AED4A60EA_2407:
            ; //	asm	nop				
00BD8:      	nop
            ; //_AED4A60EA_2408:;				
            _AED4A60EA_2408:
            ; //	asm set io[0x09].b14;			
00BD9:      	set io[0x09].b14//
            ; //_AED4A60EA_2409:;				
            _AED4A60EA_2409:
            ; //	asm	nop				
00BDA:      	nop
            ; //_AED4A60EA_2410:;				
            _AED4A60EA_2410:
            ; //	asm	nop				
00BDB:      	nop
            ; //_AED4A60EA_2411:;				
            _AED4A60EA_2411:
            ; //	asm	nop				
00BDC:      	nop
            ; //_AED4A60EA_2412:;				
            _AED4A60EA_2412:
            ; //	asm clr io[0x09].b14;			
00BDD:      	clr io[0x09].b14//
            ; //_AED4A60EA_2413:;				
            _AED4A60EA_2413:
            ; //	asm	nop				
00BDE:      	nop
            ; //_AED4A60EA_2414:;				
            _AED4A60EA_2414:
            ; //	asm	nop				
00BDF:      	nop
            ; //_AED4A60EA_2415:;				
            _AED4A60EA_2415:
            ; //	asm	nop				
00BE0:      	nop
            ; //_AED4A60EA_2416:;				
            _AED4A60EA_2416:
            ; //	asm	nop				
00BE1:      	nop
            ; //_AED4A60EA_2417:;				
            _AED4A60EA_2417:
            ; //	asm	nop				
00BE2:      	nop
            ; //_AED4A60EA_2418:;				
            _AED4A60EA_2418:
            ; //	asm	nop				
00BE3:      	nop
            ; //_AED4A60EA_2419:;				
            _AED4A60EA_2419:
            ; //	asm	nop				
00BE4:      	nop
            ; //_AED4A60EA_2420:;				
            _AED4A60EA_2420:
            ; //	asm	nop				
00BE5:      	nop
            ; //_AED4A60EA_2421:;				
            _AED4A60EA_2421:
            ; //	asm	nop				
00BE6:      	nop
            ; //_AED4A60EA_2422:;				
            _AED4A60EA_2422:
            ; //	asm	nop				
00BE7:      	nop
            ; //_AED4A60EA_2423:;				
            _AED4A60EA_2423:
            ; //	asm	nop				
00BE8:      	nop
            ; //_AED4A60EA_2424:;				
            _AED4A60EA_2424:
            ; //	asm	nop				
00BE9:      	nop
            ; //_AED4A60EA_2425:;				
            _AED4A60EA_2425:
            ; //	asm set io[0x09].b14;			
00BEA:      	set io[0x09].b14//
            ; //_AED4A60EA_2426:;				
            _AED4A60EA_2426:
            ; //	asm	nop				
00BEB:      	nop
            ; //_AED4A60EA_2427:;				
            _AED4A60EA_2427:
            ; //	asm	nop				
00BEC:      	nop
            ; //_AED4A60EA_2428:;				
            _AED4A60EA_2428:
            ; //	asm	nop				
00BED:      	nop
            ; //_AED4A60EA_2429:;				
            _AED4A60EA_2429:
            ; //	asm clr io[0x09].b14;			
00BEE:      	clr io[0x09].b14//
            ; //_AED4A60EA_2430:;				
            _AED4A60EA_2430:
            ; //	asm	nop				
00BEF:      	nop
            ; //_AED4A60EA_2431:;				
            _AED4A60EA_2431:
            ; //	asm	nop				
00BF0:      	nop
            ; //_AED4A60EA_2432:;				
            _AED4A60EA_2432:
            ; //	asm	nop				
00BF1:      	nop
            ; //_AED4A60EA_2433:;				
            _AED4A60EA_2433:
            ; //	asm	nop				
00BF2:      	nop
            ; //_AED4A60EA_2434:;				
            _AED4A60EA_2434:
            ; //	asm	nop				
00BF3:      	nop
            ; //_AED4A60EA_2435:;				
            _AED4A60EA_2435:
            ; //	asm	nop				
00BF4:      	nop
            ; //_AED4A60EA_2436:;				
            _AED4A60EA_2436:
            ; //	asm	nop				
00BF5:      	nop
            ; //_AED4A60EA_2437:;				
            _AED4A60EA_2437:
            ; //	asm	nop				
00BF6:      	nop
            ; //_AED4A60EA_2438:;				
            _AED4A60EA_2438:
            ; //	asm	nop				
00BF7:      	nop
            ; //_AED4A60EA_2439:;				
            _AED4A60EA_2439:
            ; //	asm	nop				
00BF8:      	nop
            ; //_AED4A60EA_2440:;				
            _AED4A60EA_2440:
            ; //	asm	nop				
00BF9:      	nop
            ; //_AED4A60EA_2441:;				
            _AED4A60EA_2441:
            ; //	asm	nop				
00BFA:      	nop
            ; //_AED4A60EA_2442:;				
            _AED4A60EA_2442:
            ; //	asm set io[0x09].b14;			
00BFB:      	set io[0x09].b14//
            ; //_AED4A60EA_2443:;				
            _AED4A60EA_2443:
            ; //	asm	nop				
00BFC:      	nop
            ; //_AED4A60EA_2444:;				
            _AED4A60EA_2444:
            ; //	asm	nop				
00BFD:      	nop
            ; //_AED4A60EA_2445:;				
            _AED4A60EA_2445:
            ; //	asm	nop				
00BFE:      	nop
            ; //_AED4A60EA_2446:;				
            _AED4A60EA_2446:
            ; //	asm	nop				
00BFF:      	nop
            ; //_AED4A60EA_2447:;				
            _AED4A60EA_2447:
            ; //	asm	nop				
00C00:      	nop
            ; //_AED4A60EA_2448:;				
            _AED4A60EA_2448:
            ; //	asm	nop				
00C01:      	nop
            ; //_AED4A60EA_2449:;				
            _AED4A60EA_2449:
            ; //	asm	nop				
00C02:      	nop
            ; //_AED4A60EA_2450:;				
            _AED4A60EA_2450:
            ; //	asm	nop				
00C03:      	nop
            ; //_AED4A60EA_2451:;				
            _AED4A60EA_2451:
            ; //	asm	nop				
00C04:      	nop
            ; //_AED4A60EA_2452:;				
            _AED4A60EA_2452:
            ; //	asm	nop				
00C05:      	nop
            ; //_AED4A60EA_2453:;				
            _AED4A60EA_2453:
            ; //	asm	nop				
00C06:      	nop
            ; //_AED4A60EA_2454:;				
            _AED4A60EA_2454:
            ; //	asm	nop				
00C07:      	nop
            ; //_AED4A60EA_2455:;				
            _AED4A60EA_2455:
            ; //	asm clr io[0x09].b14;			
00C08:      	clr io[0x09].b14//
            ; //_AED4A60EA_2456:;				
            _AED4A60EA_2456:
            ; //	asm	nop				
00C09:      	nop
            ; //_AED4A60EA_2457:;				
            _AED4A60EA_2457:
            ; //	asm	nop				
00C0A:      	nop
            ; //_AED4A60EA_2458:;				
            _AED4A60EA_2458:
            ; //	asm	nop				
00C0B:      	nop
            ; //_AED4A60EA_2459:;				
            _AED4A60EA_2459:
            ; //	asm set io[0x09].b14;			
00C0C:      	set io[0x09].b14//
            ; //_AED4A60EA_2460:;				
            _AED4A60EA_2460:
            ; //	asm	nop				
00C0D:      	nop
            ; //_AED4A60EA_2461:;				
            _AED4A60EA_2461:
            ; //	asm	nop				
00C0E:      	nop
            ; //_AED4A60EA_2462:;				
            _AED4A60EA_2462:
            ; //	asm	nop				
00C0F:      	nop
            ; //_AED4A60EA_2463:;				
            _AED4A60EA_2463:
            ; //	asm	nop				
00C10:      	nop
            ; //_AED4A60EA_2464:;				
            _AED4A60EA_2464:
            ; //	asm	nop				
00C11:      	nop
            ; //_AED4A60EA_2465:;				
            _AED4A60EA_2465:
            ; //	asm	nop				
00C12:      	nop
            ; //_AED4A60EA_2466:;				
            _AED4A60EA_2466:
            ; //	asm	nop				
00C13:      	nop
            ; //_AED4A60EA_2467:;				
            _AED4A60EA_2467:
            ; //	asm	nop				
00C14:      	nop
            ; //_AED4A60EA_2468:;				
            _AED4A60EA_2468:
            ; //	asm	nop				
00C15:      	nop
            ; //_AED4A60EA_2469:;				
            _AED4A60EA_2469:
            ; //	asm	nop				
00C16:      	nop
            ; //_AED4A60EA_2470:;				
            _AED4A60EA_2470:
            ; //	asm	nop				
00C17:      	nop
            ; //_AED4A60EA_2471:;				
            _AED4A60EA_2471:
            ; //	asm	nop				
00C18:      	nop
            ; //_AED4A60EA_2472:;				
            _AED4A60EA_2472:
            ; //	asm clr io[0x09].b14;			
00C19:      	clr io[0x09].b14//
            ; //_AED4A60EA_2473:;				
            _AED4A60EA_2473:
            ; //	asm	nop				
00C1A:      	nop
            ; //_AED4A60EA_2474:;				
            _AED4A60EA_2474:
            ; //	asm	nop				
00C1B:      	nop
            ; //_AED4A60EA_2475:;				
            _AED4A60EA_2475:
            ; //	asm	nop				
00C1C:      	nop
            ; //_AED4A60EA_2476:;				
            _AED4A60EA_2476:
            ; //	asm set io[0x09].b14;			
00C1D:      	set io[0x09].b14//
            ; //_AED4A60EA_2477:;				
            _AED4A60EA_2477:
            ; //	asm	nop				
00C1E:      	nop
            ; //_AED4A60EA_2478:;				
            _AED4A60EA_2478:
            ; //	asm	nop				
00C1F:      	nop
            ; //_AED4A60EA_2479:;				
            _AED4A60EA_2479:
            ; //	asm	nop				
00C20:      	nop
            ; //_AED4A60EA_2480:;				
            _AED4A60EA_2480:
            ; //	asm	nop				
00C21:      	nop
            ; //_AED4A60EA_2481:;				
            _AED4A60EA_2481:
            ; //	asm	nop				
00C22:      	nop
            ; //_AED4A60EA_2482:;				
            _AED4A60EA_2482:
            ; //	asm	nop				
00C23:      	nop
            ; //_AED4A60EA_2483:;				
            _AED4A60EA_2483:
            ; //	asm	nop				
00C24:      	nop
            ; //_AED4A60EA_2484:;				
            _AED4A60EA_2484:
            ; //	asm	nop				
00C25:      	nop
            ; //_AED4A60EA_2485:;				
            _AED4A60EA_2485:
            ; //	asm	nop				
00C26:      	nop
            ; //_AED4A60EA_2486:;				
            _AED4A60EA_2486:
            ; //	asm	nop				
00C27:      	nop
            ; //_AED4A60EA_2487:;				
            _AED4A60EA_2487:
            ; //	asm	nop				
00C28:      	nop
            ; //_AED4A60EA_2488:;				
            _AED4A60EA_2488:
            ; //	asm	nop				
00C29:      	nop
            ; //_AED4A60EA_2489:;				
            _AED4A60EA_2489:
            ; //	asm clr io[0x09].b14;			
00C2A:      	clr io[0x09].b14//
            ; //_AED4A60EA_2490:;				
            _AED4A60EA_2490:
            ; //	asm	nop				
00C2B:      	nop
            ; //_AED4A60EA_2491:;				
            _AED4A60EA_2491:
            ; //	asm	nop				
00C2C:      	nop
            ; //_AED4A60EA_2492:;				
            _AED4A60EA_2492:
            ; //	asm	nop				
00C2D:      	nop
            ; //_AED4A60EA_2493:;				
            _AED4A60EA_2493:
            ; //	asm set io[0x09].b14;			
00C2E:      	set io[0x09].b14//
            ; //_AED4A60EA_2494:;				
            _AED4A60EA_2494:
            ; //	asm	nop				
00C2F:      	nop
            ; //_AED4A60EA_2495:;				
            _AED4A60EA_2495:
            ; //	asm	nop				
00C30:      	nop
            ; //_AED4A60EA_2496:;				
            _AED4A60EA_2496:
            ; //	asm	nop				
00C31:      	nop
            ; //_AED4A60EA_2497:;				
            _AED4A60EA_2497:
            ; //	asm	nop				
00C32:      	nop
            ; //_AED4A60EA_2498:;				
            _AED4A60EA_2498:
            ; //	asm	nop				
00C33:      	nop
            ; //_AED4A60EA_2499:;				
            _AED4A60EA_2499:
            ; //	asm	nop				
00C34:      	nop
            ; //_AED4A60EA_2500:;				
            _AED4A60EA_2500:
            ; //	asm	nop				
00C35:      	nop
            ; //_AED4A60EA_2501:;				
            _AED4A60EA_2501:
            ; //	asm	nop				
00C36:      	nop
            ; //_AED4A60EA_2502:;				
            _AED4A60EA_2502:
            ; //	asm	nop				
00C37:      	nop
            ; //_AED4A60EA_2503:;				
            _AED4A60EA_2503:
            ; //	asm	nop				
00C38:      	nop
            ; //_AED4A60EA_2504:;				
            _AED4A60EA_2504:
            ; //	asm	nop				
00C39:      	nop
            ; //_AED4A60EA_2505:;				
            _AED4A60EA_2505:
            ; //	asm	nop				
00C3A:      	nop
            ; //_AED4A60EA_2506:;				
            _AED4A60EA_2506:
            ; //	asm clr io[0x09].b14;			
00C3B:      	clr io[0x09].b14//
            ; //_AED4A60EA_2507:;				
            _AED4A60EA_2507:
            ; //	asm	nop				
00C3C:      	nop
            ; //_AED4A60EA_2508:;				
            _AED4A60EA_2508:
            ; //	asm	nop				
00C3D:      	nop
            ; //_AED4A60EA_2509:;				
            _AED4A60EA_2509:
            ; //	asm	nop				
00C3E:      	nop
            ; //_AED4A60EA_2510:;				
            _AED4A60EA_2510:
            ; //	asm set io[0x09].b14;			
00C3F:      	set io[0x09].b14//
            ; //_AED4A60EA_2511:;				
            _AED4A60EA_2511:
            ; //	asm	nop				
00C40:      	nop
            ; //_AED4A60EA_2512:;				
            _AED4A60EA_2512:
            ; //	asm	nop				
00C41:      	nop
            ; //_AED4A60EA_2513:;				
            _AED4A60EA_2513:
            ; //	asm	nop				
00C42:      	nop
            ; //_AED4A60EA_2514:;				
            _AED4A60EA_2514:
            ; //	asm	nop				
00C43:      	nop
            ; //_AED4A60EA_2515:;				
            _AED4A60EA_2515:
            ; //	asm	nop				
00C44:      	nop
            ; //_AED4A60EA_2516:;				
            _AED4A60EA_2516:
            ; //	asm	nop				
00C45:      	nop
            ; //_AED4A60EA_2517:;				
            _AED4A60EA_2517:
            ; //	asm	nop				
00C46:      	nop
            ; //_AED4A60EA_2518:;				
            _AED4A60EA_2518:
            ; //	asm	nop				
00C47:      	nop
            ; //_AED4A60EA_2519:;				
            _AED4A60EA_2519:
            ; //	asm	nop				
00C48:      	nop
            ; //_AED4A60EA_2520:;				
            _AED4A60EA_2520:
            ; //	asm	nop				
00C49:      	nop
            ; //_AED4A60EA_2521:;				
            _AED4A60EA_2521:
            ; //	asm	nop				
00C4A:      	nop
            ; //_AED4A60EA_2522:;				
            _AED4A60EA_2522:
            ; //	asm	nop				
00C4B:      	nop
            ; //_AED4A60EA_2523:;				
            _AED4A60EA_2523:
            ; //	asm clr io[0x09].b14;			
00C4C:      	clr io[0x09].b14//
            ; //_AED4A60EA_2524:;				
            _AED4A60EA_2524:
            ; //	asm	nop				
00C4D:      	nop
            ; //_AED4A60EA_2525:;				
            _AED4A60EA_2525:
            ; //	asm	nop				
00C4E:      	nop
            ; //_AED4A60EA_2526:;				
            _AED4A60EA_2526:
            ; //	asm	nop				
00C4F:      	nop
            ; //_AED4A60EA_2527:;				
            _AED4A60EA_2527:
            ; //	asm set io[0x09].b14;			
00C50:      	set io[0x09].b14//
            ; //_AED4A60EA_2528:;				
            _AED4A60EA_2528:
            ; //	asm	nop				
00C51:      	nop
            ; //_AED4A60EA_2529:;				
            _AED4A60EA_2529:
            ; //	asm	nop				
00C52:      	nop
            ; //_AED4A60EA_2530:;				
            _AED4A60EA_2530:
            ; //	asm	nop				
00C53:      	nop
            ; //_AED4A60EA_2531:;				
            _AED4A60EA_2531:
            ; //	asm	nop				
00C54:      	nop
            ; //_AED4A60EA_2532:;				
            _AED4A60EA_2532:
            ; //	asm	nop				
00C55:      	nop
            ; //_AED4A60EA_2533:;				
            _AED4A60EA_2533:
            ; //	asm	nop				
00C56:      	nop
            ; //_AED4A60EA_2534:;				
            _AED4A60EA_2534:
            ; //	asm	nop				
00C57:      	nop
            ; //_AED4A60EA_2535:;				
            _AED4A60EA_2535:
            ; //	asm	nop				
00C58:      	nop
            ; //_AED4A60EA_2536:;				
            _AED4A60EA_2536:
            ; //	asm	nop				
00C59:      	nop
            ; //_AED4A60EA_2537:;				
            _AED4A60EA_2537:
            ; //	asm	nop				
00C5A:      	nop
            ; //_AED4A60EA_2538:;				
            _AED4A60EA_2538:
            ; //	asm	nop				
00C5B:      	nop
            ; //_AED4A60EA_2539:;				
            _AED4A60EA_2539:
            ; //	asm	nop				
00C5C:      	nop
            ; //_AED4A60EA_2540:;				
            _AED4A60EA_2540:
            ; //	asm clr io[0x09].b14;			
00C5D:      	clr io[0x09].b14//
            ; //_AED4A60EA_2541:;				
            _AED4A60EA_2541:
            ; //	asm	nop				
00C5E:      	nop
            ; //_AED4A60EA_2542:;				
            _AED4A60EA_2542:
            ; //	asm	nop				
00C5F:      	nop
            ; //_AED4A60EA_2543:;				
            _AED4A60EA_2543:
            ; //	asm	nop				
00C60:      	nop
            ; //_AED4A60EA_2544:;				
            _AED4A60EA_2544:
            ; //	asm set io[0x09].b14;			
00C61:      	set io[0x09].b14//
            ; //_AED4A60EA_2545:;				
            _AED4A60EA_2545:
            ; //	asm	nop				
00C62:      	nop
            ; //_AED4A60EA_2546:;				
            _AED4A60EA_2546:
            ; //	asm	nop				
00C63:      	nop
            ; //_AED4A60EA_2547:;				
            _AED4A60EA_2547:
            ; //	asm	nop				
00C64:      	nop
            ; //_AED4A60EA_2548:;				
            _AED4A60EA_2548:
            ; //	asm	nop				
00C65:      	nop
            ; //_AED4A60EA_2549:;				
            _AED4A60EA_2549:
            ; //	asm	nop				
00C66:      	nop
            ; //_AED4A60EA_2550:;				
            _AED4A60EA_2550:
            ; //	asm	nop				
00C67:      	nop
            ; //_AED4A60EA_2551:;				
            _AED4A60EA_2551:
            ; //	asm	nop				
00C68:      	nop
            ; //_AED4A60EA_2552:;				
            _AED4A60EA_2552:
            ; //	asm	nop				
00C69:      	nop
            ; //_AED4A60EA_2553:;				
            _AED4A60EA_2553:
            ; //	asm	nop				
00C6A:      	nop
            ; //_AED4A60EA_2554:;				
            _AED4A60EA_2554:
            ; //	asm	nop				
00C6B:      	nop
            ; //_AED4A60EA_2555:;				
            _AED4A60EA_2555:
            ; //	asm	nop				
00C6C:      	nop
            ; //_AED4A60EA_2556:;				
            _AED4A60EA_2556:
            ; //	asm	nop				
00C6D:      	nop
            ; //_AED4A60EA_2557:;				
            _AED4A60EA_2557:
            ; //	asm clr io[0x09].b14;			
00C6E:      	clr io[0x09].b14//
            ; //_AED4A60EA_2558:;				
            _AED4A60EA_2558:
            ; //	asm	nop				
00C6F:      	nop
            ; //_AED4A60EA_2559:;				
            _AED4A60EA_2559:
            ; //	asm	nop				
00C70:      	nop
            ; //_AED4A60EA_2560:;				
            _AED4A60EA_2560:
            ; //	asm	nop				
00C71:      	nop
            ; //_AED4A60EA_2561:;				
            _AED4A60EA_2561:
            ; //	asm set io[0x09].b14;			
00C72:      	set io[0x09].b14//
            ; //_AED4A60EA_2562:;				
            _AED4A60EA_2562:
            ; //	asm	nop				
00C73:      	nop
            ; //_AED4A60EA_2563:;				
            _AED4A60EA_2563:
            ; //	asm	nop				
00C74:      	nop
            ; //_AED4A60EA_2564:;				
            _AED4A60EA_2564:
            ; //	asm	nop				
00C75:      	nop
            ; //_AED4A60EA_2565:;				
            _AED4A60EA_2565:
            ; //	asm	nop				
00C76:      	nop
            ; //_AED4A60EA_2566:;				
            _AED4A60EA_2566:
            ; //	asm	nop				
00C77:      	nop
            ; //_AED4A60EA_2567:;				
            _AED4A60EA_2567:
            ; //	asm	nop				
00C78:      	nop
            ; //_AED4A60EA_2568:;				
            _AED4A60EA_2568:
            ; //	asm	nop				
00C79:      	nop
            ; //_AED4A60EA_2569:;				
            _AED4A60EA_2569:
            ; //	asm	nop				
00C7A:      	nop
            ; //_AED4A60EA_2570:;				
            _AED4A60EA_2570:
            ; //	asm	nop				
00C7B:      	nop
            ; //_AED4A60EA_2571:;				
            _AED4A60EA_2571:
            ; //	asm	nop				
00C7C:      	nop
            ; //_AED4A60EA_2572:;				
            _AED4A60EA_2572:
            ; //	asm	nop				
00C7D:      	nop
            ; //_AED4A60EA_2573:;				
            _AED4A60EA_2573:
            ; //	asm	nop				
00C7E:      	nop
            ; //_AED4A60EA_2574:;				
            _AED4A60EA_2574:
            ; //	asm clr io[0x09].b14;			
00C7F:      	clr io[0x09].b14//
            ; //_AED4A60EA_2575:;				
            _AED4A60EA_2575:
            ; //	asm	nop				
00C80:      	nop
            ; //_AED4A60EA_2576:;				
            _AED4A60EA_2576:
            ; //	asm	nop				
00C81:      	nop
            ; //_AED4A60EA_2577:;				
            _AED4A60EA_2577:
            ; //	asm	nop				
00C82:      	nop
            ; //_AED4A60EA_2578:;				
            _AED4A60EA_2578:
            ; //	goto LD63FD439_50;			
00C83:      	pch =	LD63FD439_50
00C84:      	ljmp	LD63FD439_50
            ; //LD63FD439_58:;					
            LD63FD439_58:
            ; //_AED4A60EA_2579:;				
            _AED4A60EA_2579:
            ; //	goto LD63FD439_50;			
00C85:      	pch =	LD63FD439_50
00C86:      	ljmp	LD63FD439_50
            ; //	goto LD63FD439_50;			
00C87:      	pch =	LD63FD439_50
00C88:      	ljmp	LD63FD439_50
            ; //LD63FD439_51:;					
            LD63FD439_51:
            ; //	sCX	= sAX;				
00C89:      	AR	= AX
00C8A:      	CX	= AR
            ; //	sAX	= 0x0000;			
00C8B:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00C8C:      	pch	= sfx_CMP_AX_CX_JE
00C8D:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_59;	
00C8E:      	if NZ	jmp LD63FD439_59
            ; //	goto LD63FD439_52;			
00C8F:      	pch =	LD63FD439_52
00C90:      	ljmp	LD63FD439_52
            ; //LD63FD439_59:;					
            LD63FD439_59:
            ; //	sAX	= 0x0001;			
00C91:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_JE();			
00C92:      	pch	= sfx_CMP_AX_CX_JE
00C93:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_60;	
00C94:      	if NZ	jmp LD63FD439_60
            ; //	goto LD63FD439_53;			
00C95:      	pch =	LD63FD439_53
00C96:      	ljmp	LD63FD439_53
            ; //LD63FD439_60:;					
            LD63FD439_60:
            ; //	sAX	= 0x0003;			
00C97:      	AX	= 0x03
            ; //	sfx_CMP_AX_CX_JE();			
00C98:      	pch	= sfx_CMP_AX_CX_JE
00C99:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_61;	
00C9A:      	if NZ	jmp LD63FD439_61
            ; //	goto LD63FD439_54;			
00C9B:      	pch =	LD63FD439_54
00C9C:      	ljmp	LD63FD439_54
            ; //LD63FD439_61:;					
            LD63FD439_61:
            ; //	sAX	= 0x0002;			
00C9D:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_JE();			
00C9E:      	pch	= sfx_CMP_AX_CX_JE
00C9F:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_62;	
00CA0:      	if NZ	jmp LD63FD439_62
            ; //	goto LD63FD439_55;			
00CA1:      	pch =	LD63FD439_55
00CA2:      	ljmp	LD63FD439_55
            ; //LD63FD439_62:;					
            LD63FD439_62:
            ; //	sAX	= 0x0005;			
00CA3:      	AX	= 0x05
            ; //	sfx_CMP_AX_CX_JE();			
00CA4:      	pch	= sfx_CMP_AX_CX_JE
00CA5:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_63;	
00CA6:      	if NZ	jmp LD63FD439_63
            ; //	goto LD63FD439_56;			
00CA7:      	pch =	LD63FD439_56
00CA8:      	ljmp	LD63FD439_56
            ; //LD63FD439_63:;					
            LD63FD439_63:
            ; //	sAX	= 0x0004;			
00CA9:      	AX	= 0x04
            ; //	sfx_CMP_AX_CX_JE();			
00CAA:      	pch	= sfx_CMP_AX_CX_JE
00CAB:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__jne__)	goto LD63FD439_64;	
00CAC:      	if NZ	jmp LD63FD439_64
            ; //	goto LD63FD439_57;			
00CAD:      	pch =	LD63FD439_57
00CAE:      	ljmp	LD63FD439_57
            ; //LD63FD439_64:;					
            LD63FD439_64:
            ; //	goto	LD63FD439_58;			
00CAF:      	pch =	LD63FD439_58
00CB0:      	ljmp	LD63FD439_58
            ; //LD63FD439_50:;					
            LD63FD439_50:
            ; //	goto LD63FD439_48;			
00CB1:      	pch =	LD63FD439_48
00CB2:      	ljmp	LD63FD439_48
            ; //LD63FD439_47:;					
            LD63FD439_47:
            ; //_AED4A60EA_2580:;				
            _AED4A60EA_2580:
            ; //_AED4A60EA_2581:;				
            _AED4A60EA_2581:
            ; //	asm clr io[0x09].b14;			
00CB3:      	clr io[0x09].b14//
            ; //LD63FD439_44:;					
            LD63FD439_44:
            ; //_AED4A60EA_2582:;				
            _AED4A60EA_2582:
            ; //	return;					
00CB4:      	AR	= 1
00CB5:      	BP	+= AR
00CB6:      	pop	AR
00CB7:      	rm[BP_SAVE]	= AR
00CB8:      	rets
            ; //_WS_TRSF_color_setE1CC300C_end:;		
            _WS_TRSF_color_setE1CC300C_end:
            ; //_AED4A60EA_2583:;				
            _AED4A60EA_2583:
            ; //}
            ; //
            ; //void _WS_RefreshAD7B99B1()			
            _WS_RefreshAD7B99B1:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00CB9:      	AR	= rm[BP_SAVE]
00CBA:      	push	AR
00CBB:      	AR	= BP
00CBC:      	rm[BP_SAVE]	= AR
00CBD:      	AR	 = -1
00CBE:      	BP	+= AR
            ; //_AED4A60EA_2584:;				
            _AED4A60EA_2584:
            ; //_AED4A60EA_2585:;				
            _AED4A60EA_2585:
            ; //	_i_1_2+0	= 0x00;			
00CBF:      	I1	= rm[BP_SAVE]
00CC0:      	AR	= 0x00
00CC1:      	rm[I1]	= AR
            ; //LD63FD439_66:;					
            LD63FD439_66:
            ; //	sSI	= (int)&_i_1_2;			
00CC2:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00CC3:      	AX	= rm[I1]
            ; //	sCX	= 0x0003;			
00CC4:      	CX	= 0x03
            ; //	sfx_CMP_AX_CX_JBE();			
00CC5:      	pch	= sfx_CMP_AX_CX_JBE
00CC6:      	lcall	sfx_CMP_AX_CX_JBE
            ; //	if(__je__)	goto LD63FD439_70;	
00CC7:      	if ZR	jmp LD63FD439_70
            ; //	goto	LD63FD439_68;			
00CC8:      	pch =	LD63FD439_68
00CC9:      	ljmp	LD63FD439_68
            ; //LD63FD439_70:;					
            LD63FD439_70:
            ; //	goto LD63FD439_67;			
00CCA:      	pch =	LD63FD439_67
00CCB:      	ljmp	LD63FD439_67
            ; //LD63FD439_69:;					
            LD63FD439_69:
            ; //	sSI	= (int)&_i_1_2;			
00CCC:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00CCD:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00CCE:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00CCF:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00CD0:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX + AR;			
00CD1:      	rm[I1] = CX + AR//
            ; //	goto LD63FD439_66;			
00CD2:      	pch =	LD63FD439_66
00CD3:      	ljmp	LD63FD439_66
            ; //LD63FD439_67:;					
            LD63FD439_67:
            ; //	
            ; //_AED4A60EA_2586:;				
            _AED4A60EA_2586:
            ; //_AED4A60EA_2587:;				
            _AED4A60EA_2587:
            ; //	asm AX = _LED_Buf98A4A35A+0;		
00CD4:      	AX = _LED_Buf98A4A35A+0//
            ; //	PUSH(sAX);				
00CD5:      	push	AX
            ; //	sSI	= (int)&_i_1_2;			
00CD6:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00CD7:      	AX	= rm[I1]
            ; //	sCX	= 0x0005;			
00CD8:      	CX	= 0x05
            ; //	sfx_IMUL_AX_CX();			
00CD9:      	pch	= sfx_IMUL_AX_CX
00CDA:      	lcall	sfx_IMUL_AX_CX
            ; //	sCX	= POP();			
00CDB:      	pop	CX
            ; //	sAX	= sAX + sCX;			
00CDC:      	AR	= CX
00CDD:      	AX	+= AR
            ; //	sSI	= sAX;				
00CDE:      	AR	= AX
00CDF:      	I1	= AR
            ; //	sAX	= *(__int16*)sSI++;		
00CE0:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00CE1:      	DX	= rm[I1--]
            ; //	PUSH(sAX);				
00CE2:      	push	AX
            ; //	_WS_Send24bits851C5C55(STACK[sSP + 0]);	
00CE3:      	pch	= _WS_Send24bits851C5C55
00CE4:      	lcall	_WS_Send24bits851C5C55
            ; //	RESTORESP(1);				
00CE5:      	pop	AR
            ; //	goto LD63FD439_69;			
00CE6:      	pch =	LD63FD439_69
00CE7:      	ljmp	LD63FD439_69
            ; //LD63FD439_68:;					
            LD63FD439_68:
            ; //_AED4A60EA_2588:;				
            _AED4A60EA_2588:
            ; //_AED4A60EA_2589:;				
            _AED4A60EA_2589:
            ; //	asm clr io[0x09].b14;			
00CE8:      	clr io[0x09].b14//
            ; //LD63FD439_65:;					
            LD63FD439_65:
            ; //_AED4A60EA_2590:;				
            _AED4A60EA_2590:
            ; //	return;					
00CE9:      	AR	= 1
00CEA:      	BP	+= AR
00CEB:      	pop	AR
00CEC:      	rm[BP_SAVE]	= AR
00CED:      	rets
            ; //_WS_RefreshAD7B99B1_end:;			
            _WS_RefreshAD7B99B1_end:
            ; //_AED4A60EA_2591:;				
            _AED4A60EA_2591:
            ; //}
            ; //
            ; //void _WS_Key_RGBC5B96B6D()			
            _WS_Key_RGBC5B96B6D:
            ; //{
            ; //_AED4A60EA_2592:;				
            _AED4A60EA_2592:
            ; //	
            ; //_AED4A60EA_2593:;				
            _AED4A60EA_2593:
            ; //	asm I1 = LD63FD439_72+0;		
00CEE:      	I1 = LD63FD439_72+0//
            ; //	sAX	= *(__int16*)sSI;		
00CEF:      	AX	= rm[I1]
            ; //	goto LD63FD439_74;			
00CF0:      	pch =	LD63FD439_74
00CF1:      	ljmp	LD63FD439_74
            ; //LD63FD439_75:;					
            LD63FD439_75:
            ; //_AED4A60EA_2594:;				
            _AED4A60EA_2594:
            ; //_AED4A60EA_2595:;				
            _AED4A60EA_2595:
            ; //	sAX	= 0x0000;			
00CF2:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CF3:      	push	AX
            ; //	sAX	= 0x0003;			
00CF4:      	AX	= 0x03
            ; //	PUSH(sAX);				
00CF5:      	push	AX
            ; //	sAX	= 0x0000;			
00CF6:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CF7:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00CF8:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00CF9:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00CFA:      	AR	= 3
00CFB:      	BP	+= AR
            ; //_AED4A60EA_2596:;				
            _AED4A60EA_2596:
            ; //_AED4A60EA_2597:;				
            _AED4A60EA_2597:
            ; //	_WS_RefreshAD7B99B1();			
00CFC:      	pch	= _WS_RefreshAD7B99B1
00CFD:      	lcall	_WS_RefreshAD7B99B1
            ; //_AED4A60EA_2598:;				
            _AED4A60EA_2598:
            ; //_AED4A60EA_2599:;				
            _AED4A60EA_2599:
            ; //	sAX	= 0x0000;			
00CFE:      	AX	= 0x00
            ; //	PUSH(sAX);				
00CFF:      	push	AX
            ; //	sAX	= 0x0003;			
00D00:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D01:      	push	AX
            ; //	sAX	= 0x0000;			
00D02:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D03:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D04:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D05:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D06:      	AR	= 3
00D07:      	BP	+= AR
            ; //_AED4A60EA_2600:;				
            _AED4A60EA_2600:
            ; //_AED4A60EA_2601:;				
            _AED4A60EA_2601:
            ; //	_WS_RefreshAD7B99B1();			
00D08:      	pch	= _WS_RefreshAD7B99B1
00D09:      	lcall	_WS_RefreshAD7B99B1
            ; //_AED4A60EA_2602:;				
            _AED4A60EA_2602:
            ; //	goto LD63FD439_73;			
00D0A:      	pch =	LD63FD439_73
00D0B:      	ljmp	LD63FD439_73
            ; //LD63FD439_76:;					
            LD63FD439_76:
            ; //_AED4A60EA_2603:;				
            _AED4A60EA_2603:
            ; //_AED4A60EA_2604:;				
            _AED4A60EA_2604:
            ; //	sAX	= 0x0000;			
00D0C:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D0D:      	push	AX
            ; //	sAX	= 0x0003;			
00D0E:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D0F:      	push	AX
            ; //	sAX	= 0x0000;			
00D10:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D11:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D12:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D13:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D14:      	AR	= 3
00D15:      	BP	+= AR
            ; //_AED4A60EA_2605:;				
            _AED4A60EA_2605:
            ; //_AED4A60EA_2606:;				
            _AED4A60EA_2606:
            ; //	_WS_RefreshAD7B99B1();			
00D16:      	pch	= _WS_RefreshAD7B99B1
00D17:      	lcall	_WS_RefreshAD7B99B1
            ; //_AED4A60EA_2607:;				
            _AED4A60EA_2607:
            ; //_AED4A60EA_2608:;				
            _AED4A60EA_2608:
            ; //	sAX	= 0x001F;			
00D18:      	AX	= 0x1F
            ; //	PUSH(sAX);				
00D19:      	push	AX
            ; //	sAX	= 0x0006;			
00D1A:      	AX	= 0x06
            ; //	PUSH(sAX);				
00D1B:      	push	AX
            ; //	sAX	= 0x0004;			
00D1C:      	AX	= 0x04
            ; //	PUSH(sAX);				
00D1D:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D1E:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D1F:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D20:      	AR	= 3
00D21:      	BP	+= AR
            ; //_AED4A60EA_2609:;				
            _AED4A60EA_2609:
            ; //_AED4A60EA_2610:;				
            _AED4A60EA_2610:
            ; //	_WS_RefreshAD7B99B1();			
00D22:      	pch	= _WS_RefreshAD7B99B1
00D23:      	lcall	_WS_RefreshAD7B99B1
            ; //_AED4A60EA_2611:;				
            _AED4A60EA_2611:
            ; //	goto LD63FD439_73;			
00D24:      	pch =	LD63FD439_73
00D25:      	ljmp	LD63FD439_73
            ; //LD63FD439_77:;					
            LD63FD439_77:
            ; //_AED4A60EA_2612:;				
            _AED4A60EA_2612:
            ; //_AED4A60EA_2613:;				
            _AED4A60EA_2613:
            ; //	sAX	= 0x0000;			
00D26:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D27:      	push	AX
            ; //	sAX	= 0x0003;			
00D28:      	AX	= 0x03
            ; //	PUSH(sAX);				
00D29:      	push	AX
            ; //	sAX	= 0x0000;			
00D2A:      	AX	= 0x00
            ; //	PUSH(sAX);				
00D2B:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D2C:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D2D:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D2E:      	AR	= 3
00D2F:      	BP	+= AR
            ; //_AED4A60EA_2614:;				
            _AED4A60EA_2614:
            ; //_AED4A60EA_2615:;				
            _AED4A60EA_2615:
            ; //	_WS_RefreshAD7B99B1();			
00D30:      	pch	= _WS_RefreshAD7B99B1
00D31:      	lcall	_WS_RefreshAD7B99B1
            ; //_AED4A60EA_2616:;				
            _AED4A60EA_2616:
            ; //_AED4A60EA_2617:;				
            _AED4A60EA_2617:
            ; //	sAX	= 0xFF00;			
00D32:      	AX	= 0xFF00
            ; //	PUSH(sAX);				
00D34:      	push	AX
            ; //	sAX	= 0x000A;			
00D35:      	AX	= 0x0A
            ; //	PUSH(sAX);				
00D36:      	push	AX
            ; //	sAX	= 0x0007;			
00D37:      	AX	= 0x07
            ; //	PUSH(sAX);				
00D38:      	push	AX
            ; //	_WS_ColorSet_LEDCA3DEB8C(STACK[sSP + 0], STACK[sSP + 1], STACK[sSP + 2]);
00D39:      	pch	= _WS_ColorSet_LEDCA3DEB8C
00D3A:      	lcall	_WS_ColorSet_LEDCA3DEB8C
            ; //	RESTORESP(3);				
00D3B:      	AR	= 3
00D3C:      	BP	+= AR
            ; //_AED4A60EA_2618:;				
            _AED4A60EA_2618:
            ; //_AED4A60EA_2619:;				
            _AED4A60EA_2619:
            ; //	_WS_RefreshAD7B99B1();			
00D3D:      	pch	= _WS_RefreshAD7B99B1
00D3E:      	lcall	_WS_RefreshAD7B99B1
            ; //_AED4A60EA_2620:;				
            _AED4A60EA_2620:
            ; //	goto LD63FD439_73;			
00D3F:      	pch =	LD63FD439_73
00D40:      	ljmp	LD63FD439_73
            ; //	goto LD63FD439_73;			
00D41:      	pch =	LD63FD439_73
00D42:      	ljmp	LD63FD439_73
            ; //LD63FD439_74:;					
            LD63FD439_74:
            ; //	sCX	= sAX;				
00D43:      	AR	= AX
00D44:      	CX	= AR
            ; //	sAX	= 0x0000;			
00D45:      	AX	= 0x00
            ; //	sfx_CMP_AX_CX_U_JE();			
00D46:      	pch	= sfx_CMP_AX_CX_U_JE
00D47:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_78;	
00D48:      	if NZ	jmp LD63FD439_78
            ; //	goto LD63FD439_75;			
00D49:      	pch =	LD63FD439_75
00D4A:      	ljmp	LD63FD439_75
            ; //LD63FD439_78:;					
            LD63FD439_78:
            ; //	sAX	= 0x0001;			
00D4B:      	AX	= 0x01
            ; //	sfx_CMP_AX_CX_U_JE();			
00D4C:      	pch	= sfx_CMP_AX_CX_U_JE
00D4D:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_79;	
00D4E:      	if NZ	jmp LD63FD439_79
            ; //	goto LD63FD439_76;			
00D4F:      	pch =	LD63FD439_76
00D50:      	ljmp	LD63FD439_76
            ; //LD63FD439_79:;					
            LD63FD439_79:
            ; //	sAX	= 0x0002;			
00D51:      	AX	= 0x02
            ; //	sfx_CMP_AX_CX_U_JE();			
00D52:      	pch	= sfx_CMP_AX_CX_U_JE
00D53:      	lcall	sfx_CMP_AX_CX_U_JE
            ; //	if(__jne__)	goto LD63FD439_80;	
00D54:      	if NZ	jmp LD63FD439_80
            ; //	goto LD63FD439_77;			
00D55:      	pch =	LD63FD439_77
00D56:      	ljmp	LD63FD439_77
            ; //LD63FD439_80:;					
            LD63FD439_80:
            ; //	goto	LD63FD439_73;			
00D57:      	pch =	LD63FD439_73
00D58:      	ljmp	LD63FD439_73
            ; //LD63FD439_73:;					
            LD63FD439_73:
            ; //_AED4A60EA_2621:;				
            _AED4A60EA_2621:
            ; //	asm I1 = LD63FD439_72+0;		
00D59:      	I1 = LD63FD439_72+0//
            ; //	sAX	= *(__int16*)sSI;		
00D5A:      	AX	= rm[I1]
            ; //	sSI	= (int)&LD63FD439_72;		
00D5B:      	I1	= LD63FD439_72
            ; //	PUSH(sAX);				
00D5C:      	push	AX
            ; //	sAX	= 0x0001;			
00D5D:      	AX	= 0x01
            ; //	sCX	= *(__int16*)sSI;		
00D5E:      	CX	= rm[I1]
            ; //	sCX	= sCX + sAX;			
00D5F:      	AR	= AX
00D60:      	CX	+= AR
            ; //	*(__int16*)sSI	= sCX;			
00D61:      	rm[I1]	= CX
            ; //	sAX	= POP();			
00D62:      	pop	AX
            ; //_AED4A60EA_2622:;				
            _AED4A60EA_2622:
            ; //	asm I1 = LD63FD439_72+0;		
00D63:      	I1 = LD63FD439_72+0//
            ; //	sAX	= *(__int16*)sSI;		
00D64:      	AX	= rm[I1]
            ; //	sCX	= 0x0002;			
00D65:      	CX	= 0x02
            ; //	sfx_CMP_AX_CX_JA();			
00D66:      	pch	= sfx_CMP_AX_CX_JA
00D67:      	lcall	sfx_CMP_AX_CX_JA
            ; //	if(__je__)	goto LD63FD439_82;	
00D68:      	if ZR	jmp LD63FD439_82
            ; //	goto	LD63FD439_81;			
00D69:      	pch =	LD63FD439_81
00D6A:      	ljmp	LD63FD439_81
            ; //LD63FD439_82:;					
            LD63FD439_82:
            ; //_AED4A60EA_2623:;				
            _AED4A60EA_2623:
            ; //	LD63FD439_72+0	= 0x00;			
00D6B:      	AR	= 0x00
00D6C:      	rm[LD63FD439_72+0]	= AR
            ; //LD63FD439_81:;					
            LD63FD439_81:
            ; //_AED4A60EA_2624:;				
            _AED4A60EA_2624:
            ; //_AED4A60EA_2625:;				
            _AED4A60EA_2625:
            ; //_AED4A60EA_2626:;				
            _AED4A60EA_2626:
            ; //	sAX	= 0x0032;			
00D6D:      	AX	= 0x32
            ; //	PUSH(sAX);				
00D6E:      	push	AX
            ; //	_delay6F9F34ED(STACK[sSP + 0]);		
00D6F:      	pch	= _delay6F9F34ED
00D70:      	lcall	_delay6F9F34ED
            ; //	RESTORESP(1);				
00D71:      	pop	AR
            ; //LD63FD439_71:;					
            LD63FD439_71:
            ; //_AED4A60EA_2627:;				
            _AED4A60EA_2627:
            ; //	return;					
00D72:      	rets
            ; //_WS_Key_RGBC5B96B6D_end:;			
            _WS_Key_RGBC5B96B6D_end:
            ; //_AED4A60EA_2628:;				
            _AED4A60EA_2628:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_WS2811_02F950F9_s(void)	
            ginit_code_WS2811_02F950F9_s:
            ; //{
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+0;
00D73:      	P1 = #ginit_seg_WS2811_02F950F9_s+0//
            ; //	asm I1 = LD63FD439_15;			
00D76:      	I1 = LD63FD439_15//
            ; //	sCX = 1;				
00D77:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00D78:      	pch	= sfx_GLOBALINIT
00D79:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	asm P1 = #ginit_seg_WS2811_02F950F9_s+1;
00D7A:      	P1 = #ginit_seg_WS2811_02F950F9_s+1//
            ; //	asm I1 = LD63FD439_72;			
00D7D:      	I1 = LD63FD439_72//
            ; //	sCX = 1;				
00D7E:      	CX	= 0x01
            ; //	sfx_GLOBALINIT();			
00D7F:      	pch	= sfx_GLOBALINIT
00D80:      	lcall	sfx_GLOBALINIT
            ; //
            ; //	return;					
00D81:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //__int16 ginit_seg_WS2811_02F950F9_s[2] = {	
            ginit_seg_WS2811_02F950F9_s:
            ; //						
            DW 
            ; //	0x0000,					
00D82:      DW 0x0000,
            ; //						
            DW 
            ; //	0x0000					
00D83:      DW 0x0000,
            ; //};
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\WS2811_02F950F9.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> Start=========================
            ; global.c Code Start!!;
            VarRM[0:4095]={
             _sub_vol980B1B83,_ticksA7263C09[2] 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _RampUpFF7996DA();
            ; //rjmp void _RampDown1D382EDA();
            ; //rjmp void _InitialDA4A7CC4();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _RampUpFF7996DA()			
            _RampUpFF7996DA:
            ; //{
            ; //_AED4A60EA_2629:;				
            _AED4A60EA_2629:
            ; //	
            ; //_AED4A60EA_2630:;				
            _AED4A60EA_2630:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00D84:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00D85:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
00D86:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
00D87:      	AX = AX & AR//
            ; //	sCX	= 0x003F;			
00D88:      	CX	= 0x3F
            ; //	sfx_CMP_AX_CX_JE();			
00D89:      	pch	= sfx_CMP_AX_CX_JE
00D8A:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_88;	
00D8B:      	if ZR	jmp L0E8FA404_88
            ; //	goto	L0E8FA404_87;			
00D8C:      	jmp	L0E8FA404_87
            ; //L0E8FA404_88:;					
            L0E8FA404_88:
            ; //_AED4A60EA_2631:;				
            _AED4A60EA_2631:
            ; //	sAX	= 0x0000;			
00D8D:      	AX	= 0x00
            ; //	goto L0E8FA404_86;			
00D8E:      	jmp	L0E8FA404_86
            ; //L0E8FA404_87:;					
            L0E8FA404_87:
            ; //_AED4A60EA_2632:;				
            _AED4A60EA_2632:
            ; //_AED4A60EA_2633:;				
            _AED4A60EA_2633:
            ; //_AED4A60EA_2634:;				
            _AED4A60EA_2634:
            ; //	_GetTickCount18DC070C();		
00D8F:      	pch	= _GetTickCount18DC070C
00D90:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00D91:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
00D92:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00D93:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00D94:      	AR	= CX
00D95:      	AX	= AX - AR
00D96:      	AR	= BX
00D97:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
00D98:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
00D99:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
00D9A:      	pch	= sfx_CMPLONG_JA
00D9B:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_90;	
00D9C:      	if ZR	jmp L0E8FA404_90
            ; //	goto	L0E8FA404_89;			
00D9D:      	jmp	L0E8FA404_89
            ; //L0E8FA404_90:;					
            L0E8FA404_90:
            ; //	
            ; //_AED4A60EA_2635:;				
            _AED4A60EA_2635:
            ; //_AED4A60EA_2636:;				
            _AED4A60EA_2636:
            ; //	_GetTickCount18DC070C();		
00D9E:      	pch	= _GetTickCount18DC070C
00D9F:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00DA0:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
00DA1:      	rm[I1++]	= AX
00DA2:      	rm[I1--]	= DX
            ; //_AED4A60EA_2637:;				
            _AED4A60EA_2637:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00DA3:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00DA4:      	AX	= rm[I1]
            ; //	sAX++;					
00DA5:      	AX++
            ; //	*(__int16*)sSI	= sAX;			
00DA6:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
00DA7:      	AR	= AX
00DA8:      	io[0x3C]	= AR
            ; //L0E8FA404_89:;					
            L0E8FA404_89:
            ; //_AED4A60EA_2638:;				
            _AED4A60EA_2638:
            ; //_AED4A60EA_2639:;				
            _AED4A60EA_2639:
            ; //	sAX	= 0x0001;			
00DA9:      	AX	= 0x01
            ; //	goto L0E8FA404_86;			
00DAA:      	jmp	L0E8FA404_86
            ; //L0E8FA404_86:;					
            L0E8FA404_86:
            ; //_AED4A60EA_2640:;				
            _AED4A60EA_2640:
            ; //	return;					
00DAB:      	rets
            ; //_RampUpFF7996DA_end:;				
            _RampUpFF7996DA_end:
            ; //_AED4A60EA_2641:;				
            _AED4A60EA_2641:
            ; //}
            ; //
            ; //rjmp void _RampDown1D382EDA()			
            _RampDown1D382EDA:
            ; //{
            ; //_AED4A60EA_2642:;				
            _AED4A60EA_2642:
            ; //	
            ; //_AED4A60EA_2643:;				
            _AED4A60EA_2643:
            ; //	asm I1 = _sub_vol980B1B83+0;		
00DAC:      	I1 = _sub_vol980B1B83+0//
            ; //	sAX	= *(__int16*)sSI;		
00DAD:      	AX	= rm[I1]
            ; //	asm AR = 0x003F;			
00DAE:      	AR = 0x003F//
            ; //	asm AX = AX & AR;			
00DAF:      	AX = AX & AR//
            ; //	sCX	= 0x0000;			
00DB0:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JE();			
00DB1:      	pch	= sfx_CMP_AX_CX_JE
00DB2:      	lcall	sfx_CMP_AX_CX_JE
            ; //	if(__je__)	goto L0E8FA404_93;	
00DB3:      	if ZR	jmp L0E8FA404_93
            ; //	goto	L0E8FA404_92;			
00DB4:      	jmp	L0E8FA404_92
            ; //L0E8FA404_93:;					
            L0E8FA404_93:
            ; //_AED4A60EA_2644:;				
            _AED4A60EA_2644:
            ; //	sAX	= 0x0000;			
00DB5:      	AX	= 0x00
            ; //	goto L0E8FA404_91;			
00DB6:      	jmp	L0E8FA404_91
            ; //L0E8FA404_92:;					
            L0E8FA404_92:
            ; //_AED4A60EA_2645:;				
            _AED4A60EA_2645:
            ; //_AED4A60EA_2646:;				
            _AED4A60EA_2646:
            ; //_AED4A60EA_2647:;				
            _AED4A60EA_2647:
            ; //	_GetTickCount18DC070C();		
00DB7:      	pch	= _GetTickCount18DC070C
00DB8:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00DB9:      	I1 = _ticksA7263C09+0//
            ; //	sCX	= *(__int16*)sSI++;		
00DBA:      	CX	= rm[I1++]
            ; //	sBX	= *(__int16*)sSI--;		
00DBB:      	BX	= rm[I1--]
            ; //	sfx_SUBLONG();				
00DBC:      	AR	= CX
00DBD:      	AX	= AX - AR
00DBE:      	AR	= BX
00DBF:      	DX	= DX - AR + C - 1
            ; //	sCX	= 0x0000;			
00DC0:      	CX	= 0x00
            ; //	sBX	= 0x0005;			
00DC1:      	BX	= 0x05
            ; //	sfx_CMPLONG_JA();			
00DC2:      	pch	= sfx_CMPLONG_JA
00DC3:      	lcall	sfx_CMPLONG_JA
            ; //	if(__je__)	goto L0E8FA404_95;	
00DC4:      	if ZR	jmp L0E8FA404_95
            ; //	goto	L0E8FA404_94;			
00DC5:      	jmp	L0E8FA404_94
            ; //L0E8FA404_95:;					
            L0E8FA404_95:
            ; //	
            ; //_AED4A60EA_2648:;				
            _AED4A60EA_2648:
            ; //_AED4A60EA_2649:;				
            _AED4A60EA_2649:
            ; //	_GetTickCount18DC070C();		
00DC6:      	pch	= _GetTickCount18DC070C
00DC7:      	lcall	_GetTickCount18DC070C
            ; //	asm I1 = _ticksA7263C09+0;		
00DC8:      	I1 = _ticksA7263C09+0//
            ; //	sfx_STORSILONG();			
00DC9:      	rm[I1++]	= AX
00DCA:      	rm[I1--]	= DX
            ; //_AED4A60EA_2650:;				
            _AED4A60EA_2650:
            ; //	sSI	= (int)&_sub_vol980B1B83;	
00DCB:      	I1	= _sub_vol980B1B83
            ; //	sAX	= *(__int16*)sSI;		
00DCC:      	AX	= rm[I1]
            ; //	sAX--;					
00DCD:      	AX--
            ; //	*(__int16*)sSI	= sAX;			
00DCE:      	rm[I1]	= AX
            ; //	io[0x3C]	= sAX;			
00DCF:      	AR	= AX
00DD0:      	io[0x3C]	= AR
            ; //L0E8FA404_94:;					
            L0E8FA404_94:
            ; //_AED4A60EA_2651:;				
            _AED4A60EA_2651:
            ; //_AED4A60EA_2652:;				
            _AED4A60EA_2652:
            ; //	sAX	= 0x0001;			
00DD1:      	AX	= 0x01
            ; //	goto L0E8FA404_91;			
00DD2:      	jmp	L0E8FA404_91
            ; //L0E8FA404_91:;					
            L0E8FA404_91:
            ; //_AED4A60EA_2653:;				
            _AED4A60EA_2653:
            ; //	return;					
00DD3:      	rets
            ; //_RampDown1D382EDA_end:;				
            _RampDown1D382EDA_end:
            ; //_AED4A60EA_2654:;				
            _AED4A60EA_2654:
            ; //}
            ; //
            ; //rjmp void _InitialDA4A7CC4()			
            _InitialDA4A7CC4:
            ; //{
            ; //_AED4A60EA_2655:;				
            _AED4A60EA_2655:
            ; //	
            ; //_AED4A60EA_2656:;				
            _AED4A60EA_2656:
            ; //	io[0x67]	= 0x0007;		
00DD4:      	AR	= 0x07
00DD5:      	io[0x67]	= AR
            ; //_AED4A60EA_2657:;				
            _AED4A60EA_2657:
            ; //	io[0x06]	= 0xC004;		
00DD6:      	AR	= 0xC004
00DD8:      	io[0x06]	= AR
            ; //_AED4A60EA_2658:;				
            _AED4A60EA_2658:
            ; //	io[0x05]	= 0x0000;		
00DD9:      	AR	= 0x00
00DDA:      	io[0x05]	= AR
            ; //_AED4A60EA_2659:;				
            _AED4A60EA_2659:
            ; //	io[0x09]	= 0x0000;		
00DDB:      	AR	= 0x00
00DDC:      	io[0x09]	= AR
            ; //_AED4A60EA_2660:;				
            _AED4A60EA_2660:
            ; //	io[0x08]	= 0xFFFF;		
00DDD:      	AR	= 0xFFFF
00DDF:      	io[0x08]	= AR
            ; //	
            ; //_AED4A60EA_2661:;				
            _AED4A60EA_2661:
            ; //	sAX	= 0x0002;			
00DE0:      	AX	= 0x02
            ; //_AED4A60EA_2662:;				
            _AED4A60EA_2662:
            ; //	asm	AR = AX				
00DE1:      	AR = AX
            ; //_AED4A60EA_2663:;				
            _AED4A60EA_2663:
            ; //	asm	io[IOP_IX] = AR			
00DE2:      	io[IOP_IX] = AR
            ; //	
            ; //_AED4A60EA_2664:;				
            _AED4A60EA_2664:
            ; //	sAX	= 0x2AAA;			
00DE3:      	AX	= 0x2AAA
            ; //_AED4A60EA_2665:;				
            _AED4A60EA_2665:
            ; //	asm	AR = AX				
00DE5:      	AR = AX
            ; //_AED4A60EA_2666:;				
            _AED4A60EA_2666:
            ; //	asm	io[IOP_DAT] = AR		
00DE6:      	io[IOP_DAT] = AR
            ; //_AED4A60EA_2667:;				
            _AED4A60EA_2667:
            ; //	asm	eni				
00DE7:      	eni
            ; //_AED4A60EA_2668:;				
            _AED4A60EA_2668:
            ; //	asm	set io[INTENA].b3		
00DE8:      	set io[INTENA].b3
            ; //L0E8FA404_96:;					
            L0E8FA404_96:
            ; //_AED4A60EA_2669:;				
            _AED4A60EA_2669:
            ; //	return;					
00DE9:      	rets
            ; //_InitialDA4A7CC4_end:;				
            _InitialDA4A7CC4_end:
            ; //_AED4A60EA_2670:;				
            _AED4A60EA_2670:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_global_6037E6D5_s(void)	
            ginit_code_global_6037E6D5_s:
            ; //{
            ; //	return;					
00DEA:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\GLOBAL_6037E6D5.S.CODE.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> Start=========================
            ; sub3play.c Code Start!!;
            VarRM[0:4095]={
             bts_ch0_get_ix[2],PCMYIN_PTR,PCMYOU_PTR,PCMIN,SampleCh0Rate,BaseOn512#PCMY[512],SUBFLTI[4],SUBFLTA
            ,SUBFLTP,SUBFLTG 
            };
            
            ; //
            .code
            ; //
            ; //
            ; //rjmp void _ClearRenderBufB079D01D();
            ; //rjmp void _Sub3Initial96BE24F3();
            ; //rjmp void _WaitPCM_Empty_size53398B9D();
            ; //rjmp void _Sub3ZeroFillABFF23AA();
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1);
            ; //naked rjmp void Sbb_Ch0GetBts();
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            .code
            ; //rjmp void _ClearRenderBufB079D01D()		
            _ClearRenderBufB079D01D:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00DEB:      	AR	= rm[BP_SAVE]
00DEC:      	push	AR
00DED:      	AR	= BP
00DEE:      	rm[BP_SAVE]	= AR
00DEF:      	AR	 = -1
00DF0:      	BP	+= AR
            ; //_AED4A60EA_2671:;				
            _AED4A60EA_2671:
            ; //	
            ; //_AED4A60EA_2672:;				
            _AED4A60EA_2672:
            ; //	asm AX = PCMY+0;			
00DF1:      	AX = PCMY+0//
            ; //_AED4A60EA_2673:;				
            _AED4A60EA_2673:
            ; //	asm	AR = AX				
00DF3:      	AR = AX
            ; //_AED4A60EA_2674:;				
            _AED4A60EA_2674:
            ; //	asm	I0 = AR				
00DF4:      	I0 = AR
            ; //_AED4A60EA_2675:;				
            _AED4A60EA_2675:
            ; //	_i_1_2+0	= 0x0200;		
00DF5:      	I1	= rm[BP_SAVE]
00DF6:      	AR	= 0x0200
00DF8:      	rm[I1]	= AR
            ; //LFB78B58C_100:;					
            LFB78B58C_100:
            ; //_AED4A60EA_2676:;				
            _AED4A60EA_2676:
            ; //	sSI	= (int)&_i_1_2;			
00DF9:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00DFA:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00DFB:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00DFC:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00DFD:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
00DFE:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
00DFF:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_101;	
00E00:      	if NZ	jmp LFB78B58C_101
            ; //	goto	LFB78B58C_99;			
00E01:      	jmp	LFB78B58C_99
            ; //LFB78B58C_101:;					
            LFB78B58C_101:
            ; //	
            ; //_AED4A60EA_2677:;				
            _AED4A60EA_2677:
            ; //	sAX	= 0x0000;			
00E02:      	AX	= 0x00
            ; //_AED4A60EA_2678:;				
            _AED4A60EA_2678:
            ; //	asm	rm[I0++] = AX			
00E03:      	rm[I0++] = AX
            ; //	goto LFB78B58C_100;			
00E04:      	jmp	LFB78B58C_100
            ; //LFB78B58C_99:;					
            LFB78B58C_99:
            ; //LFB78B58C_98:;					
            LFB78B58C_98:
            ; //_AED4A60EA_2679:;				
            _AED4A60EA_2679:
            ; //	return;					
00E05:      	AR	= 1
00E06:      	BP	+= AR
00E07:      	pop	AR
00E08:      	rm[BP_SAVE]	= AR
00E09:      	rets
            ; //_ClearRenderBufB079D01D_end:;			
            _ClearRenderBufB079D01D_end:
            ; //_AED4A60EA_2680:;				
            _AED4A60EA_2680:
            ; //}
            ; //
            ; //rjmp void _Sub3Initial96BE24F3()		
            _Sub3Initial96BE24F3:
            ; //{
            ; //_AED4A60EA_2681:;				
            _AED4A60EA_2681:
            ; //_AED4A60EA_2682:;				
            _AED4A60EA_2682:
            ; //	asm	dsi				
00E0A:      	dsi
            ; //_AED4A60EA_2683:;				
            _AED4A60EA_2683:
            ; //	asm	nop				
00E0B:      	nop
            ; //	
            ; //_AED4A60EA_2684:;				
            _AED4A60EA_2684:
            ; //_AED4A60EA_2685:;				
            _AED4A60EA_2685:
            ; //	_ClearRenderBufB079D01D();		
00E0C:      	pch	= _ClearRenderBufB079D01D
00E0D:      	lcall	_ClearRenderBufB079D01D
            ; //_AED4A60EA_2686:;				
            _AED4A60EA_2686:
            ; //	asm	AR = PASR,0			
00E0E:      	AR = PASR,0
            ; //_AED4A60EA_2687:;				
            _AED4A60EA_2687:
            ; //	asm AX = PCMY+0;			
00E0F:      	AX = PCMY+0//
            ; //	asm I1 = PCMYIN_PTR+0;			
00E11:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00E12:      	rm[I1]	= AX
            ; //_AED4A60EA_2688:;				
            _AED4A60EA_2688:
            ; //	asm AX = PCMY+0;			
00E13:      	AX = PCMY+0//
            ; //	asm I1 = PCMYOU_PTR+0;			
00E15:      	I1 = PCMYOU_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00E16:      	rm[I1]	= AX
            ; //_AED4A60EA_2689:;				
            _AED4A60EA_2689:
            ; //	io[0x3B]	= 0x0000;		
00E17:      	AR	= 0x00
00E18:      	io[0x3B]	= AR
            ; //_AED4A60EA_2690:;				
            _AED4A60EA_2690:
            ; //_AED4A60EA_2691:;				
            _AED4A60EA_2691:
            ; //	Subb3_Init();				
00E19:      	pch	= Subb3_Init
00E1A:      	lcall	Subb3_Init
            ; //LFB78B58C_102:;					
            LFB78B58C_102:
            ; //_AED4A60EA_2692:;				
            _AED4A60EA_2692:
            ; //	return;					
00E1B:      	rets
            ; //_Sub3Initial96BE24F3_end:;			
            _Sub3Initial96BE24F3_end:
            ; //_AED4A60EA_2693:;				
            _AED4A60EA_2693:
            ; //}
            ; //
            ; //rjmp void _WaitPCM_Empty_size53398B9D()		
            _WaitPCM_Empty_size53398B9D:
            ; //{
            ; //	__int16 _x_1_2;
            ; //						
00E1C:      	AR	= rm[BP_SAVE]
00E1D:      	push	AR
00E1E:      	AR	= BP
00E1F:      	rm[BP_SAVE]	= AR
00E20:      	AR	 = -1
00E21:      	BP	+= AR
            ; //_AED4A60EA_2694:;				
            _AED4A60EA_2694:
            ; //_AED4A60EA_2695:;				
            _AED4A60EA_2695:
            ; //	asm I1 = PCMYOU_PTR+0;			
00E22:      	I1 = PCMYOU_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
00E23:      	AX	= rm[I1]
            ; //	asm I1 = PCMYIN_PTR+0;			
00E24:      	I1 = PCMYIN_PTR+0//
            ; //	sCX	= *(__int16*)sSI;		
00E25:      	CX	= rm[I1]
            ; //	sAX	= sAX - sCX;			
00E26:      	AR	= CX
00E27:      	AX	-= AR
            ; //	
            ; //	sSI	= (int)&_x_1_2;			
00E28:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00E29:      	rm[I1]	= AX
            ; //_AED4A60EA_2696:;				
            _AED4A60EA_2696:
            ; //	sSI	= (int)&_x_1_2;			
00E2A:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E2B:      	AX	= rm[I1]
            ; //	sCX	= 0x0000;			
00E2C:      	CX	= 0x00
            ; //	sfx_CMP_AX_CX_JL();			
00E2D:      	pch	= sfx_CMP_AX_CX_JL
00E2E:      	lcall	sfx_CMP_AX_CX_JL
            ; //	if(__je__)	goto LFB78B58C_105;	
00E2F:      	if ZR	jmp LFB78B58C_105
            ; //	goto	LFB78B58C_104;			
00E30:      	jmp	LFB78B58C_104
            ; //LFB78B58C_105:;					
            LFB78B58C_105:
            ; //	
            ; //_AED4A60EA_2697:;				
            _AED4A60EA_2697:
            ; //	sAX	= 0x01FF;			
00E31:      	AX	= 0x01FF
            ; //	sSI	= (int)&_x_1_2;			
00E33:      	I1	= rm[BP_SAVE]
            ; //	sCX	= *(__int16*)sSI;		
00E34:      	CX	= rm[I1]
            ; //	sAX	= sAX & sCX;			
00E35:      	AR	= CX
00E36:      	AX	&= AR
            ; //	sSI	= (int)&_x_1_2;			
00E37:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00E38:      	rm[I1]	= AX
            ; //LFB78B58C_104:;					
            LFB78B58C_104:
            ; //_AED4A60EA_2698:;				
            _AED4A60EA_2698:
            ; //_AED4A60EA_2699:;				
            _AED4A60EA_2699:
            ; //	sSI	= (int)&_x_1_2;			
00E39:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E3A:      	AX	= rm[I1]
            ; //	sCX	= 0x0121;			
00E3B:      	CX	= 0x0121
            ; //	sAX	= sAX - sCX;			
00E3D:      	AR	= CX
00E3E:      	AX	-= AR
            ; //	sSI	= (int)&_x_1_2;			
00E3F:      	I1	= rm[BP_SAVE]
            ; //	*(__int16*)sSI	= sAX;			
00E40:      	rm[I1]	= AX
            ; //_AED4A60EA_2700:;				
            _AED4A60EA_2700:
            ; //	sSI	= (int)&_x_1_2;			
00E41:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E42:      	AX	= rm[I1]
            ; //	goto LFB78B58C_103;			
00E43:      	jmp	LFB78B58C_103
            ; //LFB78B58C_103:;					
            LFB78B58C_103:
            ; //_AED4A60EA_2701:;				
            _AED4A60EA_2701:
            ; //	return;					
00E44:      	AR	= 1
00E45:      	BP	+= AR
00E46:      	pop	AR
00E47:      	rm[BP_SAVE]	= AR
00E48:      	rets
            ; //_WaitPCM_Empty_size53398B9D_end:;		
            _WaitPCM_Empty_size53398B9D_end:
            ; //_AED4A60EA_2702:;				
            _AED4A60EA_2702:
            ; //}
            ; //
            ; //rjmp void _Sub3ZeroFillABFF23AA()		
            _Sub3ZeroFillABFF23AA:
            ; //{
            ; //	__int16 _i_1_2;
            ; //						
00E49:      	AR	= rm[BP_SAVE]
00E4A:      	push	AR
00E4B:      	AR	= BP
00E4C:      	rm[BP_SAVE]	= AR
00E4D:      	AR	 = -1
00E4E:      	BP	+= AR
            ; //_AED4A60EA_2703:;				
            _AED4A60EA_2703:
            ; //_AED4A60EA_2704:;				
            _AED4A60EA_2704:
            ; //	asm	push CBL			
00E4F:      	push CBL
            ; //_AED4A60EA_2705:;				
            _AED4A60EA_2705:
            ; //	io[0x3B]	= 0x0009;		
00E50:      	AR	= 0x09
00E51:      	io[0x3B]	= AR
            ; //	
            ; //_AED4A60EA_2706:;				
            _AED4A60EA_2706:
            ; //	asm I1 = PCMYIN_PTR+0;			
00E52:      	I1 = PCMYIN_PTR+0//
            ; //	sAX	= *(__int16*)sSI;		
00E53:      	AX	= rm[I1]
            ; //_AED4A60EA_2707:;				
            _AED4A60EA_2707:
            ; //	asm	AR = AX				
00E54:      	AR = AX
            ; //_AED4A60EA_2708:;				
            _AED4A60EA_2708:
            ; //	asm	I0 = AR				
00E55:      	I0 = AR
            ; //_AED4A60EA_2709:;				
            _AED4A60EA_2709:
            ; //	_i_1_2+0	= 0x0120;		
00E56:      	I1	= rm[BP_SAVE]
00E57:      	AR	= 0x0120
00E59:      	rm[I1]	= AR
            ; //LFB78B58C_108:;					
            LFB78B58C_108:
            ; //_AED4A60EA_2710:;				
            _AED4A60EA_2710:
            ; //	sSI	= (int)&_i_1_2;			
00E5A:      	I1	= rm[BP_SAVE]
            ; //	sAX	= *(__int16*)sSI;		
00E5B:      	AX	= rm[I1]
            ; //	sSI	= (int)&_i_1_2;			
00E5C:      	I1	= rm[BP_SAVE]
            ; //	asm AR = 0x0001;			
00E5D:      	AR = 0x0001//
            ; //	sCX	= *(__int16*)sSI;		
00E5E:      	CX	= rm[I1]
            ; //	asm rm[I1] = CX - AR;			
00E5F:      	rm[I1] = CX - AR//
            ; //	sfx_CHECKZERO();			
00E60:      	AR	= AX
            ; //	if(__jnz__)	goto LFB78B58C_109;	
00E61:      	if NZ	jmp LFB78B58C_109
            ; //	goto	LFB78B58C_107;			
00E62:      	jmp	LFB78B58C_107
            ; //LFB78B58C_109:;					
            LFB78B58C_109:
            ; //	
            ; //_AED4A60EA_2711:;				
            _AED4A60EA_2711:
            ; //	sAX	= 0x0000;			
00E63:      	AX	= 0x00
            ; //_AED4A60EA_2712:;				
            _AED4A60EA_2712:
            ; //	asm	rm[I0++] = AX			
00E64:      	rm[I0++] = AX
            ; //	goto LFB78B58C_108;			
00E65:      	jmp	LFB78B58C_108
            ; //LFB78B58C_107:;					
            LFB78B58C_107:
            ; //_AED4A60EA_2713:;				
            _AED4A60EA_2713:
            ; //_AED4A60EA_2714:;				
            _AED4A60EA_2714:
            ; //	get_I0();				
00E66:      	push	I0
00E67:      	pop	AX
            ; //	asm I1 = PCMYIN_PTR+0;			
00E68:      	I1 = PCMYIN_PTR+0//
            ; //	*(__int16*)sSI	= sAX			
00E69:      	rm[I1]	= AX
            ; //_AED4A60EA_2715:;				
            _AED4A60EA_2715:
            ; //	asm	pop CBL				
00E6A:      	pop CBL
            ; //LFB78B58C_106:;					
            LFB78B58C_106:
            ; //_AED4A60EA_2716:;				
            _AED4A60EA_2716:
            ; //	return;					
00E6B:      	AR	= 1
00E6C:      	BP	+= AR
00E6D:      	pop	AR
00E6E:      	rm[BP_SAVE]	= AR
00E6F:      	rets
            ; //_Sub3ZeroFillABFF23AA_end:;			
            _Sub3ZeroFillABFF23AA_end:
            ; //_AED4A60EA_2717:;				
            _AED4A60EA_2717:
            ; //}
            ; //
            ; //rjmp void _Sub3Play422CAD6D(__int16 _sdata_0_4_0, __int16 _sdata_0_4_1)
            _Sub3Play422CAD6D:
            ; //{						
00E70:      	AR	= rm[BP_SAVE]
00E71:      	push	AR
00E72:      	AR	= BP
00E73:      	rm[BP_SAVE]	= AR
            ; //_AED4A60EA_2718:;				
            _AED4A60EA_2718:
            ; //	
            ; //_AED4A60EA_2719:;				
            _AED4A60EA_2719:
            ; //	sSI	= (int)&_sdata_0_4_0;		
00E74:      	AR	= 2
00E75:      	I1	= rm[BP_SAVE]
00E76:      	I1	+= AR
            ; //	sAX	= *(__int16*)sSI++;		
00E77:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00E78:      	DX	= rm[I1--]
            ; //	asm I1 = bts_ch0_get_ix+0;		
00E79:      	I1 = bts_ch0_get_ix+0//
            ; //	sfx_STORSILONG();			
00E7A:      	rm[I1++]	= AX
00E7B:      	rm[I1--]	= DX
            ; //_AED4A60EA_2720:;				
            _AED4A60EA_2720:
            ; //_AED4A60EA_2721:;				
            _AED4A60EA_2721:
            ; //	_Sub3Initial96BE24F3();			
00E7C:      	pch	= _Sub3Initial96BE24F3
00E7D:      	lcall	_Sub3Initial96BE24F3
            ; //_AED4A60EA_2722:;				
            _AED4A60EA_2722:
            ; //	asm AX = SUBFLTI+0;			
00E7E:      	AX = SUBFLTI+0//
            ; //	PUSH(sAX);				
00E7F:      	push	AX
            ; //	sAX	= 0x0000;			
00E80:      	AX	= 0x00
            ; //	sSI	= POP();			
00E81:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00E82:      	rm[I1]	= AX
            ; //_AED4A60EA_2723:;				
            _AED4A60EA_2723:
            ; //	asm AX = SUBFLTI+1;			
00E83:      	AX = SUBFLTI+1//
            ; //	PUSH(sAX);				
00E84:      	push	AX
            ; //	sAX	= 0x0000;			
00E85:      	AX	= 0x00
            ; //	sSI	= POP();			
00E86:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00E87:      	rm[I1]	= AX
            ; //_AED4A60EA_2724:;				
            _AED4A60EA_2724:
            ; //	asm AX = SUBFLTI+2;			
00E88:      	AX = SUBFLTI+2//
            ; //	PUSH(sAX);				
00E89:      	push	AX
            ; //	sAX	= 0x0000;			
00E8A:      	AX	= 0x00
            ; //	sSI	= POP();			
00E8B:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00E8C:      	rm[I1]	= AX
            ; //_AED4A60EA_2725:;				
            _AED4A60EA_2725:
            ; //	asm AX = SUBFLTI+3;			
00E8D:      	AX = SUBFLTI+3//
            ; //	PUSH(sAX);				
00E8E:      	push	AX
            ; //	sAX	= 0x0000;			
00E8F:      	AX	= 0x00
            ; //	sSI	= POP();			
00E90:      	pop	I1
            ; //	*(__int16*)sSI	= sAX;			
00E91:      	rm[I1]	= AX
            ; //_AED4A60EA_2726:;				
            _AED4A60EA_2726:
            ; //	sAX	= 0x0000;			
00E92:      	AX	= 0x00
            ; //	asm I1 = SUBFLTA+0;			
00E93:      	I1 = SUBFLTA+0//
            ; //	*(__int16*)sSI	= sAX			
00E94:      	rm[I1]	= AX
            ; //_AED4A60EA_2727:;				
            _AED4A60EA_2727:
            ; //	asm I1 = SampleCh0Rate+0;		
00E95:      	I1 = SampleCh0Rate+0//
            ; //	sAX	= *(__int16*)sSI;		
00E96:      	AX	= rm[I1]
            ; //	asm I1 = SUBFLTP+0;			
00E97:      	I1 = SUBFLTP+0//
            ; //	*(__int16*)sSI	= sAX			
00E98:      	rm[I1]	= AX
            ; //_AED4A60EA_2728:;				
            _AED4A60EA_2728:
            ; //	sAX	= 0x003F;			
00E99:      	AX	= 0x3F
            ; //	asm I1 = SUBFLTG+0;			
00E9A:      	I1 = SUBFLTG+0//
            ; //	*(__int16*)sSI	= sAX			
00E9B:      	rm[I1]	= AX
            ; //_AED4A60EA_2729:;				
            _AED4A60EA_2729:
            ; //	asm	set io[INTENA].b0		
00E9C:      	set io[INTENA].b0
            ; //_AED4A60EA_2730:;				
            _AED4A60EA_2730:
            ; //	asm	eni				
00E9D:      	eni
            ; //LFB78B58C_110:;					
            LFB78B58C_110:
            ; //_AED4A60EA_2731:;				
            _AED4A60EA_2731:
            ; //	return;					
00E9E:      	pop	AR
00E9F:      	rm[BP_SAVE]	= AR
00EA0:      	rets
            ; //_Sub3Play422CAD6D_end:;				
            _Sub3Play422CAD6D_end:
            ; //_AED4A60EA_2732:;				
            _AED4A60EA_2732:
            ; //}
            ; //
            ; //naked rjmp void Sbb_Ch0GetBts()			
            Sbb_Ch0GetBts:
            ; //{
            ; //_AED4A60EA_2733:;				
            _AED4A60EA_2733:
            ; //_AED4A60EA_2734:;				
            _AED4A60EA_2734:
            ; //	asm	push I1				
00EA1:      	push I1
            ; //_AED4A60EA_2735:;				
            _AED4A60EA_2735:
            ; //	asm	push P1				
00EA2:      	push P1
            ; //_AED4A60EA_2736:;				
            _AED4A60EA_2736:
            ; //	asm	push AX				
00EA3:      	push AX
            ; //_AED4A60EA_2737:;				
            _AED4A60EA_2737:
            ; //	asm	push BX				
00EA4:      	push BX
            ; //_AED4A60EA_2738:;				
            _AED4A60EA_2738:
            ; //	asm	push CX				
00EA5:      	push CX
            ; //_AED4A60EA_2739:;				
            _AED4A60EA_2739:
            ; //	asm	push DX				
00EA6:      	push DX
            ; //_AED4A60EA_2740:;				
            _AED4A60EA_2740:
            ; //	asm	AR = P1.hh			
00EA7:      	AR = P1.hh
            ; //_AED4A60EA_2741:;				
            _AED4A60EA_2741:
            ; //	asm	push AR				
00EA8:      	push AR
            ; //	
            ; //_AED4A60EA_2742:;				
            _AED4A60EA_2742:
            ; //_AED4A60EA_2743:;				
            _AED4A60EA_2743:
            ; //_AED4A60EA_2744:;				
            _AED4A60EA_2744:
            ; //	asm I1 = bts_ch0_get_ix+0;		
00EA9:      	I1 = bts_ch0_get_ix+0//
            ; //	sAX	= *(__int16*)sSI++;		
00EAA:      	AX	= rm[I1++]
            ; //	sDX	= *(__int16*)sSI--;		
00EAB:      	DX	= rm[I1--]
            ; //	sSI	= (int)&bts_ch0_get_ix[0];	
00EAC:      	I1	= bts_ch0_get_ix
            ; //	PUSH(sAX);				
00EAD:      	push	AX
            ; //	PUSH(sDX);				
00EAE:      	push	DX
            ; //	sfx_GETSILONG_BXCX();			
00EAF:      	CX	= rm[I1++]
00EB0:      	BX	= rm[I1--]
            ; //	sAX = 0x0001;				
00EB1:      	AX	= 0x01
            ; //	sDX = 0x0000;				
00EB2:      	DX	= 0x00
            ; //	sfx_ADDLONG_BXCX_DXAX();		
00EB3:      	AR	= AX
00EB4:      	CX	= CX + AR
00EB5:      	AR	= DX
00EB6:      	BX	= BX + AR + C
            ; //	sfx_STORSILONG_BXCX();			
00EB7:      	rm[I1++]	= CX
00EB8:      	rm[I1--]	= BX
            ; //	sDX	= POP();			
00EB9:      	pop	DX
            ; //	sAX	= POP();			
00EBA:      	pop	AX
            ; //	_lptr_read(STACK[sSP + 0], STACK[sSP + 1]);
00EBB:      	pch	= _lptr_read
00EBC:      	lcall	_lptr_read
            ; //	vXCHG(STACK[sSP + 0]);			
00EBD:      	AR	= AX
00EBE:      	AX	= xchg AR
            ; //_AED4A60EA_2745:;				
            _AED4A60EA_2745:
            ; //	asm	pop AR				
00EBF:      	pop AR
            ; //_AED4A60EA_2746:;				
            _AED4A60EA_2746:
            ; //	asm	P1.hh = AR			
00EC0:      	P1.hh = AR
            ; //_AED4A60EA_2747:;				
            _AED4A60EA_2747:
            ; //	asm	AR = AX				
00EC1:      	AR = AX
            ; //	
            ; //_AED4A60EA_2748:;				
            _AED4A60EA_2748:
            ; //	asm	pop DX				
00EC2:      	pop DX
            ; //_AED4A60EA_2749:;				
            _AED4A60EA_2749:
            ; //	asm	pop CX				
00EC3:      	pop CX
            ; //_AED4A60EA_2750:;				
            _AED4A60EA_2750:
            ; //	asm	pop BX				
00EC4:      	pop BX
            ; //_AED4A60EA_2751:;				
            _AED4A60EA_2751:
            ; //	asm	pop AX				
00EC5:      	pop AX
            ; //_AED4A60EA_2752:;				
            _AED4A60EA_2752:
            ; //	asm	pop P1				
00EC6:      	pop P1
            ; //_AED4A60EA_2753:;				
            _AED4A60EA_2753:
            ; //	asm	pop I1				
00EC7:      	pop I1
            ; //LFB78B58C_111:;					
            LFB78B58C_111:
            ; //_AED4A60EA_2754:;				
            _AED4A60EA_2754:
            ; //	return;					
00EC8:      	rets
            ; //Sbb_Ch0GetBts_end:;				
            Sbb_Ch0GetBts_end:
            ; //_AED4A60EA_2755:;				
            _AED4A60EA_2755:
            ; //}
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3play_8ED4FA41_s(void)	
            ginit_code_sub3play_8ED4FA41_s:
            ; //{
            ; //	return;					
00EC9:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3PLAY_8ED4FA41.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> Start=========================
            
            
            ; ~~ IO for DSP
            
            
            ; ~~ --------------------------
            ; void ClrWatchDog(void)
            ;~ ClrWatchDog:
            	;~ io[0x1D]=	AR
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void dsi(void)
            ;~ dsi:
            	;~ clr		io[STATUS].b7
            	;~ nop
            	;~ rets
            
            
            ; ~~ --------------------------
            ; void eni(void)
            ;~ eni:
            	;~ set		io[STATUS].b7
            	;~ rets
            
            
            ; ~~ --------------------------
            ; int get_SATV(long value)
            get_SATV:
00ECA:      	AR=		BP
00ECB:      	AR=		AR + 1		; ~~ value
00ECC:      	I1=		AR
00ECD:      	AR=		SATV
00ECE:      	AR=		rm[I1++]
00ECF:      	SATV=		AR
00ED0:      	AR=		rm[I1++]
00ED1:      	SATV=		AR
00ED2:      	AR=		SATV
00ED3:      	AX=		AR
00ED4:      	rets
            
            #ifdef _MSPEECHDSP_
            
            set_ADPHD:
            get_ADPHD:
            set_ADPDAT:
            get_ADPDAT:
            	AX=		0
            	rets
            
            #else
            
            
            ; ~~ --------------------------
            ; void set_ADPHD(int value)
            set_ADPHD:
00ED5:      	AR=		BP
00ED6:      	AR=		AR + 1		; ~~ value
00ED7:      	I1=		AR
00ED8:      	ADPHD=		rm[I1]
00ED9:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPHD(void)
            get_ADPHD:
00EDA:      	AR=		ADPHD
00EDB:      	AX=		AR
00EDC:      	rets
            
            
            ; ~~ --------------------------
            ; void set_ADPDAT(int value)
            set_ADPDAT:
00EDD:      	AR=		BP
00EDE:      	AR=		AR + 1		; ~~ value
00EDF:      	I1=		AR
00EE0:      	ADPDAT=		rm[I1]
00EE1:      	rets
            
            
            ; ~~ --------------------------
            ; int get_ADPDAT(void)
            get_ADPDAT:
00EE2:      	AR=		ADPDAT
00EE3:      	AX=		AR
00EE4:      	rets
            
            #endif
            
            
            
            ; ~~ --------------------------
            ; int get_ADPPCM(void)
            get_FLTI:
            get_ADPPCM:
00EE5:      	AR=		ADPPCM
00EE6:      	AX=		AR
00EE7:      	rets
            
            
            ; ~~ --------------------------
            ; int get_CBL(void)
            get_CBL:
00EE8:      	AR=		CBL
00EE9:      	AX=		AR
00EEA:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTO(void)
            get_FLTO:
00EEB:      	AR=		FLTO
00EEC:      	AX=		AR
00EED:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTA(void)
            get_FLTA:
00EEE:      	AR=		FLTA
00EEF:      	AX=		AR
00EF0:      	rets
            
            
            ; ~~ --------------------------
            ; int get_FLTP(void)
            get_FLTP:
00EF1:      	AR=		FLTP
00EF2:      	AX=		AR
00EF3:      	rets
            
            ; ///////////////////////////////////////////////////////////////////////////
            ; ///////////////////////////////////////////////////////////////////////////
            
            ; ~~ --------------------------
            ; void set_UART(void)
            set_UART:
00EF4:      	set		io[STATUS].b5
00EF5:      	rets
            
            ; ~~ --------------------------
            ; void clr_UART(void)
            clr_UART:
00EF6:      	clr		io[STATUS].b5
00EF7:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIM(void)
            set_SPIM:
00EF8:      	set		io[STATUS].b8
00EF9:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIM(void)
            clr_SPIM:
00EFA:      	clr		io[STATUS].b8
00EFB:      	rets
            
            ; ~~ --------------------------
            ; void set_SPIS(void)
            set_SPIS:
00EFC:      	set		io[STATUS].b9
00EFD:      	rets
            
            ; ~~ --------------------------
            ; void clr_SPIS(void)
            clr_SPIS:
00EFE:      	clr		io[STATUS].b9
00EFF:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_IntPrWR:
00F00:      	set		io[STATUS].b11
00F01:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_IntPrWR:
00F02:      	clr		io[STATUS].b11
00F03:      	rets
            
            ; ~~ --------------------------
            ; void set_IntPrWR(void)
            set_SD:
00F04:      	set		io[STATUS].b12
00F05:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntPrWR(void)
            clr_SD:
00F06:      	clr		io[STATUS].b12
00F07:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVWR(void)
            set_IntVWR:
00F08:      	set		io[STATUS].b13
00F09:      	rets
            
            ; ~~ --------------------------
            ; void clr_IntVWR(void)
            clr_IntVWR:
00F0A:      	clr		io[STATUS].b13
00F0B:      	rets
            
            ; ~~ --------------------------
            ; void set_INTENA(int value)
            set_INTENA:
00F0C:      	AR=		BP
00F0D:      	AR=		AR + 1		; ~~ value
00F0E:      	I1=		AR
00F0F:      	AR=		rm[I1]
00F10:      	io[INTENA]=	AR
00F11:      	rets
            
            ; ~~ --------------------------
            ; int get_INTENA(int value)
            get_INTENA:
00F12:      	AR=		io[INTENA]
00F13:      	AX=		AR
00F14:      	rets
            
            ; ~~ --------------------------
            ; void set_INTREQ(int value)
            set_INTREQ:
00F15:      	AR=		BP
00F16:      	AR=		AR + 1		; ~~ value
00F17:      	I1=		AR
00F18:      	AR=		rm[I1]
00F19:      	io[INTREQ]	=AR
00F1A:      	rets
            
            ; ~~ --------------------------
            ; int get_INTREQ(int value)
            get_INTREQ:
00F1B:      	AR=		io[INTREQ]
00F1C:      	AX=		AR
00F1D:      	rets
            
            ; ~~ --------------------------
            ; void set_IntVect(int value)
            set_IntVect:
00F1E:      	AR=		BP
00F1F:      	AR=		AR + 1		; ~~ value
00F20:      	I1=		AR
00F21:      	AR=		rm[I1]
00F22:      	io[IntVect]	=AR
00F23:      	rets
            
            ; ~~ --------------------------
            ; int get_IntVect(int value)
            get_IntVect:
00F24:      	AR=		io[IntVect]
00F25:      	AX=		AR
00F26:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PA(int value)
            get_IOC_PA:
00F27:      	AR=		io[IOC_PA]
00F28:      	AX=		AR
00F29:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PB(int value)
            get_IOC_PB:
00F2A:      	AR=		io[IOC_PB]
00F2B:      	AX=		AR
00F2C:      	rets
            
            
            ; ~~ --------------------------
            ; int get_IOC_PC(int value)
            get_IOC_PC:
00F2D:      	AR=		io[IOC_PC]
00F2E:      	AX=		AR
00F2F:      	rets
            
            ; ~~ --------------------------
            ; int get_PortA(int value)
            get_PortA:
00F30:      	AR=		io[PortA]
00F31:      	AX=		AR
00F32:      	rets
            
            ; ~~ --------------------------
            ; int get_PortB(int value)
            get_PortB:
00F33:      	AR=		io[PortB]
00F34:      	AX=		AR
00F35:      	rets
            
            
            ; ~~ --------------------------
            ; int get_PortC(int value)
            get_PortC:
00F36:      	AR=		io[PortC]
00F37:      	AX=		AR
00F38:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_CTL(int value)
            set_SPI_CTL:
00F39:      	AR=		BP
00F3A:      	AR=		AR + 1		; ~~ value
00F3B:      	I1=		AR
00F3C:      	AR=		rm[I1]
00F3D:      	io[SPI_CTL]=	AR
00F3E:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_CTL(int value)
            get_SPI_CTL:
00F3F:      	AR=		io[SPI_CTL]
00F40:      	AX=		AR
00F41:      	rets
            
            ; ~~ --------------------------
            ; void set_SPI_DAT(int value)
            set_SPI_DAT:
00F42:      	AR=		BP
00F43:      	AR=		AR + 1		; ~~ value
00F44:      	I1=		AR
00F45:      	AR=		rm[I1]
00F46:      	io[SPI_DAT]=	AR
00F47:      	rets
            
            ; ~~ --------------------------
            ; int get_SPI_DAT(int value)
            get_SPI_DAT:
00F48:      	AR=		io[SPI_DAT]
00F49:      	AX=		AR
00F4A:      	rets
            
            
            ; ~~ --------------------------
            ; void set_MISC(int value)
            set_MISC:
00F4B:      	AR=		BP
00F4C:      	AR=		AR + 1		; ~~ value
00F4D:      	I1=		AR
00F4E:      	AR=		rm[I1]
            	;~ io[0x1C]	=AR
00F4F:      	rets
            
            ; ~~ --------------------------
            ; int get_MISC(int value)
            get_MISC:
00F50:      	AR=		io[MISC]
00F51:      	AX=		AR
00F52:      	rets
            
            ; ~~ --------------------------
            ; int get_Real_T(int value)
            get_Real_T:
            	;~ AR=		io[0x1D]
00F53:      	AX=		AR
00F54:      	rets
            
            
            ; ~~ --------------------------
            ; int get_MACOP(void)
            get_MACOP:
00F55:      	AR=		MACOP
00F56:      	AX=		AR
00F57:      	rets
            
            
            ; ~~ --------------------------
            ; void set_INTMASK(int value)
            ; set_INTMASK:
            	; AR=			BP
            	; AR=			AR + 1		; ~~ value
            	; I1=			AR
            	; AR=			rm[I1]
            	; io[INTMASK]=AR
            	; rets
            
            ; ~~ --------------------------
            ; int get_INTMASK(int value)
            ; get_INTMASK:
            	; AR=			io[INTMASK]
            	; AX=			AR
            	; rets
            
            ; ~~ --------------------------
            ; int vXCHG(int value)
            vXCHG:
00F58:      	AR=		BP
00F59:      	AR=		AR + 1
00F5A:      	I1=		AR
00F5B:      	AR=		rm[I1]
00F5C:      	xchg		AR
00F5D:      	AX=		AR
00F5E:      	rets
            
            ; ~~ --------------------------
            ; void cpuHalt(void)
            cpuHalt:
00F5F:      	halt
            
            
            #ifdef _MFDSP_
            
            ; ~~ --------------------------
            ; void setSystemSpeed(int value)
            set_SystemSpeed:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPEED]=	AR
            	rets
            
            
            ; ~~ --------------------------
            ; void set_SD_CTL(int value)
            set_SD_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_CTL(int value)
            get_SD_CTL:
            	AR=		io[SD_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_DAT(int value)
            set_SD_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_DAT(void)
            get_SD_DAT:
            	AR=		io[SD_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SD_RSP(int value)
            set_SD_RSP:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SD_RSP]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SD_RSP(int value)
            get_SD_RSP:
            	AR=		io[SD_RSP]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_CTL(int value)
            set_UART_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_CTL(int value)
            get_UART_CTL:
            	AR=		io[UART_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_UART_DAT(int value)
            set_UART_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[UART_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_UART_DAT(int value)
            get_UART_DAT:
            	AR=		io[UART_DAT]
            	AX=		AR
            	rets
            
            
            ; By Tsao	20161103
            
            ; ~~ --------------------------
            ; void set_ADH_CFG0(int value)
            set_ADH_CFG0:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG0]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG0(void)
            get_ADH_CFG0:
            	AR=		io[ADH_CFG0]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_ADH_CFG1(int value)
            set_ADH_CFG1:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[ADH_CFG1]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_CFG1(void)
            get_ADH_CFG1:
            	AR=		io[ADH_CFG1]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; int get_ADH_DO(void)
            get_ADH_DO:
            	AR=		io[ADH_DO]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_CTL(int value)
            set_SPIS_CTL:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_CTL]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_CTL(int value)
            get_SPIS_CTL:
            	AR=		io[SPIS_CTL]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_SPIS_DAT(int value)
            set_SPIS_DAT:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SPIS_DAT]=	AR
            	rets
            
            ; ~~ --------------------------
            ; int get_SPIS_DAT(int value)
            get_SPIS_DAT:
            	AR=		io[SPIS_DAT]
            	AX=		AR
            	rets
            
            ; ~~ --------------------------
            ; void set_GreenMode(int value)
            set_GreenMode:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[GREEN]=	AR
            	rets
            
            ; ~~ --------------------------
            ; void cpuStall(int value)
            cpuStall:
            	AR=		BP
            	AR=		AR + 1		; ~~ value
            	I1=		AR
            	AR=		rm[I1]
            	io[SLEEP]=	AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_CTL:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_CTL]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_CTL:
            	AR=		io[SPI_DMA_CTL]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_RADR:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[SPI_DMA_RADR]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_RADR:
            	AR=		io[SPI_DMA_RADR]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            ; set_SPI_DMA_DMANUM:
            	; AR=		BP
            	; AR=		AR + 1		// ~~ value
            	; I1=		AR
            	; AR=		rm[I1]
            	; io[0x55]=	AR
            	; rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            get_SPI_DMA_DMANUM:
            	AR=		io[SPI_DMA_DMANUM]
            	AX=		AR
            	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            #endif
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_I0:
00F60:      	AX=		rm[I0]
00F61:      	rets
            
            read_I0P:
00F62:      	AX=		rm[I0++]
00F63:      	rets
            
            read_I0P2:
00F64:      	AX=		rm[I0++2]
00F65:      	rets
            
            read_I0M:
00F66:      	AX=		rm[I0--]
00F67:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_I0:
00F68:      	AR=		I0
00F69:      	AX=		AR
00F6A:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            read_P0:
00F6B:      	AX=		pm[P0]
00F6C:      	rets
            
            read_P0P:
00F6D:      	AX=		pm[P0++]
00F6E:      	rets
            
            read_P0M:
00F6F:      	AX=		pm[P0--]
00F70:      	rets
            
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            get_P0:
00F71:      	AR=		P0
00F72:      	AX=		AR
00F73:      	rets
            
            ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            
            
            FA:
00F74:      	AX=		1
00F75:      	if FA jmp	@fa_label_1504
00F76:      	AX=		0
            @fa_label_1504:
00F77:      	rets
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\IO.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> Start=========================
            _lptr_read:
00F78:      	AR=		DX
00F79:      	test		AR.b11
00F7A:      	if ZR jmp	@_lptr_read_label_1510
            
00F7B:      	P1.hh=		AR
00F7C:      	AR=		AX
00F7D:      	P1=		AR
00F7E:      	AX=		pm[P1]
00F7F:      	P1.hh=		0
00F80:      	rets
            
            @_lptr_read_label_1510:
            
00F81:      	AR=		AX
00F82:      	I1=		AR
00F83:      	AX=		rm[I1]
00F84:      	rets
            
            
            _lptr_read32:
00F85:      	AR=		DX
00F86:      	test		AR.b11
00F87:      	if ZR jmp	@_lptr_read_label_1510_32
            
00F88:      	P1.hh=		AR
00F89:      	AR=		AX
00F8A:      	P1=		AR
00F8B:      	AX=		pm[P1++]
00F8C:      	DX=		pm[P1]
00F8D:      	P1.hh=		0
00F8E:      	rets
            
            @_lptr_read_label_1510_32:
            
00F8F:      	AR=		AX
00F90:      	I1=		AR
00F91:      	AX=		rm[I1++]
00F92:      	DX=		rm[I1]
00F93:      	rets
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\_LPTR_READ.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> Start=========================
            
            
            _ClearTickCount5DDE4003:
            #ifdef _MFDSP_
            	set		io[MISC].b8
            #else
00F94:      	set		io[MISC].b7
            #endif
00F95:      	set		io[MISC].b15
            	
00F96:      	io[REAL_T]=	AR
00F97:      	AR=		io[REAL_T]
00F98:      	AR=		io[REAL_T]
00F99:      	io[REAL_T]=	AR
00F9A:      	rets
            
            ; -----------------------------------------------
            
            _GetTickCount18DC070C:
00F9B:      	AX=		0xFFF0
            @gettickcount_loop_1000:
00F9D:      	io[ClrWDT]=	AR
00F9E:      	AR=		io[REAL_T]
00F9F:      	AR=		AR & AX
00FA0:      	SF=		AR - AX
00FA1:      	if ZR jmp	@gettickcount_loop_1000
00FA2:      	AX=		AR
00FA3:      	AR=		io[REAL_T]
00FA4:      	DX=		AR
00FA5:      	rets
            
            	
            ; -----------------------------------------------
            ; void delay(int ms)
            ;
            ; in:
            ;     BP + 1 - int ms
            ;
            ; -----------------------------------------------
            _delay6F9F34ED:
            ; {
00FA6:      	AR=		BP
00FA7:      	AR=		AR + 1		; ~~ port
00FA8:      	I1=		AR
            
            	; unsigned long tick;
            	; unsigned long msr;
            
            	; ~~ 1ms = 32768 ticks
            
            	; msr = (unsigned long)ms << 15;
00FA9:      		R0=		0
00FAA:      		R1=		rm[I1]
00FAB:      		clr		C
00FAC:      		src		R1, 1
00FAD:      		src		R0, 1
            	
            	; tick = GetTickCount();
00FAE:      		call		_GetTickCount18DC070C
00FAF:      		AR=		AX
00FB0:      		CX=		AR
00FB1:      		AR=		DX
00FB2:      		BX=		AR
            	
            	; while((GetTickCount() - tick) < msr);
            	@delay_loop_1024:
00FB3:      		call		_GetTickCount18DC070C
00FB4:      		AR=		CX
00FB5:      		AX=		AX - AR
00FB6:      		AR=		BX
00FB7:      		DX=		DX - AR + C - 1
00FB8:      		AR=		R0
00FB9:      		AX=		AX - AR
00FBA:      		AR=		R1
00FBB:      		DX=		DX - AR + C - 1
00FBC:      		AR=		0
00FBD:      		AR=		AR - 0 + C - 1
00FBE:      		if AN jmp	@delay_loop_1024
            
00FBF:      	rets
            ; }
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\LIB\LIBIO\TICK.ASM> End=========================
            
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> Start=========================
            ; .\lib\libsubb3\sub3_cshell.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code_sub3_cshell_257767F9_s(void)
            ginit_code_sub3_cshell_257767F9_s:
            ; //{
            ; //	return;					
00FC0:      	rets
            ; //}
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .data
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //	nop
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\SUB3_CSHELL_257767F9.S.CODE.ASM> End=========================
            
            ;
            #LINKOBJ ".\LIB\LIBSUBB3\SBB3_CH0DECV05.OBJ"
            ;
            
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> Start=========================
            
            
            #ifdef _MSPEECHDSP_
            
            Subb3_Init:
            	PCH=            SDSP_Sbb3_Ch0InitV05
            	lcall           SDSP_Sbb3_Ch0InitV05
            	rets
            
            Subb3_Dec:
            	PCH=		SDSP_Sbb3_Ch0decV05
            	lcall		SDSP_Sbb3_Ch0decV05
                    AX=		0
                    if NZ jmp	@sdsp_sbb2_ch0dec_a
                    AX=		1
            @sdsp_sbb2_ch0dec_a:
            	rets
            	
            #else
            
            Subb3_Init:
03310:      	PCH=            Sbb3_Ch0InitV05
03311:      	lcall           Sbb3_Ch0InitV05
03312:      	rets
            
            Subb3_Dec:
03313:      	PCH=		Sbb3_Ch0decV05
03314:      	lcall		Sbb3_Ch0decV05
03315:              AX=		0
03316:              if NZ jmp	@sdsp_sbb2_ch0dec_a
03317:              AX=		1
            @sdsp_sbb2_ch0dec_a:
03318:      	rets
            	
            #endif
            
            
            
            	
            ;=========================Include <.\LIB\LIBSUBB3\SUB3SUPP.ASM> End=========================
            
            ;=========================Include <DEPS\D58805FB_GINIT.S.CODE.ASM> Start=========================
            ; D58805FB_ginit.s.c Code Start!!;
            VarRM[0:4095]={
              
            };
            
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            ; //
            .code
            ; //
            ; //
            ; //naked void ginit_code(void)			
            ginit_code:
            ; //{
            ; //	ginit_code_655_99B6FC89_s();		
03319:      	pch	= ginit_code_655_99B6FC89_s
0331A:      	lcall	ginit_code_655_99B6FC89_s
            ; //	ginit_code_WS2811_02F950F9_s();		
0331B:      	pch	= ginit_code_WS2811_02F950F9_s
0331C:      	lcall	ginit_code_WS2811_02F950F9_s
            ; //	ginit_code_global_6037E6D5_s();		
0331D:      	pch	= ginit_code_global_6037E6D5_s
0331E:      	lcall	ginit_code_global_6037E6D5_s
            ; //	ginit_code_sub3play_8ED4FA41_s();	
0331F:      	pch	= ginit_code_sub3play_8ED4FA41_s
03320:      	lcall	ginit_code_sub3play_8ED4FA41_s
            ; //	ginit_code_sub3_cshell_257767F9_s();	
03321:      	pch	= ginit_code_sub3_cshell_257767F9_s
03322:      	lcall	ginit_code_sub3_cshell_257767F9_s
            ; //	return;					
03323:      	rets
            ; //}
            ; //
            ; //
            ; //
            ;=========================Include <DEPS\D58805FB_GINIT.S.CODE.ASM> End=========================
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> Start=========================
            
            
            ; ~~ CRT0 support functions
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GLOBALINIT(void)
            ; void sfx_LOCALINIT(void)
            ;
            ; in:
            ;     I1	- pointer to SRAM initial value
            ;     P1	- pointer to PROM initial data
            ;     CX	- total count (word)
            ;
            ; out:
            ;     none
            ;
            ; --------------------------------------------
            sfx_GLOBALINIT:
            sfx_LOCALINIT:
03324:      	P1.hh=		0
03325:      	jmp		@glinit_label_1409
            @glinit_loop_1409:
03326:      	AR=		pm[P1++]
03327:      	rm[I1++]=	AR
            @glinit_label_1409:
03328:      	loop		@glinit_loop_1409
03329:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MUL_AX_CX(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MUL_AX_CX:
            
0332A:      	AR=		AX
0332B:      	MX=		AR
0332C:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0332D:      	MACOP=		3
0332E:      	MR=		MX * AR
            #endif
            
0332F:      	AR=		MR0
03330:      	AX=		AR
03331:      	AR=		MR1
03332:      	DX=		AR
03333:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMUL_AX_CX(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMUL_AX_CX:
            
03334:      	AR=		AX
03335:      	MX=		AR
03336:      	AR=		CX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
03337:      	MACOP=		0
03338:      	MR=		MX * AR
            #endif
            
03339:      	AR=		MR0
0333A:      	AX=		AR
0333B:      	AR=		MR1
0333C:      	DX=		AR
0333D:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMULLONG(void)
            ;
            ; note:
            ;     signed multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (signed)
            ;
            ; --------------------------------------------
            sfx_IMULLONG:
0333E:      	AR=		rm[BP_SAVE]
0333F:      	push		AR
03340:      	AR=		BP
03341:      	rm[BP_SAVE]=	AR
03342:      	AR=		AR - 3
03343:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
03344:      	AR=		CX
03345:      	MX=		AR
03346:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03347:      	MACOP=		3		; unsigned
03348:      	MR=		MX * AR
            #endif
            
03349:      	I1=		rm[BP_SAVE]
0334A:      	AR=		2
0334B:      	I1=		I1 - AR
0334C:      	rm[I1++]=	MR0
0334D:      	rm[I1++]=	MR1
0334E:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
0334F:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUS
            #else
03350:      	MACOP=		1		; mx:unsigned / my:signed
03351:      	MR=		MX * AR
            #endif
            
03352:      	AR=		rm[I1]
03353:      	AR=		AR + MR0
03354:      	rm[I1++]=	AR
03355:      	AR=		rm[I1]
03356:      	AR=		AR + MR1 + C
03357:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
03358:      	AR=		BX
03359:      	MX=		AR
0335A:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULSU
            #else
0335B:      	MACOP=		2		; mx:signed / my:unsigned
0335C:      	MR=		MX * AR
            #endif
            
0335D:      	AR=		rm[I1]
0335E:      	AR=		AR + MR0
0335F:      	rm[I1++]=	AR
03360:      	AR=		rm[I1]
03361:      	AR=		AR + MR1 + C
03362:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
03363:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULSS
            #else
03364:      	MACOP=		0		; mx:signed / my:signed
03365:      	MR=		MX * AR
            #endif
            
03366:      	AR=		rm[I1]
03367:      	AR=		AR + MR0
03368:      	rm[I1]=		AR
            
03369:      	I1=		rm[BP_SAVE]
0336A:      	CX=		rm[I1--]
0336B:      	DX=		rm[I1--]
0336C:      	AX=		rm[I1]
            
0336D:      	AR=		3
0336E:      	BP=		BP + AR
0336F:      	pop		AR
03370:      	rm[BP_SAVE]=	AR
            
03371:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MULLONG(void)
            ;
            ; note:
            ;     unsigned multiply
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     CX:DX:AX	- result (unsigned)
            ;
            ; --------------------------------------------
            sfx_MULLONG:
03372:      	AR=		rm[BP_SAVE]
03373:      	push		AR
03374:      	AR=		BP
03375:      	rm[BP_SAVE]=	AR
03376:      	AR=		AR - 3
03377:      	BP=		AR
            
            	; ~~ low 16-bit
            	; ~~ |   ---- oooo
            	; ~~ | x ---- oooo
            
03378:      	AR=		CX
03379:      	MX=		AR
0337A:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0337B:      	MACOP=		3		; unsigned
0337C:      	MR=		MX * AR
            #endif
            
0337D:      	I1=		rm[BP_SAVE]
0337E:      	AR=		2
0337F:      	I1=		I1 - AR
03380:      	rm[I1++]=	MR0
03381:      	rm[I1++]=	MR1
03382:      	rm[I1--]=	MR2
            
            	; ~~ |   oooo ----
            	; ~~ | x ---- oooo
            
03383:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03384:      	MR=		MX * AR
            #endif
            
03385:      	AR=		rm[I1]
03386:      	AR=		AR + MR0
03387:      	rm[I1++]=	AR
03388:      	AR=		rm[I1]
03389:      	AR=		AR + MR1 + C
0338A:      	rm[I1--]=	AR
            
            
            	; ~~ |   ---- oooo
            	; ~~ | x oooo ----
            
0338B:      	AR=		BX
0338C:      	MX=		AR
0338D:      	AR=		AX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
0338E:      	MR=		MX * AR
            #endif
            
0338F:      	AR=		rm[I1]
03390:      	AR=		AR + MR0
03391:      	rm[I1++]=	AR
03392:      	AR=		rm[I1]
03393:      	AR=		AR + MR1 + C
03394:      	rm[I1]=		AR
            
            	; ~~ |   oooo ----
            	; ~~ | x oooo ----
            
03395:      	AR=		DX
            
            #ifdef _MSPEECHDSP_
            	MULUU
            #else
03396:      	MR=		MX * AR
            #endif
            
03397:      	AR=		rm[I1]
03398:      	AR=		AR + MR0
03399:      	rm[I1]=		AR
            
0339A:      	I1=		rm[BP_SAVE]
0339B:      	CX=		rm[I1--]
0339C:      	DX=		rm[I1--]
0339D:      	AX=		rm[I1]
            
0339E:      	AR=		3
0339F:      	BP=		BP + AR
033A0:      	pop		AR
033A1:      	rm[BP_SAVE]=	AR
            
033A2:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIV_AX_CX(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIV_AX_CX:
            	; unsigned int reste = 0;
033A3:      		DX=		0
            	; unsigned char count = 16;
033A4:      		R0=		16
            	; BOOL c;
            
            	; do
            	@divword_loop_1824:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
033A5:      			slz		AX, 1
            		; reste <<= 1;
033A6:      			slc		DX, 1
            
            		; if (c)
            		; {
            			; reste |= 1;
            		; }
            		@divword_label_1822:
            
            		; if (reste >= y)
033A7:      			AR=		DX
033A8:      			AR-=		CX
033A9:      			AR=		0
033AA:      			AR=		AR - 0 + C - 1
033AB:      			if AN jmp	@divword_label_1823
            		; {
            			; reste -= y;
033AC:      				AR=		CX
033AD:      				DX=		DX - AR
            			; ~~ x <- (result = 1)
            			; x |= 1;
033AE:      				set		AX.b0
            		; }
            		@divword_label_1823:
            
033AF:      		R0--
033B0:      		if NZ jmp	@divword_loop_1824
            	; }while (--count);
            
            	; return x;
033B1:      		rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIV_AX_CX(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Quotient
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIV_AX_CX:
            
            	; register int r;
            
            	; r = sfx_DIV_AX_CX((x < 0 ? -x : x), (y < 0 ? -y : y));
033B2:      		R1=		0
033B3:      		AR=		0
033B4:      		test		AX.b15
033B5:      		if ZR jmp	@divsword_label_1833
033B6:      			AX=		AR - AX
033B7:      			set		R1.b0
            		@divsword_label_1833:
033B8:      		test		CX.b15
033B9:      		if ZR jmp	@divsword_label_1834
033BA:      			CX=		AR - CX
033BB:      			set		R1.b1
            		@divsword_label_1834:
033BC:      		call		sfx_DIV_AX_CX
            
            	; if ((x < 0) ^ (y < 0))
033BD:      		AR=		R1
033BE:      		slz		AR, 1
033BF:      		AR^=		R1
033C0:      		test		AR.b1
033C1:      		if ZR jmp	@divsword_label_1835
            	; {
            		; return (0 - r);
033C2:      			AR=		0
033C3:      			AX=		AR - AX
033C4:      			DX=		AR - DX
            
            	; }
            	@divsword_label_1835:
            
            	; return r;
033C5:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_DIVLONG(void)
            ;
            ; note:
            ;     unsigned divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_DIVLONG:
            	; unsigned long reste = 0L;
033C6:      		R0=		0	; L
033C7:      		R1=		0	; H
            	; unsigned char count = 32;
033C8:      		R2=		32
            	; BOOL c;
            
            	; do
            	@divulong_loop_1723:
            	; {
            		; // reste: x <- 0;
            		; c = MSB_SET(x);
            
            		; x <<= 1;
033C9:      			slz		AX, 1
033CA:      			slc		DX, 1
            		; reste <<= 1;
033CB:      			slc		R0, 1
033CC:      			slc		R1, 1
            
            		; if (c)
            		; {
            			; reste |= 1L;
            		; }
            		@divulong_label_1726:
            
            		; if (reste >= y)
033CD:      			AR=		R0
033CE:      			AR-=		CX
033CF:      			AR=		R1
033D0:      			AR=		AR - BX + C - 1
033D1:      			if AN jmp	@divulong_label_1734
            		; {
            			; reste -= y;
033D2:      				AR=		CX
033D3:      				R0=		R0 - AR
033D4:      				AR=		BX
033D5:      				R1=		R1 - AR + C - 1
            			; ~~ x <- (result = 1)
            			; x |= 1L;
033D6:      				set		AX.b0
            		; }
            		@divulong_label_1734:
            
033D7:      		R2--
033D8:      		if NZ jmp	@divulong_loop_1723
            	; }while (--count);
            
            	; return x;
033D9:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IDIVLONG(void)
            ;
            ; note:
            ;     signed divide
            ;
            ; in:
            ;     DX:AX	- Numerator   (x)
            ;     BX:CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Quotient
            ;     BX:DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IDIVLONG:
            	; long r;
            
            	; r = divulong((x < 0 ? -x : x), (y < 0 ? -y : y));
033DA:      		R3=		0
033DB:      		AR=		0
033DC:      		test		DX.b15
033DD:      		if ZR jmp	@divslong_label_1759
033DE:      			AX=		AR - AX
033DF:      			DX=		AR - DX + C - 1
033E0:      			set		R3.b0
            		@divslong_label_1759:
033E1:      		test		BX.b15
033E2:      		if ZR jmp	@divslong_label_1800
033E3:      			CX=		AR - CX
033E4:      			BX=		AR - BX + C - 1
033E5:      			set		R3.b1
            		@divslong_label_1800:
033E6:      		call		sfx_DIVLONG
            
            	; if ((x < 0) ^ (y < 0))
033E7:      		AR=		R3
033E8:      		slz		AR, 1
033E9:      		AR^=		R3
033EA:      		test		AR.b1
033EB:      		if ZR jmp	@divslong_label_1807
            	; {
            		; return -r;
033EC:      			AR=		0
033ED:      			AX=		AR - AX
033EE:      			DX=		AR - DX + C - 1
033EF:      			R0=		AR - R0
033F0:      			R1=		AR - R1 + C - 1
            
            	; }
            	@divslong_label_1807:
            
            	; return r;
033F1:      		rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MOD_AX_CX(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_MOD_AX_CX:
033F2:      	call		sfx_DIV_AX_CX
033F3:      	AR=		DX
033F4:      	AX=		AR
033F5:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMOD_AX_CX(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     AX	- Remainder
            ;     DX	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMOD_AX_CX:
033F6:      	call		sfx_IDIV_AX_CX
033F7:      	AR=		DX
033F8:      	AX=		AR
033F9:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_MODLONG(void)
            ;
            ; note:
            ;     unsigned remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_MODLONG:
033FA:      	call		sfx_DIVLONG
033FB:      	AR=		R0
033FC:      	AX=		AR
033FD:      	AR=		R1
033FE:      	DX=		AR
033FF:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_IMODLONG(void)
            ;
            ; note:
            ;     signed remainder
            ;
            ; in:
            ;     AX	- Numerator   (x)
            ;     CX	- Denominator (y)
            ;
            ; out:
            ;     DX:AX	- Remainder
            ;     R1:R0	- Remainder
            ;
            ; --------------------------------------------
            sfx_IMODLONG:
03400:      	call		sfx_IDIVLONG
03401:      	AR=		R0
03402:      	AX=		AR
03403:      	AR=		R1
03404:      	DX=		AR
03405:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG:
            	; AR=		CX
            	; AX=		AX + AR
            	; AR=		BX
            	; DX=		DX + AR + C
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDLONG_BXCX_DXAX(void)
            ;
            ; note:
            ;     signed add
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ADDLONG_BXCX_DXAX:
            	; AR=		AX
            	; CX=		CX + AR
            	; AR=		DX
            	; BX=		BX + AR + C
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBLONG(void)
            ;
            ; note:
            ;     signed sub
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SUBLONG:
            	; AR=		CX
            	; AX=		AX - AR
            	; AR=		BX
            	; DX=		DX - AR + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDDIOFS(void)
            ;
            ; note:
            ;     add P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDDIOFS:
03406:      	AR=		AX
03407:      	P1=		P1 + AR
03408:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDSIOFS(void)
            ;
            ; note:
            ;     add I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_ADDSIOFS:
03409:      	AR=		AX
0340A:      	I1=		I1 + AR
0340B:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ADDAXOFS(void)
            ;
            ; note:
            ;     add AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_ADDAXOFS:
0340C:      	AR=		CX
0340D:      	AX=		AX + AR
0340E:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBDIOFS(void)
            ;
            ; note:
            ;     sub P1 by AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     P1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBDIOFS:
0340F:      	AR=		AX
03410:      	P1=		P1 - AR
03411:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBSIOFS(void)
            ;
            ; note:
            ;     sub I1 by AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;     AX	- offset
            ;
            ; out:
            ;     I1	- offset
            ;
            ; --------------------------------------------
            sfx_SUBSIOFS:
03412:      	AR=		AX
03413:      	I1=		I1 - AR
03414:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SUBAXOFS(void)
            ;
            ; note:
            ;     sub AX by CX
            ;
            ; in:
            ;     AX	- PROM or SRAM pointer
            ;     CX	- offset
            ;
            ; out:
            ;     AX	- offset
            ;
            ; --------------------------------------------
            sfx_SUBAXOFS:
03415:      	AR=		CX
03416:      	AX=		AX + AR
03417:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_DXAX(void)
            ;
            ; note:
            ;     load long data from PROM to DX:AX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG:
            ; sfx_GETDILONG_DXAX:
            	; AX=		pm[P1++]
            	; DX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETDILONG_BXCX(void)
            ;
            ; note:
            ;     load long data from PROM to BX:CX
            ;
            ; in:
            ;     P1	- PROM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETDILONG_BXCX:
            	; CX=		pm[P1++]
            	; BX=		pm[P1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_DXAX(void)
            ; void sfx_GETSILONG_DXAX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to DX:AX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     DX:AX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG:
            ; sfx_GETSILONG_D:
            ; sfx_GETSILONG_DXAX:
            ; sfx_GETSILONG_DXAX_D:
            	; AX=		rm[I1++]
            	; DX=		rm[I1--]
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_GETSILONG_BXCX(void)
            ; void sfx_GETSILONG_BXCX_D(void)		; for function's parameter
            ;
            ; note:
            ;     load long data from SRAM to BX:CX
            ;
            ; in:
            ;     I1	- SRAM pointer
            ;
            ; out:
            ;     BX:CX	- long data
            ;
            ; --------------------------------------------
            ; sfx_GETSILONG_BXCX:
            ; sfx_GETSILONG_BXCX_D:
            	; CX=		rm[I1++]
            	; BX=		rm[I1--]
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ANDLONG(void)
            ;
            ; note:
            ;     AND two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ANDLONG:
            	; AR=		CX
            	; AX=		AX & AR
            	; AR=		BX
            	; DX=		DX & AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_ORLONG(void)
            ;
            ; note:
            ;     OR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_ORLONG:
            	; AR=		CX
            	; AX=		AX | AR
            	; AR=		BX
            	; DX=		DX | AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XORLONG(void)
            ;
            ; note:
            ;     XOR two 32-bit data and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_XORLONG:
            	; AR=		CX
            	; AX=		AX ^ AR
            	; AR=		BX
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHL_AX_CX(void)
            ;
            ; note:
            ;     left shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHL_AX_CX:
            	; jmp		@shlac_label_1653
            ; @shlac_loop_1653:
            	; slz		AX, 1
            ; @shlac_label_1653:
            	; loop		@shlac_loop_1653
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_SHLLONG(void)
            ;
            ; note:
            ;     left shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHLLONG:
            	; jmp		@shllong_label_1653
            ; @shllong_loop_1653:
            	; slz		AX, 1
            	; slc		DX, 1
            ; @shllong_label_1653:
            	; loop		@shllong_loop_1653
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX_CX(void)
            ;
            ; note:
            ;     unsigned right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX_CX:
            	; jmp		@shrac_label_1657
            ; @shrac_loop_1657:
            	; clr		C
            	; src		AX, 1
            ; @shrac_label_1657:
            	; loop		@shrac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX_CX(void)
            ;
            ; note:
            ;     signed right shift AX data by CX and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;     CX	- shift count
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX_CX:
            	; jmp		@sarac_label_1657
            ; @sarac_loop_1657:
            	; sra		AX, 1
            ; @sarac_label_1657:
            	; loop		@sarac_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SARLONG(void)
            ;
            ; note:
            ;     signed right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- long data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SARLONG:
            	; jmp		@sarlong_label_1657
            ; @sarlong_loop_1657:
            	; sra		DX, 1
            	; src		AX, 1
            ; @sarlong_label_1657:
            	; loop		@sarlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHRLONG(void)
            ;
            ; note:
            ;     unsigned right shift DX:AX data by CX and store result in DX:AX
            ;
            ; in:
            ;     DX:AX	- ulong data
            ;     CX	- shift count
            ;
            ; out:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHRLONG:
            	; jmp		@shrlong_label_1657
            ; @shrlong_loop_1657:
            	; clr		C
            	; src		DX, 1
            	; src		AX, 1
            ; @shrlong_label_1657:
            	; loop		@shrlong_loop_1657
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SHR_AX(void)
            ;
            ; note:
            ;     unsigned right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SHR_AX:
            	; clr		C
            	; src		AX, 1
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_SAR_AX(void)
            ;
            ; note:
            ;     signed right shift AX data and store result in AX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; out:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_SAR_AX:
            	; sra		AX, 1
            	; rets
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG(void)
            ; void sfx_STORSILONG_D(void)		; for function's parameter
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG:
            ; sfx_STORSILONG_D:
            	; rm[I1++]=	AX
            	; rm[I1--]=	DX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORSILONG_BXCX(void)
            ;
            ; note:
            ;     store DX:AX data to SRAM (I1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     I1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_STORSILONG_BXCX:
            	; rm[I1++]=	CX
            	; rm[I1--]=	BX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG:
03418:      	pm[P1++]=	AX
03419:      	pm[P1--]=	DX
0341A:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_STORDILONG(void)
            ;
            ; note:
            ;     store DX:AX data to PROM (P1)
            ;
            ; in:
            ;     DX:AX	- long data
            ;     P1	- pointer
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            sfx_STORDILONG_BXCX:
0341B:      	pm[P1++]=	CX
0341C:      	pm[P1--]=	BX
0341D:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CX to BX
            ;
            ; in:
            ;     CX	- signed short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_CX:
            ; sfx_INT2ULONG_CX:
            	; BX=		0
            	; test		CX.b15
            	; if ZR jmp	@i2lcx_label_1756
            	; BX=		-1
            ; @i2lcx_label_1756:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_CX(void)
            ;
            ; note:
            ;     convert short unsigned value CX to long (BX:CX)
            ;
            ; in:
            ;     CX	- unsigned short data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_CX:
            ; sfx_UINT2ULONG_CX:
            	; BX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_CX(void)
            ;
            ; note:
            ;     extend sign bit of CL to BX:CH
            ;
            ; in:
            ;     CX	- signed char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_CX:
0341E:      	BX=		0
0341F:      	CX.h=		0
03420:      	test		CX.b7
03421:      	if ZR jmp	@c2lcx_label_1800
03422:      	CX.h=		0xFF
03423:      	BX=		-1
            @c2lcx_label_1800:
03424:      	rets
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_CX(void)
            ;
            ; note:
            ;     convert unsigned char value CL to long (BX:CX)
            ;
            ; in:
            ;     CL	- unsigned char data
            ;
            ; result:
            ;     BX:CX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_CX:
            	; CX.h=		0
            	; BX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INT2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AX to DX
            ;
            ; in:
            ;     AX	- signed short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_INT2LONG_AX:
            ; sfx_INT2ULONG_AX:
            	; DX=		0
            	; test		AX.b15
            	; if ZR jmp	@i2lax_label_1756
            	; DX=		-1
            ; @i2lax_label_1756:
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UINT2LONG_AX(void)
            ;
            ; note:
            ;     convert short unsigned value AX to long (DX:AX)
            ;
            ; in:
            ;     AX	- unsigned short data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UINT2LONG_AX:
            ; sfx_UINT2ULONG_AX:
            	; DX=		0
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CHAR2LONG_AX(void)
            ;
            ; note:
            ;     extend sign bit of AL to DX:AH
            ;
            ; in:
            ;     AX	- signed char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            sfx_CHAR2LONG_AX:
03425:      	DX=		0
03426:      	AX.h=		0
03427:      	test		AX.b7
03428:      	if ZR jmp	@c2lax_label_1800
03429:      	AX.h=		0xFF
0342A:      	DX=		-1
            @c2lax_label_1800:
0342B:      	rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_UCHAR2LONG_AX(void)
            ;
            ; note:
            ;     convert unsigned char value AL to long (DX:AX)
            ;
            ; in:
            ;     AL	- unsigned char data
            ;
            ; result:
            ;     DX:AX	- signed long data
            ;
            ; --------------------------------------------
            ; sfx_UCHAR2LONG_AX:
            	; AX.h=		0
            	; DX=		0
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_CALL_BY_AX(void)
            ;
            ; note:
            ;     call sub routine in AX (address)
            ;
            ; in:
            ;     AX	- sub routine address
            ;
            ; result:
            ;     none
            ;
            ; --------------------------------------------
            ; sfx_CALL_BY_AX:
            	; AR=		AX
            	; P1=		AR
            	; P1.hh=		0
            	; fjmp		pm[P1]
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHG_AX_CX(void)
            ;
            ; note:
            ;     exchange AX CX value
            ;
            ; in:
            ;     AX	- operator 1
            ;     CX	- operator 2
            ;
            ; result:
            ;     AX <-> CX
            ;
            ; --------------------------------------------
            ; sfx_XCHG_AX_CX:
            	; push		AX
            	; push		CX
            	; pop		AX
            	; pop		CX
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_XCHGLONG(void)
            ;
            ; note:
            ;     exchange DX:AX BX:CX value
            ;
            ; in:
            ;     DX:AX	- operator 1
            ;     BX:CX	- operator 2
            ;
            ; result:
            ;     DX:AX <-> BX:CX
            ;
            ; --------------------------------------------
            sfx_XCHGLONG:
0342C:      	push		AX
0342D:      	push		CX
0342E:      	pop		AX
0342F:      	pop		CX
03430:      	push		DX
03431:      	push		BX
03432:      	pop		DX
03433:      	pop		BX
03434:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEG_AX(void)
            ;
            ; note:
            ;     negative AX
            ;
            ; in:
            ;     AX	- operator 1
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEG_AX:
            	; AR=		0
            	; AX=		AR - AX
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NEGLONG(void)
            ;
            ; note:
            ;     negative DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NEGLONG:
            	; AR=		0
            	; AX=		AR - AX
            	; DX=		AR - DX + C - 1
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOT_AX(void)
            ;
            ; note:
            ;     not AX
            ;
            ; in:
            ;     AX	- operator
            ;
            ; result:
            ;     AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOT_AX:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_NOTLONG(void)
            ;
            ; note:
            ;     not DX:AX
            ;
            ; in:
            ;     DX:AX	- operator
            ;
            ; result:
            ;     DX:AX	- result
            ;
            ; --------------------------------------------
            ; sfx_NOTLONG:
            	; AR=		-1
            	; AX=		AX ^ AR
            	; DX=		DX ^ AR
            	; rets
            
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOT_AX(void)
            ;
            ; note:
            ;     logical NOT
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_LOGNOT_AX:
            	;; x86 code
            	;;   neg AX
            	;;   sbb AX,AX
            	;;   inc AX
            	; AR=		0
            	; AR=		AR - AX
            	; AX=		AR
            	; AX=		AR - AX + C - 1
            	; AX++
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_LOGNOTLONG(void)
            ;
            ; note:
            ;     logical NOT (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            sfx_LOGNOTLONG:
            	; x86 code
            	;   neg AX
            	;   sbb AX,AX
            	;   inc AX
03435:      	AR=		DX
03436:      	DX=		0
03437:      	AR=		AR | AX
03438:      	AX=		1
03439:      	if ZR jmp	@longnotl_label_1120
0343A:      	AX=		0
            @longnotl_label_1120:
0343B:      	rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOL_AX(void)
            ;
            ; note:
            ;     logical BOOL
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOL_AX:
            	;; x86 code
            	;;   neg ax
            	;;   sbb ax,ax
            	;;   neg ax
            	; AR=		AX
            	; AX=		0
            	; if ZR jmp	@boolax_label_1758
            	; AX=		1
            ; @boolax_label_1758:
            	; rets
            	
            	; AR=		-1
            	; AR=		AR + AX
            	; AX=		0
            	; AX += C
            
            
            ; ~.~-----------------------------------------
            ; void sfx_BOOLLONG(void)
            ;
            ; note:
            ;     logical BOOL (long)
            ;
            ; in:
            ;     DX:AX	- value
            ;
            ; result:
            ;     DX:AX	- result (0 or 1)
            ;
            ; --------------------------------------------
            ; sfx_BOOLLONG:
            	; AR=		DX
            	; DX=		0
            	; AR=		AR | AX
            	; AX=		0
            	; if ZR jmp	@boollong_label_1801
            	; AX=		1
            ; @boollong_label_1801:
            	; rets
            
            
            ; ~.~-----------------------------------------
            ; void sfx_INITSISTOR(void)
            ;
            ; note:
            ;     for used in global/local variable initial
            ;
            ; in:
            ;     AX	- value
            ;
            ; result:
            ;     I1 + 1
            ;
            ; --------------------------------------------
            ; sfx_INITSISTOR:
            	; rm[I1++]=	AX
            	; rets
            
            ; --------------------------------------------
            
            ; sfx_INITSISTORLONG:
            	; rm[I1++]=	AX
            	; rm[I1++]=	DX
            	; rets
            
            
            ; ~~ condition assistant functions ~~
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; JNE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            sfx_CMP_AX_CX_U_JNE:
0343C:      	DX=		0
0343D:      	BX=		0
            sfx_CMPLONG_JNE:
0343E:      	AR=		CX
0343F:      	AX=		AX - AR
03440:      	AR=		BX
03441:      	AR=		DX - AR + C - 1
03442:      	AR=		AR | AX
03443:      	if EQ jmp	@sfx_cl_jne_f
03444:      	set		Z		; true
03445:      	rets
            @sfx_cl_jne_f:
03446:      	clr		Z		; false
03447:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JNE:
03448:      	DX=		0
03449:      	BX=		0
            sfx_CMPLONG_BCDA_JNE:
0344A:      	AR=		AX
0344B:      	CX=		CX - AR
0344C:      	AR=		DX
0344D:      	AR=		BX - AR + C - 1
0344E:      	AR=		AR | CX
0344F:      	if EQ jmp	@sfx_clbcda_jne_f
03450:      	set		Z		; true
03451:      	rets
            @sfx_clbcda_jne_f:
03452:      	clr		Z		; false
03453:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JNE:
03454:      	AR=		CX
03455:      	SF=		AX - AR
03456:      	if EQ jmp	@sfx_ac_jne_f
03457:      	set		Z
03458:      	rets
            @sfx_ac_jne_f:
03459:      	clr		Z
0345A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JNE:
0345B:      	AR=		AX
0345C:      	SF=		CX - AR
0345D:      	if EQ jmp	@sfx_ca_jne_f
0345E:      	set		Z
0345F:      	rets
            @sfx_ca_jne_f:
03460:      	clr		Z
03461:      	rets
            
            
            
            ; JE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            
            
            sfx_CMP_AX_CX_U_JE:
03462:      	DX=		0
03463:      	BX=		0
            sfx_CMPLONG_JE:
03464:      	AR=		CX
03465:      	AX=		AX - AR
03466:      	AR=		BX
03467:      	AR=		DX - AR + C - 1
03468:      	AR=		AR | AX
03469:      	if NE jmp	@sfx_cl_jz_f
0346A:      	set		Z		; true
0346B:      	rets
            @sfx_cl_jz_f:
0346C:      	clr		Z		; false
0346D:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_U_JE:
0346E:      	DX=		0
0346F:      	BX=		0
            sfx_CMPLONG_BCDA_JE:
03470:      	AR=		AX
03471:      	CX=		CX - AR
03472:      	AR=		DX
03473:      	AR=		BX - AR + C - 1
03474:      	AR=		AR | CX
03475:      	if NE jmp	@sfx_clbcda_jz_f
03476:      	set		Z		; true
03477:      	rets
            @sfx_clbcda_jz_f:
03478:      	clr		Z		; false
03479:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JE:
0347A:      	AR=		CX
0347B:      	SF=		AX - AR
0347C:      	if NE jmp	@sfx_ac_je_f
0347D:      	set		Z
0347E:      	rets
            @sfx_ac_je_f:
0347F:      	clr		Z
03480:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JE:
03481:      	AR=		AX
03482:      	SF=		CX - AR
03483:      	if NE jmp	@sfx_ca_je_f
03484:      	set		Z
03485:      	rets
            @sfx_ca_je_f:
03486:      	clr		Z
03487:      	rets
            
            
            
            ; JG group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; A - above (unsigned)
            ; G - greater (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JA:
            sfx_CMP_AX_CX_JA:
03488:      	DX=		0
03489:      	BX=		0
            sfx_CMPLONG_JG:
0348A:      	AR=		CX
0348B:      	AX=		AX - AR
0348C:      	AR=		BX
0348D:      	AR=		DX - AR + C - 1
0348E:      	if AN jmp	@sfx_cl_jg_f
            
            	; exclude EQU condition
0348F:      	AR=		AR | AX
03490:      	if ZR jmp	@sfx_cl_jg_f
            
03491:      	set		Z		; true
03492:      	rets
            @sfx_cl_jg_f:
03493:      	clr		Z		; false
03494:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JA:
03495:      	AR=		CX
03496:      	AX=		AX - AR
03497:      	AR=		BX
03498:      	DX=		DX - AR + C - 1
03499:      	AR=		0
0349A:      	AR=		AR - 0 + C - 1
0349B:      	if AN jmp	@sfx_cl_jg_f
            
0349C:      	AR=		AR | DX		; exclude EQU condition
0349D:      	AR=		AR | AX
0349E:      	if ZR jmp	@sfx_cl_jg_f
            
0349F:      	set		Z		; true
034A0:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JA:
            sfx_CMP_CX_AX_JA:
034A1:      	DX=		0
034A2:      	BX=		0
            sfx_CMPLONG_BCDA_JG:
034A3:      	AR=		AX
034A4:      	CX=		CX - AR
034A5:      	AR=		DX
034A6:      	AR=		BX - AR + C - 1
034A7:      	if AN jmp	@sfx_clbcda_jg_f
            
034A8:      	AR=		AR | CX		; exclude EQU condition
034A9:      	if ZR jmp	@sfx_clbcda_jg_f
            
034AA:      	set		Z		; true
034AB:      	rets
            @sfx_clbcda_jg_f:
034AC:      	clr		Z		; false
034AD:      	rets
            
            ; ~~---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JA:
034AE:      	AR=		AX
034AF:      	CX=		CX - AR
034B0:      	AR=		DX
034B1:      	BX=		BX - AR + C - 1
034B2:      	AR=		0
034B3:      	AR=		AR - 0 + C - 1
034B4:      	if AN jmp	@sfx_clbcda_jg_f
            
034B5:      	AR=		AR | BX		; exclude EQU condition
034B6:      	AR=		AR | CX
034B7:      	if ZR jmp	@sfx_clbcda_jg_f
            
034B8:      	set		Z		; true
034B9:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JG:
034BA:      	AR=		CX
034BB:      	SF=		AX - AR
034BC:      	if LE jmp	@sfx_cmp_ac_jg_f
034BD:      	set		Z
034BE:      	rets
            @sfx_cmp_ac_jg_f:
034BF:      	clr		Z
034C0:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JG:
034C1:      	AR=		AX
034C2:      	SF=		CX - AR
034C3:      	if LE jmp	@sfx_cmp_ca_jg_f
034C4:      	set		Z
034C5:      	rets
            @sfx_cmp_ca_jg_f:
034C6:      	clr		Z
034C7:      	rets
            
            
            ; JGE group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JAE:
            sfx_CMP_AX_CX_JAE:
034C8:      	DX=		0
034C9:      	BX=		0
            sfx_CMPLONG_JGE:
034CA:      	AR=		CX
034CB:      	AX=		AX - AR
034CC:      	AR=		BX
034CD:      	DX=		DX - AR + C - 1
034CE:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
            
034CF:      	set		Z		; true
034D0:      	rets
            @sfx_cl_jge_f:
034D1:      	clr		Z		; false
034D2:      	rets
            
            ; ~~-----------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JAE:
034D3:      	AR=		CX
034D4:      	AX=		AX - AR
034D5:      	AR=		BX
034D6:      	DX=		DX - AR + C - 1
034D7:      	AR=		0
034D8:      	AR=		AR - 0 + C - 1
034D9:      	if AN jmp	@sfx_cl_jge_f
            
            	; ~~ ignore equ condition
034DA:      	set		Z		; true
034DB:      	rets
            
            ; ---------
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JAE:
            sfx_CMP_CX_AX_JAE:
034DC:      	DX=		0
034DD:      	BX=		0
            sfx_CMPLONG_BCDA_JGE:
034DE:      	AR=		AX
034DF:      	CX=		CX - AR
034E0:      	AR=		DX
034E1:      	BX=		BX - AR + C - 1
034E2:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
            
034E3:      	set		Z		; true
034E4:      	rets
            @sfx_clbcda_jge_f:
034E5:      	clr		Z		; false
034E6:      	rets
            
            ; ---------
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JAE:
034E7:      	AR=		AX
034E8:      	CX=		CX - AR
034E9:      	AR=		DX
034EA:      	BX=		BX - AR + C - 1
034EB:      	AR=		0
034EC:      	AR=		AR - 0 + C - 1
034ED:      	if AN jmp	@sfx_clbcda_jge_f
            
            	; ~~ ignore equ condition
034EE:      	set		Z		; true
034EF:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JGE:
034F0:      	AR=		CX
034F1:      	SF=		AX - AR
034F2:      	if AN jmp	@sfx_cmp_ac_jge_f
034F3:      	set		Z
034F4:      	rets
            @sfx_cmp_ac_jge_f:
034F5:      	clr		Z
034F6:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JGE:
034F7:      	AR=		AX
034F8:      	SF=		CX - AR
034F9:      	if AN jmp	@sfx_cmp_ca_jge_f
034FA:      	set		Z
034FB:      	rets
            @sfx_cmp_ca_jge_f:
034FC:      	clr		Z
034FD:      	rets
            
            
            ; JL group
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            ; B - below (unsigned)
            ; L - less (signed)
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JB:
            sfx_CMP_AX_CX_JB:
034FE:      	DX=		0
034FF:      	BX=		0
            sfx_CMPLONG_JL:
03500:      	AR=		CX
03501:      	AX=		AX - AR
03502:      	AR=		BX
03503:      	AR=		DX - AR + C - 1
03504:      	if AN jmp	@sfx_cl_jl_chk
            
            @sfx_cl_jl_f:
03505:      	clr		Z		; false
03506:      	rets
            
            @sfx_cl_jl_chk:
03507:      	AR=		AR | AX		; exclude EQU condition
03508:      	if ZR jmp	@sfx_cl_jl_f
03509:      	set		Z
0350A:      	rets
            
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JB:
0350B:      	AR=		CX
0350C:      	AX=		AX - AR
0350D:      	AR=		BX
0350E:      	DX=		DX - AR + C - 1
0350F:      	AR=		0
03510:      	AR=		AR - 0 + C - 1
03511:      	if AN jmp	@sfx_cl_jb_chk
            
            @sfx_cl_jb_f:
03512:      	clr		Z		; false
03513:      	rets
            
            @sfx_cl_jb_chk:
03514:      	AR=		AR | DX
03515:      	AR=		AR | AX		; exclude EQU condition
03516:      	if ZR jmp	@sfx_cl_jb_f
03517:      	set		Z
03518:      	rets
            
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JB:
            sfx_CMP_CX_AX_JB:
03519:      	DX=		0
0351A:      	BX=		0
            sfx_CMPLONG_BCDA_JL:
0351B:      	AR=		AX
0351C:      	CX=		CX - AR
0351D:      	AR=		DX
0351E:      	AR=		BX - AR + C - 1
0351F:      	if AN jmp	@sfx_clbcda_jl_chk
            
            @sfx_clbcda_jl_f:
03520:      	clr		Z		; false
03521:      	rets
            
            @sfx_clbcda_jl_chk:
03522:      	AR=		AR | CX		; exclude EQU condition
03523:      	if ZR jmp	@sfx_clbcda_jl_f
03524:      	set		Z		; true
03525:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JB:
03526:      	AR=		AX
03527:      	CX=		CX - AR
03528:      	AR=		DX
03529:      	BX=		BX - AR + C - 1
0352A:      	AR=		0
0352B:      	AR=		AR - 0 + C - 1
0352C:      	if AN jmp	@sfx_clbcda_jb_chk
            
            @sfx_clbcda_jb_f:
0352D:      	clr		Z		; false
0352E:      	rets
            
            @sfx_clbcda_jb_chk:
0352F:      	AR=		AR | CX
03530:      	AR=		AR | BX
03531:      	if ZR jmp	@sfx_clbcda_jb_f
03532:      	set		Z		; true
03533:      	rets
            
            
            ; ---------
            
            sfx_CMP_AX_CX_JL:
03534:      	AR=		CX
03535:      	SF=		AX - AR
03536:      	if GE jmp	@sfx_cmp_ac_jl_f
03537:      	set		Z
03538:      	rets
            @sfx_cmp_ac_jl_f:
03539:      	clr		Z
0353A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JL:
0353B:      	AR=		AX
0353C:      	SF=		CX - AR
0353D:      	if GE jmp	@sfx_cmp_ca_jl_f
0353E:      	set		Z
0353F:      	rets
            @sfx_cmp_ca_jl_f:
03540:      	clr		Z
03541:      	rets
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_AX_CX_U_JBE:
            sfx_CMP_AX_CX_JBE:
03542:      	DX=		0
03543:      	BX=		0
            sfx_CMPLONG_JLE:
03544:      	AR=		CX
03545:      	AX=		AX - AR
03546:      	AR=		BX
03547:      	AR=		DX - AR + C - 1
03548:      	if AN jmp	@sfx_cl_jle_t
            
03549:      	AR=		AR | AX		; include EQU condition
0354A:      	if ZR jmp	@sfx_cl_jle_t
            
0354B:      	clr		Z		; false
0354C:      	rets
            @sfx_cl_jle_t:
0354D:      	set		Z		; true
0354E:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_JBE:
0354F:      	AR=		CX
03550:      	AX=		AX - AR
03551:      	AR=		BX
03552:      	DX=		DX - AR + C - 1
03553:      	AR=		0
03554:      	AR=		AR - 0 + C - 1
03555:      	if AN jmp	@sfx_cl_jle_t
            
03556:      	AR=		AR | DX
03557:      	AR=		AR | AX
03558:      	if ZR jmp	@sfx_cl_jle_t
            
03559:      	clr		Z		; false
0355A:      	rets
            
            ; ---------
            
            ; ~~ using 32-bit to correct flag
            
            sfx_CMP_CX_AX_U_JBE:
            sfx_CMP_CX_AX_JBE:
0355B:      	DX=		0
0355C:      	BX=		0
            sfx_CMPLONG_BCDA_JLE:
0355D:      	AR=		AX
0355E:      	CX=		CX - AR
0355F:      	AR=		DX
03560:      	AR=		BX - AR + C - 1
03561:      	if AN jmp	@sfx_clbcda_jle_t
            
03562:      	AR=		AR | CX		; include EQU condition
03563:      	if ZR jmp	@sfx_clbcda_jle_t
            
03564:      	clr		Z		; false
03565:      	rets
            @sfx_clbcda_jle_t:
03566:      	set		Z		; true
03567:      	rets
            
            ; ~~ using 48-bit to correct flag
            
            sfx_CMPLONG_BCDA_JBE:
03568:      	AR=		AX
03569:      	CX=		CX - AR
0356A:      	AR=		DX
0356B:      	BX=		BX - AR + C - 1
0356C:      	AR=		0
0356D:      	AR=		AR - 0 + C - 1
0356E:      	if AN jmp	@sfx_clbcda_jle_t
            
0356F:      	AR=		AR | BX
03570:      	AR=		AR | CX
03571:      	if ZR jmp	@sfx_clbcda_jle_t
            
03572:      	clr		Z		; false
03573:      	rets
            
            ; ---------
            
            sfx_CMP_AX_CX_JLE:
03574:      	AR=		CX
03575:      	SF=		AX - AR
03576:      	if LE jmp	@sfx_cmp_ac_jl_t
03577:      	clr		Z
03578:      	rets
            @sfx_cmp_ac_jl_t:
03579:      	set		Z
0357A:      	rets
            
            ; ---------
            
            sfx_CMP_CX_AX_JLE:
0357B:      	AR=		AX
0357C:      	SF=		CX - AR
0357D:      	if LE jmp	@sfx_cmp_ca_jl_t
0357E:      	clr		Z
0357F:      	rets
            @sfx_cmp_ca_jl_t:
03580:      	set		Z
03581:      	rets
            
            
            ; ~!~ bit-field support
            
            @sfx_ortable_0:
03582:      	DW 0xFFFE
            @sfx_ortable_1:
03583:      	DW 0xFFFC
            @sfx_ortable_2:
03584:      	DW 0xFFF8
            @sfx_ortable_3:
03585:      	DW 0xFFF0
            @sfx_ortable_4:
03586:      	DW 0xFFE0
            @sfx_ortable_5:
03587:      	DW 0xFFC0
            @sfx_ortable_6:
03588:      	DW 0xFF80
            @sfx_ortable_7:
03589:      	DW 0xFF00
            @sfx_ortable_8:
0358A:      	DW 0xFE00
            @sfx_ortable_9:
0358B:      	DW 0xFC00
            @sfx_ortable_10:
0358C:      	DW 0xF800
            @sfx_ortable_11:
0358D:      	DW 0xF000
            @sfx_ortable_12:
0358E:      	DW 0xE000
            @sfx_ortable_13:
0358F:      	DW 0xC000
            @sfx_ortable_14:
03590:      	DW 0x8000
            
            ; ~!~
            
            @sfx_orhigh:
03591:      	AR=		pm[P1]
03592:      	DX=		DX | AR
03593:      	rets
            
            @sfx_orhigh_dx:
03594:      	DX=		-1
            @sfx_orlow:
03595:      	AR=		pm[P1]
03596:      	AX=		AX | AR
            @sfx_sextw_rets:
03597:      	rets
            
            ; ~!~ signed short
            
            sfx_SignExtW0:
03598:      	P1=		#@sfx_ortable_0
0359B:      	test		AX.b0
0359C:      	if ZR jmp	@sfx_sextw_rets
0359D:      	jmp		@sfx_orlow
            
            sfx_SignExtW1:
0359E:      	P1=		#@sfx_ortable_1
035A1:      	test		AX.b1
035A2:      	if ZR jmp	@sfx_sextw_rets
035A3:      	jmp		@sfx_orlow
            
            sfx_SignExtW2:
035A4:      	P1=		#@sfx_ortable_2
035A7:      	test		AX.b2
035A8:      	if ZR jmp	@sfx_sextw_rets
035A9:      	jmp		@sfx_orlow
            
            sfx_SignExtW3:
035AA:      	P1=		#@sfx_ortable_3
035AD:      	test		AX.b3
035AE:      	if ZR jmp	@sfx_sextw_rets
035AF:      	jmp		@sfx_orlow
            
            sfx_SignExtW4:
035B0:      	P1=		#@sfx_ortable_4
035B3:      	test		AX.b4
035B4:      	if ZR jmp	@sfx_sextw_rets
035B5:      	jmp		@sfx_orlow
            
            sfx_SignExtW5:
035B6:      	P1=		#@sfx_ortable_5
035B9:      	test		AX.b5
035BA:      	if ZR jmp	@sfx_sextw_rets
035BB:      	jmp		@sfx_orlow
            
            sfx_SignExtW6:
035BC:      	P1=		#@sfx_ortable_6
035BF:      	test		AX.b6
035C0:      	if ZR jmp	@sfx_sextw_rets
035C1:      	jmp		@sfx_orlow
            
            sfx_SignExtW7:
035C2:      	P1=		#@sfx_ortable_7
035C5:      	test		AX.b7
035C6:      	if ZR jmp	@sfx_sextw_rets
035C7:      	jmp		@sfx_orlow
            
            sfx_SignExtW8:
035C8:      	P1=		#@sfx_ortable_8
035CB:      	test		AX.b8
035CC:      	if ZR jmp	@sfx_sextw_rets
035CD:      	jmp		@sfx_orlow
            
            sfx_SignExtW9:
035CE:      	P1=		#@sfx_ortable_9
035D1:      	test		AX.b9
035D2:      	if ZR jmp	@sfx_sextw_rets
035D3:      	jmp		@sfx_orlow
            
            sfx_SignExtW10:
035D4:      	P1=		#@sfx_ortable_10
035D7:      	test		AX.b10
035D8:      	if ZR jmp	@sfx_sextw_rets
035D9:      	jmp		@sfx_orlow
            
            sfx_SignExtW11:
035DA:      	P1=		#@sfx_ortable_11
035DD:      	test		AX.b11
035DE:      	if ZR jmp	@sfx_sextw_rets
035DF:      	jmp		@sfx_orlow
            
            sfx_SignExtW12:
035E0:      	P1=		#@sfx_ortable_12
035E3:      	test		AX.b12
035E4:      	if ZR jmp	@sfx_sextw_rets
035E5:      	jmp		@sfx_orlow
            
            sfx_SignExtW13:
035E6:      	P1=		#@sfx_ortable_13
035E9:      	test		AX.b13
035EA:      	if ZR jmp	@sfx_sextw_rets
035EB:      	jmp		@sfx_orlow
            
            sfx_SignExtW14:
035EC:      	P1=		#@sfx_ortable_14
035EF:      	test		AX.b14
035F0:      	if ZR jmp	@sfx_sextw_rets
035F1:      	jmp		@sfx_orlow
            
            ; ~!~ signed long
            
            sfx_SignExtL0:
035F2:      	P1=		#@sfx_ortable_0
035F5:      	test		AX.b0
035F6:      	if ZR jmp	@sfx_sextw_rets
035F7:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL1:
035F8:      	P1=		#@sfx_ortable_1
035FB:      	test		AX.b1
035FC:      	if ZR jmp	@sfx_sextw_rets
035FD:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL2:
035FE:      	P1=		#@sfx_ortable_2
03601:      	test		AX.b2
03602:      	if ZR jmp	@sfx_sextw_rets
03603:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL3:
03604:      	P1=		#@sfx_ortable_3
03607:      	test		AX.b3
03608:      	if ZR jmp	@sfx_sextw_rets
03609:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL4:
0360A:      	P1=		#@sfx_ortable_4
0360D:      	test		AX.b4
0360E:      	if ZR jmp	@sfx_sextw_rets
0360F:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL5:
03610:      	P1=		#@sfx_ortable_5
03613:      	test		AX.b5
03614:      	if ZR jmp	@sfx_sextw_rets
03615:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL6:
03616:      	P1=		#@sfx_ortable_6
03619:      	test		AX.b6
0361A:      	if ZR jmp	@sfx_sextw_rets
0361B:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL7:
0361C:      	P1=		#@sfx_ortable_7
0361F:      	test		AX.b7
03620:      	if ZR jmp	@sfx_sextw_rets
03621:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL8:
03622:      	P1=		#@sfx_ortable_8
03625:      	test		AX.b8
03626:      	if ZR jmp	@sfx_sextw_rets
03627:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL9:
03628:      	P1=		#@sfx_ortable_9
0362B:      	test		AX.b9
0362C:      	if ZR jmp	@sfx_sextw_rets
0362D:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL10:
0362E:      	P1=		#@sfx_ortable_10
03631:      	test		AX.b10
03632:      	if ZR jmp	@sfx_sextw_rets
03633:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL11:
03634:      	P1=		#@sfx_ortable_11
03637:      	test		AX.b11
03638:      	if ZR jmp	@sfx_sextw_rets
03639:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL12:
0363A:      	P1=		#@sfx_ortable_12
0363D:      	test		AX.b12
0363E:      	if ZR jmp	@sfx_sextw_rets
0363F:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL13:
03640:      	P1=		#@sfx_ortable_13
03643:      	test		AX.b13
03644:      	if ZR jmp	@sfx_sextw_rets
03645:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL14:
03646:      	P1=		#@sfx_ortable_14
03649:      	test		AX.b14
0364A:      	if ZR jmp	@sfx_sextw_rets
0364B:      	jmp		@sfx_orhigh_dx
            
            sfx_SignExtL15:
0364C:      	test		AX.b15
0364D:      	if ZR jmp	@sfx_sextw_rets
0364E:      	DX=		-1
0364F:      	rets
            
            sfx_SignExtL16:
03650:      	P1=		#@sfx_ortable_0
03653:      	test		DX.b0
03654:      	if ZR jmp	@sfx_sextw_rets
03655:      	jmp		@sfx_orhigh
            
            sfx_SignExtL17:
03656:      	P1=		#@sfx_ortable_1
03659:      	test		DX.b1
0365A:      	if ZR jmp	@sfx_sextw_rets
0365B:      	jmp		@sfx_orhigh
            
            sfx_SignExtL18:
0365C:      	P1=		#@sfx_ortable_2
0365F:      	test		DX.b2
03660:      	if ZR jmp	@sfx_sextw_rets
03661:      	jmp		@sfx_orhigh
            
            sfx_SignExtL19:
03662:      	P1=		#@sfx_ortable_3
03665:      	test		DX.b3
03666:      	if ZR jmp	@sfx_sextw_rets
03667:      	jmp		@sfx_orhigh
            
            sfx_SignExtL20:
03668:      	P1=		#@sfx_ortable_4
0366B:      	test		DX.b4
0366C:      	if ZR jmp	@sfx_sextw_rets
0366D:      	jmp		@sfx_orhigh
            
            sfx_SignExtL21:
0366E:      	P1=		#@sfx_ortable_5
03671:      	test		DX.b5
03672:      	if ZR jmp	@sfx_sextw_rets
03673:      	jmp		@sfx_orhigh
            
            sfx_SignExtL22:
03674:      	P1=		#@sfx_ortable_6
03677:      	test		DX.b6
03678:      	if ZR jmp	@sfx_sextw_rets
03679:      	jmp		@sfx_orhigh
            
            sfx_SignExtL23:
0367A:      	P1=		#@sfx_ortable_7
0367D:      	test		DX.b7
0367E:      	if ZR jmp	@sfx_sextw_rets
0367F:      	jmp		@sfx_orhigh
            
            sfx_SignExtL24:
03680:      	P1=		#@sfx_ortable_8
03683:      	test		DX.b8
03684:      	if ZR jmp	@sfx_sextw_rets
03685:      	jmp		@sfx_orhigh
            
            sfx_SignExtL25:
03686:      	P1=		#@sfx_ortable_9
03689:      	test		DX.b9
0368A:      	if ZR jmp	@sfx_sextw_rets
0368B:      	jmp		@sfx_orhigh
            
            sfx_SignExtL26:
0368C:      	P1=		#@sfx_ortable_10
0368F:      	test		DX.b10
03690:      	if ZR jmp	@sfx_sextw_rets
03691:      	jmp		@sfx_orhigh
            
            sfx_SignExtL27:
03692:      	P1=		#@sfx_ortable_11
03695:      	test		DX.b11
03696:      	if ZR jmp	@sfx_sextw_rets
03697:      	jmp		@sfx_orhigh
            
            sfx_SignExtL28:
03698:      	P1=		#@sfx_ortable_12
0369B:      	test		DX.b12
0369C:      	if ZR jmp	@sfx_sextw_rets
0369D:      	jmp		@sfx_orhigh
            
            sfx_SignExtL29:
0369E:      	P1=		#@sfx_ortable_13
036A1:      	test		DX.b13
036A2:      	if ZR jmp	@sfx_sextw_rets
036A3:      	jmp		@sfx_orhigh
            
            sfx_SignExtL30:
036A4:      	P1=		#@sfx_ortable_14
036A7:      	test		DX.b14
036A8:      	if ZR jmp	@sfx_sextw_rets
036A9:      	jmp		@sfx_orhigh
            
            
            ; ~.~--------------------
            ; I1, AX
            
            sfx_REPMOV_SS:
            @sfx_repmov_ss_loop_1804:
036AA:      	push		I1
036AB:      	AR=		AX
036AC:      	I1=		AR
036AD:      	AR=		rm[I1]
036AE:      	pop		I1
036AF:      	rm[I1++]=	AR
036B0:      	AX++
036B1:      	loop		@sfx_repmov_ss_loop_1804
036B2:      	rets
            
            ; ~~
            
            sfx_REPMOV_SR:
036B3:      	AR=		AX
036B4:      	P1=		AR
            @sfx_repmov_sr_loop_1804:
036B5:      	rm[I1++]=	pm[P1++]
036B6:      	loop		@sfx_repmov_sr_loop_1804
036B7:      	rets
            
            
            ; ~~
            
            sfx_REPMOV_RS:
036B8:      	AR=		AX
036B9:      	I1=		AR
            @sfx_repmov_rs_loop_1804:
036BA:      	AR=		rm[I1++]
036BB:      	pm[P1++]=	AR
036BC:      	loop		@sfx_repmov_rs_loop_1804
036BD:      	rets
            
            ; ~~
            
            sfx_REPMOV_RR:
            @sfx_repmov_rr_loop_1804:
036BE:      	push		P1
036BF:      	AR=		AX
036C0:      	P1=		AR
036C1:      	AR=		pm[P1]
036C2:      	pop		P1
036C3:      	pm[P1++]=	AR
036C4:      	AX++
036C5:      	loop		@sfx_repmov_rr_loop_1804
036C6:      	rets
            
            ; ~~
            
            ; sfx_CHECKZERO:
            	; AR=		AX
            	; rets
            
            ; ~~
            
            ; sfx_CHECKZEROLONG:
            	; AR=		AX
            	; AR=		AR | DX
            	; rets
            
            ; ~~
            
            
            #ifdef PRAM_BANK
            
            ;  ~~ simple link list for PRAM allocate
            
            ;  +---------+---------+
            ;  | field 0 | field 1 |
            ;  +---------+---------+
            ;  |   PROM  |  next   |
            ;  +---------+---------+
            
            sfx_DynFastCallInit:
            ; {
            	P1.hh=		PRAM_BANK
            	P1=		PRAM_OFFSET
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	rets
            ; }
            
            
            ; ~~ for C / ASM progam compatible used
            
            ; -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            ; bool sfx_DynFindPrg(PRGADR)
            ;
            ; in:
            ;    P1		- function start address
            ;
            ; out:
            ;     Z		- found, P0 = program entry address at PRAM
            ;     NZ	- not found, P0 = free space (list) start at PRAM
            ; ----------------------------------------------------------------
            
            sfx_DynFindPrg:
            ; {
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfp_loop_1320:
            	AR=		pm[P0++]	; program address
            	if ZR jmp	@sfxdfp_label_1321
            	SF=		AR - P1
            	if NE jmp	@sfxdfp_label_1323
            	
            	P0++
            	set		Z
            	rets
            
            @sfxdfp_label_1323:
            	AR=		pm[P0]		; next
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfp_label_1655
            	P0=		AR
            	jmp		@sfxdfp_loop_1320
            
            @sfxdfp_label_1321:
            	P0--				; list
            	clr		Z
            	rets
            	
            @sfxdfp_label_1655:
            ; ~~ list broken...
            	P0=		PRAM_OFFSET
            	clr		Z
            	rets
            ; }
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free link start
            ; AX = function end address
            
            
            sfx_DynBooking:
            ; {
            	; check if PRG to big to fit in PRAM
            
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	; ~~ can not cache PRG (total PRAM_SIZE) ??
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdb_label_1345
            
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdb_label_1349
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdb_label_1349:
            	; create link list
            
            	AR=		P1
            	pm[P0++]=	AR		; PRG
            	AR=		P0
            	AR=		AR - 3		; remove 1 list and 1 next
            	CX=		CX + AR
            	pm[P0++]=	CX		; next
            
            	push		P1
            	P1=		#@sfxdfc_label_1840
            	AR=		pm[P1]		; inst -> P1.hh = 0
            	pm[P0++]=	AR
            	AR=		CX
            	P1=		AR
            	P1.hh=		PRAM_BANK
            	AR=		0
            	pm[P1++]=	AR
            	pm[P1]=		AR
            	P1.hh=		0
            	pop		P1
            	
            	set		Z
            	rets
            
            @sfxdb_label_1345:
            	P0.hh=		0
            	clr		Z
            	rets
            ; }
            
            
            ; --------------------------------------------------------
            
            ; P1 = function start address
            ; P0 = free PRG entry
            ; AX = function end address
            
            sfx_DynCache:
            	push		P0
            	AR=		AX
            	AR=		AR - P1
            	CX=		AR
            	jmp		@sfxdynch_label_1650
            @sfxdynch_loop_1650:
            	AR=		pm[P1++]
            	pm[P0++]=	AR
            @sfxdynch_label_1650:
            	loop		@sfxdynch_loop_1650
            	pop		P0
            	P0--
            	rets
            
            ; --------------------------------------------------------
            
            
            ; ~~ for C
            
            ; P1 = function start address
            ; AX = function end address
            
            sfx_DynFastCall:
            ; {
            	; look up function entry by prom address (P1)
            
            	P0.hh=		PRAM_BANK
            	P0=		PRAM_OFFSET
            @sfxdfc_label_1759:
            	AR=		pm[P0++]		; next
            	if ZR jmp	@sfxdfc_label_1758
            	SF=		AR - P1
            	if EQ jmp	@sfxdfc_label_1722
            	AR=		pm[P0]
            	P0=		0xFC00
            	P0=		P0 & AR
            	if NZ jmp	@sfxdfc_label_2035
            	P0=		AR
            	jmp		@sfxdfc_label_1759
            
            @sfxdfc_label_2035:
            	P0=		PRAM_OFFSET + 1
            
            ; -----
            
            @sfxdfc_label_1758:
            
            	; look for remain free space
            	AR=		AX
            	AR=		AR - P1		; PRG length
            	AR=		AR + 5		; 2 list space + 1 inst (P0.hh = 0)
            	CX=		AR
            
            	P0--
            
            	AR=		PRAM_SIZE
            	SF=		AR - CX
            	if AN jmp	@sfxdfc_label_1840
            	
            	; ~~ look up remain free space
            
            	AR=		PRAM_OFFSET
            	AR=		P0 - AR
            	DX=		PRAM_SIZE
            	AR=		DX - AR
            
            	SF=		AR - CX
            	if GE jmp	@sfxdfc_label_1817
            
            	; ~~ reset link list
            
            	P0=		PRAM_OFFSET
            
            @sfxdfc_label_1817:
            
            	; copy program to pram
            
            	; ~~ PROM field
            		AR=		P1
            		pm[P0++]=	AR
            	; ~~ next field
            		AR=		P0
            		AR=		AR - 3		; remove 1 list and 1 next
            		CX=		CX + AR
            		pm[P0++]=	CX		; next
            
            	; ~~ booking
            		push		P1
            		P1=		#@sfxdfc_label_1840
            		AR=		pm[P1]		; inst -> P1.hh = 0
            		pm[P0++]=	AR
            		AR=		CX
            		P1=		AR
            		P1.hh=		PRAM_BANK
            		AR=		0
            		pm[P1++]=	AR
            		pm[P1]=		AR
            		P1.hh=		0
            		pop		P1
            
            	; copy instruction  "P0.hh = 0"
            		push		P0		; save exec address
            	@sfxdfc_loop_1829:
            		AR=		pm[P1++]
            		pm[P0++]=	AR
            		AR=		P0
            		SF=		AR - CX
            		if AN jmp	@sfxdfc_loop_1829
            		pop		P0
            		P0--
            		fjmp		pm[P0]
            
            @sfxdfc_label_1722:
            	P0++			; program entry
            	fjmp		pm[P0]
            
            @sfxdfc_label_1840:
            	P0.hh=		0
            
            @sfxdfc_label_1733:
            	; free space too small, direct run
            	fjmp		pm[P1]
            ; }
            
            
            
            
            #endif
            
            
            
            
            
            
            
            
            
            
            
            ;=========================Include <C:\TRITAN\FDSP-IDE\TOOLS\CC\CRT0\RUNTIME.ASM> End=========================
            
            
            
            // .code segment
            
            WAKEUP_PROC:
036C7:      	PCH=	SYS_PROG_ENTRY
036C8:      	ljmp	SYS_PROG_ENTRY
            
            IntVectTable:
036C9:      	DW #EMPTY_INTENTRY
036CA:      	DW #EMPTY_INTENTRY
036CB:      	DW #EMPTY_INTENTRY
036CC:      	DW #EMPTY_INTENTRY
036CD:      	DW #EMPTY_INTENTRY
036CE:      	DW #EMPTY_INTENTRY
            
            // .code ends
            ;;FDSP-IDE V2.53
            _SYSTEM_MAIN_PROGRAM_END_ADDRESS: 
